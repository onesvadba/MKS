
cvic12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019edc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e0fc  0801a08c  0801a08c  0002a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028188  08028188  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08028188  08028188  00038188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028190  08028190  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028190  08028190  00038190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028194  08028194  00038194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08028198  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          00011400  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011490  20011490  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034b8d  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000085da  00000000  00000000  00074c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025b8  00000000  00000000  0007d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001dd2  00000000  00000000  0007f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000378d2  00000000  00000000  000815fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003dade  00000000  00000000  000b8ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001027fe  00000000  00000000  000f69aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a64c  00000000  00000000  001f91a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  002037f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a074 	.word	0x0801a074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801a074 	.word	0x0801a074

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ffd5 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8c5 	bl	800078c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f899 	bl	8000738 <MX_USART3_UART_Init>
  MX_RNG_Init();
 8000606:	f000 f883 	bl	8000710 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x44>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fd3b 	bl	800509c <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 fd1f 	bl	800506e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x40>
 8000632:	bf00      	nop
 8000634:	0801a098 	.word	0x0801a098
 8000638:	200003a0 	.word	0x200003a0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f018 fc84 	bl	8018f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fccd 	bl	8003060 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f95a 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 ff2e 	bl	8003550 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f943 	bl	8000984 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_RNG_Init+0x20>)
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <MX_RNG_Init+0x24>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_RNG_Init+0x20>)
 800071c:	f003 f96a 	bl	80039f4 <HAL_RNG_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000726:	f000 f92d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000034c 	.word	0x2000034c
 8000734:	50060800 	.word	0x50060800

08000738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART3_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART3_UART_Init+0x4c>)
 8000770:	f003 fc6e 	bl	8004050 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f903 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000035c 	.word	0x2000035c
 8000788:	40004800 	.word	0x40004800

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b54      	ldr	r3, [pc, #336]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a53      	ldr	r2, [pc, #332]	; (8000914 <MX_GPIO_Init+0x188>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <MX_GPIO_Init+0x188>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a45      	ldr	r2, [pc, #276]	; (8000914 <MX_GPIO_Init+0x188>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <MX_GPIO_Init+0x188>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x188>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a37      	ldr	r2, [pc, #220]	; (8000914 <MX_GPIO_Init+0x188>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_GPIO_Init+0x188>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000850:	4831      	ldr	r0, [pc, #196]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000852:	f002 fbeb 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4830      	ldr	r0, [pc, #192]	; (800091c <MX_GPIO_Init+0x190>)
 800085c:	f002 fbe6 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_GPIO_Init+0x194>)
 8000878:	f002 fa2c 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800087c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000896:	f002 fa1d 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <MX_GPIO_Init+0x190>)
 80008b2:	f002 fa0f 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <MX_GPIO_Init+0x190>)
 80008ca:	f002 fa03 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e0:	230a      	movs	r3, #10
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_GPIO_Init+0x198>)
 80008ec:	f002 f9f2 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_GPIO_Init+0x198>)
 8000906:	f002 f9e5 	bl	8002cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000

08000928 <StartDefaultTask>:
  */


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <StartDefaultTask+0x34>)
 8000938:	f003 f886 	bl	8003a48 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4618      	mov	r0, r3
 8000940:	f018 f85e 	bl	8018a00 <srand>

	MX_LWIP_Init();
 8000944:	f003 fe46 	bl	80045d4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Initialize tcp echo server */
  tcpecho_init();
 8000948:	f000 fa9a 	bl	8000e80 <tcpecho_init>

  /* Initialize telnet server */
  telnet_init();
 800094c:	f000 fc8c 	bl	8001268 <telnet_init>

  /* Initialize HTTP server */
  httpd_init();
 8000950:	f00a fdec 	bl	800b52c <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f004 fbed 	bl	8005134 <osDelay>
 800095a:	e7fb      	b.n	8000954 <StartDefaultTask+0x2c>
 800095c:	2000034c 	.word	0x2000034c

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 fe39 	bl	80015e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40002000 	.word	0x40002000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_MspInit+0x54>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_MspInit+0x54>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	210f      	movs	r1, #15
 80009d2:	f06f 0001 	mvn.w	r0, #1
 80009d6:	f000 ff03 	bl	80017e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_RNG_MspInit+0x3c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10d      	bne.n	8000a16 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6353      	str	r3, [r2, #52]	; 0x34
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_RNG_MspInit+0x40>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	50060800 	.word	0x50060800
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0x8c>)
 8000aa4:	f002 f916 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 ff4c 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b02:	f002 ff1d 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8000b06:	6378      	str	r0, [r7, #52]	; 0x34
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b0a:	f002 ff19 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	0c9b      	lsrs	r3, r3, #18
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <HAL_InitTick+0xf0>)
 8000b26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b4a:	f002 ffd3 	bl	8003af4 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11b      	bne.n	8000b94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b5e:	f003 f823 	bl	8003ba8 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d111      	bne.n	8000b94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b70:	202d      	movs	r0, #45	; 0x2d
 8000b72:	f000 fe51 	bl	8001818 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d808      	bhi.n	8000b8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	202d      	movs	r0, #45	; 0x2d
 8000b82:	f000 fe2d 	bl	80017e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_InitTick+0xf4>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e002      	b.n	8000b94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	200003a4 	.word	0x200003a4
 8000bac:	40002000 	.word	0x40002000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000be6:	f003 f84f 	bl	8003c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003a4 	.word	0x200003a4

08000bf4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <ETH_IRQHandler+0x10>)
 8000bfa:	f001 f995 	bl	8001f28 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005350 	.word	0x20005350

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20011480 	.word	0x20011480

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	e7fe      	b.n	8000c4e <_exit+0x12>

08000c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200003ec 	.word	0x200003ec
 8000d94:	20011490 	.word	0x20011490
 8000d98:	20011480 	.word	0x20011480

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f007 f93b 	bl	8008048 <netconn_new_with_proto_and_callback>
 8000dd2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04e      	beq.n	8000e78 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000dda:	2207      	movs	r2, #7
 8000ddc:	2100      	movs	r1, #0
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f007 f9ec 	bl	80081bc <netconn_bind>
 8000de4:	4603      	mov	r3, r0
 8000de6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000de8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13f      	bne.n	8000e70 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df0:	21ff      	movs	r1, #255	; 0xff
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f007 fa52 	bl	800829c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f007 fa78 	bl	80082f4 <netconn_accept>
 8000e04:	4603      	mov	r3, r0
 8000e06:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e10:	e01b      	b.n	8000e4a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f107 020a 	add.w	r2, r7, #10
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fb59 	bl	800a4d4 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f007 fce2 	bl	80087f8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fb96 	bl	800a568 <netbuf_next>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae7      	bge.n	8000e12 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fb25 	bl	800a494 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fc56 	bl	8008704 <netconn_recv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d9      	beq.n	8000e12 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fdcb 	bl	80089fc <netconn_close>
          netconn_delete(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 f98b 	bl	8008184 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e6e:	e7c3      	b.n	8000df8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 f986 	bl	8008184 <netconn_delete>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e86:	2304      	movs	r3, #4
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <tcpecho_init+0x20>)
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <tcpecho_init+0x24>)
 8000e94:	f017 fd70 	bl	8018978 <sys_thread_new>
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08000dc1 	.word	0x08000dc1
 8000ea4:	0801a0b4 	.word	0x0801a0b4

08000ea8 <http_client>:

#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 64

static void http_client(char *s, uint16_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147,229,144,124);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <http_client+0xbc>)
 8000eba:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <http_client+0xc0>)
 8000ebe:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 f8bf 	bl	8008048 <netconn_new_with_proto_and_callback>
 8000eca:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	; 0x50
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f007 f9a9 	bl	800822c <netconn_connect>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d136      	bne.n	8000f4e <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee0:	69b8      	ldr	r0, [r7, #24]
 8000ee2:	f7ff f98f 	bl	8000204 <strlen>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f007 fc81 	bl	80087f8 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000efc:	e019      	b.n	8000f32 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size-len);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f00c f965 	bl	800d1e0 <pbuf_copy_partial>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fab1 	bl	800a494 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20d      	bcs.n	8000f56 <http_client+0xae>
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f007 fbdf 	bl	8008704 <netconn_recv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d8      	beq.n	8000efe <http_client+0x56>
 8000f4c:	e003      	b.n	8000f56 <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f4e:	4907      	ldr	r1, [pc, #28]	; (8000f6c <http_client+0xc4>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f017 fedf 	bl	8018d14 <siprintf>
	}
	netconn_delete(client);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 f914 	bl	8008184 <netconn_delete>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	7c90e593 	.word	0x7c90e593
 8000f68:	0801a0c4 	.word	0x0801a0c4
 8000f6c:	0801a110 	.word	0x0801a110

08000f70 <telnet_process_command>:

static char s[1024];
static void telnet_process_command(char *cmd, struct netconn *conn){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]

		char *token;
		token = strtok(cmd, " ");
 8000f7a:	495f      	ldr	r1, [pc, #380]	; (80010f8 <telnet_process_command+0x188>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f018 f82d 	bl	8018fdc <strtok>
 8000f82:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "HELLO") == 0) {
 8000f84:	495d      	ldr	r1, [pc, #372]	; (80010fc <telnet_process_command+0x18c>)
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f017 ffee 	bl	8018f68 <strcasecmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10f      	bne.n	8000fb2 <telnet_process_command+0x42>
			sprintf(s, "OK\n");
 8000f92:	495b      	ldr	r1, [pc, #364]	; (8001100 <telnet_process_command+0x190>)
 8000f94:	485b      	ldr	r0, [pc, #364]	; (8001104 <telnet_process_command+0x194>)
 8000f96:	f017 febd 	bl	8018d14 <siprintf>
			netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f9a:	485a      	ldr	r0, [pc, #360]	; (8001104 <telnet_process_command+0x194>)
 8000f9c:	f7ff f932 	bl	8000204 <strlen>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4956      	ldr	r1, [pc, #344]	; (8001104 <telnet_process_command+0x194>)
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f007 fc24 	bl	80087f8 <netconn_write_partly>
		}

		else if (strcasecmp(token, "CLIENT") == 0){
					http_client(s, 1024);
				}
}
 8000fb0:	e09d      	b.n	80010ee <telnet_process_command+0x17e>
		else if (strcasecmp(token, "LED1") == 0) {
 8000fb2:	4955      	ldr	r1, [pc, #340]	; (8001108 <telnet_process_command+0x198>)
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f017 ffd7 	bl	8018f68 <strcasecmp>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11e      	bne.n	8000ffe <telnet_process_command+0x8e>
			token = strtok(NULL, " ");
 8000fc0:	494d      	ldr	r1, [pc, #308]	; (80010f8 <telnet_process_command+0x188>)
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f018 f80a 	bl	8018fdc <strtok>
 8000fc8:	60f8      	str	r0, [r7, #12]
			if (strcasecmp(token, "ON") == 0) {
 8000fca:	4950      	ldr	r1, [pc, #320]	; (800110c <telnet_process_command+0x19c>)
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f017 ffcb 	bl	8018f68 <strcasecmp>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <telnet_process_command+0x74>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	484c      	ldr	r0, [pc, #304]	; (8001110 <telnet_process_command+0x1a0>)
 8000fde:	f002 f825 	bl	800302c <HAL_GPIO_WritePin>
}
 8000fe2:	e084      	b.n	80010ee <telnet_process_command+0x17e>
			else if ((strcasecmp(token, "OFF")) == 0) {
 8000fe4:	494b      	ldr	r1, [pc, #300]	; (8001114 <telnet_process_command+0x1a4>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f017 ffbe 	bl	8018f68 <strcasecmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d17d      	bne.n	80010ee <telnet_process_command+0x17e>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4846      	ldr	r0, [pc, #280]	; (8001110 <telnet_process_command+0x1a0>)
 8000ff8:	f002 f818 	bl	800302c <HAL_GPIO_WritePin>
}
 8000ffc:	e077      	b.n	80010ee <telnet_process_command+0x17e>
		else if (strcasecmp(token, "LED2") == 0) {
 8000ffe:	4946      	ldr	r1, [pc, #280]	; (8001118 <telnet_process_command+0x1a8>)
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f017 ffb1 	bl	8018f68 <strcasecmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11e      	bne.n	800104a <telnet_process_command+0xda>
			token = strtok(NULL, " ");
 800100c:	493a      	ldr	r1, [pc, #232]	; (80010f8 <telnet_process_command+0x188>)
 800100e:	2000      	movs	r0, #0
 8001010:	f017 ffe4 	bl	8018fdc <strtok>
 8001014:	60f8      	str	r0, [r7, #12]
			if (strcasecmp(token, "ON") == 0) {
 8001016:	493d      	ldr	r1, [pc, #244]	; (800110c <telnet_process_command+0x19c>)
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f017 ffa5 	bl	8018f68 <strcasecmp>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <telnet_process_command+0xc0>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4839      	ldr	r0, [pc, #228]	; (8001110 <telnet_process_command+0x1a0>)
 800102a:	f001 ffff 	bl	800302c <HAL_GPIO_WritePin>
}
 800102e:	e05e      	b.n	80010ee <telnet_process_command+0x17e>
			else if ((strcasecmp(token, "OFF")) == 0) {
 8001030:	4938      	ldr	r1, [pc, #224]	; (8001114 <telnet_process_command+0x1a4>)
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f017 ff98 	bl	8018f68 <strcasecmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d157      	bne.n	80010ee <telnet_process_command+0x17e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4833      	ldr	r0, [pc, #204]	; (8001110 <telnet_process_command+0x1a0>)
 8001044:	f001 fff2 	bl	800302c <HAL_GPIO_WritePin>
}
 8001048:	e051      	b.n	80010ee <telnet_process_command+0x17e>
		else if (strcasecmp(token, "LED3") == 0) {
 800104a:	4934      	ldr	r1, [pc, #208]	; (800111c <telnet_process_command+0x1ac>)
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f017 ff8b 	bl	8018f68 <strcasecmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d123      	bne.n	80010a0 <telnet_process_command+0x130>
					token = strtok(NULL, " ");
 8001058:	4927      	ldr	r1, [pc, #156]	; (80010f8 <telnet_process_command+0x188>)
 800105a:	2000      	movs	r0, #0
 800105c:	f017 ffbe 	bl	8018fdc <strtok>
 8001060:	60f8      	str	r0, [r7, #12]
					if (strcasecmp(token, "ON") == 0) {
 8001062:	492a      	ldr	r1, [pc, #168]	; (800110c <telnet_process_command+0x19c>)
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f017 ff7f 	bl	8018f68 <strcasecmp>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <telnet_process_command+0x10e>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4826      	ldr	r0, [pc, #152]	; (8001110 <telnet_process_command+0x1a0>)
 8001078:	f001 ffd8 	bl	800302c <HAL_GPIO_WritePin>
}
 800107c:	e037      	b.n	80010ee <telnet_process_command+0x17e>
					else if ((strcasecmp(token, "OFF")) == 0) {
 800107e:	4925      	ldr	r1, [pc, #148]	; (8001114 <telnet_process_command+0x1a4>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f017 ff71 	bl	8018f68 <strcasecmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d130      	bne.n	80010ee <telnet_process_command+0x17e>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001092:	481f      	ldr	r0, [pc, #124]	; (8001110 <telnet_process_command+0x1a0>)
 8001094:	f001 ffca 	bl	800302c <HAL_GPIO_WritePin>
						printf("OK\n");
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <telnet_process_command+0x1b0>)
 800109a:	f017 fe33 	bl	8018d04 <puts>
}
 800109e:	e026      	b.n	80010ee <telnet_process_command+0x17e>
		else if (strcasecmp(token, "STATUS") == 0){
 80010a0:	4920      	ldr	r1, [pc, #128]	; (8001124 <telnet_process_command+0x1b4>)
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f017 ff60 	bl	8018f68 <strcasecmp>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d113      	bne.n	80010d6 <telnet_process_command+0x166>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2101      	movs	r1, #1
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <telnet_process_command+0x1a0>)
 80010b4:	f001 ffba 	bl	800302c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	4814      	ldr	r0, [pc, #80]	; (8001110 <telnet_process_command+0x1a0>)
 80010be:	f001 ffb5 	bl	800302c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c8:	4811      	ldr	r0, [pc, #68]	; (8001110 <telnet_process_command+0x1a0>)
 80010ca:	f001 ffaf 	bl	800302c <HAL_GPIO_WritePin>
			printf("OK\n");
 80010ce:	4814      	ldr	r0, [pc, #80]	; (8001120 <telnet_process_command+0x1b0>)
 80010d0:	f017 fe18 	bl	8018d04 <puts>
}
 80010d4:	e00b      	b.n	80010ee <telnet_process_command+0x17e>
		else if (strcasecmp(token, "CLIENT") == 0){
 80010d6:	4914      	ldr	r1, [pc, #80]	; (8001128 <telnet_process_command+0x1b8>)
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f017 ff45 	bl	8018f68 <strcasecmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <telnet_process_command+0x17e>
					http_client(s, 1024);
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <telnet_process_command+0x194>)
 80010ea:	f7ff fedd 	bl	8000ea8 <http_client>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0801a124 	.word	0x0801a124
 80010fc:	0801a128 	.word	0x0801a128
 8001100:	0801a130 	.word	0x0801a130
 8001104:	200003f0 	.word	0x200003f0
 8001108:	0801a134 	.word	0x0801a134
 800110c:	0801a13c 	.word	0x0801a13c
 8001110:	40020400 	.word	0x40020400
 8001114:	0801a140 	.word	0x0801a140
 8001118:	0801a144 	.word	0x0801a144
 800111c:	0801a14c 	.word	0x0801a14c
 8001120:	0801a154 	.word	0x0801a154
 8001124:	0801a158 	.word	0x0801a158
 8001128:	0801a160 	.word	0x0801a160

0800112c <telnet_byte_available>:


static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <telnet_byte_available+0x64>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b3f      	cmp	r3, #63	; 0x3f
 800113e:	d810      	bhi.n	8001162 <telnet_byte_available+0x36>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b1f      	cmp	r3, #31
 8001144:	d90d      	bls.n	8001162 <telnet_byte_available+0x36>
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db09      	blt.n	8001162 <telnet_byte_available+0x36>
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <telnet_byte_available+0x64>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	b291      	uxth	r1, r2
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <telnet_byte_available+0x64>)
 8001158:	8011      	strh	r1, [r2, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <telnet_byte_available+0x68>)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b0a      	cmp	r3, #10
 8001166:	d002      	beq.n	800116e <telnet_byte_available+0x42>
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b0d      	cmp	r3, #13
 800116c:	d10c      	bne.n	8001188 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <telnet_byte_available+0x64>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <telnet_byte_available+0x68>)
 8001176:	2100      	movs	r1, #0
 8001178:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <telnet_byte_available+0x68>)
 800117e:	f7ff fef7 	bl	8000f70 <telnet_process_command>
		cnt = 0;
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <telnet_byte_available+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200007f0 	.word	0x200007f0
 8001194:	200007f4 	.word	0x200007f4

08001198 <telnet_thread>:


/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2010      	movs	r0, #16
 80011a6:	f006 ff4f 	bl	8008048 <netconn_new_with_proto_and_callback>
 80011aa:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d055      	beq.n	800125e <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 23);
 80011b2:	2217      	movs	r2, #23
 80011b4:	2100      	movs	r1, #0
 80011b6:	69f8      	ldr	r0, [r7, #28]
 80011b8:	f007 f800 	bl	80081bc <netconn_bind>
 80011bc:	4603      	mov	r3, r0
 80011be:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 80011c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d146      	bne.n	8001256 <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80011c8:	21ff      	movs	r1, #255	; 0xff
 80011ca:	69f8      	ldr	r0, [r7, #28]
 80011cc:	f007 f866 	bl	800829c <netconn_listen_with_backlog>
    
      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	69f8      	ldr	r0, [r7, #28]
 80011d8:	f007 f88c 	bl	80082f4 <netconn_accept>
 80011dc:	4603      	mov	r3, r0
 80011de:	76bb      	strb	r3, [r7, #26]

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 80011e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK)
 80011e8:	e022      	b.n	8001230 <telnet_thread+0x98>
          {
            do
            {
            	netbuf_data(buf, (void**)&data, &len);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	f107 020a 	add.w	r2, r7, #10
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 f96d 	bl	800a4d4 <netbuf_data>
            	while (len--) telnet_byte_available(*data++, newconn);
 80011fa:	e008      	b.n	800120e <telnet_thread+0x76>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60fa      	str	r2, [r7, #12]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff8f 	bl	800112c <telnet_byte_available>
 800120e:	897b      	ldrh	r3, [r7, #10]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	b292      	uxth	r2, r2
 8001214:	817a      	strh	r2, [r7, #10]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <telnet_thread+0x64>

            }
            while (netbuf_next(buf) >= 0);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4618      	mov	r0, r3
 800121e:	f009 f9a3 	bl	800a568 <netbuf_next>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	dae0      	bge.n	80011ea <telnet_thread+0x52>

            netbuf_delete(buf);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4618      	mov	r0, r3
 800122c:	f009 f932 	bl	800a494 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f107 0210 	add.w	r2, r7, #16
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fa63 	bl	8008704 <netconn_recv>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0d2      	beq.n	80011ea <telnet_thread+0x52>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fbd8 	bl	80089fc <netconn_close>
          netconn_delete(newconn);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4618      	mov	r0, r3
 8001250:	f006 ff98 	bl	8008184 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001254:	e7bc      	b.n	80011d0 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4618      	mov	r0, r3
 800125a:	f006 ff93 	bl	8008184 <netconn_delete>
    }
  }
}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 800126e:	2304      	movs	r3, #4
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	2200      	movs	r2, #0
 8001278:	4903      	ldr	r1, [pc, #12]	; (8001288 <telnet_init+0x20>)
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <telnet_init+0x24>)
 800127c:	f017 fb7c 	bl	8018978 <sys_thread_new>
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08001199 	.word	0x08001199
 800128c:	0801a168 	.word	0x0801a168

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001296:	490e      	ldr	r1, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ac:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ba:	f7ff fd6f 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f017 ff85 	bl	80191cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff f995 	bl	80005f0 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012d4:	08028198 	.word	0x08028198
  ldr r2, =_sbss
 80012d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012dc:	20011490 	.word	0x20011490

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>

080012e2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e014      	b.n	800133a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d17c      	bne.n	8001460 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e01c      	b.n	80013ba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	2112      	movs	r1, #18
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	4798      	blx	r3
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	da03      	bge.n	800139c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001394:	f06f 0304 	mvn.w	r3, #4
 8001398:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800139a:	e00b      	b.n	80013b4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d105      	bne.n	80013b4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
         break;
 80013b2:	e005      	b.n	80013c0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	d9df      	bls.n	8001380 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b1f      	cmp	r3, #31
 80013c6:	d902      	bls.n	80013ce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013c8:	f06f 0302 	mvn.w	r3, #2
 80013cc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d145      	bne.n	8001460 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6810      	ldr	r0, [r2, #0]
 80013dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e0:	2100      	movs	r1, #0
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db37      	blt.n	800145a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6810      	ldr	r0, [r2, #0]
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	2100      	movs	r1, #0
 80013f8:	4798      	blx	r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db28      	blt.n	8001452 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4798      	blx	r3
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800140a:	e01c      	b.n	8001446 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800141e:	d80e      	bhi.n	800143e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	f107 0208 	add.w	r2, r7, #8
 800142c:	2100      	movs	r1, #0
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	da07      	bge.n	8001446 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001436:	f06f 0304 	mvn.w	r3, #4
 800143a:	613b      	str	r3, [r7, #16]
                 break;
 800143c:	e010      	b.n	8001460 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800143e:	f06f 0301 	mvn.w	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
               break;
 8001444:	e00c      	b.n	8001460 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1dd      	bne.n	800140c <LAN8742_Init+0xc6>
 8001450:	e006      	b.n	8001460 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001452:	f06f 0304 	mvn.w	r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e002      	b.n	8001460 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800145a:	f06f 0303 	mvn.w	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d112      	bne.n	800148c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4798      	blx	r3
 800146c:	4603      	mov	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001470:	bf00      	nop
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4798      	blx	r3
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001484:	d9f5      	bls.n	8001472 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800148c:	693b      	ldr	r3, [r7, #16]
 }
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6810      	ldr	r0, [r2, #0]
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	2101      	movs	r1, #1
 80014b0:	4798      	blx	r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da02      	bge.n	80014be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b8:	f06f 0304 	mvn.w	r3, #4
 80014bc:	e06e      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6810      	ldr	r0, [r2, #0]
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	2101      	movs	r1, #1
 80014cc:	4798      	blx	r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014d4:	f06f 0304 	mvn.w	r3, #4
 80014d8:	e060      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80014e4:	2301      	movs	r3, #1
 80014e6:	e059      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6810      	ldr	r0, [r2, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	2100      	movs	r1, #0
 80014f6:	4798      	blx	r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da02      	bge.n	8001504 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014fe:	f06f 0304 	mvn.w	r3, #4
 8001502:	e04b      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11b      	bne.n	8001546 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <LAN8742_GetLinkState+0x90>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001522:	2302      	movs	r3, #2
 8001524:	e03a      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001530:	2303      	movs	r3, #3
 8001532:	e033      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800153e:	2304      	movs	r3, #4
 8001540:	e02c      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001542:	2305      	movs	r3, #5
 8001544:	e02a      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6810      	ldr	r0, [r2, #0]
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	211f      	movs	r1, #31
 8001554:	4798      	blx	r3
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	da02      	bge.n	8001562 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800155c:	f06f 0304 	mvn.w	r3, #4
 8001560:	e01c      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800156c:	2306      	movs	r3, #6
 800156e:	e015      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 031c 	and.w	r3, r3, #28
 8001576:	2b18      	cmp	r3, #24
 8001578:	d101      	bne.n	800157e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800157a:	2302      	movs	r3, #2
 800157c:	e00e      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 031c 	and.w	r3, r3, #28
 8001584:	2b08      	cmp	r3, #8
 8001586:	d101      	bne.n	800158c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001588:	2303      	movs	r3, #3
 800158a:	e007      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 031c 	and.w	r3, r3, #28
 8001592:	2b14      	cmp	r3, #20
 8001594:	d101      	bne.n	800159a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001596:	2304      	movs	r3, #4
 8001598:	e000      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800159a:	2305      	movs	r3, #5
    }				
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f8fc 	bl	80017ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f7ff fa72 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff f9da 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	20000834 	.word	0x20000834

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000834 	.word	0x20000834

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff4c 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f2:	f7ff ff61 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 80017f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7ff ffb1 	bl	8001764 <NVIC_EncodePriority>
 8001802:	4602      	mov	r2, r0
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff80 	bl	8001710 <__NVIC_SetPriority>
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff54 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06c      	b.n	8001920 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2223      	movs	r2, #35	; 0x23
 8001854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f003 f9b9 	bl	8004bd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_ETH_Init+0xf4>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_ETH_Init+0xf4>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_ETH_Init+0xf4>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_ETH_Init+0xf8>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a2b      	ldr	r2, [pc, #172]	; (800192c <HAL_ETH_Init+0xf8>)
 8001880:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001884:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_ETH_Init+0xf8>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4927      	ldr	r1, [pc, #156]	; (800192c <HAL_ETH_Init+0xf8>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_ETH_Init+0xf8>)
 8001896:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b0:	f7ff feae 	bl	8001610 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b6:	e011      	b.n	80018dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b8:	f7ff feaa 	bl	8001610 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018c6:	d909      	bls.n	80018dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2204      	movs	r2, #4
 80018cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22e0      	movs	r2, #224	; 0xe0
 80018d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e021      	b.n	8001920 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e4      	bne.n	80018b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 ff4a 	bl	8002788 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fff1 	bl	80028dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f001 f847 	bl	800298e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	461a      	mov	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 ffaf 	bl	800286c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2210      	movs	r2, #16
 800191a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40013800 	.word	0x40013800

08001930 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800193e:	2b10      	cmp	r3, #16
 8001940:	d17f      	bne.n	8001a42 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2223      	movs	r2, #35	; 0x23
 8001946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001974:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001988:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f9f8 	bl	8001d88 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fe39 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0204 	orr.w	r2, r2, #4
 80019cc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fe26 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fd70 	bl	80024ca <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a00:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a18:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001a2c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a34:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2223      	movs	r2, #35	; 0x23
 8001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5a:	2b23      	cmp	r3, #35	; 0x23
 8001a5c:	d170      	bne.n	8001b40 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2223      	movs	r2, #35	; 0x23
 8001a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001a78:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001a7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a80:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a98:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	f023 0302 	bic.w	r3, r3, #2
 8001aac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0204 	bic.w	r2, r2, #4
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fdac 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fcf6 	bl	80024ca <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0208 	bic.w	r2, r2, #8
 8001aec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff fd96 	bl	8001628 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00e      	b.n	8001b28 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	3212      	adds	r2, #18
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d9ed      	bls.n	8001b0a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2210      	movs	r2, #16
 8001b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e045      	b.n	8001bfa <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b74:	2b23      	cmp	r3, #35	; 0x23
 8001b76:	d13f      	bne.n	8001bf8 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b80:	2201      	movs	r2, #1
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 ff6f 	bl	8002a68 <ETH_Prepare_Tx_Descriptors>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e02a      	b.n	8001bfa <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba4:	f3bf 8f4f 	dsb	sy
}
 8001ba8:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d904      	bls.n	8001bc6 <HAL_ETH_Transmit_IT+0x7c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	1f1a      	subs	r2, r3, #4
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00d      	beq.n	8001bf4 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	461a      	mov	r2, r3
 8001be2:	2304      	movs	r3, #4
 8001be4:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
  }
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0a8      	b.n	8001d80 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c34:	2b23      	cmp	r3, #35	; 0x23
 8001c36:	d001      	beq.n	8001c3c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0a1      	b.n	8001d80 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	3212      	adds	r2, #18
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c52:	f1c3 0304 	rsb	r3, r3, #4
 8001c56:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c58:	e06a      	b.n	8001d30 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <HAL_ETH_ReadData+0x88>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d040      	beq.n	8001d0c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f003 f94a 	bl	8004f84 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d902      	bls.n	8001d1e <HAL_ETH_ReadData+0x11c>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	3212      	adds	r2, #18
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db06      	blt.n	8001d46 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d202      	bcs.n	8001d46 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d089      	beq.n	8001c5a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f814 	bl	8001d88 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d94:	2301      	movs	r3, #1
 8001d96:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	3212      	adds	r2, #18
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001db0:	e040      	b.n	8001e34 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d112      	bne.n	8001de0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f8b0 	bl	8004f24 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	74fb      	strb	r3, [r7, #19]
 8001dce:	e007      	b.n	8001de0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d026      	beq.n	8001e34 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <ETH_UpdateDescriptor+0xe4>)
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	e003      	b.n	8001dfe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001dfc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dfe:	f3bf 8f5f 	dmb	sy
}
 8001e02:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3301      	adds	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d902      	bls.n	8001e22 <ETH_UpdateDescriptor+0x9a>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	3212      	adds	r2, #18
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <ETH_UpdateDescriptor+0xb8>
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1b8      	bne.n	8001db2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d00c      	beq.n	8001e64 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	80004600 	.word	0x80004600

08001e70 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e8e:	e03f      	b.n	8001f10 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d028      	beq.n	8001f10 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db1b      	blt.n	8001f0c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 f88f 	bl	8005004 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	3304      	adds	r3, #4
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f0a:	e001      	b.n	8001f10 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_ETH_ReleaseTxPacket+0xac>
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1b9      	bne.n	8001e90 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d112      	bne.n	8001f68 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d109      	bne.n	8001f68 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_ETH_IRQHandler+0x178>)
 8001f60:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f002 fb98 	bl	8004698 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d113      	bne.n	8001fa2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	461a      	mov	r2, r3
 8001f96:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001f9a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f002 fb8b 	bl	80046b8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d14c      	bne.n	8002050 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc8:	d142      	bne.n	8002050 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f043 0208 	orr.w	r2, r3, #8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fec:	d11a      	bne.n	8002024 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_ETH_IRQHandler+0x17c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002014:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002018:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	22e0      	movs	r2, #224	; 0xe0
 800201e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002022:	e012      	b.n	800204a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	461a      	mov	r2, r3
 8002044:	f248 6380 	movw	r3, #34432	; 0x8680
 8002048:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f002 fb44 	bl	80046d8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d10e      	bne.n	800207c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f81c 	bl	80020ac <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_ETH_IRQHandler+0x180>)
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_ETH_IRQHandler+0x180>)
 800208a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800208e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f815 	bl	80020c0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	00010040 	.word	0x00010040
 80020a4:	007e2000 	.word	0x007e2000
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 031c 	and.w	r3, r3, #28
 80020f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	02db      	lsls	r3, r3, #11
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0302 	bic.w	r3, r3, #2
 8002112:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002124:	f7ff fa74 	bl	8001610 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800212a:	e00d      	b.n	8002148 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800212c:	f7ff fa70 	bl	8001610 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	d301      	bcc.n	8002140 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e010      	b.n	8002162 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ec      	bne.n	800212c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 031c 	and.w	r3, r3, #28
 8002186:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	02db      	lsls	r3, r3, #11
 800218c:	b29b      	uxth	r3, r3
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff fa24 	bl	8001610 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021ca:	e00d      	b.n	80021e8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80021cc:	f7ff fa20 	bl	8001610 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d301      	bcc.n	80021e0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ec      	bne.n	80021cc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d9      	b.n	80023c4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b29a      	uxth	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00b      	b.n	80023fc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d105      	bne.n	80023fa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f88f 	bl	8002514 <ETH_SetMACConfig>

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 031c 	bic.w	r3, r3, #28
 800241a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800241c:	f001 fa84 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8002420:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d908      	bls.n	800243c <HAL_ETH_SetMDIOClockRange+0x38>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d804      	bhi.n	800243c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e027      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d908      	bls.n	8002456 <HAL_ETH_SetMDIOClockRange+0x52>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d204      	bcs.n	8002456 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f043 030c 	orr.w	r3, r3, #12
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e01a      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d303      	bcc.n	8002466 <HAL_ETH_SetMDIOClockRange+0x62>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d911      	bls.n	800248a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d908      	bls.n	8002480 <HAL_ETH_SetMDIOClockRange+0x7c>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d804      	bhi.n	8002480 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e005      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e000      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800248a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	611a      	str	r2, [r3, #16]
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	01312cff 	.word	0x01312cff
 80024a0:	02160ebf 	.word	0x02160ebf
 80024a4:	03938700 	.word	0x03938700
 80024a8:	05f5e0ff 	.word	0x05f5e0ff
 80024ac:	08f0d17f 	.word	0x08f0d17f

080024b0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff f894 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800250a:	6193      	str	r3, [r2, #24]
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <ETH_SetMACConfig+0x15c>)
 800252a:	4013      	ands	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	7c1b      	ldrb	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <ETH_SetMACConfig+0x28>
 8002536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800253a:	e000      	b.n	800253e <ETH_SetMACConfig+0x2a>
 800253c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7c5b      	ldrb	r3, [r3, #17]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <ETH_SetMACConfig+0x38>
 8002546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254a:	e000      	b.n	800254e <ETH_SetMACConfig+0x3a>
 800254c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800254e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7fdb      	ldrb	r3, [r3, #31]
 800255a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800255c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	7f92      	ldrb	r2, [r2, #30]
 8002568:	2a00      	cmp	r2, #0
 800256a:	d102      	bne.n	8002572 <ETH_SetMACConfig+0x5e>
 800256c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002570:	e000      	b.n	8002574 <ETH_SetMACConfig+0x60>
 8002572:	2200      	movs	r2, #0
                        macconf->Speed |
 8002574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7f1b      	ldrb	r3, [r3, #28]
 800257a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800257c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002582:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800258a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002592:	2a00      	cmp	r2, #0
 8002594:	d102      	bne.n	800259c <ETH_SetMACConfig+0x88>
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	e000      	b.n	800259e <ETH_SetMACConfig+0x8a>
 800259c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800259e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	7bdb      	ldrb	r3, [r3, #15]
 80025a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025b6:	4313      	orrs	r3, r2
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff f82a 	bl	8001628 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025fa:	2a00      	cmp	r2, #0
 80025fc:	d101      	bne.n	8002602 <ETH_SetMACConfig+0xee>
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	e000      	b.n	8002604 <ETH_SetMACConfig+0xf0>
 8002602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002604:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800260a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002612:	2a01      	cmp	r2, #1
 8002614:	d101      	bne.n	800261a <ETH_SetMACConfig+0x106>
 8002616:	2208      	movs	r2, #8
 8002618:	e000      	b.n	800261c <ETH_SetMACConfig+0x108>
 800261a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800261c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002624:	2a01      	cmp	r2, #1
 8002626:	d101      	bne.n	800262c <ETH_SetMACConfig+0x118>
 8002628:	2204      	movs	r2, #4
 800262a:	e000      	b.n	800262e <ETH_SetMACConfig+0x11a>
 800262c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800262e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002636:	2a01      	cmp	r2, #1
 8002638:	d101      	bne.n	800263e <ETH_SetMACConfig+0x12a>
 800263a:	2202      	movs	r2, #2
 800263c:	e000      	b.n	8002640 <ETH_SetMACConfig+0x12c>
 800263e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002640:	4313      	orrs	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe ffe5 	bl	8001628 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	ff20810f 	.word	0xff20810f

08002674 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <ETH_SetDMAConfig+0x110>)
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	7b1b      	ldrb	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <ETH_SetDMAConfig+0x2c>
 800269a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800269e:	e000      	b.n	80026a2 <ETH_SetDMAConfig+0x2e>
 80026a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7b5b      	ldrb	r3, [r3, #13]
 80026a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	7f52      	ldrb	r2, [r2, #29]
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d102      	bne.n	80026b8 <ETH_SetDMAConfig+0x44>
 80026b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026b6:	e000      	b.n	80026ba <ETH_SetDMAConfig+0x46>
 80026b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	7b9b      	ldrb	r3, [r3, #14]
 80026c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	7f1b      	ldrb	r3, [r3, #28]
 80026ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	7f9b      	ldrb	r3, [r3, #30]
 80026d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f8:	461a      	mov	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800270a:	2001      	movs	r0, #1
 800270c:	f7fe ff8c 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	791b      	ldrb	r3, [r3, #4]
 8002722:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002728:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800272e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002734:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800273e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002746:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800274c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800275a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002768:	2001      	movs	r0, #1
 800276a:	f7fe ff5d 	bl	8001628 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f8de3f23 	.word	0xf8de3f23

08002788 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0a6      	sub	sp, #152	; 0x98
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800279c:	2300      	movs	r3, #0
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027c4:	2300      	movs	r3, #0
 80027c6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff fe86 	bl	8002514 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002808:	2301      	movs	r3, #1
 800280a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002816:	2301      	movs	r3, #1
 8002818:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002834:	2301      	movs	r3, #1
 8002836:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800283c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800283e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002842:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002848:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002850:	2300      	movs	r3, #0
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff08 	bl	8002674 <ETH_SetDMAConfig>
}
 8002864:	bf00      	nop
 8002866:	3798      	adds	r7, #152	; 0x98
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3305      	adds	r3, #5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	3204      	adds	r2, #4
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <ETH_MACAddressConfig+0x68>)
 800288e:	4413      	add	r3, r2
 8002890:	461a      	mov	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3303      	adds	r3, #3
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	061a      	lsls	r2, r3, #24
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3302      	adds	r3, #2
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3301      	adds	r3, #1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4313      	orrs	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <ETH_MACAddressConfig+0x6c>)
 80028be:	4413      	add	r3, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	6013      	str	r3, [r2, #0]
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40028040 	.word	0x40028040
 80028d8:	40028044 	.word	0x40028044

080028dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e03e      	b.n	8002968 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	3206      	adds	r2, #6
 800291c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d80c      	bhi.n	800294c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68d9      	ldr	r1, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	e004      	b.n	8002956 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d9bd      	bls.n	80028ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e046      	b.n	8002a2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6919      	ldr	r1, [r3, #16]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80029e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	3212      	adds	r2, #18
 80029f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d80c      	bhi.n	8002a1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6919      	ldr	r1, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e004      	b.n	8002a24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d9b5      	bls.n	800299c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b08d      	sub	sp, #52	; 0x34
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3318      	adds	r3, #24
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a92:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aaa:	d007      	beq.n	8002abc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e103      	b.n	8002cc8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ad8:	f023 031f 	bic.w	r3, r3, #31
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	6852      	ldr	r2, [r2, #4]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b46:	f3bf 8f5f 	dmb	sy
}
 8002b4a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b58:	e084      	b.n	8002c64 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e005      	b.n	8002b86 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	3301      	adds	r3, #1
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d902      	bls.n	8002b98 <ETH_Prepare_Tx_Descriptors+0x130>
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	3b04      	subs	r3, #4
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bba:	d007      	beq.n	8002bcc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d029      	beq.n	8002c20 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	e019      	b.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002be0:	f3bf 8f5f 	dmb	sy
}
 8002be4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d902      	bls.n	8002c04 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	3b04      	subs	r3, #4
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	3301      	adds	r3, #1
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3e1      	bcc.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e053      	b.n	8002cc8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	3301      	adds	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c3e:	f023 031f 	bic.w	r3, r3, #31
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	6852      	ldr	r2, [r2, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c52:	f3bf 8f5f 	dmb	sy
}
 8002c56:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f47f af76 	bne.w	8002b5a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e005      	b.n	8002c8e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cae:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc2:	b662      	cpsie	i
}
 8002cc4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3734      	adds	r7, #52	; 0x34
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e177      	b.n	8002fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8166 	bne.w	8002fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80c0 	beq.w	8002fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <HAL_GPIO_Init+0x328>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x32c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d037      	beq.n	8002f12 <HAL_GPIO_Init+0x23e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_GPIO_Init+0x330>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_GPIO_Init+0x23a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_GPIO_Init+0x334>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d02b      	beq.n	8002f0a <HAL_GPIO_Init+0x236>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_GPIO_Init+0x338>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d025      	beq.n	8002f06 <HAL_GPIO_Init+0x232>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a54      	ldr	r2, [pc, #336]	; (8003010 <HAL_GPIO_Init+0x33c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01f      	beq.n	8002f02 <HAL_GPIO_Init+0x22e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a53      	ldr	r2, [pc, #332]	; (8003014 <HAL_GPIO_Init+0x340>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d019      	beq.n	8002efe <HAL_GPIO_Init+0x22a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_GPIO_Init+0x344>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_GPIO_Init+0x226>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_GPIO_Init+0x348>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_GPIO_Init+0x222>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_GPIO_Init+0x34c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <HAL_GPIO_Init+0x21e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_GPIO_Init+0x350>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_GPIO_Init+0x21a>
 8002eea:	2309      	movs	r3, #9
 8002eec:	e012      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002eee:	230a      	movs	r3, #10
 8002ef0:	e010      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	e00e      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	e00c      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002efa:	2306      	movs	r3, #6
 8002efc:	e00a      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002efe:	2305      	movs	r3, #5
 8002f00:	e008      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f12:	2300      	movs	r3, #0
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f002 0203 	and.w	r2, r2, #3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4093      	lsls	r3, r2
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f24:	4935      	ldr	r1, [pc, #212]	; (8002ffc <HAL_GPIO_Init+0x328>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002faa:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f ae84 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40021400 	.word	0x40021400
 8003018:	40021800 	.word	0x40021800
 800301c:	40021c00 	.word	0x40021c00
 8003020:	40022000 	.word	0x40022000
 8003024:	40022400 	.word	0x40022400
 8003028:	40013c00 	.word	0x40013c00

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e267      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d075      	beq.n	800316a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308a:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d112      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b82      	ldr	r3, [pc, #520]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d10b      	bne.n	80030bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05b      	beq.n	8003168 <HAL_RCC_OscConfig+0x108>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d157      	bne.n	8003168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e242      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x74>
 80030c6:	4b76      	ldr	r3, [pc, #472]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a75      	ldr	r2, [pc, #468]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x98>
 80030de:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6c      	ldr	r2, [pc, #432]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xb0>
 80030f8:	4b69      	ldr	r3, [pc, #420]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fa7a 	bl	8001610 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fa76 	bl	8001610 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e207      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xc0>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fa66 	bl	8001610 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fa62 	bl	8001610 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1f3      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0xe8>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1c7      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4937      	ldr	r1, [pc, #220]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCC_OscConfig+0x244>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fa1b 	bl	8001610 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe fa17 	bl	8001610 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1a8      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4925      	ldr	r1, [pc, #148]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_OscConfig+0x244>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe f9fa 	bl	8001610 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe f9f6 	bl	8001610 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e187      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d036      	beq.n	80032b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fe f9da 	bl	8001610 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe f9d6 	bl	8001610 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e167      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x240>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x200>
 800327e:	e01b      	b.n	80032b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_OscConfig+0x248>)
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe f9c3 	bl	8001610 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	e00e      	b.n	80032ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328e:	f7fe f9bf 	bl	8001610 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d907      	bls.n	80032ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e150      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	42470000 	.word	0x42470000
 80032a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ea      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8097 	beq.w	80033f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a7c      	ldr	r2, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b7a      	ldr	r3, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b77      	ldr	r3, [pc, #476]	; (80034d4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003302:	4b74      	ldr	r3, [pc, #464]	; (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a73      	ldr	r2, [pc, #460]	; (80034d4 <HAL_RCC_OscConfig+0x474>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7fe f97f 	bl	8001610 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7fe f97b 	bl	8001610 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e10c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <HAL_RCC_OscConfig+0x474>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x2ea>
 800333c:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x30c>
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	4a5e      	ldr	r2, [pc, #376]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
 800335e:	4b5c      	ldr	r3, [pc, #368]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0x324>
 800336c:	4b58      	ldr	r3, [pc, #352]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	4b55      	ldr	r3, [pc, #340]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d015      	beq.n	80033b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe f940 	bl	8001610 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fe f93c 	bl	8001610 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0cb      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RCC_OscConfig+0x334>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe f92a 	bl	8001610 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe f926 	bl	8001610 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b5      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a1 	beq.w	8003540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	d05c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d141      	bne.n	8003496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe f8fa 	bl	8001610 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe f8f6 	bl	8001610 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e087      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x478>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe f8cf 	bl	8001610 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003476:	f7fe f8cb 	bl	8001610 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e05c      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x416>
 8003494:	e054      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <HAL_RCC_OscConfig+0x478>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe f8b8 	bl	8001610 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f8b4 	bl	8001610 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e045      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x444>
 80034c2:	e03d      	b.n	8003540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e038      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4ec>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d028      	beq.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d121      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11a      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800350c:	4013      	ands	r3, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d107      	bne.n	800353c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0cc      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b68      	ldr	r3, [pc, #416]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d90c      	bls.n	800358c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b65      	ldr	r3, [pc, #404]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d044      	beq.n	8003670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d119      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d003      	beq.n	800360e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e067      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4934      	ldr	r1, [pc, #208]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7fd ffe6 	bl	8001610 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fd ffe2 	bl	8001610 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e04f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d20c      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd f9e0 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	0801dcac 	.word	0x0801dcac
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	; 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	; 0x44
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	; (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	; (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
 800377c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382c:	f7fc fd48 	bl	80002c0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fc fcee 	bl	80002c0 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	; 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	0801dcbc 	.word	0x0801dcbc

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0801dcbc 	.word	0x0801dcbc

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	220f      	movs	r2, #15
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetClockConfig+0x60>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01c      	b.n	8003a40 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	795b      	ldrb	r3, [r3, #5]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fc ffe6 	bl	80009e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0204 	orr.w	r2, r2, #4
 8003a30:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	791b      	ldrb	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e044      	b.n	8003aec <HAL_RNG_GenerateRandomNumber+0xa4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	795b      	ldrb	r3, [r3, #5]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d133      	bne.n	8003ada <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fd fdca 	bl	8001610 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003a7e:	e018      	b.n	8003ab2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003a80:	f7fd fdc6 	bl	8001610 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d911      	bls.n	8003ab2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01c      	b.n	8003aec <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d1df      	bne.n	8003a80 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	715a      	strb	r2, [r3, #5]
 8003ad8:	e004      	b.n	8003ae4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	711a      	strb	r2, [r3, #4]

  return status;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e041      	b.n	8003b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f839 	bl	8003b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 f9d8 	bl	8003ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04e      	b.n	8003c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d01d      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x80>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d111      	bne.n	8003c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d010      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	e007      	b.n	8003c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40010400 	.word	0x40010400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40001800 	.word	0x40001800

08003c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0202 	mvn.w	r2, #2
 8003cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8ee 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8e0 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f8f1 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0204 	mvn.w	r2, #4
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8c4 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8b6 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8c7 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0208 	mvn.w	r2, #8
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2204      	movs	r2, #4
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f89a 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f88c 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f89d 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0210 	mvn.w	r2, #16
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2208      	movs	r2, #8
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f870 	bl	8003eac <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f862 	bl	8003e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f873 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0201 	mvn.w	r2, #1
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc fdaa 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f902 	bl	800403c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f838 	bl	8003ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0220 	mvn.w	r2, #32
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8cc 	bl	8004028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a40      	ldr	r2, [pc, #256]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d00f      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <TIM_Base_SetConfig+0x118>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <TIM_Base_SetConfig+0x11c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3b      	ldr	r2, [pc, #236]	; (8004008 <TIM_Base_SetConfig+0x120>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3a      	ldr	r2, [pc, #232]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d108      	bne.n	8003f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d02b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d027      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <TIM_Base_SetConfig+0x118>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d023      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <TIM_Base_SetConfig+0x11c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01f      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <TIM_Base_SetConfig+0x120>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a29      	ldr	r2, [pc, #164]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d017      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <TIM_Base_SetConfig+0x128>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a27      	ldr	r2, [pc, #156]	; (8004014 <TIM_Base_SetConfig+0x12c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <TIM_Base_SetConfig+0x130>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a25      	ldr	r2, [pc, #148]	; (800401c <TIM_Base_SetConfig+0x134>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a24      	ldr	r2, [pc, #144]	; (8004020 <TIM_Base_SetConfig+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <TIM_Base_SetConfig+0x13c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <TIM_Base_SetConfig+0x114>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0xf8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40010400 	.word	0x40010400
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	40001800 	.word	0x40001800
 8004020:	40001c00 	.word	0x40001c00
 8004024:	40002000 	.word	0x40002000

08004028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e03f      	b.n	80040e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fcd8 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	; 0x24
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f829 	bl	80040ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b0c0      	sub	sp, #256	; 0x100
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	68d9      	ldr	r1, [r3, #12]
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	ea40 0301 	orr.w	r3, r0, r1
 8004114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004144:	f021 010c 	bic.w	r1, r1, #12
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004152:	430b      	orrs	r3, r1
 8004154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	6999      	ldr	r1, [r3, #24]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	ea40 0301 	orr.w	r3, r0, r1
 8004172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <UART_SetConfig+0x2cc>)
 800417c:	429a      	cmp	r2, r3
 800417e:	d005      	beq.n	800418c <UART_SetConfig+0xa0>
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8d      	ldr	r3, [pc, #564]	; (80043bc <UART_SetConfig+0x2d0>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d104      	bne.n	8004196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7ff fbec 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 8004190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004194:	e003      	b.n	800419e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004196:	f7ff fbd3 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 800419a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	f040 810c 	bne.w	80043c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	1891      	adds	r1, r2, r2
 80041c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80041c6:	415b      	adcs	r3, r3
 80041c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041ce:	4621      	mov	r1, r4
 80041d0:	eb12 0801 	adds.w	r8, r2, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb43 0901 	adc.w	r9, r3, r1
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ee:	4690      	mov	r8, r2
 80041f0:	4699      	mov	r9, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	eb18 0303 	adds.w	r3, r8, r3
 80041f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041fc:	462b      	mov	r3, r5
 80041fe:	eb49 0303 	adc.w	r3, r9, r3
 8004202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800421a:	460b      	mov	r3, r1
 800421c:	18db      	adds	r3, r3, r3
 800421e:	653b      	str	r3, [r7, #80]	; 0x50
 8004220:	4613      	mov	r3, r2
 8004222:	eb42 0303 	adc.w	r3, r2, r3
 8004226:	657b      	str	r3, [r7, #84]	; 0x54
 8004228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800422c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004230:	f7fc f846 	bl	80002c0 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <UART_SetConfig+0x2d4>)
 800423a:	fba3 2302 	umull	r2, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	011c      	lsls	r4, r3, #4
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800424c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	64b9      	str	r1, [r7, #72]	; 0x48
 800425c:	415b      	adcs	r3, r3
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004264:	4641      	mov	r1, r8
 8004266:	eb12 0a01 	adds.w	sl, r2, r1
 800426a:	4649      	mov	r1, r9
 800426c:	eb43 0b01 	adc.w	fp, r3, r1
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800427c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004284:	4692      	mov	sl, r2
 8004286:	469b      	mov	fp, r3
 8004288:	4643      	mov	r3, r8
 800428a:	eb1a 0303 	adds.w	r3, sl, r3
 800428e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004292:	464b      	mov	r3, r9
 8004294:	eb4b 0303 	adc.w	r3, fp, r3
 8004298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042b0:	460b      	mov	r3, r1
 80042b2:	18db      	adds	r3, r3, r3
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
 80042b6:	4613      	mov	r3, r2
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042c6:	f7fb fffb 	bl	80002c0 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <UART_SetConfig+0x2d4>)
 80042d2:	fba3 2301 	umull	r2, r3, r3, r1
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2264      	movs	r2, #100	; 0x64
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	1acb      	subs	r3, r1, r3
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <UART_SetConfig+0x2d4>)
 80042e8:	fba3 2302 	umull	r2, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042f4:	441c      	add	r4, r3
 80042f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	1891      	adds	r1, r2, r2
 800430e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004310:	415b      	adcs	r3, r3
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004318:	4641      	mov	r1, r8
 800431a:	1851      	adds	r1, r2, r1
 800431c:	6339      	str	r1, [r7, #48]	; 0x30
 800431e:	4649      	mov	r1, r9
 8004320:	414b      	adcs	r3, r1
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004330:	4659      	mov	r1, fp
 8004332:	00cb      	lsls	r3, r1, #3
 8004334:	4651      	mov	r1, sl
 8004336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433a:	4651      	mov	r1, sl
 800433c:	00ca      	lsls	r2, r1, #3
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	4603      	mov	r3, r0
 8004344:	4642      	mov	r2, r8
 8004346:	189b      	adds	r3, r3, r2
 8004348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800434c:	464b      	mov	r3, r9
 800434e:	460a      	mov	r2, r1
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800436c:	460b      	mov	r3, r1
 800436e:	18db      	adds	r3, r3, r3
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
 8004372:	4613      	mov	r3, r2
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800437e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004382:	f7fb ff9d 	bl	80002c0 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <UART_SetConfig+0x2d4>)
 800438c:	fba3 1302 	umull	r1, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <UART_SetConfig+0x2d4>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 0207 	and.w	r2, r3, #7
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4422      	add	r2, r4
 80043b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043b4:	e106      	b.n	80045c4 <UART_SetConfig+0x4d8>
 80043b6:	bf00      	nop
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043d6:	4642      	mov	r2, r8
 80043d8:	464b      	mov	r3, r9
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	6239      	str	r1, [r7, #32]
 80043de:	415b      	adcs	r3, r3
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043e6:	4641      	mov	r1, r8
 80043e8:	1854      	adds	r4, r2, r1
 80043ea:	4649      	mov	r1, r9
 80043ec:	eb43 0501 	adc.w	r5, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	00eb      	lsls	r3, r5, #3
 80043fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fe:	00e2      	lsls	r2, r4, #3
 8004400:	4614      	mov	r4, r2
 8004402:	461d      	mov	r5, r3
 8004404:	4643      	mov	r3, r8
 8004406:	18e3      	adds	r3, r4, r3
 8004408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800440c:	464b      	mov	r3, r9
 800440e:	eb45 0303 	adc.w	r3, r5, r3
 8004412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004432:	4629      	mov	r1, r5
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800443c:	4621      	mov	r1, r4
 800443e:	008a      	lsls	r2, r1, #2
 8004440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004444:	f7fb ff3c 	bl	80002c0 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4b60      	ldr	r3, [pc, #384]	; (80045d0 <UART_SetConfig+0x4e4>)
 800444e:	fba3 2302 	umull	r2, r3, r3, r2
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	011c      	lsls	r4, r3, #4
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	61b9      	str	r1, [r7, #24]
 8004470:	415b      	adcs	r3, r3
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004478:	4641      	mov	r1, r8
 800447a:	1851      	adds	r1, r2, r1
 800447c:	6139      	str	r1, [r7, #16]
 800447e:	4649      	mov	r1, r9
 8004480:	414b      	adcs	r3, r1
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004490:	4659      	mov	r1, fp
 8004492:	00cb      	lsls	r3, r1, #3
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449a:	4651      	mov	r1, sl
 800449c:	00ca      	lsls	r2, r1, #3
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4642      	mov	r2, r8
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044ac:	464b      	mov	r3, r9
 80044ae:	460a      	mov	r2, r1
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044d0:	4649      	mov	r1, r9
 80044d2:	008b      	lsls	r3, r1, #2
 80044d4:	4641      	mov	r1, r8
 80044d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044da:	4641      	mov	r1, r8
 80044dc:	008a      	lsls	r2, r1, #2
 80044de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044e2:	f7fb feed 	bl	80002c0 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <UART_SetConfig+0x4e4>)
 80044ee:	fba3 2301 	umull	r2, r3, r3, r1
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2264      	movs	r2, #100	; 0x64
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	1acb      	subs	r3, r1, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a33      	ldr	r2, [pc, #204]	; (80045d0 <UART_SetConfig+0x4e4>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	441c      	add	r4, r3
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	673b      	str	r3, [r7, #112]	; 0x70
 8004516:	677a      	str	r2, [r7, #116]	; 0x74
 8004518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	415b      	adcs	r3, r3
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800452c:	4641      	mov	r1, r8
 800452e:	1851      	adds	r1, r2, r1
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	4649      	mov	r1, r9
 8004534:	414b      	adcs	r3, r1
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004544:	4659      	mov	r1, fp
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4651      	mov	r1, sl
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4651      	mov	r1, sl
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4642      	mov	r2, r8
 800455a:	189b      	adds	r3, r3, r2
 800455c:	66bb      	str	r3, [r7, #104]	; 0x68
 800455e:	464b      	mov	r3, r9
 8004560:	460a      	mov	r2, r1
 8004562:	eb42 0303 	adc.w	r3, r2, r3
 8004566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
 8004572:	667a      	str	r2, [r7, #100]	; 0x64
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004580:	4649      	mov	r1, r9
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	4641      	mov	r1, r8
 8004586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458a:	4641      	mov	r1, r8
 800458c:	008a      	lsls	r2, r1, #2
 800458e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004592:	f7fb fe95 	bl	80002c0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <UART_SetConfig+0x4e4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	; 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <UART_SetConfig+0x4e4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4422      	add	r2, r4
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d0:	51eb851f 	.word	0x51eb851f

080045d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80045da:	2100      	movs	r1, #0
 80045dc:	2000      	movs	r0, #0
 80045de:	f006 f961 	bl	800a8a4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <MX_LWIP_Init+0x90>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <MX_LWIP_Init+0x94>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80045ee:	4b1f      	ldr	r3, [pc, #124]	; (800466c <MX_LWIP_Init+0x98>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <MX_LWIP_Init+0x9c>)
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <MX_LWIP_Init+0xa0>)
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <MX_LWIP_Init+0x98>)
 8004602:	4a19      	ldr	r2, [pc, #100]	; (8004668 <MX_LWIP_Init+0x94>)
 8004604:	4917      	ldr	r1, [pc, #92]	; (8004664 <MX_LWIP_Init+0x90>)
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004608:	f007 fd66 	bl	800c0d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800460c:	481a      	ldr	r0, [pc, #104]	; (8004678 <MX_LWIP_Init+0xa4>)
 800460e:	f007 ff1d 	bl	800c44c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004614:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004624:	4814      	ldr	r0, [pc, #80]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004626:	f007 ff21 	bl	800c46c <netif_set_up>
 800462a:	e002      	b.n	8004632 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800462c:	4812      	ldr	r0, [pc, #72]	; (8004678 <MX_LWIP_Init+0xa4>)
 800462e:	f007 ff89 	bl	800c544 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004632:	4912      	ldr	r1, [pc, #72]	; (800467c <MX_LWIP_Init+0xa8>)
 8004634:	4810      	ldr	r0, [pc, #64]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004636:	f008 f81f 	bl	800c678 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <MX_LWIP_Init+0xac>)
 800463c:	1d3c      	adds	r4, r7, #4
 800463e:	461d      	mov	r5, r3
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	490a      	ldr	r1, [pc, #40]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fd23 	bl	800509c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004656:	4808      	ldr	r0, [pc, #32]	; (8004678 <MX_LWIP_Init+0xa4>)
 8004658:	f010 f9f2 	bl	8014a40 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800465c:	bf00      	nop
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bdb0      	pop	{r4, r5, r7, pc}
 8004664:	20000870 	.word	0x20000870
 8004668:	20000874 	.word	0x20000874
 800466c:	20000878 	.word	0x20000878
 8004670:	0800a7b5 	.word	0x0800a7b5
 8004674:	08004b25 	.word	0x08004b25
 8004678:	20000838 	.word	0x20000838
 800467c:	08004685 	.word	0x08004685
 8004680:	0801a180 	.word	0x0801a180

08004684 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <HAL_ETH_RxCpltCallback+0x1c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fe75 	bl	8005394 <osSemaphoreRelease>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20005348 	.word	0x20005348

080046b8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <HAL_ETH_TxCpltCallback+0x1c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fe65 	bl	8005394 <osSemaphoreRelease>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000534c 	.word	0x2000534c

080046d8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fd fee5 	bl	80024b0 <HAL_ETH_GetDMAError>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d104      	bne.n	80046fa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_ETH_ErrorCallback+0x2c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fe4d 	bl	8005394 <osSemaphoreRelease>
  }
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20005348 	.word	0x20005348

08004708 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004708:	b5b0      	push	{r4, r5, r7, lr}
 800470a:	b0a8      	sub	sp, #160	; 0xa0
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004726:	2264      	movs	r2, #100	; 0x64
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f014 fc14 	bl	8018f58 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004730:	4b85      	ldr	r3, [pc, #532]	; (8004948 <low_level_init+0x240>)
 8004732:	4a86      	ldr	r2, [pc, #536]	; (800494c <low_level_init+0x244>)
 8004734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004742:	23e1      	movs	r3, #225	; 0xe1
 8004744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004748:	23fe      	movs	r3, #254	; 0xfe
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 800474e:	23ec      	movs	r3, #236	; 0xec
 8004750:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x71;
 8004754:	2371      	movs	r3, #113	; 0x71
 8004756:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800475a:	4a7b      	ldr	r2, [pc, #492]	; (8004948 <low_level_init+0x240>)
 800475c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004760:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004762:	4b79      	ldr	r3, [pc, #484]	; (8004948 <low_level_init+0x240>)
 8004764:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004768:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800476a:	4b77      	ldr	r3, [pc, #476]	; (8004948 <low_level_init+0x240>)
 800476c:	4a78      	ldr	r2, [pc, #480]	; (8004950 <low_level_init+0x248>)
 800476e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004770:	4b75      	ldr	r3, [pc, #468]	; (8004948 <low_level_init+0x240>)
 8004772:	4a78      	ldr	r2, [pc, #480]	; (8004954 <low_level_init+0x24c>)
 8004774:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004776:	4b74      	ldr	r3, [pc, #464]	; (8004948 <low_level_init+0x240>)
 8004778:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800477c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800477e:	4872      	ldr	r0, [pc, #456]	; (8004948 <low_level_init+0x240>)
 8004780:	f7fd f858 	bl	8001834 <HAL_ETH_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800478a:	2238      	movs	r2, #56	; 0x38
 800478c:	2100      	movs	r1, #0
 800478e:	4872      	ldr	r0, [pc, #456]	; (8004958 <low_level_init+0x250>)
 8004790:	f014 fbe2 	bl	8018f58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004794:	4b70      	ldr	r3, [pc, #448]	; (8004958 <low_level_init+0x250>)
 8004796:	2221      	movs	r2, #33	; 0x21
 8004798:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <low_level_init+0x250>)
 800479c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80047a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <low_level_init+0x250>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80047a8:	486c      	ldr	r0, [pc, #432]	; (800495c <low_level_init+0x254>)
 80047aa:	f007 fb4f 	bl	800be4c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2206      	movs	r2, #6
 80047b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80047b6:	4b64      	ldr	r3, [pc, #400]	; (8004948 <low_level_init+0x240>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80047c2:	4b61      	ldr	r3, [pc, #388]	; (8004948 <low_level_init+0x240>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	785a      	ldrb	r2, [r3, #1]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047ce:	4b5e      	ldr	r3, [pc, #376]	; (8004948 <low_level_init+0x240>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	789a      	ldrb	r2, [r3, #2]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047da:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <low_level_init+0x240>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	78da      	ldrb	r2, [r3, #3]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047e6:	4b58      	ldr	r3, [pc, #352]	; (8004948 <low_level_init+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	791a      	ldrb	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047f2:	4b55      	ldr	r3, [pc, #340]	; (8004948 <low_level_init+0x240>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	795a      	ldrb	r2, [r3, #5]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004804:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800480c:	f043 030a 	orr.w	r3, r3, #10
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004818:	2203      	movs	r2, #3
 800481a:	2100      	movs	r1, #0
 800481c:	2001      	movs	r0, #1
 800481e:	f001 f89d 	bl	800595c <xQueueGenericCreate>
 8004822:	4603      	mov	r3, r0
 8004824:	4a4e      	ldr	r2, [pc, #312]	; (8004960 <low_level_init+0x258>)
 8004826:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004828:	2203      	movs	r2, #3
 800482a:	2100      	movs	r1, #0
 800482c:	2001      	movs	r0, #1
 800482e:	f001 f895 	bl	800595c <xQueueGenericCreate>
 8004832:	4603      	mov	r3, r0
 8004834:	4a4b      	ldr	r2, [pc, #300]	; (8004964 <low_level_init+0x25c>)
 8004836:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <low_level_init+0x260>)
 800483a:	f107 0408 	add.w	r4, r7, #8
 800483e:	461d      	mov	r5, r3
 8004840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc22 	bl	800509c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004858:	4944      	ldr	r1, [pc, #272]	; (800496c <low_level_init+0x264>)
 800485a:	4845      	ldr	r0, [pc, #276]	; (8004970 <low_level_init+0x268>)
 800485c:	f7fc fd41 	bl	80012e2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004860:	4843      	ldr	r0, [pc, #268]	; (8004970 <low_level_init+0x268>)
 8004862:	f7fc fd70 	bl	8001346 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004866:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800486a:	2b00      	cmp	r3, #0
 800486c:	d165      	bne.n	800493a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800486e:	4840      	ldr	r0, [pc, #256]	; (8004970 <low_level_init+0x268>)
 8004870:	f7fc fe11 	bl	8001496 <LAN8742_GetLinkState>
 8004874:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800487c:	2b01      	cmp	r3, #1
 800487e:	dc06      	bgt.n	800488e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f007 fec9 	bl	800c618 <netif_set_link_down>
      netif_set_down(netif);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f007 fe5c 	bl	800c544 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800488c:	e057      	b.n	800493e <low_level_init+0x236>
      switch (PHYLinkState)
 800488e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004892:	3b02      	subs	r3, #2
 8004894:	2b03      	cmp	r3, #3
 8004896:	d82b      	bhi.n	80048f0 <low_level_init+0x1e8>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <low_level_init+0x198>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048c3 	.word	0x080048c3
 80048a8:	080048d3 	.word	0x080048d3
 80048ac:	080048e3 	.word	0x080048e3
        duplex = ETH_FULLDUPLEX_MODE;
 80048b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048c0:	e01f      	b.n	8004902 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048d0:	e017      	b.n	8004902 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80048d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048e0:	e00f      	b.n	8004902 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80048ee:	e008      	b.n	8004902 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80048f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80048f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004900:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004906:	4619      	mov	r1, r3
 8004908:	480f      	ldr	r0, [pc, #60]	; (8004948 <low_level_init+0x240>)
 800490a:	f7fd fc77 	bl	80021fc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800490e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800491a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800491e:	4619      	mov	r1, r3
 8004920:	4809      	ldr	r0, [pc, #36]	; (8004948 <low_level_init+0x240>)
 8004922:	f7fd fd55 	bl	80023d0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004926:	4808      	ldr	r0, [pc, #32]	; (8004948 <low_level_init+0x240>)
 8004928:	f7fd f802 	bl	8001930 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f007 fd9d 	bl	800c46c <netif_set_up>
    netif_set_link_up(netif);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f007 fe38 	bl	800c5a8 <netif_set_link_up>
}
 8004938:	e001      	b.n	800493e <low_level_init+0x236>
    Error_Handler();
 800493a:	f7fc f823 	bl	8000984 <Error_Handler>
}
 800493e:	bf00      	nop
 8004940:	37a0      	adds	r7, #160	; 0xa0
 8004942:	46bd      	mov	sp, r7
 8004944:	bdb0      	pop	{r4, r5, r7, pc}
 8004946:	bf00      	nop
 8004948:	20005350 	.word	0x20005350
 800494c:	40028000 	.word	0x40028000
 8004950:	200052a8 	.word	0x200052a8
 8004954:	20005208 	.word	0x20005208
 8004958:	20005400 	.word	0x20005400
 800495c:	0801dcc4 	.word	0x0801dcc4
 8004960:	20005348 	.word	0x20005348
 8004964:	2000534c 	.word	0x2000534c
 8004968:	0801a1a4 	.word	0x0801a1a4
 800496c:	2000000c 	.word	0x2000000c
 8004970:	20005438 	.word	0x20005438

08004974 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b092      	sub	sp, #72	; 0x48
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	2230      	movs	r2, #48	; 0x30
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f014 fadf 	bl	8018f58 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	2230      	movs	r2, #48	; 0x30
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f014 fad8 	bl	8018f58 <memset>

  for(q = p; q != NULL; q = q->next)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	643b      	str	r3, [r7, #64]	; 0x40
 80049ac:	e045      	b.n	8004a3a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80049ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d902      	bls.n	80049ba <low_level_output+0x46>
      return ERR_IF;
 80049b4:	f06f 030b 	mvn.w	r3, #11
 80049b8:	e065      	b.n	8004a86 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80049ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	3348      	adds	r3, #72	; 0x48
 80049ca:	443b      	add	r3, r7
 80049cc:	3b3c      	subs	r3, #60	; 0x3c
 80049ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80049d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d2:	895b      	ldrh	r3, [r3, #10]
 80049d4:	4619      	mov	r1, r3
 80049d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	3348      	adds	r3, #72	; 0x48
 80049e2:	443b      	add	r3, r7
 80049e4:	3b38      	subs	r3, #56	; 0x38
 80049e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80049e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d011      	beq.n	8004a12 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80049ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	f107 000c 	add.w	r0, r7, #12
 80049f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049f8:	460b      	mov	r3, r1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18c1      	adds	r1, r0, r3
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	3348      	adds	r3, #72	; 0x48
 8004a0c:	443b      	add	r3, r7
 8004a0e:	3b34      	subs	r3, #52	; 0x34
 8004a10:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	3348      	adds	r3, #72	; 0x48
 8004a26:	443b      	add	r3, r7
 8004a28:	3b34      	subs	r3, #52	; 0x34
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a30:	3301      	adds	r3, #1
 8004a32:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1b6      	bne.n	80049ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	891b      	ldrh	r3, [r3, #8]
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <low_level_output+0x11c>)
 8004a48:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <low_level_output+0x11c>)
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004a52:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <low_level_output+0x11c>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004a58:	6838      	ldr	r0, [r7, #0]
 8004a5a:	f008 fa61 	bl	800cf20 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004a5e:	490c      	ldr	r1, [pc, #48]	; (8004a90 <low_level_output+0x11c>)
 8004a60:	480c      	ldr	r0, [pc, #48]	; (8004a94 <low_level_output+0x120>)
 8004a62:	f7fd f872 	bl	8001b4a <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004a66:	bf00      	nop
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <low_level_output+0x124>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fc41 	bl	80052f8 <osSemaphoreWait>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f5      	bne.n	8004a68 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004a7c:	4805      	ldr	r0, [pc, #20]	; (8004a94 <low_level_output+0x120>)
 8004a7e:	f7fd f9f7 	bl	8001e70 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004a82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3748      	adds	r7, #72	; 0x48
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20005400 	.word	0x20005400
 8004a94:	20005350 	.word	0x20005350
 8004a98:	2000534c 	.word	0x2000534c

08004a9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <low_level_input+0x2c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4805      	ldr	r0, [pc, #20]	; (8004acc <low_level_input+0x30>)
 8004ab8:	f7fd f8a3 	bl	8001c02 <HAL_ETH_ReadData>
  }

  return p;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20005204 	.word	0x20005204
 8004acc:	20005350 	.word	0x20005350

08004ad0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <ethernetif_input+0x50>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fc05 	bl	80052f8 <osSemaphoreWait>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f5      	bne.n	8004ae0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004af4:	68b8      	ldr	r0, [r7, #8]
 8004af6:	f7ff ffd1 	bl	8004a9c <low_level_input>
 8004afa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	4798      	blx	r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f008 f95e 	bl	800cdd4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ea      	bne.n	8004af4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b1e:	e7df      	b.n	8004ae0 <ethernetif_input+0x10>
 8004b20:	20005348 	.word	0x20005348

08004b24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <ethernetif_init+0x1c>
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <ethernetif_init+0x48>)
 8004b34:	f240 12df 	movw	r2, #479	; 0x1df
 8004b38:	490d      	ldr	r1, [pc, #52]	; (8004b70 <ethernetif_init+0x4c>)
 8004b3a:	480e      	ldr	r0, [pc, #56]	; (8004b74 <ethernetif_init+0x50>)
 8004b3c:	f014 f87c 	bl	8018c38 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2273      	movs	r2, #115	; 0x73
 8004b44:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2274      	movs	r2, #116	; 0x74
 8004b4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <ethernetif_init+0x54>)
 8004b54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <ethernetif_init+0x58>)
 8004b5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fdd3 	bl	8004708 <low_level_init>

  return ERR_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	0801a1c0 	.word	0x0801a1c0
 8004b70:	0801a1dc 	.word	0x0801a1dc
 8004b74:	0801a1ec 	.word	0x0801a1ec
 8004b78:	0801690d 	.word	0x0801690d
 8004b7c:	08004975 	.word	0x08004975

08004b80 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <pbuf_free_custom+0x34>)
 8004b90:	f007 fa4c 	bl	800c02c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <pbuf_free_custom+0x38>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <pbuf_free_custom+0x38>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <pbuf_free_custom+0x3c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fbf4 	bl	8005394 <osSemaphoreRelease>
  }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	0801dcc4 	.word	0x0801dcc4
 8004bb8:	20005204 	.word	0x20005204
 8004bbc:	20005348 	.word	0x20005348

08004bc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bc4:	f7fc fd24 	bl	8001610 <HAL_GetTick>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a59      	ldr	r2, [pc, #356]	; (8004d54 <HAL_ETH_MspInit+0x184>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f040 80ac 	bne.w	8004d4c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	4b57      	ldr	r3, [pc, #348]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a56      	ldr	r2, [pc, #344]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	4b50      	ldr	r3, [pc, #320]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c20:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	4a48      	ldr	r2, [pc, #288]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3c:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	4a41      	ldr	r2, [pc, #260]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	6313      	str	r3, [r2, #48]	; 0x30
 8004c58:	4b3f      	ldr	r3, [pc, #252]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6313      	str	r3, [r2, #48]	; 0x30
 8004c74:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4a33      	ldr	r2, [pc, #204]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c90:	4b31      	ldr	r3, [pc, #196]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004caa:	6313      	str	r3, [r2, #48]	; 0x30
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_ETH_MspInit+0x188>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004cb8:	2332      	movs	r3, #50	; 0x32
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cc8:	230b      	movs	r3, #11
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4822      	ldr	r0, [pc, #136]	; (8004d5c <HAL_ETH_MspInit+0x18c>)
 8004cd4:	f7fd fffe 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004cd8:	2386      	movs	r3, #134	; 0x86
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ce8:	230b      	movs	r3, #11
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	481b      	ldr	r0, [pc, #108]	; (8004d60 <HAL_ETH_MspInit+0x190>)
 8004cf4:	f7fd ffee 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d06:	2303      	movs	r3, #3
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d0a:	230b      	movs	r3, #11
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d12:	4619      	mov	r1, r3
 8004d14:	4813      	ldr	r0, [pc, #76]	; (8004d64 <HAL_ETH_MspInit+0x194>)
 8004d16:	f7fd ffdd 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004d1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d20:	2302      	movs	r3, #2
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d2c:	230b      	movs	r3, #11
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d34:	4619      	mov	r1, r3
 8004d36:	480c      	ldr	r0, [pc, #48]	; (8004d68 <HAL_ETH_MspInit+0x198>)
 8004d38:	f7fd ffcc 	bl	8002cd4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2105      	movs	r1, #5
 8004d40:	203d      	movs	r0, #61	; 0x3d
 8004d42:	f7fc fd4d 	bl	80017e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004d46:	203d      	movs	r0, #61	; 0x3d
 8004d48:	f7fc fd66 	bl	8001818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3738      	adds	r7, #56	; 0x38
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40028000 	.word	0x40028000
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40020800 	.word	0x40020800
 8004d60:	40020000 	.word	0x40020000
 8004d64:	40020400 	.word	0x40020400
 8004d68:	40021800 	.word	0x40021800

08004d6c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004d70:	4802      	ldr	r0, [pc, #8]	; (8004d7c <ETH_PHY_IO_Init+0x10>)
 8004d72:	f7fd fb47 	bl	8002404 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20005350 	.word	0x20005350

08004d80 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return 0;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	4807      	ldr	r0, [pc, #28]	; (8004dc0 <ETH_PHY_IO_ReadReg+0x30>)
 8004da4:	f7fd f996 	bl	80020d4 <HAL_ETH_ReadPHYRegister>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	e000      	b.n	8004db6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20005350 	.word	0x20005350

08004dc4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <ETH_PHY_IO_WriteReg+0x30>)
 8004dd8:	f7fd f9c7 	bl	800216a <HAL_ETH_WritePHYRegister>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004de2:	f04f 33ff 	mov.w	r3, #4294967295
 8004de6:	e000      	b.n	8004dea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20005350 	.word	0x20005350

08004df8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004dfc:	f7fc fc08 	bl	8001610 <HAL_GetTick>
 8004e00:	4603      	mov	r3, r0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b0a0      	sub	sp, #128	; 0x80
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e10:	f107 0308 	add.w	r3, r7, #8
 8004e14:	2264      	movs	r2, #100	; 0x64
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f014 f89d 	bl	8018f58 <memset>
  int32_t PHYLinkState = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e26:	2300      	movs	r3, #0
 8004e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e32:	483a      	ldr	r0, [pc, #232]	; (8004f1c <ethernet_link_thread+0x114>)
 8004e34:	f7fc fb2f 	bl	8001496 <LAN8742_GetLinkState>
 8004e38:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <ethernet_link_thread+0x5e>
 8004e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	dc09      	bgt.n	8004e66 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004e52:	4833      	ldr	r0, [pc, #204]	; (8004f20 <ethernet_link_thread+0x118>)
 8004e54:	f7fc fdfa 	bl	8001a4c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e5a:	f007 fb73 	bl	800c544 <netif_set_down>
    netif_set_link_down(netif);
 8004e5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e60:	f007 fbda 	bl	800c618 <netif_set_link_down>
 8004e64:	e055      	b.n	8004f12 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d14e      	bne.n	8004f12 <ethernet_link_thread+0x10a>
 8004e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	dd4b      	ble.n	8004f12 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e7c:	3b02      	subs	r3, #2
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d82a      	bhi.n	8004ed8 <ethernet_link_thread+0xd0>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <ethernet_link_thread+0x80>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004eab 	.word	0x08004eab
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ea2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ea8:	e017      	b.n	8004eda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eb2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004eb8:	e00f      	b.n	8004eda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ebe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ec8:	e007      	b.n	8004eda <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ed6:	e000      	b.n	8004eda <ethernet_link_thread+0xd2>
    default:
      break;
 8004ed8:	bf00      	nop
    }

    if(linkchanged)
 8004eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d018      	beq.n	8004f12 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	480e      	ldr	r0, [pc, #56]	; (8004f20 <ethernet_link_thread+0x118>)
 8004ee8:	f7fd f988 	bl	80021fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ef4:	f107 0308 	add.w	r3, r7, #8
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4809      	ldr	r0, [pc, #36]	; (8004f20 <ethernet_link_thread+0x118>)
 8004efc:	f7fd fa68 	bl	80023d0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004f00:	4807      	ldr	r0, [pc, #28]	; (8004f20 <ethernet_link_thread+0x118>)
 8004f02:	f7fc fd15 	bl	8001930 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004f06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f08:	f007 fab0 	bl	800c46c <netif_set_up>
      netif_set_link_up(netif);
 8004f0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f0e:	f007 fb4b 	bl	800c5a8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004f12:	2064      	movs	r0, #100	; 0x64
 8004f14:	f000 f90e 	bl	8005134 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f18:	e78b      	b.n	8004e32 <ethernet_link_thread+0x2a>
 8004f1a:	bf00      	nop
 8004f1c:	20005438 	.word	0x20005438
 8004f20:	20005350 	.word	0x20005350

08004f24 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f2c:	4812      	ldr	r0, [pc, #72]	; (8004f78 <HAL_ETH_RxAllocateCallback+0x54>)
 8004f2e:	f007 f809 	bl	800bf44 <memp_malloc_pool>
 8004f32:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f103 0220 	add.w	r2, r3, #32
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <HAL_ETH_RxAllocateCallback+0x58>)
 8004f48:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f52:	9201      	str	r2, [sp, #4]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2241      	movs	r2, #65	; 0x41
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f007 fd7f 	bl	800ca60 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004f62:	e005      	b.n	8004f70 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	0801dcc4 	.word	0x0801dcc4
 8004f7c:	08004b81 	.word	0x08004b81
 8004f80:	20005204 	.word	0x20005204

08004f84 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3b20      	subs	r3, #32
 8004fa2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2200      	movs	r2, #0
 8004fae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e003      	b.n	8004fce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e009      	b.n	8004ff0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	891a      	ldrh	r2, [r3, #8]
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f2      	bne.n	8004fdc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3724      	adds	r7, #36	; 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f007 fee1 	bl	800cdd4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	4603      	mov	r3, r0
 8005022:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800502c:	2b84      	cmp	r3, #132	; 0x84
 800502e:	d005      	beq.n	800503c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005030:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	3303      	adds	r3, #3
 800503a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	607b      	str	r3, [r7, #4]
  return(result);
 8005056:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005072:	f001 fd3b 	bl	8006aec <vTaskStartScheduler>
  
  return osOK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}

0800507c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005080:	f7ff ffe3 	bl	800504a <inHandlerMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800508a:	f001 fe53 	bl	8006d34 <xTaskGetTickCountFromISR>
 800508e:	4603      	mov	r3, r0
 8005090:	e002      	b.n	8005098 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005092:	f001 fe3f 	bl	8006d14 <xTaskGetTickCount>
 8005096:	4603      	mov	r3, r0
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}

0800509c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800509c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <osThreadCreate+0x54>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01c      	beq.n	80050f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685c      	ldr	r4, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691e      	ldr	r6, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ffa6 	bl	800501a <makeFreeRtosPriority>
 80050ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d8:	9202      	str	r2, [sp, #8]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	9100      	str	r1, [sp, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	4632      	mov	r2, r6
 80050e2:	4629      	mov	r1, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	f001 fb23 	bl	8006730 <xTaskCreateStatic>
 80050ea:	4603      	mov	r3, r0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e01c      	b.n	800512a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685c      	ldr	r4, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff88 	bl	800501a <makeFreeRtosPriority>
 800510a:	4602      	mov	r2, r0
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9200      	str	r2, [sp, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4632      	mov	r2, r6
 8005118:	4629      	mov	r1, r5
 800511a:	4620      	mov	r0, r4
 800511c:	f001 fb65 	bl	80067ea <xTaskCreate>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	e000      	b.n	800512c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005134 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <osDelay+0x16>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	e000      	b.n	800514c <osDelay+0x18>
 800514a:	2301      	movs	r3, #1
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fc99 	bl	8006a84 <vTaskDelay>
  
  return osOK;
 8005152:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	2001      	movs	r0, #1
 8005174:	f000 fc7d 	bl	8005a72 <xQueueCreateMutexStatic>
 8005178:	4603      	mov	r3, r0
 800517a:	e003      	b.n	8005184 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800517c:	2001      	movs	r0, #1
 800517e:	f000 fc60 	bl	8005a42 <xQueueCreateMutex>
 8005182:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <osMutexWait+0x18>
    return osErrorParameter;
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	e03a      	b.n	800521a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d103      	bne.n	80051b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e009      	b.n	80051cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <osMutexWait+0x40>
      ticks = 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80051cc:	f7ff ff3d 	bl	800504a <inHandlerMode>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	461a      	mov	r2, r3
 80051dc:	2100      	movs	r1, #0
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 f874 	bl	80062cc <xQueueReceiveFromISR>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <osMutexWait+0x62>
      return osErrorOS;
 80051ea:	23ff      	movs	r3, #255	; 0xff
 80051ec:	e015      	b.n	800521a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d011      	beq.n	8005218 <osMutexWait+0x8c>
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <osMutexWait+0x98>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	e008      	b.n	8005218 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 ff53 	bl	80060b4 <xQueueSemaphoreTake>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d001      	beq.n	8005218 <osMutexWait+0x8c>
    return osErrorOS;
 8005214:	23ff      	movs	r3, #255	; 0xff
 8005216:	e000      	b.n	800521a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005238:	f7ff ff07 	bl	800504a <inHandlerMode>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fdc6 	bl	8005dda <xQueueGiveFromISR>
 800524e:	4603      	mov	r3, r0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d001      	beq.n	8005258 <osMutexRelease+0x30>
      return osErrorOS;
 8005254:	23ff      	movs	r3, #255	; 0xff
 8005256:	e017      	b.n	8005288 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d013      	beq.n	8005286 <osMutexRelease+0x5e>
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <osMutexRelease+0x68>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	e00a      	b.n	8005286 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005270:	2300      	movs	r3, #0
 8005272:	2200      	movs	r2, #0
 8005274:	2100      	movs	r1, #0
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fc16 	bl	8005aa8 <xQueueGenericSend>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005282:	23ff      	movs	r3, #255	; 0xff
 8005284:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00f      	beq.n	80052c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10a      	bne.n	80052c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2203      	movs	r2, #3
 80052b2:	9200      	str	r2, [sp, #0]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2100      	movs	r1, #0
 80052b8:	2001      	movs	r0, #1
 80052ba:	f000 fad7 	bl	800586c <xQueueGenericCreateStatic>
 80052be:	4603      	mov	r3, r0
 80052c0:	e016      	b.n	80052f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e014      	b.n	80052f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d110      	bne.n	80052ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80052cc:	2203      	movs	r2, #3
 80052ce:	2100      	movs	r1, #0
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 fb43 	bl	800595c <xQueueGenericCreate>
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <osSemaphoreCreate+0x56>
 80052de:	2300      	movs	r3, #0
 80052e0:	2200      	movs	r2, #0
 80052e2:	2100      	movs	r1, #0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fbdf 	bl	8005aa8 <xQueueGenericSend>
      return sema;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	e000      	b.n	80052f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80052ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	e03a      	b.n	8005386 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d103      	bne.n	8005324 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e009      	b.n	8005338 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <osSemaphoreWait+0x40>
      ticks = 1;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005338:	f7ff fe87 	bl	800504a <inHandlerMode>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	461a      	mov	r2, r3
 8005348:	2100      	movs	r1, #0
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 ffbe 	bl	80062cc <xQueueReceiveFromISR>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d001      	beq.n	800535a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005356:	23ff      	movs	r3, #255	; 0xff
 8005358:	e015      	b.n	8005386 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <osSemaphoreWait+0x8c>
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <osSemaphoreWait+0x98>)
 8005362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	e008      	b.n	8005384 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fe9d 	bl	80060b4 <xQueueSemaphoreTake>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005380:	23ff      	movs	r3, #255	; 0xff
 8005382:	e000      	b.n	8005386 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80053a4:	f7ff fe51 	bl	800504a <inHandlerMode>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fd10 	bl	8005dda <xQueueGiveFromISR>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d001      	beq.n	80053c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80053c0:	23ff      	movs	r3, #255	; 0xff
 80053c2:	e017      	b.n	80053f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d013      	beq.n	80053f2 <osSemaphoreRelease+0x5e>
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <osSemaphoreRelease+0x68>)
 80053cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	e00a      	b.n	80053f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80053dc:	2300      	movs	r3, #0
 80053de:	2200      	movs	r2, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fb60 	bl	8005aa8 <xQueueGenericSend>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80053ee:	23ff      	movs	r3, #255	; 0xff
 80053f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005408:	f7ff fe1f 	bl	800504a <inHandlerMode>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005412:	2382      	movs	r3, #130	; 0x82
 8005414:	e003      	b.n	800541e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 f814 	bl	8006444 <vQueueDelete>

  return osOK; 
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005426:	b590      	push	{r4, r7, lr}
 8005428:	b085      	sub	sp, #20
 800542a:	af02      	add	r7, sp, #8
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <osMessageCreate+0x36>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2400      	movs	r4, #0
 8005452:	9400      	str	r4, [sp, #0]
 8005454:	f000 fa0a 	bl	800586c <xQueueGenericCreateStatic>
 8005458:	4603      	mov	r3, r0
 800545a:	e008      	b.n	800546e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	4619      	mov	r1, r3
 8005468:	f000 fa78 	bl	800595c <xQueueGenericCreate>
 800546c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
	...

08005478 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <osMessagePut+0x1e>
    ticks = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005496:	f7ff fdd8 	bl	800504a <inHandlerMode>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d018      	beq.n	80054d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054a0:	f107 0210 	add.w	r2, r7, #16
 80054a4:	f107 0108 	add.w	r1, r7, #8
 80054a8:	2300      	movs	r3, #0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fbfa 	bl	8005ca4 <xQueueGenericSendFromISR>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <osMessagePut+0x42>
      return osErrorOS;
 80054b6:	23ff      	movs	r3, #255	; 0xff
 80054b8:	e018      	b.n	80054ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d014      	beq.n	80054ea <osMessagePut+0x72>
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <osMessagePut+0x7c>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	e00b      	b.n	80054ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80054d2:	f107 0108 	add.w	r1, r7, #8
 80054d6:	2300      	movs	r3, #0
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fae4 	bl	8005aa8 <xQueueGenericSend>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d001      	beq.n	80054ea <osMessagePut+0x72>
      return osErrorOS;
 80054e6:	23ff      	movs	r3, #255	; 0xff
 80054e8:	e000      	b.n	80054ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b08b      	sub	sp, #44	; 0x2c
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	617b      	str	r3, [r7, #20]
    return event;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	461c      	mov	r4, r3
 800551a:	f107 0314 	add.w	r3, r7, #20
 800551e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005526:	e054      	b.n	80055d2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d103      	bne.n	8005540 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	e009      	b.n	8005554 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <osMessageGet+0x5c>
      ticks = 1;
 8005550:	2301      	movs	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005554:	f7ff fd79 	bl	800504a <inHandlerMode>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01c      	beq.n	8005598 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800555e:	f107 0220 	add.w	r2, r7, #32
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	68b8      	ldr	r0, [r7, #8]
 800556c:	f000 feae 	bl	80062cc <xQueueReceiveFromISR>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d102      	bne.n	800557c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005576:	2310      	movs	r3, #16
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e001      	b.n	8005580 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01d      	beq.n	80055c2 <osMessageGet+0xca>
 8005586:	4b15      	ldr	r3, [pc, #84]	; (80055dc <osMessageGet+0xe4>)
 8005588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	e014      	b.n	80055c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	3304      	adds	r3, #4
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	4619      	mov	r1, r3
 80055a2:	68b8      	ldr	r0, [r7, #8]
 80055a4:	f000 fca6 	bl	8005ef4 <xQueueReceive>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80055ae:	2310      	movs	r3, #16
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e006      	b.n	80055c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <osMessageGet+0xc6>
 80055ba:	2300      	movs	r3, #0
 80055bc:	e000      	b.n	80055c0 <osMessageGet+0xc8>
 80055be:	2340      	movs	r3, #64	; 0x40
 80055c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	461c      	mov	r4, r3
 80055c6:	f107 0314 	add.w	r3, r7, #20
 80055ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	372c      	adds	r7, #44	; 0x2c
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80055e8:	f7ff fd2f 	bl	800504a <inHandlerMode>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 ff08 	bl	8006408 <uxQueueMessagesWaitingFromISR>
 80055f8:	4603      	mov	r3, r0
 80055fa:	e003      	b.n	8005604 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fee5 	bl	80063cc <uxQueueMessagesWaiting>
 8005602:	4603      	mov	r3, r0
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005614:	f7ff fd19 	bl	800504a <inHandlerMode>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <osMessageDelete+0x16>
    return osErrorISR;
 800561e:	2382      	movs	r3, #130	; 0x82
 8005620:	e003      	b.n	800562a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ff0e 	bl	8006444 <vQueueDelete>

  return osOK; 
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f103 0208 	add.w	r2, r3, #8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f103 0208 	add.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 0208 	add.w	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ea:	d103      	bne.n	80056f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e00c      	b.n	800570e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3308      	adds	r3, #8
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e002      	b.n	8005702 <vListInsert+0x2e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	d2f6      	bcs.n	80056fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6852      	ldr	r2, [r2, #4]
 8005766:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	d103      	bne.n	800577a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057c6:	f002 f915 	bl	80079f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	22ff      	movs	r2, #255	; 0xff
 800580a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fbd3 	bl	8006fd4 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <xQueueGenericReset+0xcc>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	e009      	b.n	800585a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fef1 	bl	8005632 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff feec 	bl	8005632 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f002 f8fb 	bl	8007a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800585e:	2301      	movs	r3, #1
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <xQueueGenericCreateStatic+0x52>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <xQueueGenericCreateStatic+0x56>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueGenericCreateStatic+0x58>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	623b      	str	r3, [r7, #32]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <xQueueGenericCreateStatic+0x7e>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGenericCreateStatic+0x82>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericCreateStatic+0x84>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61fb      	str	r3, [r7, #28]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800590a:	2348      	movs	r3, #72	; 0x48
 800590c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b48      	cmp	r3, #72	; 0x48
 8005912:	d00a      	beq.n	800592a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61bb      	str	r3, [r7, #24]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800592a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800593e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f83f 	bl	80059d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005954:	4618      	mov	r0, r3
 8005956:	3730      	adds	r7, #48	; 0x30
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	3348      	adds	r3, #72	; 0x48
 8005994:	4618      	mov	r0, r3
 8005996:	f002 f94f 	bl	8007c38 <pvPortMalloc>
 800599a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d011      	beq.n	80059c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3348      	adds	r3, #72	; 0x48
 80059aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059b4:	79fa      	ldrb	r2, [r7, #7]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f805 	bl	80059d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059c6:	69bb      	ldr	r3, [r7, #24]
	}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059fe:	2101      	movs	r1, #1
 8005a00:	69b8      	ldr	r0, [r7, #24]
 8005a02:	f7ff fecb 	bl	800579c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2200      	movs	r2, #0
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f837 	bl	8005aa8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b086      	sub	sp, #24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4603      	mov	r3, r0
 8005a4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6939      	ldr	r1, [r7, #16]
 8005a5a:	6978      	ldr	r0, [r7, #20]
 8005a5c:	f7ff ff7e 	bl	800595c <xQueueGenericCreate>
 8005a60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff ffd3 	bl	8005a0e <prvInitialiseMutex>

		return xNewQueue;
 8005a68:	68fb      	ldr	r3, [r7, #12]
	}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b088      	sub	sp, #32
 8005a76:	af02      	add	r7, sp, #8
 8005a78:	4603      	mov	r3, r0
 8005a7a:	6039      	str	r1, [r7, #0]
 8005a7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6939      	ldr	r1, [r7, #16]
 8005a90:	6978      	ldr	r0, [r7, #20]
 8005a92:	f7ff feeb 	bl	800586c <xQueueGenericCreateStatic>
 8005a96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff ffb8 	bl	8005a0e <prvInitialiseMutex>

		return xNewQueue;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueGenericSend+0x32>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <xQueueGenericSend+0x40>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <xQueueGenericSend+0x44>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <xQueueGenericSend+0x46>
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <xQueueGenericSend+0x60>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x6e>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <xQueueGenericSend+0x72>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueGenericSend+0x74>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	623b      	str	r3, [r7, #32]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b36:	f001 fc0d 	bl	8007354 <xTaskGetSchedulerState>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <xQueueGenericSend+0x9e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSend+0xa2>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSend+0xa4>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61fb      	str	r3, [r7, #28]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b66:	f001 ff45 	bl	80079f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <xQueueGenericSend+0xd4>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d129      	bne.n	8005bd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b82:	f000 fc9a 	bl	80064ba <prvCopyDataToQueue>
 8005b86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 fa1d 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ba0:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <xQueueGenericSend+0x1f8>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	e00a      	b.n	8005bc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <xQueueGenericSend+0x1f8>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bc8:	f001 ff44 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e063      	b.n	8005c98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bd6:	f001 ff3d 	bl	8007a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e05c      	b.n	8005c98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be4:	f107 0314 	add.w	r3, r7, #20
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 fa55 	bl	8007098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf2:	f001 ff2f 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bf6:	f000 ffe3 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfa:	f001 fefb 	bl	80079f4 <vPortEnterCritical>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d103      	bne.n	8005c14 <xQueueGenericSend+0x16c>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x182>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2a:	f001 ff13 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c2e:	1d3a      	adds	r2, r7, #4
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fa44 	bl	80070c4 <xTaskCheckForTimeOut>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d124      	bne.n	8005c8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c44:	f000 fd31 	bl	80066aa <prvIsQueueFull>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	3310      	adds	r3, #16
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f998 	bl	8006f8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c5e:	f000 fcbc 	bl	80065da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c62:	f000 ffbb 	bl	8006bdc <xTaskResumeAll>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f47f af7c 	bne.w	8005b66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <xQueueGenericSend+0x1f8>)
 8005c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	e772      	b.n	8005b66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c82:	f000 fcaa 	bl	80065da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c86:	f000 ffa9 	bl	8006bdc <xTaskResumeAll>
 8005c8a:	e76c      	b.n	8005b66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c8e:	f000 fca4 	bl	80065da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c92:	f000 ffa3 	bl	8006bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3738      	adds	r7, #56	; 0x38
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b090      	sub	sp, #64	; 0x40
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <xQueueGenericSendFromISR+0x3c>
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <xQueueGenericSendFromISR+0x40>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <xQueueGenericSendFromISR+0x42>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d103      	bne.n	8005d0e <xQueueGenericSendFromISR+0x6a>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <xQueueGenericSendFromISR+0x6e>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueGenericSendFromISR+0x70>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d2e:	f001 ff43 	bl	8007bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d32:	f3ef 8211 	mrs	r2, BASEPRI
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61fa      	str	r2, [r7, #28]
 8005d48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d302      	bcc.n	8005d60 <xQueueGenericSendFromISR+0xbc>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d12f      	bne.n	8005dc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d76:	f000 fba0 	bl	80064ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d112      	bne.n	8005daa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d016      	beq.n	8005dba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	3324      	adds	r3, #36	; 0x24
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f91f 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00e      	beq.n	8005dba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e007      	b.n	8005dba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dae:	3301      	adds	r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	b25a      	sxtb	r2, r3
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005dbe:	e001      	b.n	8005dc4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3740      	adds	r7, #64	; 0x40
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b08e      	sub	sp, #56	; 0x38
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	623b      	str	r3, [r7, #32]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61fb      	str	r3, [r7, #28]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <xQueueGiveFromISR+0x58>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <xQueueGiveFromISR+0x5c>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueGiveFromISR+0x5e>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	61bb      	str	r3, [r7, #24]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e52:	f001 feb1 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005e56:	f3ef 8211 	mrs	r2, BASEPRI
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	617a      	str	r2, [r7, #20]
 8005e6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005e6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d22b      	bcs.n	8005eda <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d112      	bne.n	8005ec4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d016      	beq.n	8005ed4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	3324      	adds	r3, #36	; 0x24
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 f892 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00e      	beq.n	8005ed4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e007      	b.n	8005ed4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ec8:	3301      	adds	r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	b25a      	sxtb	r2, r3
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed8:	e001      	b.n	8005ede <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f383 8811 	msr	BASEPRI, r3
}
 8005ee8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3738      	adds	r7, #56	; 0x38
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <xQueueReceive+0x30>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	623b      	str	r3, [r7, #32]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <xQueueReceive+0x3e>
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <xQueueReceive+0x42>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <xQueueReceive+0x44>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xQueueReceive+0x5e>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	61fb      	str	r3, [r7, #28]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f52:	f001 f9ff 	bl	8007354 <xTaskGetSchedulerState>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <xQueueReceive+0x6e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <xQueueReceive+0x72>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <xQueueReceive+0x74>
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <xQueueReceive+0x8e>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	61bb      	str	r3, [r7, #24]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f82:	f001 fd37 	bl	80079f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01f      	beq.n	8005fd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f96:	f000 fafa 	bl	800658e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1e5a      	subs	r2, r3, #1
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00f      	beq.n	8005fca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	3310      	adds	r3, #16
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f810 	bl	8006fd4 <xTaskRemoveFromEventList>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fba:	4b3d      	ldr	r3, [pc, #244]	; (80060b0 <xQueueReceive+0x1bc>)
 8005fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fca:	f001 fd43 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e069      	b.n	80060a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fd8:	f001 fd3c 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e062      	b.n	80060a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fe6:	f107 0310 	add.w	r3, r7, #16
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f854 	bl	8007098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ff4:	f001 fd2e 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ff8:	f000 fde2 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ffc:	f001 fcfa 	bl	80079f4 <vPortEnterCritical>
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006006:	b25b      	sxtb	r3, r3
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d103      	bne.n	8006016 <xQueueReceive+0x122>
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	b25b      	sxtb	r3, r3
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d103      	bne.n	800602c <xQueueReceive+0x138>
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800602c:	f001 fd12 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006030:	1d3a      	adds	r2, r7, #4
 8006032:	f107 0310 	add.w	r3, r7, #16
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f001 f843 	bl	80070c4 <xTaskCheckForTimeOut>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d123      	bne.n	800608c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006046:	f000 fb1a 	bl	800667e <prvIsQueueEmpty>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d017      	beq.n	8006080 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	3324      	adds	r3, #36	; 0x24
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff97 	bl	8006f8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800605e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006060:	f000 fabb 	bl	80065da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006064:	f000 fdba 	bl	8006bdc <xTaskResumeAll>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d189      	bne.n	8005f82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <xQueueReceive+0x1bc>)
 8006070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	e780      	b.n	8005f82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006082:	f000 faaa 	bl	80065da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006086:	f000 fda9 	bl	8006bdc <xTaskResumeAll>
 800608a:	e77a      	b.n	8005f82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800608c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800608e:	f000 faa4 	bl	80065da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006092:	f000 fda3 	bl	8006bdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006098:	f000 faf1 	bl	800667e <prvIsQueueEmpty>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f43f af6f 	beq.w	8005f82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	; 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08e      	sub	sp, #56	; 0x38
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	623b      	str	r3, [r7, #32]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61fb      	str	r3, [r7, #28]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006104:	f001 f926 	bl	8007354 <xTaskGetSchedulerState>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <xQueueSemaphoreTake+0x60>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <xQueueSemaphoreTake+0x64>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <xQueueSemaphoreTake+0x66>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	61bb      	str	r3, [r7, #24]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006134:	f001 fc5e 	bl	80079f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	d024      	beq.n	800618e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	1e5a      	subs	r2, r3, #1
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006154:	f001 faa6 	bl	80076a4 <pvTaskIncrementMutexHeldCount>
 8006158:	4602      	mov	r2, r0
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00f      	beq.n	8006186 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	3310      	adds	r3, #16
 800616a:	4618      	mov	r0, r3
 800616c:	f000 ff32 	bl	8006fd4 <xTaskRemoveFromEventList>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006176:	4b54      	ldr	r3, [pc, #336]	; (80062c8 <xQueueSemaphoreTake+0x214>)
 8006178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006186:	f001 fc65 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 800618a:	2301      	movs	r3, #1
 800618c:	e097      	b.n	80062be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d111      	bne.n	80061b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	617b      	str	r3, [r7, #20]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80061b0:	f001 fc50 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e082      	b.n	80062be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 ff68 	bl	8007098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061cc:	f001 fc42 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061d0:	f000 fcf6 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061d4:	f001 fc0e 	bl	80079f4 <vPortEnterCritical>
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061de:	b25b      	sxtb	r3, r3
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d103      	bne.n	80061ee <xQueueSemaphoreTake+0x13a>
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f4:	b25b      	sxtb	r3, r3
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d103      	bne.n	8006204 <xQueueSemaphoreTake+0x150>
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006204:	f001 fc26 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006208:	463a      	mov	r2, r7
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f000 ff57 	bl	80070c4 <xTaskCheckForTimeOut>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d132      	bne.n	8006282 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800621c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800621e:	f000 fa2e 	bl	800667e <prvIsQueueEmpty>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d026      	beq.n	8006276 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006230:	f001 fbe0 	bl	80079f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f001 f8a9 	bl	8007390 <xTaskPriorityInherit>
 800623e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006240:	f001 fc08 	bl	8007a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fe9d 	bl	8006f8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006254:	f000 f9c1 	bl	80065da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006258:	f000 fcc0 	bl	8006bdc <xTaskResumeAll>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	f47f af68 	bne.w	8006134 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006264:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <xQueueSemaphoreTake+0x214>)
 8006266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	e75e      	b.n	8006134 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006278:	f000 f9af 	bl	80065da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800627c:	f000 fcae 	bl	8006bdc <xTaskResumeAll>
 8006280:	e758      	b.n	8006134 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006284:	f000 f9a9 	bl	80065da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006288:	f000 fca8 	bl	8006bdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800628e:	f000 f9f6 	bl	800667e <prvIsQueueEmpty>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	f43f af4d 	beq.w	8006134 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80062a0:	f001 fba8 	bl	80079f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80062a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062a6:	f000 f8f0 	bl	800648a <prvGetDisinheritPriorityAfterTimeout>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f968 	bl	8007588 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80062b8:	f001 fbcc 	bl	8007a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3738      	adds	r7, #56	; 0x38
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08e      	sub	sp, #56	; 0x38
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	623b      	str	r3, [r7, #32]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <xQueueReceiveFromISR+0x3a>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xQueueReceiveFromISR+0x3e>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <xQueueReceiveFromISR+0x40>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	61fb      	str	r3, [r7, #28]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006326:	f001 fc47 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 800632a:	f3ef 8211 	mrs	r2, BASEPRI
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	61ba      	str	r2, [r7, #24]
 8006340:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006342:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02f      	beq.n	80063b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006360:	f000 f915 	bl	800658e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800636c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d112      	bne.n	800639c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	3310      	adds	r3, #16
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fe26 	bl	8006fd4 <xTaskRemoveFromEventList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00e      	beq.n	80063ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e007      	b.n	80063ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a0:	3301      	adds	r3, #1
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	b25a      	sxtb	r2, r3
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80063ac:	2301      	movs	r3, #1
 80063ae:	637b      	str	r3, [r7, #52]	; 0x34
 80063b0:	e001      	b.n	80063b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f383 8811 	msr	BASEPRI, r3
}
 80063c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3738      	adds	r7, #56	; 0x38
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60bb      	str	r3, [r7, #8]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80063f0:	f001 fb00 	bl	80079f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80063fa:	f001 fb2b 	bl	8007a54 <vPortExitCritical>

	return uxReturn;
 80063fe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	60fb      	str	r3, [r7, #12]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006436:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <vQueueDelete+0x28>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f935 	bl	80066dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f001 fca7 	bl	8007dd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	d006      	beq.n	80064a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1c3 0307 	rsb	r3, r3, #7
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e001      	b.n	80064ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064ac:	68fb      	ldr	r3, [r7, #12]
	}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10d      	bne.n	80064f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d14d      	bne.n	800657c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 ffc9 	bl	800747c <xTaskPriorityDisinherit>
 80064ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	e043      	b.n	800657c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d119      	bne.n	800652e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6858      	ldr	r0, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	461a      	mov	r2, r3
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	f012 fe87 	bl	8019218 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	441a      	add	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	d32b      	bcc.n	800657c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	e026      	b.n	800657c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	68d8      	ldr	r0, [r3, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	461a      	mov	r2, r3
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	f012 fe6d 	bl	8019218 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	425b      	negs	r3, r3
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d207      	bcs.n	800656a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	425b      	negs	r3, r3
 8006564:	441a      	add	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d105      	bne.n	800657c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3b01      	subs	r3, #1
 800657a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006584:	697b      	ldr	r3, [r7, #20]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d018      	beq.n	80065d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	441a      	add	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d303      	bcc.n	80065c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68d9      	ldr	r1, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	461a      	mov	r2, r3
 80065cc:	6838      	ldr	r0, [r7, #0]
 80065ce:	f012 fe23 	bl	8019218 <memcpy>
	}
}
 80065d2:	bf00      	nop
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065e2:	f001 fa07 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ee:	e011      	b.n	8006614 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d012      	beq.n	800661e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3324      	adds	r3, #36	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fce9 	bl	8006fd4 <xTaskRemoveFromEventList>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006608:	f000 fdbe 	bl	8007188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	3b01      	subs	r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	dce9      	bgt.n	80065f0 <prvUnlockQueue+0x16>
 800661c:	e000      	b.n	8006620 <prvUnlockQueue+0x46>
					break;
 800661e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006628:	f001 fa14 	bl	8007a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800662c:	f001 f9e2 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006636:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006638:	e011      	b.n	800665e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d012      	beq.n	8006668 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3310      	adds	r3, #16
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fcc4 	bl	8006fd4 <xTaskRemoveFromEventList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006652:	f000 fd99 	bl	8007188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	3b01      	subs	r3, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800665e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	dce9      	bgt.n	800663a <prvUnlockQueue+0x60>
 8006666:	e000      	b.n	800666a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006668:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	22ff      	movs	r2, #255	; 0xff
 800666e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006672:	f001 f9ef 	bl	8007a54 <vPortExitCritical>
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006686:	f001 f9b5 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e001      	b.n	800669c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800669c:	f001 f9da 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 80066a0:	68fb      	ldr	r3, [r7, #12]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b2:	f001 f99f 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	429a      	cmp	r2, r3
 80066c0:	d102      	bne.n	80066c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e001      	b.n	80066cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066cc:	f001 f9c2 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	e016      	b.n	8006718 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80066ea:	4a10      	ldr	r2, [pc, #64]	; (800672c <vQueueUnregisterQueue+0x50>)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4413      	add	r3, r2
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d10b      	bne.n	8006712 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80066fa:	4a0c      	ldr	r2, [pc, #48]	; (800672c <vQueueUnregisterQueue+0x50>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2100      	movs	r1, #0
 8006700:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006704:	4a09      	ldr	r2, [pc, #36]	; (800672c <vQueueUnregisterQueue+0x50>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	2200      	movs	r2, #0
 800670e:	605a      	str	r2, [r3, #4]
				break;
 8006710:	e006      	b.n	8006720 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b07      	cmp	r3, #7
 800671c:	d9e5      	bls.n	80066ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20005458 	.word	0x20005458

08006730 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af04      	add	r7, sp, #16
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800673e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	623b      	str	r3, [r7, #32]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xTaskCreateStatic+0x46>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	61fb      	str	r3, [r7, #28]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006776:	23a0      	movs	r3, #160	; 0xa0
 8006778:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2ba0      	cmp	r3, #160	; 0xa0
 800677e:	d00a      	beq.n	8006796 <xTaskCreateStatic+0x66>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61bb      	str	r3, [r7, #24]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006796:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01e      	beq.n	80067dc <xTaskCreateStatic+0xac>
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01b      	beq.n	80067dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067b6:	2300      	movs	r3, #0
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	9302      	str	r3, [sp, #8]
 80067be:	f107 0314 	add.w	r3, r7, #20
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f850 	bl	8006874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067d6:	f000 f8eb 	bl	80069b0 <prvAddNewTaskToReadyList>
 80067da:	e001      	b.n	80067e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067e0:	697b      	ldr	r3, [r7, #20]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3728      	adds	r7, #40	; 0x28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b08c      	sub	sp, #48	; 0x30
 80067ee:	af04      	add	r7, sp, #16
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fa1a 	bl	8007c38 <pvPortMalloc>
 8006804:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800680c:	20a0      	movs	r0, #160	; 0xa0
 800680e:	f001 fa13 	bl	8007c38 <pvPortMalloc>
 8006812:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
 8006820:	e005      	b.n	800682e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f001 fad4 	bl	8007dd0 <vPortFree>
 8006828:	e001      	b.n	800682e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d017      	beq.n	8006864 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800683c:	88fa      	ldrh	r2, [r7, #6]
 800683e:	2300      	movs	r3, #0
 8006840:	9303      	str	r3, [sp, #12]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f80e 	bl	8006874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006858:	69f8      	ldr	r0, [r7, #28]
 800685a:	f000 f8a9 	bl	80069b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800685e:	2301      	movs	r3, #1
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e002      	b.n	800686a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006864:	f04f 33ff 	mov.w	r3, #4294967295
 8006868:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800686a:	69bb      	ldr	r3, [r7, #24]
	}
 800686c:	4618      	mov	r0, r3
 800686e:	3720      	adds	r7, #32
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800688c:	3b01      	subs	r3, #1
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	617b      	str	r3, [r7, #20]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01f      	beq.n	8006902 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e012      	b.n	80068ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	7819      	ldrb	r1, [r3, #0]
 80068d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	3334      	adds	r3, #52	; 0x34
 80068d8:	460a      	mov	r2, r1
 80068da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	3301      	adds	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d9e9      	bls.n	80068c8 <prvInitialiseNewTask+0x54>
 80068f4:	e000      	b.n	80068f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80068f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006900:	e003      	b.n	800690a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	2b06      	cmp	r3, #6
 800690e:	d901      	bls.n	8006914 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006910:	2306      	movs	r3, #6
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800691e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	2200      	movs	r2, #0
 8006924:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	3304      	adds	r3, #4
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fea1 	bl	8005672 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	3318      	adds	r3, #24
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fe9c 	bl	8005672 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	f1c3 0207 	rsb	r2, r3, #7
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	2200      	movs	r2, #0
 800695c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	334c      	adds	r3, #76	; 0x4c
 8006964:	224c      	movs	r2, #76	; 0x4c
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f012 faf5 	bl	8018f58 <memset>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	4a0c      	ldr	r2, [pc, #48]	; (80069a4 <prvInitialiseNewTask+0x130>)
 8006972:	651a      	str	r2, [r3, #80]	; 0x50
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <prvInitialiseNewTask+0x134>)
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	4a0b      	ldr	r2, [pc, #44]	; (80069ac <prvInitialiseNewTask+0x138>)
 800697e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	69b8      	ldr	r0, [r7, #24]
 8006986:	f000 ff07 	bl	8007798 <pxPortInitialiseStack>
 800698a:	4602      	mov	r2, r0
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699c:	bf00      	nop
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20011344 	.word	0x20011344
 80069a8:	200113ac 	.word	0x200113ac
 80069ac:	20011414 	.word	0x20011414

080069b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069b8:	f001 f81c 	bl	80079f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069bc:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <prvAddNewTaskToReadyList+0xb8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	4a29      	ldr	r2, [pc, #164]	; (8006a68 <prvAddNewTaskToReadyList+0xb8>)
 80069c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069c6:	4b29      	ldr	r3, [pc, #164]	; (8006a6c <prvAddNewTaskToReadyList+0xbc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ce:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <prvAddNewTaskToReadyList+0xbc>)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069d4:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <prvAddNewTaskToReadyList+0xb8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d110      	bne.n	80069fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069dc:	f000 fbf8 	bl	80071d0 <prvInitialiseTaskLists>
 80069e0:	e00d      	b.n	80069fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <prvAddNewTaskToReadyList+0xc0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069ea:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <prvAddNewTaskToReadyList+0xbc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d802      	bhi.n	80069fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <prvAddNewTaskToReadyList+0xbc>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <prvAddNewTaskToReadyList+0xc4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <prvAddNewTaskToReadyList+0xc4>)
 8006a06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <prvAddNewTaskToReadyList+0xc8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <prvAddNewTaskToReadyList+0xc8>)
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <prvAddNewTaskToReadyList+0xcc>)
 8006a28:	441a      	add	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe fe2b 	bl	800568c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a36:	f001 f80d 	bl	8007a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <prvAddNewTaskToReadyList+0xc0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00e      	beq.n	8006a60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvAddNewTaskToReadyList+0xbc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d207      	bcs.n	8006a60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <prvAddNewTaskToReadyList+0xd0>)
 8006a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20005598 	.word	0x20005598
 8006a6c:	20005498 	.word	0x20005498
 8006a70:	200055a4 	.word	0x200055a4
 8006a74:	200055b4 	.word	0x200055b4
 8006a78:	200055a0 	.word	0x200055a0
 8006a7c:	2000549c 	.word	0x2000549c
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d017      	beq.n	8006ac6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a96:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <vTaskDelay+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <vTaskDelay+0x30>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ab4:	f000 f884 	bl	8006bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ab8:	2100      	movs	r1, #0
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fe06 	bl	80076cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ac0:	f000 f88c 	bl	8006bdc <xTaskResumeAll>
 8006ac4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d107      	bne.n	8006adc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <vTaskDelay+0x64>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200055c0 	.word	0x200055c0
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006afa:	463a      	mov	r2, r7
 8006afc:	1d39      	adds	r1, r7, #4
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7f9 fd5a 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	9202      	str	r2, [sp, #8]
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	460a      	mov	r2, r1
 8006b1a:	4921      	ldr	r1, [pc, #132]	; (8006ba0 <vTaskStartScheduler+0xb4>)
 8006b1c:	4821      	ldr	r0, [pc, #132]	; (8006ba4 <vTaskStartScheduler+0xb8>)
 8006b1e:	f7ff fe07 	bl	8006730 <xTaskCreateStatic>
 8006b22:	4603      	mov	r3, r0
 8006b24:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <vTaskStartScheduler+0xbc>)
 8006b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b28:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <vTaskStartScheduler+0xbc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e001      	b.n	8006b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d11b      	bne.n	8006b78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <vTaskStartScheduler+0xc0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	334c      	adds	r3, #76	; 0x4c
 8006b5a:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <vTaskStartScheduler+0xc4>)
 8006b5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b5e:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <vTaskStartScheduler+0xc8>)
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <vTaskStartScheduler+0xcc>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b6c:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <vTaskStartScheduler+0xd0>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b72:	f000 fe9d 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b76:	e00e      	b.n	8006b96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d10a      	bne.n	8006b96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <vTaskStartScheduler+0xa8>
}
 8006b96:	bf00      	nop
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	0801a214 	.word	0x0801a214
 8006ba4:	080071a1 	.word	0x080071a1
 8006ba8:	200055bc 	.word	0x200055bc
 8006bac:	20005498 	.word	0x20005498
 8006bb0:	2000008c 	.word	0x2000008c
 8006bb4:	200055b8 	.word	0x200055b8
 8006bb8:	200055a4 	.word	0x200055a4
 8006bbc:	2000559c 	.word	0x2000559c

08006bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <vTaskSuspendAll+0x18>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <vTaskSuspendAll+0x18>)
 8006bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	200055c0 	.word	0x200055c0

08006bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	603b      	str	r3, [r7, #0]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c08:	f000 fef4 	bl	80079f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c0c:	4b38      	ldr	r3, [pc, #224]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	4a37      	ldr	r2, [pc, #220]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d161      	bne.n	8006ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <xTaskResumeAll+0x118>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d05d      	beq.n	8006ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c26:	e02e      	b.n	8006c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c28:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <xTaskResumeAll+0x11c>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3318      	adds	r3, #24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe fd86 	bl	8005746 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd81 	bl	8005746 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	2201      	movs	r2, #1
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <xTaskResumeAll+0x120>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <xTaskResumeAll+0x120>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4a27      	ldr	r2, [pc, #156]	; (8006d00 <xTaskResumeAll+0x124>)
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe fd0d 	bl	800568c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <xTaskResumeAll+0x128>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <xTaskResumeAll+0x11c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1cc      	bne.n	8006c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c94:	f000 fb3e 	bl	8007314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTaskResumeAll+0x130>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d010      	beq.n	8006cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ca4:	f000 f858 	bl	8006d58 <xTaskIncrementTick>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006cae:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f1      	bne.n	8006ca4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <xTaskResumeAll+0x130>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <xTaskResumeAll+0x134>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f000 feb7 	bl	8007a54 <vPortExitCritical>

	return xAlreadyYielded;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200055c0 	.word	0x200055c0
 8006cf4:	20005598 	.word	0x20005598
 8006cf8:	20005558 	.word	0x20005558
 8006cfc:	200055a0 	.word	0x200055a0
 8006d00:	2000549c 	.word	0x2000549c
 8006d04:	20005498 	.word	0x20005498
 8006d08:	200055ac 	.word	0x200055ac
 8006d0c:	200055a8 	.word	0x200055a8
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <xTaskGetTickCount+0x1c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000559c 	.word	0x2000559c

08006d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d3a:	f000 ff3d 	bl	8007bb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d42:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <xTaskGetTickCountFromISR+0x20>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d48:	683b      	ldr	r3, [r7, #0]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2000559c 	.word	0x2000559c

08006d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d62:	4b4e      	ldr	r3, [pc, #312]	; (8006e9c <xTaskIncrementTick+0x144>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 808e 	bne.w	8006e88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ea0 <xTaskIncrementTick+0x148>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d74:	4a4a      	ldr	r2, [pc, #296]	; (8006ea0 <xTaskIncrementTick+0x148>)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d120      	bne.n	8006dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d80:	4b48      	ldr	r3, [pc, #288]	; (8006ea4 <xTaskIncrementTick+0x14c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	603b      	str	r3, [r7, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <xTaskIncrementTick+0x46>
 8006da0:	4b40      	ldr	r3, [pc, #256]	; (8006ea4 <xTaskIncrementTick+0x14c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	4b40      	ldr	r3, [pc, #256]	; (8006ea8 <xTaskIncrementTick+0x150>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3e      	ldr	r2, [pc, #248]	; (8006ea4 <xTaskIncrementTick+0x14c>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	4a3e      	ldr	r2, [pc, #248]	; (8006ea8 <xTaskIncrementTick+0x150>)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4b3d      	ldr	r3, [pc, #244]	; (8006eac <xTaskIncrementTick+0x154>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a3c      	ldr	r2, [pc, #240]	; (8006eac <xTaskIncrementTick+0x154>)
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f000 faa9 	bl	8007314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dc2:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <xTaskIncrementTick+0x158>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d348      	bcc.n	8006e5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dcc:	4b35      	ldr	r3, [pc, #212]	; (8006ea4 <xTaskIncrementTick+0x14c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd6:	4b36      	ldr	r3, [pc, #216]	; (8006eb0 <xTaskIncrementTick+0x158>)
 8006dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ddc:	601a      	str	r2, [r3, #0]
					break;
 8006dde:	e03e      	b.n	8006e5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <xTaskIncrementTick+0x14c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d203      	bcs.n	8006e00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006df8:	4a2d      	ldr	r2, [pc, #180]	; (8006eb0 <xTaskIncrementTick+0x158>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dfe:	e02e      	b.n	8006e5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe fc9e 	bl	8005746 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	3318      	adds	r3, #24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fc95 	bl	8005746 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	2201      	movs	r2, #1
 8006e22:	409a      	lsls	r2, r3
 8006e24:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <xTaskIncrementTick+0x15c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <xTaskIncrementTick+0x15c>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <xTaskIncrementTick+0x160>)
 8006e3c:	441a      	add	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7fe fc21 	bl	800568c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <xTaskIncrementTick+0x164>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d3b9      	bcc.n	8006dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e5c:	e7b6      	b.n	8006dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <xTaskIncrementTick+0x164>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4914      	ldr	r1, [pc, #80]	; (8006eb8 <xTaskIncrementTick+0x160>)
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d901      	bls.n	8006e7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <xTaskIncrementTick+0x168>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e004      	b.n	8006e92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e88:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <xTaskIncrementTick+0x16c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <xTaskIncrementTick+0x16c>)
 8006e90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e92:	697b      	ldr	r3, [r7, #20]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	200055c0 	.word	0x200055c0
 8006ea0:	2000559c 	.word	0x2000559c
 8006ea4:	20005550 	.word	0x20005550
 8006ea8:	20005554 	.word	0x20005554
 8006eac:	200055b0 	.word	0x200055b0
 8006eb0:	200055b8 	.word	0x200055b8
 8006eb4:	200055a0 	.word	0x200055a0
 8006eb8:	2000549c 	.word	0x2000549c
 8006ebc:	20005498 	.word	0x20005498
 8006ec0:	200055ac 	.word	0x200055ac
 8006ec4:	200055a8 	.word	0x200055a8

08006ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <vTaskSwitchContext+0xac>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ed6:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <vTaskSwitchContext+0xb0>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006edc:	e044      	b.n	8006f68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006ede:	4b26      	ldr	r3, [pc, #152]	; (8006f78 <vTaskSwitchContext+0xb0>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <vTaskSwitchContext+0xb4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	fab3 f383 	clz	r3, r3
 8006ef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	f1c3 031f 	rsb	r3, r3, #31
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	4921      	ldr	r1, [pc, #132]	; (8006f80 <vTaskSwitchContext+0xb8>)
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vTaskSwitchContext+0x5a>
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <vTaskSwitchContext+0xb8>)
 8006f30:	4413      	add	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3308      	adds	r3, #8
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d104      	bne.n	8006f54 <vTaskSwitchContext+0x8c>
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <vTaskSwitchContext+0xbc>)
 8006f5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <vTaskSwitchContext+0xbc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	334c      	adds	r3, #76	; 0x4c
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <vTaskSwitchContext+0xc0>)
 8006f66:	6013      	str	r3, [r2, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	200055c0 	.word	0x200055c0
 8006f78:	200055ac 	.word	0x200055ac
 8006f7c:	200055a0 	.word	0x200055a0
 8006f80:	2000549c 	.word	0x2000549c
 8006f84:	20005498 	.word	0x20005498
 8006f88:	2000008c 	.word	0x2000008c

08006f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60fb      	str	r3, [r7, #12]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <vTaskPlaceOnEventList+0x44>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fe fb8a 	bl	80056d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f000 fb82 	bl	80076cc <prvAddCurrentTaskToDelayedList>
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20005498 	.word	0x20005498

08006fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3318      	adds	r3, #24
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fb9e 	bl	8005746 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <xTaskRemoveFromEventList+0xac>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d11c      	bne.n	800704c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fb95 	bl	8005746 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	2201      	movs	r2, #1
 8007022:	409a      	lsls	r2, r3
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <xTaskRemoveFromEventList+0xb0>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	4a16      	ldr	r2, [pc, #88]	; (8007084 <xTaskRemoveFromEventList+0xb0>)
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4a13      	ldr	r2, [pc, #76]	; (8007088 <xTaskRemoveFromEventList+0xb4>)
 800703c:	441a      	add	r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4610      	mov	r0, r2
 8007046:	f7fe fb21 	bl	800568c <vListInsertEnd>
 800704a:	e005      	b.n	8007058 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	3318      	adds	r3, #24
 8007050:	4619      	mov	r1, r3
 8007052:	480e      	ldr	r0, [pc, #56]	; (800708c <xTaskRemoveFromEventList+0xb8>)
 8007054:	f7fe fb1a 	bl	800568c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <xTaskRemoveFromEventList+0xbc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	429a      	cmp	r2, r3
 8007064:	d905      	bls.n	8007072 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007066:	2301      	movs	r3, #1
 8007068:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <xTaskRemoveFromEventList+0xc0>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e001      	b.n	8007076 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007076:	697b      	ldr	r3, [r7, #20]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	200055c0 	.word	0x200055c0
 8007084:	200055a0 	.word	0x200055a0
 8007088:	2000549c 	.word	0x2000549c
 800708c:	20005558 	.word	0x20005558
 8007090:	20005498 	.word	0x20005498
 8007094:	200055ac 	.word	0x200055ac

08007098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <vTaskInternalSetTimeOutState+0x24>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <vTaskInternalSetTimeOutState+0x28>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	200055b0 	.word	0x200055b0
 80070c0:	2000559c 	.word	0x2000559c

080070c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	613b      	str	r3, [r7, #16]
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007106:	f000 fc75 	bl	80079f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800710a:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <xTaskCheckForTimeOut+0xbc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d102      	bne.n	800712a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e023      	b.n	8007172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b15      	ldr	r3, [pc, #84]	; (8007184 <xTaskCheckForTimeOut+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d007      	beq.n	8007146 <xTaskCheckForTimeOut+0x82>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d302      	bcc.n	8007146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e015      	b.n	8007172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d20b      	bcs.n	8007168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff9b 	bl	8007098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e004      	b.n	8007172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007172:	f000 fc6f 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000559c 	.word	0x2000559c
 8007184:	200055b0 	.word	0x200055b0

08007188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800718c:	4b03      	ldr	r3, [pc, #12]	; (800719c <vTaskMissedYield+0x14>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	200055ac 	.word	0x200055ac

080071a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a8:	f000 f852 	bl	8007250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <prvIdleTask+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d9f9      	bls.n	80071a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <prvIdleTask+0x2c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c4:	e7f0      	b.n	80071a8 <prvIdleTask+0x8>
 80071c6:	bf00      	nop
 80071c8:	2000549c 	.word	0x2000549c
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	e00c      	b.n	80071f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4a12      	ldr	r2, [pc, #72]	; (8007230 <prvInitialiseTaskLists+0x60>)
 80071e8:	4413      	add	r3, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fa21 	bl	8005632 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3301      	adds	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	d9ef      	bls.n	80071dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071fc:	480d      	ldr	r0, [pc, #52]	; (8007234 <prvInitialiseTaskLists+0x64>)
 80071fe:	f7fe fa18 	bl	8005632 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007202:	480d      	ldr	r0, [pc, #52]	; (8007238 <prvInitialiseTaskLists+0x68>)
 8007204:	f7fe fa15 	bl	8005632 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007208:	480c      	ldr	r0, [pc, #48]	; (800723c <prvInitialiseTaskLists+0x6c>)
 800720a:	f7fe fa12 	bl	8005632 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800720e:	480c      	ldr	r0, [pc, #48]	; (8007240 <prvInitialiseTaskLists+0x70>)
 8007210:	f7fe fa0f 	bl	8005632 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007214:	480b      	ldr	r0, [pc, #44]	; (8007244 <prvInitialiseTaskLists+0x74>)
 8007216:	f7fe fa0c 	bl	8005632 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800721a:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <prvInitialiseTaskLists+0x78>)
 800721c:	4a05      	ldr	r2, [pc, #20]	; (8007234 <prvInitialiseTaskLists+0x64>)
 800721e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <prvInitialiseTaskLists+0x7c>)
 8007222:	4a05      	ldr	r2, [pc, #20]	; (8007238 <prvInitialiseTaskLists+0x68>)
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000549c 	.word	0x2000549c
 8007234:	20005528 	.word	0x20005528
 8007238:	2000553c 	.word	0x2000553c
 800723c:	20005558 	.word	0x20005558
 8007240:	2000556c 	.word	0x2000556c
 8007244:	20005584 	.word	0x20005584
 8007248:	20005550 	.word	0x20005550
 800724c:	20005554 	.word	0x20005554

08007250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007256:	e019      	b.n	800728c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007258:	f000 fbcc 	bl	80079f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <prvCheckTasksWaitingTermination+0x50>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fa6c 	bl	8005746 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3b01      	subs	r3, #1
 8007274:	4a0b      	ldr	r2, [pc, #44]	; (80072a4 <prvCheckTasksWaitingTermination+0x54>)
 8007276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 8007280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007282:	f000 fbe7 	bl	8007a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f810 	bl	80072ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800728c:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvCheckTasksWaitingTermination+0x58>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e1      	bne.n	8007258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000556c 	.word	0x2000556c
 80072a4:	20005598 	.word	0x20005598
 80072a8:	20005580 	.word	0x20005580

080072ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	334c      	adds	r3, #76	; 0x4c
 80072b8:	4618      	mov	r0, r3
 80072ba:	f011 fefb 	bl	80190b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd7f 	bl	8007dd0 <vPortFree>
				vPortFree( pxTCB );
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fd7c 	bl	8007dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072d8:	e018      	b.n	800730c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d103      	bne.n	80072ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fd73 	bl	8007dd0 <vPortFree>
	}
 80072ea:	e00f      	b.n	800730c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d00a      	beq.n	800730c <prvDeleteTCB+0x60>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <prvDeleteTCB+0x5e>
	}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <prvResetNextTaskUnblockTime+0x38>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <prvResetNextTaskUnblockTime+0x3c>)
 8007326:	f04f 32ff 	mov.w	r2, #4294967295
 800732a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800732c:	e008      	b.n	8007340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <prvResetNextTaskUnblockTime+0x38>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <prvResetNextTaskUnblockTime+0x3c>)
 800733e:	6013      	str	r3, [r2, #0]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20005550 	.word	0x20005550
 8007350:	200055b8 	.word	0x200055b8

08007354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <xTaskGetSchedulerState+0x34>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007362:	2301      	movs	r3, #1
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	e008      	b.n	800737a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <xTaskGetSchedulerState+0x38>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007370:	2302      	movs	r3, #2
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	e001      	b.n	800737a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800737a:	687b      	ldr	r3, [r7, #4]
	}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	200055a4 	.word	0x200055a4
 800738c:	200055c0 	.word	0x200055c0

08007390 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d05e      	beq.n	8007464 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <xTaskPriorityInherit+0xe0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d24e      	bcs.n	8007452 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	db06      	blt.n	80073ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073bc:	4b2c      	ldr	r3, [pc, #176]	; (8007470 <xTaskPriorityInherit+0xe0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f1c3 0207 	rsb	r2, r3, #7
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6959      	ldr	r1, [r3, #20]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4a26      	ldr	r2, [pc, #152]	; (8007474 <xTaskPriorityInherit+0xe4>)
 80073dc:	4413      	add	r3, r2
 80073de:	4299      	cmp	r1, r3
 80073e0:	d12f      	bne.n	8007442 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe f9ad 	bl	8005746 <uxListRemove>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	2201      	movs	r2, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	43da      	mvns	r2, r3
 80073fe:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <xTaskPriorityInherit+0xe8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4013      	ands	r3, r2
 8007404:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <xTaskPriorityInherit+0xe8>)
 8007406:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <xTaskPriorityInherit+0xe0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	2201      	movs	r2, #1
 8007418:	409a      	lsls	r2, r3
 800741a:	4b17      	ldr	r3, [pc, #92]	; (8007478 <xTaskPriorityInherit+0xe8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4313      	orrs	r3, r2
 8007420:	4a15      	ldr	r2, [pc, #84]	; (8007478 <xTaskPriorityInherit+0xe8>)
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4a10      	ldr	r2, [pc, #64]	; (8007474 <xTaskPriorityInherit+0xe4>)
 8007432:	441a      	add	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f7fe f926 	bl	800568c <vListInsertEnd>
 8007440:	e004      	b.n	800744c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <xTaskPriorityInherit+0xe0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e008      	b.n	8007464 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <xTaskPriorityInherit+0xe0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d201      	bcs.n	8007464 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007464:	68fb      	ldr	r3, [r7, #12]
	}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20005498 	.word	0x20005498
 8007474:	2000549c 	.word	0x2000549c
 8007478:	200055a0 	.word	0x200055a0

0800747c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d06e      	beq.n	8007570 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007492:	4b3a      	ldr	r3, [pc, #232]	; (800757c <xTaskPriorityDisinherit+0x100>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d00a      	beq.n	80074b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d044      	beq.n	8007570 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d140      	bne.n	8007570 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe f927 	bl	8005746 <uxListRemove>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d115      	bne.n	800752a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	491f      	ldr	r1, [pc, #124]	; (8007580 <xTaskPriorityDisinherit+0x104>)
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xTaskPriorityDisinherit+0xae>
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	2201      	movs	r2, #1
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43da      	mvns	r2, r3
 8007520:	4b18      	ldr	r3, [pc, #96]	; (8007584 <xTaskPriorityDisinherit+0x108>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4013      	ands	r3, r2
 8007526:	4a17      	ldr	r2, [pc, #92]	; (8007584 <xTaskPriorityDisinherit+0x108>)
 8007528:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	f1c3 0207 	rsb	r2, r3, #7
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	2201      	movs	r2, #1
 8007544:	409a      	lsls	r2, r3
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskPriorityDisinherit+0x108>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4313      	orrs	r3, r2
 800754c:	4a0d      	ldr	r2, [pc, #52]	; (8007584 <xTaskPriorityDisinherit+0x108>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <xTaskPriorityDisinherit+0x104>)
 800755e:	441a      	add	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f7fe f890 	bl	800568c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007570:	697b      	ldr	r3, [r7, #20]
	}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20005498 	.word	0x20005498
 8007580:	2000549c 	.word	0x2000549c
 8007584:	200055a0 	.word	0x200055a0

08007588 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007596:	2301      	movs	r3, #1
 8007598:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d077      	beq.n	8007690 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d902      	bls.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e002      	b.n	80075d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d058      	beq.n	8007690 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d153      	bne.n	8007690 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d10a      	bne.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60bb      	str	r3, [r7, #8]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	db04      	blt.n	8007626 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f1c3 0207 	rsb	r2, r3, #7
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	6959      	ldr	r1, [r3, #20]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4a19      	ldr	r2, [pc, #100]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007636:	4413      	add	r3, r2
 8007638:	4299      	cmp	r1, r3
 800763a:	d129      	bne.n	8007690 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe f880 	bl	8005746 <uxListRemove>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	2201      	movs	r2, #1
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43da      	mvns	r2, r3
 8007658:	4b11      	ldr	r3, [pc, #68]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4013      	ands	r3, r2
 800765e:	4a10      	ldr	r2, [pc, #64]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007660:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	2201      	movs	r2, #1
 8007668:	409a      	lsls	r2, r3
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4313      	orrs	r3, r2
 8007670:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4a06      	ldr	r2, [pc, #24]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007682:	441a      	add	r2, r3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fd fffe 	bl	800568c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007690:	bf00      	nop
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20005498 	.word	0x20005498
 800769c:	2000549c 	.word	0x2000549c
 80076a0:	200055a0 	.word	0x200055a0

080076a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076b6:	3201      	adds	r2, #1
 80076b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80076bc:	681b      	ldr	r3, [r3, #0]
	}
 80076be:	4618      	mov	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20005498 	.word	0x20005498

080076cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076d6:	4b29      	ldr	r3, [pc, #164]	; (800777c <prvAddCurrentTaskToDelayedList+0xb0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076dc:	4b28      	ldr	r3, [pc, #160]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe f82f 	bl	8005746 <uxListRemove>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076ee:	4b24      	ldr	r3, [pc, #144]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2201      	movs	r2, #1
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	43da      	mvns	r2, r3
 80076fc:	4b21      	ldr	r3, [pc, #132]	; (8007784 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4013      	ands	r3, r2
 8007702:	4a20      	ldr	r2, [pc, #128]	; (8007784 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007704:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770c:	d10a      	bne.n	8007724 <prvAddCurrentTaskToDelayedList+0x58>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007714:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3304      	adds	r3, #4
 800771a:	4619      	mov	r1, r3
 800771c:	481a      	ldr	r0, [pc, #104]	; (8007788 <prvAddCurrentTaskToDelayedList+0xbc>)
 800771e:	f7fd ffb5 	bl	800568c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007722:	e026      	b.n	8007772 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800772c:	4b14      	ldr	r3, [pc, #80]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	429a      	cmp	r2, r3
 800773a:	d209      	bcs.n	8007750 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800773c:	4b13      	ldr	r3, [pc, #76]	; (800778c <prvAddCurrentTaskToDelayedList+0xc0>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fd ffc3 	bl	80056d4 <vListInsert>
}
 800774e:	e010      	b.n	8007772 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fd ffb9 	bl	80056d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	d202      	bcs.n	8007772 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800776c:	4a09      	ldr	r2, [pc, #36]	; (8007794 <prvAddCurrentTaskToDelayedList+0xc8>)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6013      	str	r3, [r2, #0]
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	2000559c 	.word	0x2000559c
 8007780:	20005498 	.word	0x20005498
 8007784:	200055a0 	.word	0x200055a0
 8007788:	20005584 	.word	0x20005584
 800778c:	20005554 	.word	0x20005554
 8007790:	20005550 	.word	0x20005550
 8007794:	200055b8 	.word	0x200055b8

08007798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3b04      	subs	r3, #4
 80077a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b04      	subs	r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c8:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <pxPortInitialiseStack+0x64>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b14      	subs	r3, #20
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3b04      	subs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f06f 0202 	mvn.w	r2, #2
 80077e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b20      	subs	r3, #32
 80077ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	08007801 	.word	0x08007801

08007800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <prvTaskExitError+0x54>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d00a      	beq.n	800782a <prvTaskExitError+0x2a>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <prvTaskExitError+0x28>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	60bb      	str	r3, [r7, #8]
}
 800783c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800783e:	bf00      	nop
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0fc      	beq.n	8007840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	20000020 	.word	0x20000020
	...

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20005498 	.word	0x20005498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	; (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078b6:	4b46      	ldr	r3, [pc, #280]	; (80079d0 <xPortStartScheduler+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a46      	ldr	r2, [pc, #280]	; (80079d4 <xPortStartScheduler+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10a      	bne.n	80078d6 <xPortStartScheduler+0x26>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078d6:	4b3e      	ldr	r3, [pc, #248]	; (80079d0 <xPortStartScheduler+0x120>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3f      	ldr	r2, [pc, #252]	; (80079d8 <xPortStartScheduler+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10a      	bne.n	80078f6 <xPortStartScheduler+0x46>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078f6:	4b39      	ldr	r3, [pc, #228]	; (80079dc <xPortStartScheduler+0x12c>)
 80078f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <xPortStartScheduler+0x130>)
 800791c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800791e:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <xPortStartScheduler+0x134>)
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007924:	e009      	b.n	800793a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007926:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <xPortStartScheduler+0x134>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <xPortStartScheduler+0x134>)
 800792e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d0ef      	beq.n	8007926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <xPortStartScheduler+0x134>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1c3 0307 	rsb	r3, r3, #7
 800794e:	2b04      	cmp	r3, #4
 8007950:	d00a      	beq.n	8007968 <xPortStartScheduler+0xb8>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60bb      	str	r3, [r7, #8]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <xPortStartScheduler+0x134>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <xPortStartScheduler+0x134>)
 8007970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <xPortStartScheduler+0x134>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <xPortStartScheduler+0x134>)
 800797c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <xPortStartScheduler+0x138>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <xPortStartScheduler+0x138>)
 800798c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <xPortStartScheduler+0x138>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <xPortStartScheduler+0x138>)
 8007998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800799c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800799e:	f000 f8dd 	bl	8007b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <xPortStartScheduler+0x13c>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079a8:	f000 f8fc 	bl	8007ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xPortStartScheduler+0x140>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <xPortStartScheduler+0x140>)
 80079b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079b8:	f7ff ff66 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079bc:	f7ff fa84 	bl	8006ec8 <vTaskSwitchContext>
	prvTaskExitError();
 80079c0:	f7ff ff1e 	bl	8007800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	e000ed00 	.word	0xe000ed00
 80079d4:	410fc271 	.word	0x410fc271
 80079d8:	410fc270 	.word	0x410fc270
 80079dc:	e000e400 	.word	0xe000e400
 80079e0:	200055c4 	.word	0x200055c4
 80079e4:	200055c8 	.word	0x200055c8
 80079e8:	e000ed20 	.word	0xe000ed20
 80079ec:	20000020 	.word	0x20000020
 80079f0:	e000ef34 	.word	0xe000ef34

080079f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	607b      	str	r3, [r7, #4]
}
 8007a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10f      	bne.n	8007a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortEnterCritical+0x5c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	603b      	str	r3, [r7, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vPortEnterCritical+0x4a>
	}
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20000020 	.word	0x20000020
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <vPortExitCritical+0x24>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <vPortExitCritical+0x42>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f383 8811 	msr	BASEPRI, r3
}
 8007a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000020 	.word	0x20000020
	...

08007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ab0:	f3ef 8009 	mrs	r0, PSP
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <pxCurrentTCBConst>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f01e 0f10 	tst.w	lr, #16
 8007ac0:	bf08      	it	eq
 8007ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ad4:	f380 8811 	msr	BASEPRI, r0
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f7ff f9f2 	bl	8006ec8 <vTaskSwitchContext>
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f380 8811 	msr	BASEPRI, r0
 8007aec:	bc09      	pop	{r0, r3}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af6:	f01e 0f10 	tst.w	lr, #16
 8007afa:	bf08      	it	eq
 8007afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b00:	f380 8809 	msr	PSP, r0
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst>:
 8007b10:	20005498 	.word	0x20005498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b32:	f7ff f911 	bl	8006d58 <xTaskIncrementTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <SysTick_Handler+0x40>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <vPortSetupTimerInterrupt+0x38>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <vPortSetupTimerInterrupt+0x3c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <vPortSetupTimerInterrupt+0x40>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <vPortSetupTimerInterrupt+0x44>)
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b7e:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b80:	2207      	movs	r2, #7
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	e000e018 	.word	0xe000e018
 8007b98:	20000000 	.word	0x20000000
 8007b9c:	10624dd3 	.word	0x10624dd3
 8007ba0:	e000e014 	.word	0xe000e014

08007ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bb4 <vPortEnableVFP+0x10>
 8007ba8:	6801      	ldr	r1, [r0, #0]
 8007baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bae:	6001      	str	r1, [r0, #0]
 8007bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed88 	.word	0xe000ed88

08007bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d914      	bls.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <vPortValidateInterruptPriority+0x70>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <vPortValidateInterruptPriority+0x74>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	7afa      	ldrb	r2, [r7, #11]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20a      	bcs.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <vPortValidateInterruptPriority+0x78>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <vPortValidateInterruptPriority+0x7c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d90a      	bls.n	8007c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	603b      	str	r3, [r7, #0]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <vPortValidateInterruptPriority+0x60>
	}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	e000e3f0 	.word	0xe000e3f0
 8007c2c:	200055c4 	.word	0x200055c4
 8007c30:	e000ed0c 	.word	0xe000ed0c
 8007c34:	200055c8 	.word	0x200055c8

08007c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c44:	f7fe ffbc 	bl	8006bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c48:	4b5b      	ldr	r3, [pc, #364]	; (8007db8 <pvPortMalloc+0x180>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c50:	f000 f920 	bl	8007e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c54:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <pvPortMalloc+0x184>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 8093 	bne.w	8007d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01d      	beq.n	8007ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c68:	2208      	movs	r2, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d014      	beq.n	8007ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	617b      	str	r3, [r7, #20]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d06e      	beq.n	8007d88 <pvPortMalloc+0x150>
 8007caa:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <pvPortMalloc+0x188>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d869      	bhi.n	8007d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cbe:	e004      	b.n	8007cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <pvPortMalloc+0xa4>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f1      	bne.n	8007cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <pvPortMalloc+0x180>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d050      	beq.n	8007d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2208      	movs	r2, #8
 8007cec:	4413      	add	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	2308      	movs	r3, #8
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d91f      	bls.n	8007d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <pvPortMalloc+0xf8>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	613b      	str	r3, [r7, #16]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d42:	69b8      	ldr	r0, [r7, #24]
 8007d44:	f000 f908 	bl	8007f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d203      	bcs.n	8007d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d62:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <pvPortMalloc+0x184>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <pvPortMalloc+0x194>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <pvPortMalloc+0x194>)
 8007d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d88:	f7fe ff28 	bl	8006bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <pvPortMalloc+0x174>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60fb      	str	r3, [r7, #12]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <pvPortMalloc+0x172>
	return pvReturn;
 8007dac:	69fb      	ldr	r3, [r7, #28]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	2000d5d4 	.word	0x2000d5d4
 8007dbc:	2000d5e8 	.word	0x2000d5e8
 8007dc0:	2000d5d8 	.word	0x2000d5d8
 8007dc4:	2000d5cc 	.word	0x2000d5cc
 8007dc8:	2000d5dc 	.word	0x2000d5dc
 8007dcc:	2000d5e0 	.word	0x2000d5e0

08007dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04d      	beq.n	8007e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007de2:	2308      	movs	r3, #8
 8007de4:	425b      	negs	r3, r3
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <vPortFree+0xb8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <vPortFree+0x44>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <vPortFree+0x62>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <vPortFree+0xb8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01e      	beq.n	8007e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11a      	bne.n	8007e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <vPortFree+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e58:	f7fe feb2 	bl	8006bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <vPortFree+0xbc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <vPortFree+0xbc>)
 8007e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e6a:	6938      	ldr	r0, [r7, #16]
 8007e6c:	f000 f874 	bl	8007f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <vPortFree+0xc0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <vPortFree+0xc0>)
 8007e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e7a:	f7fe feaf 	bl	8006bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e7e:	bf00      	nop
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000d5e8 	.word	0x2000d5e8
 8007e8c:	2000d5d8 	.word	0x2000d5d8
 8007e90:	2000d5e4 	.word	0x2000d5e4

08007e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <prvHeapInit+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <prvHeapInit+0xac>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <prvHeapInit+0xb0>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <prvHeapInit+0xb0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvHeapInit+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvHeapInit+0xb4>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <prvHeapInit+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <prvHeapInit+0xbc>)
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvHeapInit+0xc0>)
 8007f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	200055cc 	.word	0x200055cc
 8007f44:	2000d5cc 	.word	0x2000d5cc
 8007f48:	2000d5d4 	.word	0x2000d5d4
 8007f4c:	2000d5dc 	.word	0x2000d5dc
 8007f50:	2000d5d8 	.word	0x2000d5d8
 8007f54:	2000d5e8 	.word	0x2000d5e8

08007f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8f7      	bhi.n	8007f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d108      	bne.n	8007f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d118      	bne.n	8007fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d00d      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e008      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e003      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	2000d5cc 	.word	0x2000d5cc
 8008008:	2000d5d4 	.word	0x2000d5d4

0800800c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	461a      	mov	r2, r3
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f002 fc29 	bl	800a878 <tcpip_send_msg_wait_sem>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800802a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008038:	e001      	b.n	800803e <netconn_apimsg+0x32>
  }
  return err;
 800803a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	; 0x30
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	603a      	str	r2, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
 8008054:	460b      	mov	r3, r1
 8008056:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f95b 	bl	8009318 <netconn_alloc>
 8008062:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d054      	beq.n	8008114 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800806a:	79bb      	ldrb	r3, [r7, #6]
 800806c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	4829      	ldr	r0, [pc, #164]	; (8008120 <netconn_new_with_proto_and_callback+0xd8>)
 800807a:	f7ff ffc7 	bl	800800c <netconn_apimsg>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008084:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008088:	2b00      	cmp	r3, #0
 800808a:	d043      	beq.n	8008114 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <netconn_new_with_proto_and_callback+0x58>
 8008094:	4b23      	ldr	r3, [pc, #140]	; (8008124 <netconn_new_with_proto_and_callback+0xdc>)
 8008096:	22a3      	movs	r2, #163	; 0xa3
 8008098:	4923      	ldr	r1, [pc, #140]	; (8008128 <netconn_new_with_proto_and_callback+0xe0>)
 800809a:	4824      	ldr	r0, [pc, #144]	; (800812c <netconn_new_with_proto_and_callback+0xe4>)
 800809c:	f010 fdcc 	bl	8018c38 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	3310      	adds	r3, #16
 80080a4:	4618      	mov	r0, r3
 80080a6:	f010 fb72 	bl	801878e <sys_mbox_valid>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d105      	bne.n	80080bc <netconn_new_with_proto_and_callback+0x74>
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <netconn_new_with_proto_and_callback+0xdc>)
 80080b2:	22a4      	movs	r2, #164	; 0xa4
 80080b4:	491e      	ldr	r1, [pc, #120]	; (8008130 <netconn_new_with_proto_and_callback+0xe8>)
 80080b6:	481d      	ldr	r0, [pc, #116]	; (800812c <netconn_new_with_proto_and_callback+0xe4>)
 80080b8:	f010 fdbe 	bl	8018c38 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	3314      	adds	r3, #20
 80080c0:	4618      	mov	r0, r3
 80080c2:	f010 fb64 	bl	801878e <sys_mbox_valid>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <netconn_new_with_proto_and_callback+0x90>
 80080cc:	4b15      	ldr	r3, [pc, #84]	; (8008124 <netconn_new_with_proto_and_callback+0xdc>)
 80080ce:	22a6      	movs	r2, #166	; 0xa6
 80080d0:	4918      	ldr	r1, [pc, #96]	; (8008134 <netconn_new_with_proto_and_callback+0xec>)
 80080d2:	4816      	ldr	r0, [pc, #88]	; (800812c <netconn_new_with_proto_and_callback+0xe4>)
 80080d4:	f010 fdb0 	bl	8018c38 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80080d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080da:	330c      	adds	r3, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f010 fbe7 	bl	80188b0 <sys_sem_valid>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <netconn_new_with_proto_and_callback+0xac>
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <netconn_new_with_proto_and_callback+0xdc>)
 80080ea:	22a9      	movs	r2, #169	; 0xa9
 80080ec:	4912      	ldr	r1, [pc, #72]	; (8008138 <netconn_new_with_proto_and_callback+0xf0>)
 80080ee:	480f      	ldr	r0, [pc, #60]	; (800812c <netconn_new_with_proto_and_callback+0xe4>)
 80080f0:	f010 fda2 	bl	8018c38 <iprintf>
      sys_sem_free(&conn->op_completed);
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	330c      	adds	r3, #12
 80080f8:	4618      	mov	r0, r3
 80080fa:	f010 fbcc 	bl	8018896 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	3310      	adds	r3, #16
 8008102:	4618      	mov	r0, r3
 8008104:	f010 fabc 	bl	8018680 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810a:	2007      	movs	r0, #7
 800810c:	f003 ffb2 	bl	800c074 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	e000      	b.n	8008116 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008116:	4618      	mov	r0, r3
 8008118:	3730      	adds	r7, #48	; 0x30
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	080092ed 	.word	0x080092ed
 8008124:	0801a21c 	.word	0x0801a21c
 8008128:	0801a250 	.word	0x0801a250
 800812c:	0801a274 	.word	0x0801a274
 8008130:	0801a29c 	.word	0x0801a29c
 8008134:	0801a2b4 	.word	0x0801a2b4
 8008138:	0801a2d8 	.word	0x0801a2d8

0800813c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	e014      	b.n	8008178 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008152:	2329      	movs	r3, #41	; 0x29
 8008154:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008156:	f107 030c 	add.w	r3, r7, #12
 800815a:	4619      	mov	r1, r3
 800815c:	4808      	ldr	r0, [pc, #32]	; (8008180 <netconn_prepare_delete+0x44>)
 800815e:	f7ff ff55 	bl	800800c <netconn_apimsg>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008168:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <netconn_prepare_delete+0x3a>
    return err;
 8008170:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008174:	e000      	b.n	8008178 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3730      	adds	r7, #48	; 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	08009859 	.word	0x08009859

08008184 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <netconn_delete+0x12>
    return ERR_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	e00d      	b.n	80081b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff ffd0 	bl	800813c <netconn_prepare_delete>
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80081a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <netconn_delete+0x2a>
    netconn_free(conn);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f923 	bl	80093f4 <netconn_free>
  }
  return err;
 80081ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08e      	sub	sp, #56	; 0x38
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <netconn_bind+0x28>
 80081d0:	4b11      	ldr	r3, [pc, #68]	; (8008218 <netconn_bind+0x5c>)
 80081d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80081d6:	4911      	ldr	r1, [pc, #68]	; (800821c <netconn_bind+0x60>)
 80081d8:	4811      	ldr	r0, [pc, #68]	; (8008220 <netconn_bind+0x64>)
 80081da:	f010 fd2d 	bl	8018c38 <iprintf>
 80081de:	f06f 030f 	mvn.w	r3, #15
 80081e2:	e015      	b.n	8008210 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80081ea:	4b0e      	ldr	r3, [pc, #56]	; (8008224 <netconn_bind+0x68>)
 80081ec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80081f6:	88fb      	ldrh	r3, [r7, #6]
 80081f8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80081fa:	f107 0314 	add.w	r3, r7, #20
 80081fe:	4619      	mov	r1, r3
 8008200:	4809      	ldr	r0, [pc, #36]	; (8008228 <netconn_bind+0x6c>)
 8008202:	f7ff ff03 	bl	800800c <netconn_apimsg>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800820c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008210:	4618      	mov	r0, r3
 8008212:	3738      	adds	r7, #56	; 0x38
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	0801a21c 	.word	0x0801a21c
 800821c:	0801a354 	.word	0x0801a354
 8008220:	0801a274 	.word	0x0801a274
 8008224:	08027f2c 	.word	0x08027f2c
 8008228:	08009a21 	.word	0x08009a21

0800822c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	; 0x38
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d109      	bne.n	8008254 <netconn_connect+0x28>
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <netconn_connect+0x5c>)
 8008242:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008246:	4911      	ldr	r1, [pc, #68]	; (800828c <netconn_connect+0x60>)
 8008248:	4811      	ldr	r0, [pc, #68]	; (8008290 <netconn_connect+0x64>)
 800824a:	f010 fcf5 	bl	8018c38 <iprintf>
 800824e:	f06f 030f 	mvn.w	r3, #15
 8008252:	e015      	b.n	8008280 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <netconn_connect+0x68>)
 800825c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800826a:	f107 0314 	add.w	r3, r7, #20
 800826e:	4619      	mov	r1, r3
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <netconn_connect+0x6c>)
 8008272:	f7ff fecb 	bl	800800c <netconn_apimsg>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800827c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008280:	4618      	mov	r0, r3
 8008282:	3738      	adds	r7, #56	; 0x38
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	0801a21c 	.word	0x0801a21c
 800828c:	0801a390 	.word	0x0801a390
 8008290:	0801a274 	.word	0x0801a274
 8008294:	08027f2c 	.word	0x08027f2c
 8008298:	08009bb5 	.word	0x08009bb5

0800829c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08c      	sub	sp, #48	; 0x30
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <netconn_listen_with_backlog+0x26>
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <netconn_listen_with_backlog+0x48>)
 80082b0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80082b4:	490c      	ldr	r1, [pc, #48]	; (80082e8 <netconn_listen_with_backlog+0x4c>)
 80082b6:	480d      	ldr	r0, [pc, #52]	; (80082ec <netconn_listen_with_backlog+0x50>)
 80082b8:	f010 fcbe 	bl	8018c38 <iprintf>
 80082bc:	f06f 030f 	mvn.w	r3, #15
 80082c0:	e00c      	b.n	80082dc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80082c6:	f107 030c 	add.w	r3, r7, #12
 80082ca:	4619      	mov	r1, r3
 80082cc:	4808      	ldr	r0, [pc, #32]	; (80082f0 <netconn_listen_with_backlog+0x54>)
 80082ce:	f7ff fe9d 	bl	800800c <netconn_apimsg>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80082d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3730      	adds	r7, #48	; 0x30
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	0801a21c 	.word	0x0801a21c
 80082e8:	0801a3d4 	.word	0x0801a3d4
 80082ec:	0801a274 	.word	0x0801a274
 80082f0:	08009d31 	.word	0x08009d31

080082f4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d109      	bne.n	8008318 <netconn_accept+0x24>
 8008304:	4b3d      	ldr	r3, [pc, #244]	; (80083fc <netconn_accept+0x108>)
 8008306:	f240 12e1 	movw	r2, #481	; 0x1e1
 800830a:	493d      	ldr	r1, [pc, #244]	; (8008400 <netconn_accept+0x10c>)
 800830c:	483d      	ldr	r0, [pc, #244]	; (8008404 <netconn_accept+0x110>)
 800830e:	f010 fc93 	bl	8018c38 <iprintf>
 8008312:	f06f 030f 	mvn.w	r3, #15
 8008316:	e06c      	b.n	80083f2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <netconn_accept+0x44>
 8008324:	4b35      	ldr	r3, [pc, #212]	; (80083fc <netconn_accept+0x108>)
 8008326:	f240 12e3 	movw	r2, #483	; 0x1e3
 800832a:	4937      	ldr	r1, [pc, #220]	; (8008408 <netconn_accept+0x114>)
 800832c:	4835      	ldr	r0, [pc, #212]	; (8008404 <netconn_accept+0x110>)
 800832e:	f010 fc83 	bl	8018c38 <iprintf>
 8008332:	f06f 030f 	mvn.w	r3, #15
 8008336:	e05c      	b.n	80083f2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb6c 	bl	8008a16 <netconn_err>
 800833e:	4603      	mov	r3, r0
 8008340:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800834a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800834e:	e050      	b.n	80083f2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3314      	adds	r3, #20
 8008354:	4618      	mov	r0, r3
 8008356:	f010 fa1a 	bl	801878e <sys_mbox_valid>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <netconn_accept+0x78>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7f1b      	ldrb	r3, [r3, #28]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800836c:	f06f 030e 	mvn.w	r3, #14
 8008370:	e03f      	b.n	80083f2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7f1b      	ldrb	r3, [r3, #28]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00e      	beq.n	800839c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3314      	adds	r3, #20
 8008382:	f107 020c 	add.w	r2, r7, #12
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f010 f9e4 	bl	8018756 <sys_arch_mbox_tryfetch>
 800838e:	4603      	mov	r3, r0
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008394:	d10a      	bne.n	80083ac <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008396:	f06f 0306 	mvn.w	r3, #6
 800839a:	e02a      	b.n	80083f2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3314      	adds	r3, #20
 80083a0:	f107 010c 	add.w	r1, r7, #12
 80083a4:	2200      	movs	r2, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f010 f996 	bl	80186d8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <netconn_accept+0xcc>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2200      	movs	r2, #0
 80083ba:	2101      	movs	r1, #1
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f107 0213 	add.w	r2, r7, #19
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fb75 	bl	8008ab8 <lwip_netconn_is_err_msg>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80083d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083d8:	e00b      	b.n	80083f2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80083e0:	f06f 030e 	mvn.w	r3, #14
 80083e4:	e005      	b.n	80083f2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80083f0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	0801a21c 	.word	0x0801a21c
 8008400:	0801a3f4 	.word	0x0801a3f4
 8008404:	0801a274 	.word	0x0801a274
 8008408:	0801a414 	.word	0x0801a414

0800840c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <netconn_recv_data+0x2c>
 8008424:	4b58      	ldr	r3, [pc, #352]	; (8008588 <netconn_recv_data+0x17c>)
 8008426:	f44f 7212 	mov.w	r2, #584	; 0x248
 800842a:	4958      	ldr	r1, [pc, #352]	; (800858c <netconn_recv_data+0x180>)
 800842c:	4858      	ldr	r0, [pc, #352]	; (8008590 <netconn_recv_data+0x184>)
 800842e:	f010 fc03 	bl	8018c38 <iprintf>
 8008432:	f06f 030f 	mvn.w	r3, #15
 8008436:	e0a2      	b.n	800857e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <netconn_recv_data+0x4c>
 8008444:	4b50      	ldr	r3, [pc, #320]	; (8008588 <netconn_recv_data+0x17c>)
 8008446:	f240 224a 	movw	r2, #586	; 0x24a
 800844a:	4952      	ldr	r1, [pc, #328]	; (8008594 <netconn_recv_data+0x188>)
 800844c:	4850      	ldr	r0, [pc, #320]	; (8008590 <netconn_recv_data+0x184>)
 800844e:	f010 fbf3 	bl	8018c38 <iprintf>
 8008452:	f06f 030f 	mvn.w	r3, #15
 8008456:	e092      	b.n	800857e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3310      	adds	r3, #16
 800845c:	4618      	mov	r0, r3
 800845e:	f010 f996 	bl	801878e <sys_mbox_valid>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10e      	bne.n	8008486 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fad4 	bl	8008a16 <netconn_err>
 800846e:	4603      	mov	r3, r0
 8008470:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008472:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800847a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800847e:	e07e      	b.n	800857e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008480:	f06f 030a 	mvn.w	r3, #10
 8008484:	e07b      	b.n	800857e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	7f1b      	ldrb	r3, [r3, #28]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10f      	bne.n	80084b2 <netconn_recv_data+0xa6>
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	7f1b      	ldrb	r3, [r3, #28]
 80084a0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d023      	beq.n	80084fa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3310      	adds	r3, #16
 80084b6:	f107 0218 	add.w	r2, r7, #24
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f010 f94a 	bl	8018756 <sys_arch_mbox_tryfetch>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d11f      	bne.n	800850a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 faa3 	bl	8008a16 <netconn_err>
 80084d0:	4603      	mov	r3, r0
 80084d2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80084d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80084dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80084e0:	e04d      	b.n	800857e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	7f1b      	ldrb	r3, [r3, #28]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80084ee:	f06f 030a 	mvn.w	r3, #10
 80084f2:	e044      	b.n	800857e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80084f4:	f06f 0306 	mvn.w	r3, #6
 80084f8:	e041      	b.n	800857e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3310      	adds	r3, #16
 80084fe:	f107 0118 	add.w	r1, r7, #24
 8008502:	2200      	movs	r2, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f010 f8e7 	bl	80186d8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008512:	2b10      	cmp	r3, #16
 8008514:	d117      	bne.n	8008546 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f107 0217 	add.w	r2, r7, #23
 800851c:	4611      	mov	r1, r2
 800851e:	4618      	mov	r0, r3
 8008520:	f000 faca 	bl	8008ab8 <lwip_netconn_is_err_msg>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d009      	beq.n	800853e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800852a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800852e:	f113 0f0f 	cmn.w	r3, #15
 8008532:	d101      	bne.n	8008538 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e022      	b.n	800857e <netconn_recv_data+0x172>
      }
      return err;
 8008538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800853c:	e01f      	b.n	800857e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	891b      	ldrh	r3, [r3, #8]
 8008542:	83fb      	strh	r3, [r7, #30]
 8008544:	e00d      	b.n	8008562 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <netconn_recv_data+0x14e>
 800854c:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <netconn_recv_data+0x17c>)
 800854e:	f240 2291 	movw	r2, #657	; 0x291
 8008552:	4911      	ldr	r1, [pc, #68]	; (8008598 <netconn_recv_data+0x18c>)
 8008554:	480e      	ldr	r0, [pc, #56]	; (8008590 <netconn_recv_data+0x184>)
 8008556:	f010 fb6f 	bl	8018c38 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	891b      	ldrh	r3, [r3, #8]
 8008560:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <netconn_recv_data+0x16a>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	8bfa      	ldrh	r2, [r7, #30]
 8008570:	2101      	movs	r1, #1
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	0801a21c 	.word	0x0801a21c
 800858c:	0801a434 	.word	0x0801a434
 8008590:	0801a274 	.word	0x0801a274
 8008594:	0801a454 	.word	0x0801a454
 8008598:	0801a470 	.word	0x0801a470

0800859c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <netconn_tcp_recvd_msg+0x1e>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d009      	beq.n	80085ce <netconn_tcp_recvd_msg+0x32>
 80085ba:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <netconn_tcp_recvd_msg+0x50>)
 80085bc:	f240 22a7 	movw	r2, #679	; 0x2a7
 80085c0:	490b      	ldr	r1, [pc, #44]	; (80085f0 <netconn_tcp_recvd_msg+0x54>)
 80085c2:	480c      	ldr	r0, [pc, #48]	; (80085f4 <netconn_tcp_recvd_msg+0x58>)
 80085c4:	f010 fb38 	bl	8018c38 <iprintf>
 80085c8:	f06f 030f 	mvn.w	r3, #15
 80085cc:	e00a      	b.n	80085e4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4806      	ldr	r0, [pc, #24]	; (80085f8 <netconn_tcp_recvd_msg+0x5c>)
 80085de:	f7ff fd15 	bl	800800c <netconn_apimsg>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	0801a21c 	.word	0x0801a21c
 80085f0:	0801a47c 	.word	0x0801a47c
 80085f4:	0801a274 	.word	0x0801a274
 80085f8:	08009e61 	.word	0x08009e61

080085fc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b090      	sub	sp, #64	; 0x40
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3310      	adds	r3, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f010 f8bd 	bl	801878e <sys_mbox_valid>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800861a:	f06f 030a 	mvn.w	r3, #10
 800861e:	e06d      	b.n	80086fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	7f1b      	ldrb	r3, [r3, #28]
 8008624:	b25b      	sxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	da07      	bge.n	800863a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	7f1b      	ldrb	r3, [r3, #28]
 800862e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008632:	b2da      	uxtb	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008638:	e039      	b.n	80086ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	461a      	mov	r2, r3
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff fee3 	bl	800840c <netconn_recv_data>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800864c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008654:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008658:	e050      	b.n	80086fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10e      	bne.n	8008688 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <netconn_recv_data_tcp+0x7a>
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	891b      	ldrh	r3, [r3, #8]
 8008674:	e000      	b.n	8008678 <netconn_recv_data_tcp+0x7c>
 8008676:	2301      	movs	r3, #1
 8008678:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800867a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800867c:	f107 0214 	add.w	r2, r7, #20
 8008680:	4619      	mov	r1, r3
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff ff8a 	bl	800859c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	2b00      	cmp	r3, #0
 800868c:	d134      	bne.n	80086f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	7f1b      	ldrb	r3, [r3, #28]
 800869c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80086a6:	f06f 0306 	mvn.w	r3, #6
 80086aa:	e027      	b.n	80086fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80086ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <netconn_recv_data_tcp+0xc6>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	2200      	movs	r2, #0
 80086bc:	2101      	movs	r1, #1
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10f      	bne.n	80086ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f9a3 	bl	8008a16 <netconn_err>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80086d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <netconn_recv_data_tcp+0xe8>
          return err;
 80086de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80086e2:	e00b      	b.n	80086fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80086e4:	f06f 030d 	mvn.w	r3, #13
 80086e8:	e008      	b.n	80086fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80086ea:	2101      	movs	r1, #1
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f955 	bl	800899c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80086f2:	f06f 030e 	mvn.w	r3, #14
 80086f6:	e001      	b.n	80086fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80086f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3740      	adds	r7, #64	; 0x40
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <netconn_recv+0x28>
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <netconn_recv+0xe0>)
 800871a:	f240 3263 	movw	r2, #867	; 0x363
 800871e:	4932      	ldr	r1, [pc, #200]	; (80087e8 <netconn_recv+0xe4>)
 8008720:	4832      	ldr	r0, [pc, #200]	; (80087ec <netconn_recv+0xe8>)
 8008722:	f010 fa89 	bl	8018c38 <iprintf>
 8008726:	f06f 030f 	mvn.w	r3, #15
 800872a:	e056      	b.n	80087da <netconn_recv+0xd6>
  *new_buf = NULL;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <netconn_recv+0x48>
 8008738:	4b2a      	ldr	r3, [pc, #168]	; (80087e4 <netconn_recv+0xe0>)
 800873a:	f240 3265 	movw	r2, #869	; 0x365
 800873e:	492c      	ldr	r1, [pc, #176]	; (80087f0 <netconn_recv+0xec>)
 8008740:	482a      	ldr	r0, [pc, #168]	; (80087ec <netconn_recv+0xe8>)
 8008742:	f010 fa79 	bl	8018c38 <iprintf>
 8008746:	f06f 030f 	mvn.w	r3, #15
 800874a:	e046      	b.n	80087da <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008754:	2b10      	cmp	r3, #16
 8008756:	d13a      	bne.n	80087ce <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800875c:	2006      	movs	r0, #6
 800875e:	f003 fc13 	bl	800bf88 <memp_malloc>
 8008762:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <netconn_recv+0x6c>
      return ERR_MEM;
 800876a:	f04f 33ff 	mov.w	r3, #4294967295
 800876e:	e034      	b.n	80087da <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	2200      	movs	r2, #0
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff3f 	bl	80085fc <netconn_recv_data_tcp>
 800877e:	4603      	mov	r3, r0
 8008780:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008782:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d006      	beq.n	8008798 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800878a:	6979      	ldr	r1, [r7, #20]
 800878c:	2006      	movs	r0, #6
 800878e:	f003 fc71 	bl	800c074 <memp_free>
      return err;
 8008792:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008796:	e020      	b.n	80087da <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <netconn_recv+0xa8>
 800879e:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <netconn_recv+0xe0>)
 80087a0:	f240 3279 	movw	r2, #889	; 0x379
 80087a4:	4913      	ldr	r1, [pc, #76]	; (80087f4 <netconn_recv+0xf0>)
 80087a6:	4811      	ldr	r0, [pc, #68]	; (80087ec <netconn_recv+0xe8>)
 80087a8:	f010 fa46 	bl	8018c38 <iprintf>

    buf->p = p;
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2200      	movs	r2, #0
 80087c2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	e005      	b.n	80087da <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fe1a 	bl	800840c <netconn_recv_data>
 80087d8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	0801a21c 	.word	0x0801a21c
 80087e8:	0801a434 	.word	0x0801a434
 80087ec:	0801a274 	.word	0x0801a274
 80087f0:	0801a454 	.word	0x0801a454
 80087f4:	0801a4cc 	.word	0x0801a4cc

080087f8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	f107 0110 	add.w	r1, r7, #16
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	2201      	movs	r2, #1
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f805 	bl	800882c <netconn_write_vectors_partly>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b092      	sub	sp, #72	; 0x48
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	460b      	mov	r3, r1
 800883c:	80fb      	strh	r3, [r7, #6]
 800883e:	4613      	mov	r3, r2
 8008840:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d109      	bne.n	800885c <netconn_write_vectors_partly+0x30>
 8008848:	4b4e      	ldr	r3, [pc, #312]	; (8008984 <netconn_write_vectors_partly+0x158>)
 800884a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800884e:	494e      	ldr	r1, [pc, #312]	; (8008988 <netconn_write_vectors_partly+0x15c>)
 8008850:	484e      	ldr	r0, [pc, #312]	; (800898c <netconn_write_vectors_partly+0x160>)
 8008852:	f010 f9f1 	bl	8018c38 <iprintf>
 8008856:	f06f 030f 	mvn.w	r3, #15
 800885a:	e08e      	b.n	800897a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008864:	2b10      	cmp	r3, #16
 8008866:	d009      	beq.n	800887c <netconn_write_vectors_partly+0x50>
 8008868:	4b46      	ldr	r3, [pc, #280]	; (8008984 <netconn_write_vectors_partly+0x158>)
 800886a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800886e:	4948      	ldr	r1, [pc, #288]	; (8008990 <netconn_write_vectors_partly+0x164>)
 8008870:	4846      	ldr	r0, [pc, #280]	; (800898c <netconn_write_vectors_partly+0x160>)
 8008872:	f010 f9e1 	bl	8018c38 <iprintf>
 8008876:	f06f 0305 	mvn.w	r3, #5
 800887a:	e07e      	b.n	800897a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	7f1b      	ldrb	r3, [r3, #28]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <netconn_write_vectors_partly+0x66>
 8008888:	797b      	ldrb	r3, [r7, #5]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <netconn_write_vectors_partly+0x6a>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <netconn_write_vectors_partly+0x6c>
 8008896:	2300      	movs	r3, #0
 8008898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800889c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <netconn_write_vectors_partly+0x84>
 80088a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80088aa:	f06f 0305 	mvn.w	r3, #5
 80088ae:	e064      	b.n	800897a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80088b4:	2300      	movs	r3, #0
 80088b6:	643b      	str	r3, [r7, #64]	; 0x40
 80088b8:	e015      	b.n	80088e6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80088ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	4413      	add	r3, r2
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c6:	4413      	add	r3, r2
 80088c8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d202      	bcs.n	80088e0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80088da:	f06f 0305 	mvn.w	r3, #5
 80088de:	e04c      	b.n	800897a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	3301      	adds	r3, #1
 80088e4:	643b      	str	r3, [r7, #64]	; 0x40
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ea:	429a      	cmp	r2, r3
 80088ec:	dbe5      	blt.n	80088ba <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80088ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	e040      	b.n	800897a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80088f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da0a      	bge.n	8008914 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80088fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008904:	f06f 0305 	mvn.w	r3, #5
 8008908:	e037      	b.n	800897a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800890a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800890e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008924:	797b      	ldrb	r3, [r7, #5]
 8008926:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800892a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008932:	f107 0314 	add.w	r3, r7, #20
 8008936:	4619      	mov	r1, r3
 8008938:	4816      	ldr	r0, [pc, #88]	; (8008994 <netconn_write_vectors_partly+0x168>)
 800893a:	f7ff fb67 	bl	800800c <netconn_apimsg>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008944:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008948:	2b00      	cmp	r3, #0
 800894a:	d114      	bne.n	8008976 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800894c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008956:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008958:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008964:	429a      	cmp	r2, r3
 8008966:	d006      	beq.n	8008976 <netconn_write_vectors_partly+0x14a>
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <netconn_write_vectors_partly+0x158>)
 800896a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800896e:	490a      	ldr	r1, [pc, #40]	; (8008998 <netconn_write_vectors_partly+0x16c>)
 8008970:	4806      	ldr	r0, [pc, #24]	; (800898c <netconn_write_vectors_partly+0x160>)
 8008972:	f010 f961 	bl	8018c38 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008976:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800897a:	4618      	mov	r0, r3
 800897c:	3748      	adds	r7, #72	; 0x48
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	0801a21c 	.word	0x0801a21c
 8008988:	0801a4f4 	.word	0x0801a4f4
 800898c:	0801a274 	.word	0x0801a274
 8008990:	0801a510 	.word	0x0801a510
 8008994:	0800a265 	.word	0x0800a265
 8008998:	0801a534 	.word	0x0801a534

0800899c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	; 0x30
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <netconn_close_shutdown+0x26>
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <netconn_close_shutdown+0x50>)
 80089b0:	f240 4247 	movw	r2, #1095	; 0x447
 80089b4:	490e      	ldr	r1, [pc, #56]	; (80089f0 <netconn_close_shutdown+0x54>)
 80089b6:	480f      	ldr	r0, [pc, #60]	; (80089f4 <netconn_close_shutdown+0x58>)
 80089b8:	f010 f93e 	bl	8018c38 <iprintf>
 80089bc:	f06f 030f 	mvn.w	r3, #15
 80089c0:	e010      	b.n	80089e4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80089ca:	2329      	movs	r3, #41	; 0x29
 80089cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	4619      	mov	r1, r3
 80089d4:	4808      	ldr	r0, [pc, #32]	; (80089f8 <netconn_close_shutdown+0x5c>)
 80089d6:	f7ff fb19 	bl	800800c <netconn_apimsg>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80089e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3730      	adds	r7, #48	; 0x30
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	0801a21c 	.word	0x0801a21c
 80089f0:	0801a558 	.word	0x0801a558
 80089f4:	0801a274 	.word	0x0801a274
 80089f8:	0800a37d 	.word	0x0800a37d

080089fc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008a04:	2103      	movs	r1, #3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ffc8 	bl	800899c <netconn_close_shutdown>
 8008a0c:	4603      	mov	r3, r0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <netconn_err+0x12>
    return ERR_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e00d      	b.n	8008a44 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008a28:	f00f ffcc 	bl	80189c4 <sys_arch_protect>
 8008a2c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7a1b      	ldrb	r3, [r3, #8]
 8008a32:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f00f ffd0 	bl	80189e0 <sys_arch_unprotect>
  return err;
 8008a40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a5a:	f113 0f0d 	cmn.w	r3, #13
 8008a5e:	d009      	beq.n	8008a74 <lwip_netconn_err_to_msg+0x28>
 8008a60:	f113 0f0d 	cmn.w	r3, #13
 8008a64:	dc0c      	bgt.n	8008a80 <lwip_netconn_err_to_msg+0x34>
 8008a66:	f113 0f0f 	cmn.w	r3, #15
 8008a6a:	d007      	beq.n	8008a7c <lwip_netconn_err_to_msg+0x30>
 8008a6c:	f113 0f0e 	cmn.w	r3, #14
 8008a70:	d002      	beq.n	8008a78 <lwip_netconn_err_to_msg+0x2c>
 8008a72:	e005      	b.n	8008a80 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <lwip_netconn_err_to_msg+0x54>)
 8008a76:	e00e      	b.n	8008a96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <lwip_netconn_err_to_msg+0x58>)
 8008a7a:	e00c      	b.n	8008a96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008a7c:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <lwip_netconn_err_to_msg+0x5c>)
 8008a7e:	e00a      	b.n	8008a96 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <lwip_netconn_err_to_msg+0x48>
 8008a88:	4b08      	ldr	r3, [pc, #32]	; (8008aac <lwip_netconn_err_to_msg+0x60>)
 8008a8a:	227d      	movs	r2, #125	; 0x7d
 8008a8c:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <lwip_netconn_err_to_msg+0x64>)
 8008a8e:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <lwip_netconn_err_to_msg+0x68>)
 8008a90:	f010 f8d2 	bl	8018c38 <iprintf>
      return NULL;
 8008a94:	2300      	movs	r3, #0
  }
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0801dcd0 	.word	0x0801dcd0
 8008aa4:	0801dcd1 	.word	0x0801dcd1
 8008aa8:	0801dcd2 	.word	0x0801dcd2
 8008aac:	0801a574 	.word	0x0801a574
 8008ab0:	0801a5a8 	.word	0x0801a5a8
 8008ab4:	0801a5b8 	.word	0x0801a5b8

08008ab8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <lwip_netconn_is_err_msg+0x1c>
 8008ac8:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <lwip_netconn_is_err_msg+0x5c>)
 8008aca:	2285      	movs	r2, #133	; 0x85
 8008acc:	4912      	ldr	r1, [pc, #72]	; (8008b18 <lwip_netconn_is_err_msg+0x60>)
 8008ace:	4813      	ldr	r0, [pc, #76]	; (8008b1c <lwip_netconn_is_err_msg+0x64>)
 8008ad0:	f010 f8b2 	bl	8018c38 <iprintf>

  if (msg == &netconn_aborted) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a12      	ldr	r2, [pc, #72]	; (8008b20 <lwip_netconn_is_err_msg+0x68>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d104      	bne.n	8008ae6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	22f3      	movs	r2, #243	; 0xf3
 8008ae0:	701a      	strb	r2, [r3, #0]
    return 1;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e012      	b.n	8008b0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a0e      	ldr	r2, [pc, #56]	; (8008b24 <lwip_netconn_is_err_msg+0x6c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d104      	bne.n	8008af8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	22f2      	movs	r2, #242	; 0xf2
 8008af2:	701a      	strb	r2, [r3, #0]
    return 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e009      	b.n	8008b0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a0b      	ldr	r2, [pc, #44]	; (8008b28 <lwip_netconn_is_err_msg+0x70>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d104      	bne.n	8008b0a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	22f1      	movs	r2, #241	; 0xf1
 8008b04:	701a      	strb	r2, [r3, #0]
    return 1;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	0801a574 	.word	0x0801a574
 8008b18:	0801a5e0 	.word	0x0801a5e0
 8008b1c:	0801a5b8 	.word	0x0801a5b8
 8008b20:	0801dcd0 	.word	0x0801dcd0
 8008b24:	0801dcd1 	.word	0x0801dcd1
 8008b28:	0801dcd2 	.word	0x0801dcd2

08008b2c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <recv_udp+0x20>
 8008b40:	4b34      	ldr	r3, [pc, #208]	; (8008c14 <recv_udp+0xe8>)
 8008b42:	22e5      	movs	r2, #229	; 0xe5
 8008b44:	4934      	ldr	r1, [pc, #208]	; (8008c18 <recv_udp+0xec>)
 8008b46:	4835      	ldr	r0, [pc, #212]	; (8008c1c <recv_udp+0xf0>)
 8008b48:	f010 f876 	bl	8018c38 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <recv_udp+0x32>
 8008b52:	4b30      	ldr	r3, [pc, #192]	; (8008c14 <recv_udp+0xe8>)
 8008b54:	22e6      	movs	r2, #230	; 0xe6
 8008b56:	4932      	ldr	r1, [pc, #200]	; (8008c20 <recv_udp+0xf4>)
 8008b58:	4830      	ldr	r0, [pc, #192]	; (8008c1c <recv_udp+0xf0>)
 8008b5a:	f010 f86d 	bl	8018c38 <iprintf>
  conn = (struct netconn *)arg;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <recv_udp+0x44>
    pbuf_free(p);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f004 f933 	bl	800cdd4 <pbuf_free>
    return;
 8008b6e:	e04d      	b.n	8008c0c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d005      	beq.n	8008b86 <recv_udp+0x5a>
 8008b7a:	4b26      	ldr	r3, [pc, #152]	; (8008c14 <recv_udp+0xe8>)
 8008b7c:	22ee      	movs	r2, #238	; 0xee
 8008b7e:	4929      	ldr	r1, [pc, #164]	; (8008c24 <recv_udp+0xf8>)
 8008b80:	4826      	ldr	r0, [pc, #152]	; (8008c1c <recv_udp+0xf0>)
 8008b82:	f010 f859 	bl	8018c38 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	3310      	adds	r3, #16
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f00f fdff 	bl	801878e <sys_mbox_valid>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d103      	bne.n	8008b9e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f004 f91c 	bl	800cdd4 <pbuf_free>
    return;
 8008b9c:	e036      	b.n	8008c0c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008b9e:	2006      	movs	r0, #6
 8008ba0:	f003 f9f2 	bl	800bf88 <memp_malloc>
 8008ba4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <recv_udp+0x88>
    pbuf_free(p);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f004 f911 	bl	800cdd4 <pbuf_free>
    return;
 8008bb2:	e02b      	b.n	8008c0c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <recv_udp+0xa0>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	e000      	b.n	8008bce <recv_udp+0xa2>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008bd6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	891b      	ldrh	r3, [r3, #8]
 8008bdc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	3310      	adds	r3, #16
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f00f fd5d 	bl	80186a4 <sys_mbox_trypost>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008bf0:	69b8      	ldr	r0, [r7, #24]
 8008bf2:	f001 fc4f 	bl	800a494 <netbuf_delete>
    return;
 8008bf6:	e009      	b.n	8008c0c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <recv_udp+0xe0>
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	8afa      	ldrh	r2, [r7, #22]
 8008c06:	2100      	movs	r1, #0
 8008c08:	69f8      	ldr	r0, [r7, #28]
 8008c0a:	4798      	blx	r3
  }
}
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	0801a574 	.word	0x0801a574
 8008c18:	0801a5ec 	.word	0x0801a5ec
 8008c1c:	0801a5b8 	.word	0x0801a5b8
 8008c20:	0801a610 	.word	0x0801a610
 8008c24:	0801a630 	.word	0x0801a630

08008c28 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <recv_tcp+0x22>
 8008c3c:	4b36      	ldr	r3, [pc, #216]	; (8008d18 <recv_tcp+0xf0>)
 8008c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c42:	4936      	ldr	r1, [pc, #216]	; (8008d1c <recv_tcp+0xf4>)
 8008c44:	4836      	ldr	r0, [pc, #216]	; (8008d20 <recv_tcp+0xf8>)
 8008c46:	f00f fff7 	bl	8018c38 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <recv_tcp+0x36>
 8008c50:	4b31      	ldr	r3, [pc, #196]	; (8008d18 <recv_tcp+0xf0>)
 8008c52:	f240 122d 	movw	r2, #301	; 0x12d
 8008c56:	4933      	ldr	r1, [pc, #204]	; (8008d24 <recv_tcp+0xfc>)
 8008c58:	4831      	ldr	r0, [pc, #196]	; (8008d20 <recv_tcp+0xf8>)
 8008c5a:	f00f ffed 	bl	8018c38 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d006      	beq.n	8008c74 <recv_tcp+0x4c>
 8008c66:	4b2c      	ldr	r3, [pc, #176]	; (8008d18 <recv_tcp+0xf0>)
 8008c68:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008c6c:	492e      	ldr	r1, [pc, #184]	; (8008d28 <recv_tcp+0x100>)
 8008c6e:	482c      	ldr	r0, [pc, #176]	; (8008d20 <recv_tcp+0xf8>)
 8008c70:	f00f ffe2 	bl	8018c38 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <recv_tcp+0x5c>
    return ERR_VAL;
 8008c7e:	f06f 0305 	mvn.w	r3, #5
 8008c82:	e045      	b.n	8008d10 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d006      	beq.n	8008c9c <recv_tcp+0x74>
 8008c8e:	4b22      	ldr	r3, [pc, #136]	; (8008d18 <recv_tcp+0xf0>)
 8008c90:	f240 1235 	movw	r2, #309	; 0x135
 8008c94:	4925      	ldr	r1, [pc, #148]	; (8008d2c <recv_tcp+0x104>)
 8008c96:	4822      	ldr	r0, [pc, #136]	; (8008d20 <recv_tcp+0xf8>)
 8008c98:	f00f ffce 	bl	8018c38 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	3310      	adds	r3, #16
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f00f fd74 	bl	801878e <sys_mbox_valid>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10d      	bne.n	8008cc8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	891b      	ldrh	r3, [r3, #8]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	68b8      	ldr	r0, [r7, #8]
 8008cba:	f005 f865 	bl	800dd88 <tcp_recved>
      pbuf_free(p);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f004 f888 	bl	800cdd4 <pbuf_free>
    }
    return ERR_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e023      	b.n	8008d10 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <recv_tcp+0xb2>
    msg = p;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	891b      	ldrh	r3, [r3, #8]
 8008cd6:	83fb      	strh	r3, [r7, #30]
 8008cd8:	e003      	b.n	8008ce2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008cda:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <recv_tcp+0x108>)
 8008cdc:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	3310      	adds	r3, #16
 8008ce6:	69b9      	ldr	r1, [r7, #24]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f00f fcdb 	bl	80186a4 <sys_mbox_trypost>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	e00a      	b.n	8008d10 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <recv_tcp+0xe6>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	8bfa      	ldrh	r2, [r7, #30]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	4798      	blx	r3
  }

  return ERR_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3720      	adds	r7, #32
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	0801a574 	.word	0x0801a574
 8008d1c:	0801a650 	.word	0x0801a650
 8008d20:	0801a5b8 	.word	0x0801a5b8
 8008d24:	0801a674 	.word	0x0801a674
 8008d28:	0801a694 	.word	0x0801a694
 8008d2c:	0801a6ac 	.word	0x0801a6ac
 8008d30:	0801dcd2 	.word	0x0801dcd2

08008d34 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <poll_tcp+0x22>
 8008d48:	4b29      	ldr	r3, [pc, #164]	; (8008df0 <poll_tcp+0xbc>)
 8008d4a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008d4e:	4929      	ldr	r1, [pc, #164]	; (8008df4 <poll_tcp+0xc0>)
 8008d50:	4829      	ldr	r0, [pc, #164]	; (8008df8 <poll_tcp+0xc4>)
 8008d52:	f00f ff71 	bl	8018c38 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d104      	bne.n	8008d68 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008d5e:	2101      	movs	r1, #1
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f001 f8b3 	bl	8009ecc <lwip_netconn_do_writemore>
 8008d66:	e016      	b.n	8008d96 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d112      	bne.n	8008d96 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <poll_tcp+0x5a>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	7a5b      	ldrb	r3, [r3, #9]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d005      	beq.n	8008d8e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	7a5a      	ldrb	r2, [r3, #9]
 8008d88:	3a01      	subs	r2, #1
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008d8e:	2101      	movs	r1, #1
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fbf7 	bl	8009584 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7f1b      	ldrb	r3, [r3, #28]
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d021      	beq.n	8008de6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01d      	beq.n	8008de6 <poll_tcp+0xb2>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008db2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008db6:	d316      	bcc.n	8008de6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d810      	bhi.n	8008de6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	7f1b      	ldrb	r3, [r3, #28]
 8008dc8:	f023 0310 	bic.w	r3, r3, #16
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <poll_tcp+0xb2>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2200      	movs	r2, #0
 8008de0:	2102      	movs	r1, #2
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	0801a574 	.word	0x0801a574
 8008df4:	0801a6cc 	.word	0x0801a6cc
 8008df8:	0801a5b8 	.word	0x0801a5b8

08008dfc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <sent_tcp+0x26>
 8008e14:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <sent_tcp+0x9c>)
 8008e16:	f240 1293 	movw	r2, #403	; 0x193
 8008e1a:	4920      	ldr	r1, [pc, #128]	; (8008e9c <sent_tcp+0xa0>)
 8008e1c:	4820      	ldr	r0, [pc, #128]	; (8008ea0 <sent_tcp+0xa4>)
 8008e1e:	f00f ff0b 	bl	8018c38 <iprintf>

  if (conn) {
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d032      	beq.n	8008e8e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d104      	bne.n	8008e3a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008e30:	2101      	movs	r1, #1
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f001 f84a 	bl	8009ecc <lwip_netconn_do_writemore>
 8008e38:	e007      	b.n	8008e4a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d103      	bne.n	8008e4a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008e42:	2101      	movs	r1, #1
 8008e44:	6978      	ldr	r0, [r7, #20]
 8008e46:	f000 fb9d 	bl	8009584 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01d      	beq.n	8008e8e <sent_tcp+0x92>
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008e5e:	d316      	bcc.n	8008e8e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d810      	bhi.n	8008e8e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	7f1b      	ldrb	r3, [r3, #28]
 8008e70:	f023 0310 	bic.w	r3, r3, #16
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <sent_tcp+0x92>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	2102      	movs	r1, #2
 8008e8a:	6978      	ldr	r0, [r7, #20]
 8008e8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	0801a574 	.word	0x0801a574
 8008e9c:	0801a6cc 	.word	0x0801a6cc
 8008ea0:	0801a5b8 	.word	0x0801a5b8

08008ea4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <err_tcp+0x24>
 8008eba:	4b5f      	ldr	r3, [pc, #380]	; (8009038 <err_tcp+0x194>)
 8008ebc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008ec0:	495e      	ldr	r1, [pc, #376]	; (800903c <err_tcp+0x198>)
 8008ec2:	485f      	ldr	r0, [pc, #380]	; (8009040 <err_tcp+0x19c>)
 8008ec4:	f00f feb8 	bl	8018c38 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008ec8:	f00f fd7c 	bl	80189c4 <sys_arch_protect>
 8008ecc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	7f1b      	ldrb	r3, [r3, #28]
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008ef4:	69b8      	ldr	r0, [r7, #24]
 8008ef6:	f00f fd73 	bl	80189e0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <err_tcp+0x6a>
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	2200      	movs	r2, #0
 8008f08:	2104      	movs	r1, #4
 8008f0a:	69f8      	ldr	r0, [r7, #28]
 8008f0c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <err_tcp+0x7e>
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	69f8      	ldr	r0, [r7, #28]
 8008f20:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <err_tcp+0x92>
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2102      	movs	r1, #2
 8008f32:	69f8      	ldr	r0, [r7, #28]
 8008f34:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fd86 	bl	8008a4c <lwip_netconn_err_to_msg>
 8008f40:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	3310      	adds	r3, #16
 8008f46:	4618      	mov	r0, r3
 8008f48:	f00f fc21 	bl	801878e <sys_mbox_valid>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	3310      	adds	r3, #16
 8008f56:	6939      	ldr	r1, [r7, #16]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f00f fba3 	bl	80186a4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	3314      	adds	r3, #20
 8008f62:	4618      	mov	r0, r3
 8008f64:	f00f fc13 	bl	801878e <sys_mbox_valid>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3314      	adds	r3, #20
 8008f72:	6939      	ldr	r1, [r7, #16]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00f fb95 	bl	80186a4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d005      	beq.n	8008f8c <err_tcp+0xe8>
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d002      	beq.n	8008f8c <err_tcp+0xe8>
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d143      	bne.n	8009014 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	7f1b      	ldrb	r3, [r3, #28]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	7f1b      	ldrb	r3, [r3, #28]
 8008fa4:	f023 0304 	bic.w	r3, r3, #4
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d13b      	bne.n	800902c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d106      	bne.n	8008fca <err_tcp+0x126>
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <err_tcp+0x194>)
 8008fbe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008fc2:	4920      	ldr	r1, [pc, #128]	; (8009044 <err_tcp+0x1a0>)
 8008fc4:	481e      	ldr	r0, [pc, #120]	; (8009040 <err_tcp+0x19c>)
 8008fc6:	f00f fe37 	bl	8018c38 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d104      	bne.n	8008fda <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	711a      	strb	r2, [r3, #4]
 8008fd8:	e003      	b.n	8008fe2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008fec:	68b8      	ldr	r0, [r7, #8]
 8008fee:	f00f fc5f 	bl	80188b0 <sys_sem_valid>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d106      	bne.n	8009006 <err_tcp+0x162>
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <err_tcp+0x194>)
 8008ffa:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008ffe:	4912      	ldr	r1, [pc, #72]	; (8009048 <err_tcp+0x1a4>)
 8009000:	480f      	ldr	r0, [pc, #60]	; (8009040 <err_tcp+0x19c>)
 8009002:	f00f fe19 	bl	8018c38 <iprintf>
      conn->current_msg = NULL;
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	2200      	movs	r2, #0
 800900a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f00f fc35 	bl	801887c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009012:	e00b      	b.n	800902c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <err_tcp+0x18a>
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <err_tcp+0x194>)
 800901e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009022:	490a      	ldr	r1, [pc, #40]	; (800904c <err_tcp+0x1a8>)
 8009024:	4806      	ldr	r0, [pc, #24]	; (8009040 <err_tcp+0x19c>)
 8009026:	f00f fe07 	bl	8018c38 <iprintf>
  }
}
 800902a:	e000      	b.n	800902e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800902c:	bf00      	nop
}
 800902e:	bf00      	nop
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	0801a574 	.word	0x0801a574
 800903c:	0801a6cc 	.word	0x0801a6cc
 8009040:	0801a5b8 	.word	0x0801a5b8
 8009044:	0801a6dc 	.word	0x0801a6dc
 8009048:	0801a6f8 	.word	0x0801a6f8
 800904c:	0801a714 	.word	0x0801a714

08009050 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f005 fe8d 	bl	800ed80 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009066:	490a      	ldr	r1, [pc, #40]	; (8009090 <setup_tcp+0x40>)
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f005 fe9b 	bl	800eda4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800906e:	4909      	ldr	r1, [pc, #36]	; (8009094 <setup_tcp+0x44>)
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f005 feb9 	bl	800ede8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009076:	2202      	movs	r2, #2
 8009078:	4907      	ldr	r1, [pc, #28]	; (8009098 <setup_tcp+0x48>)
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f005 ff10 	bl	800eea0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009080:	4906      	ldr	r1, [pc, #24]	; (800909c <setup_tcp+0x4c>)
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f005 fed2 	bl	800ee2c <tcp_err>
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	08008c29 	.word	0x08008c29
 8009094:	08008dfd 	.word	0x08008dfd
 8009098:	08008d35 	.word	0x08008d35
 800909c:	08008ea5 	.word	0x08008ea5

080090a0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80090a0:	b590      	push	{r4, r7, lr}
 80090a2:	b089      	sub	sp, #36	; 0x24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <accept_function+0x1e>
    return ERR_VAL;
 80090b8:	f06f 0305 	mvn.w	r3, #5
 80090bc:	e0a1      	b.n	8009202 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3314      	adds	r3, #20
 80090c2:	4618      	mov	r0, r3
 80090c4:	f00f fb63 	bl	801878e <sys_mbox_valid>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d102      	bne.n	80090d4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80090ce:	f06f 0305 	mvn.w	r3, #5
 80090d2:	e096      	b.n	8009202 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d11b      	bne.n	8009112 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	f103 0414 	add.w	r4, r3, #20
 80090e0:	f06f 000c 	mvn.w	r0, #12
 80090e4:	f7ff fcb2 	bl	8008a4c <lwip_netconn_err_to_msg>
 80090e8:	4603      	mov	r3, r0
 80090ea:	4619      	mov	r1, r3
 80090ec:	4620      	mov	r0, r4
 80090ee:	f00f fad9 	bl	80186a4 <sys_mbox_trypost>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <accept_function+0x6c>
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	69f8      	ldr	r0, [r7, #28]
 800910a:	4798      	blx	r3
    }
    return ERR_VAL;
 800910c:	f06f 0305 	mvn.w	r3, #5
 8009110:	e077      	b.n	8009202 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <accept_function+0x88>
 800911a:	4b3c      	ldr	r3, [pc, #240]	; (800920c <accept_function+0x16c>)
 800911c:	f240 222a 	movw	r2, #554	; 0x22a
 8009120:	493b      	ldr	r1, [pc, #236]	; (8009210 <accept_function+0x170>)
 8009122:	483c      	ldr	r0, [pc, #240]	; (8009214 <accept_function+0x174>)
 8009124:	f00f fd88 	bl	8018c38 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	781a      	ldrb	r2, [r3, #0]
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f000 f8f0 	bl	8009318 <netconn_alloc>
 8009138:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d11b      	bne.n	8009178 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f103 0414 	add.w	r4, r3, #20
 8009146:	f06f 000c 	mvn.w	r0, #12
 800914a:	f7ff fc7f 	bl	8008a4c <lwip_netconn_err_to_msg>
 800914e:	4603      	mov	r3, r0
 8009150:	4619      	mov	r1, r3
 8009152:	4620      	mov	r0, r4
 8009154:	f00f faa6 	bl	80186a4 <sys_mbox_trypost>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <accept_function+0xd2>
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	69f8      	ldr	r0, [r7, #28]
 8009170:	4798      	blx	r3
    }
    return ERR_MEM;
 8009172:	f04f 33ff 	mov.w	r3, #4294967295
 8009176:	e044      	b.n	8009202 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800917e:	69b8      	ldr	r0, [r7, #24]
 8009180:	f7ff ff66 	bl	8009050 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	3314      	adds	r3, #20
 8009188:	69b9      	ldr	r1, [r7, #24]
 800918a:	4618      	mov	r0, r3
 800918c:	f00f fa8a 	bl	80186a4 <sys_mbox_trypost>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d02a      	beq.n	80091ec <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800919c:	2100      	movs	r1, #0
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	f005 fdee 	bl	800ed80 <tcp_arg>
    tcp_recv(pcb, NULL);
 80091a4:	2100      	movs	r1, #0
 80091a6:	6978      	ldr	r0, [r7, #20]
 80091a8:	f005 fdfc 	bl	800eda4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80091ac:	2100      	movs	r1, #0
 80091ae:	6978      	ldr	r0, [r7, #20]
 80091b0:	f005 fe1a 	bl	800ede8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f005 fe71 	bl	800eea0 <tcp_poll>
    tcp_err(pcb, NULL);
 80091be:	2100      	movs	r1, #0
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f005 fe33 	bl	800ee2c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2200      	movs	r2, #0
 80091ca:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	3310      	adds	r3, #16
 80091d0:	4618      	mov	r0, r3
 80091d2:	f00f fa55 	bl	8018680 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	3310      	adds	r3, #16
 80091da:	4618      	mov	r0, r3
 80091dc:	f00f fae8 	bl	80187b0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80091e0:	69b8      	ldr	r0, [r7, #24]
 80091e2:	f000 f907 	bl	80093f4 <netconn_free>
    return ERR_MEM;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e00a      	b.n	8009202 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <accept_function+0x160>
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2200      	movs	r2, #0
 80091fa:	2100      	movs	r1, #0
 80091fc:	69f8      	ldr	r0, [r7, #28]
 80091fe:	4798      	blx	r3
  }

  return ERR_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3724      	adds	r7, #36	; 0x24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}
 800920a:	bf00      	nop
 800920c:	0801a574 	.word	0x0801a574
 8009210:	0801a730 	.word	0x0801a730
 8009214:	0801a5b8 	.word	0x0801a5b8

08009218 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d006      	beq.n	800923c <pcb_new+0x24>
 800922e:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <pcb_new+0xc4>)
 8009230:	f240 2265 	movw	r2, #613	; 0x265
 8009234:	492a      	ldr	r1, [pc, #168]	; (80092e0 <pcb_new+0xc8>)
 8009236:	482b      	ldr	r0, [pc, #172]	; (80092e4 <pcb_new+0xcc>)
 8009238:	f00f fcfe 	bl	8018c38 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009246:	2b10      	cmp	r3, #16
 8009248:	d022      	beq.n	8009290 <pcb_new+0x78>
 800924a:	2b20      	cmp	r3, #32
 800924c:	d133      	bne.n	80092b6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681c      	ldr	r4, [r3, #0]
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4618      	mov	r0, r3
 8009256:	f00b f83a 	bl	80142ce <udp_new_ip_type>
 800925a:	4603      	mov	r3, r0
 800925c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d02a      	beq.n	80092be <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b22      	cmp	r3, #34	; 0x22
 8009270:	d104      	bne.n	800927c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6858      	ldr	r0, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	4917      	ldr	r1, [pc, #92]	; (80092e8 <pcb_new+0xd0>)
 800928a:	f00a ffa7 	bl	80141dc <udp_recv>
      }
      break;
 800928e:	e016      	b.n	80092be <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681c      	ldr	r4, [r3, #0]
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	4618      	mov	r0, r3
 8009298:	f005 fd64 	bl	800ed64 <tcp_new_ip_type>
 800929c:	4603      	mov	r3, r0
 800929e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fece 	bl	8009050 <setup_tcp>
      }
      break;
 80092b4:	e005      	b.n	80092c2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	22fa      	movs	r2, #250	; 0xfa
 80092ba:	711a      	strb	r2, [r3, #4]
      return;
 80092bc:	e00a      	b.n	80092d4 <pcb_new+0xbc>
      break;
 80092be:	bf00      	nop
 80092c0:	e000      	b.n	80092c4 <pcb_new+0xac>
      break;
 80092c2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	22ff      	movs	r2, #255	; 0xff
 80092d2:	711a      	strb	r2, [r3, #4]
  }
}
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	bf00      	nop
 80092dc:	0801a574 	.word	0x0801a574
 80092e0:	0801a758 	.word	0x0801a758
 80092e4:	0801a5b8 	.word	0x0801a5b8
 80092e8:	08008b2d 	.word	0x08008b2d

080092ec <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff ff85 	bl	8009218 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009328:	2007      	movs	r0, #7
 800932a:	f002 fe2d 	bl	800bf88 <memp_malloc>
 800932e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <netconn_alloc+0x22>
    return NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	e052      	b.n	80093e0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	79fa      	ldrb	r2, [r7, #7]
 8009344:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009352:	2b10      	cmp	r3, #16
 8009354:	d004      	beq.n	8009360 <netconn_alloc+0x48>
 8009356:	2b20      	cmp	r3, #32
 8009358:	d105      	bne.n	8009366 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800935a:	2306      	movs	r3, #6
 800935c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800935e:	e00a      	b.n	8009376 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009360:	2306      	movs	r3, #6
 8009362:	617b      	str	r3, [r7, #20]
      break;
 8009364:	e007      	b.n	8009376 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009366:	4b20      	ldr	r3, [pc, #128]	; (80093e8 <netconn_alloc+0xd0>)
 8009368:	f240 22e5 	movw	r2, #741	; 0x2e5
 800936c:	491f      	ldr	r1, [pc, #124]	; (80093ec <netconn_alloc+0xd4>)
 800936e:	4820      	ldr	r0, [pc, #128]	; (80093f0 <netconn_alloc+0xd8>)
 8009370:	f00f fc62 	bl	8018c38 <iprintf>
      goto free_and_return;
 8009374:	e02f      	b.n	80093d6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	6979      	ldr	r1, [r7, #20]
 800937c:	4618      	mov	r0, r3
 800937e:	f00f f95d 	bl	801863c <sys_mbox_new>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d125      	bne.n	80093d4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	330c      	adds	r3, #12
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f00f fa1b 	bl	80187ca <sys_sem_new>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3310      	adds	r3, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f00f f96e 	bl	8018680 <sys_mbox_free>
    goto free_and_return;
 80093a4:	e017      	b.n	80093d6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3314      	adds	r3, #20
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00f fa00 	bl	80187b0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	7cfa      	ldrb	r2, [r7, #19]
 80093ce:	771a      	strb	r2, [r3, #28]
  return conn;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	e005      	b.n	80093e0 <netconn_alloc+0xc8>
    goto free_and_return;
 80093d4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	2007      	movs	r0, #7
 80093da:	f002 fe4b 	bl	800c074 <memp_free>
  return NULL;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	0801a574 	.word	0x0801a574
 80093ec:	0801a778 	.word	0x0801a778
 80093f0:	0801a5b8 	.word	0x0801a5b8

080093f4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <netconn_free+0x1e>
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <netconn_free+0x80>)
 8009406:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800940a:	491b      	ldr	r1, [pc, #108]	; (8009478 <netconn_free+0x84>)
 800940c:	481b      	ldr	r0, [pc, #108]	; (800947c <netconn_free+0x88>)
 800940e:	f00f fc13 	bl	8018c38 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3310      	adds	r3, #16
 8009416:	4618      	mov	r0, r3
 8009418:	f00f f9b9 	bl	801878e <sys_mbox_valid>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <netconn_free+0x3c>
 8009422:	4b14      	ldr	r3, [pc, #80]	; (8009474 <netconn_free+0x80>)
 8009424:	f240 3223 	movw	r2, #803	; 0x323
 8009428:	4915      	ldr	r1, [pc, #84]	; (8009480 <netconn_free+0x8c>)
 800942a:	4814      	ldr	r0, [pc, #80]	; (800947c <netconn_free+0x88>)
 800942c:	f00f fc04 	bl	8018c38 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3314      	adds	r3, #20
 8009434:	4618      	mov	r0, r3
 8009436:	f00f f9aa 	bl	801878e <sys_mbox_valid>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d006      	beq.n	800944e <netconn_free+0x5a>
 8009440:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <netconn_free+0x80>)
 8009442:	f240 3226 	movw	r2, #806	; 0x326
 8009446:	490f      	ldr	r1, [pc, #60]	; (8009484 <netconn_free+0x90>)
 8009448:	480c      	ldr	r0, [pc, #48]	; (800947c <netconn_free+0x88>)
 800944a:	f00f fbf5 	bl	8018c38 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	330c      	adds	r3, #12
 8009452:	4618      	mov	r0, r3
 8009454:	f00f fa1f 	bl	8018896 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	330c      	adds	r3, #12
 800945c:	4618      	mov	r0, r3
 800945e:	f00f fa38 	bl	80188d2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	2007      	movs	r0, #7
 8009466:	f002 fe05 	bl	800c074 <memp_free>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	0801a574 	.word	0x0801a574
 8009478:	0801a7a0 	.word	0x0801a7a0
 800947c:	0801a5b8 	.word	0x0801a5b8
 8009480:	0801a7d0 	.word	0x0801a7d0
 8009484:	0801a80c 	.word	0x0801a80c

08009488 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3310      	adds	r3, #16
 8009494:	4618      	mov	r0, r3
 8009496:	f00f f97a 	bl	801878e <sys_mbox_valid>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d02f      	beq.n	8009500 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80094a0:	e018      	b.n	80094d4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d10e      	bne.n	80094cc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f107 020f 	add.w	r2, r7, #15
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fafe 	bl	8008ab8 <lwip_netconn_is_err_msg>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d108      	bne.n	80094d4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f003 fc85 	bl	800cdd4 <pbuf_free>
 80094ca:	e003      	b.n	80094d4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 ffe0 	bl	800a494 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3310      	adds	r3, #16
 80094d8:	f107 0210 	add.w	r2, r7, #16
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f00f f939 	bl	8018756 <sys_arch_mbox_tryfetch>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d1da      	bne.n	80094a2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3310      	adds	r3, #16
 80094f0:	4618      	mov	r0, r3
 80094f2:	f00f f8c5 	bl	8018680 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3310      	adds	r3, #16
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00f f958 	bl	80187b0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3314      	adds	r3, #20
 8009504:	4618      	mov	r0, r3
 8009506:	f00f f942 	bl	801878e <sys_mbox_valid>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d034      	beq.n	800957a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009510:	e01d      	b.n	800954e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f107 020e 	add.w	r2, r7, #14
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff facc 	bl	8008ab8 <lwip_netconn_is_err_msg>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d113      	bne.n	800954e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800952a:	6978      	ldr	r0, [r7, #20]
 800952c:	f7ff ffac 	bl	8009488 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4618      	mov	r0, r3
 800953e:	f004 fa49 	bl	800d9d4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2200      	movs	r2, #0
 8009546:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009548:	6978      	ldr	r0, [r7, #20]
 800954a:	f7ff ff53 	bl	80093f4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3314      	adds	r3, #20
 8009552:	f107 0210 	add.w	r2, r7, #16
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f00f f8fc 	bl	8018756 <sys_arch_mbox_tryfetch>
 800955e:	4603      	mov	r3, r0
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d1d5      	bne.n	8009512 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3314      	adds	r3, #20
 800956a:	4618      	mov	r0, r3
 800956c:	f00f f888 	bl	8018680 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3314      	adds	r3, #20
 8009574:	4618      	mov	r0, r3
 8009576:	f00f f91b 	bl	80187b0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800957a:	bf00      	nop
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <lwip_netconn_do_close_internal+0x24>
 800959a:	4b87      	ldr	r3, [pc, #540]	; (80097b8 <lwip_netconn_do_close_internal+0x234>)
 800959c:	f240 32a2 	movw	r2, #930	; 0x3a2
 80095a0:	4986      	ldr	r1, [pc, #536]	; (80097bc <lwip_netconn_do_close_internal+0x238>)
 80095a2:	4887      	ldr	r0, [pc, #540]	; (80097c0 <lwip_netconn_do_close_internal+0x23c>)
 80095a4:	f00f fb48 	bl	8018c38 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d006      	beq.n	80095c2 <lwip_netconn_do_close_internal+0x3e>
 80095b4:	4b80      	ldr	r3, [pc, #512]	; (80097b8 <lwip_netconn_do_close_internal+0x234>)
 80095b6:	f240 32a3 	movw	r2, #931	; 0x3a3
 80095ba:	4982      	ldr	r1, [pc, #520]	; (80097c4 <lwip_netconn_do_close_internal+0x240>)
 80095bc:	4880      	ldr	r0, [pc, #512]	; (80097c0 <lwip_netconn_do_close_internal+0x23c>)
 80095be:	f00f fb3b 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d006      	beq.n	80095d8 <lwip_netconn_do_close_internal+0x54>
 80095ca:	4b7b      	ldr	r3, [pc, #492]	; (80097b8 <lwip_netconn_do_close_internal+0x234>)
 80095cc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80095d0:	497d      	ldr	r1, [pc, #500]	; (80097c8 <lwip_netconn_do_close_internal+0x244>)
 80095d2:	487b      	ldr	r0, [pc, #492]	; (80097c0 <lwip_netconn_do_close_internal+0x23c>)
 80095d4:	f00f fb30 	bl	8018c38 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d106      	bne.n	80095ee <lwip_netconn_do_close_internal+0x6a>
 80095e0:	4b75      	ldr	r3, [pc, #468]	; (80097b8 <lwip_netconn_do_close_internal+0x234>)
 80095e2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80095e6:	4979      	ldr	r1, [pc, #484]	; (80097cc <lwip_netconn_do_close_internal+0x248>)
 80095e8:	4875      	ldr	r0, [pc, #468]	; (80097c0 <lwip_netconn_do_close_internal+0x23c>)
 80095ea:	f00f fb25 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <lwip_netconn_do_close_internal+0x80>
 80095f6:	4b70      	ldr	r3, [pc, #448]	; (80097b8 <lwip_netconn_do_close_internal+0x234>)
 80095f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80095fc:	4974      	ldr	r1, [pc, #464]	; (80097d0 <lwip_netconn_do_close_internal+0x24c>)
 80095fe:	4870      	ldr	r0, [pc, #448]	; (80097c0 <lwip_netconn_do_close_internal+0x23c>)
 8009600:	f00f fb1a 	bl	8018c38 <iprintf>

  tpcb = conn->pcb.tcp;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	7a1b      	ldrb	r3, [r3, #8]
 8009610:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b03      	cmp	r3, #3
 8009626:	d102      	bne.n	800962e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009628:	2301      	movs	r3, #1
 800962a:	75bb      	strb	r3, [r7, #22]
 800962c:	e01f      	b.n	800966e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00e      	beq.n	8009652 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009638:	2b05      	cmp	r3, #5
 800963a:	d007      	beq.n	800964c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009640:	2b06      	cmp	r3, #6
 8009642:	d003      	beq.n	800964c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009648:	2b08      	cmp	r3, #8
 800964a:	d102      	bne.n	8009652 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800964c:	2301      	movs	r3, #1
 800964e:	75bb      	strb	r3, [r7, #22]
 8009650:	e00d      	b.n	800966e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009652:	7b7b      	ldrb	r3, [r7, #13]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <lwip_netconn_do_close_internal+0xe6>
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	8b5b      	ldrh	r3, [r3, #26]
 800965c:	f003 0310 	and.w	r3, r3, #16
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009664:	2301      	movs	r3, #1
 8009666:	75bb      	strb	r3, [r7, #22]
 8009668:	e001      	b.n	800966e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800966e:	7dbb      	ldrb	r3, [r7, #22]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009674:	2100      	movs	r1, #0
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f005 fb82 	bl	800ed80 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	7d1b      	ldrb	r3, [r3, #20]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d104      	bne.n	800968e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009684:	2100      	movs	r1, #0
 8009686:	6938      	ldr	r0, [r7, #16]
 8009688:	f005 fbf2 	bl	800ee70 <tcp_accept>
 800968c:	e01d      	b.n	80096ca <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009694:	2100      	movs	r1, #0
 8009696:	6938      	ldr	r0, [r7, #16]
 8009698:	f005 fb84 	bl	800eda4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800969c:	2100      	movs	r1, #0
 800969e:	6938      	ldr	r0, [r7, #16]
 80096a0:	f005 fbe6 	bl	800ee70 <tcp_accept>
    }
    if (shut_tx) {
 80096a4:	7b7b      	ldrb	r3, [r7, #13]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80096aa:	2100      	movs	r1, #0
 80096ac:	6938      	ldr	r0, [r7, #16]
 80096ae:	f005 fb9b 	bl	800ede8 <tcp_sent>
    }
    if (shut_close) {
 80096b2:	7dbb      	ldrb	r3, [r7, #22]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d008      	beq.n	80096ca <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	6938      	ldr	r0, [r7, #16]
 80096be:	f005 fbef 	bl	800eea0 <tcp_poll>
      tcp_err(tpcb, NULL);
 80096c2:	2100      	movs	r1, #0
 80096c4:	6938      	ldr	r0, [r7, #16]
 80096c6:	f005 fbb1 	bl	800ee2c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80096ca:	7dbb      	ldrb	r3, [r7, #22]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80096d0:	6938      	ldr	r0, [r7, #16]
 80096d2:	f004 f839 	bl	800d748 <tcp_close>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
 80096da:	e007      	b.n	80096ec <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	7b7a      	ldrb	r2, [r7, #13]
 80096e0:	4619      	mov	r1, r3
 80096e2:	6938      	ldr	r0, [r7, #16]
 80096e4:	f004 f85c 	bl	800d7a0 <tcp_shutdown>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80096ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80096f4:	2301      	movs	r3, #1
 80096f6:	757b      	strb	r3, [r7, #21]
 80096f8:	e016      	b.n	8009728 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80096fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009702:	d10f      	bne.n	8009724 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	7a5b      	ldrb	r3, [r3, #9]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800970e:	2301      	movs	r3, #1
 8009710:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009712:	7dbb      	ldrb	r3, [r7, #22]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009718:	6938      	ldr	r0, [r7, #16]
 800971a:	f004 f95b 	bl	800d9d4 <tcp_abort>
          err = ERR_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
 8009722:	e001      	b.n	8009728 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009724:	2301      	movs	r3, #1
 8009726:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009728:	7d7b      	ldrb	r3, [r7, #21]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d052      	beq.n	80097d4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	7dfa      	ldrb	r2, [r7, #23]
 800973e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800974c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d129      	bne.n	80097a8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009754:	7dbb      	ldrb	r3, [r7, #22]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	d005      	beq.n	8009774 <lwip_netconn_do_close_internal+0x1f0>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	2200      	movs	r2, #0
 800976e:	2104      	movs	r1, #4
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
      }
      if (shut_rx) {
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <lwip_netconn_do_close_internal+0x20a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2200      	movs	r2, #0
 8009788:	2100      	movs	r1, #0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
      }
      if (shut_tx) {
 800978e:	7b7b      	ldrb	r3, [r7, #13]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <lwip_netconn_do_close_internal+0x224>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	2200      	movs	r2, #0
 80097a2:	2102      	movs	r1, #2
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80097ae:	68b8      	ldr	r0, [r7, #8]
 80097b0:	f00f f864 	bl	801887c <sys_sem_signal>
    }
    return ERR_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e03c      	b.n	8009832 <lwip_netconn_do_close_internal+0x2ae>
 80097b8:	0801a574 	.word	0x0801a574
 80097bc:	0801a848 	.word	0x0801a848
 80097c0:	0801a5b8 	.word	0x0801a5b8
 80097c4:	0801a858 	.word	0x0801a858
 80097c8:	0801a878 	.word	0x0801a878
 80097cc:	0801a89c 	.word	0x0801a89c
 80097d0:	0801a6dc 	.word	0x0801a6dc
  }
  if (!close_finished) {
 80097d4:	7d7b      	ldrb	r3, [r7, #21]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d11e      	bne.n	8009818 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d106      	bne.n	80097f0 <lwip_netconn_do_close_internal+0x26c>
 80097e2:	4b16      	ldr	r3, [pc, #88]	; (800983c <lwip_netconn_do_close_internal+0x2b8>)
 80097e4:	f240 4241 	movw	r2, #1089	; 0x441
 80097e8:	4915      	ldr	r1, [pc, #84]	; (8009840 <lwip_netconn_do_close_internal+0x2bc>)
 80097ea:	4816      	ldr	r0, [pc, #88]	; (8009844 <lwip_netconn_do_close_internal+0x2c0>)
 80097ec:	f00f fa24 	bl	8018c38 <iprintf>
    if (shut_tx) {
 80097f0:	7b7b      	ldrb	r3, [r7, #13]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80097f6:	4914      	ldr	r1, [pc, #80]	; (8009848 <lwip_netconn_do_close_internal+0x2c4>)
 80097f8:	6938      	ldr	r0, [r7, #16]
 80097fa:	f005 faf5 	bl	800ede8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80097fe:	2201      	movs	r2, #1
 8009800:	4912      	ldr	r1, [pc, #72]	; (800984c <lwip_netconn_do_close_internal+0x2c8>)
 8009802:	6938      	ldr	r0, [r7, #16]
 8009804:	f005 fb4c 	bl	800eea0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009808:	4911      	ldr	r1, [pc, #68]	; (8009850 <lwip_netconn_do_close_internal+0x2cc>)
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f005 fb0e 	bl	800ee2c <tcp_err>
    tcp_arg(tpcb, conn);
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	6938      	ldr	r0, [r7, #16]
 8009814:	f005 fab4 	bl	800ed80 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <lwip_netconn_do_close_internal+0x2aa>
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <lwip_netconn_do_close_internal+0x2b8>)
 8009822:	f240 424d 	movw	r2, #1101	; 0x44d
 8009826:	490b      	ldr	r1, [pc, #44]	; (8009854 <lwip_netconn_do_close_internal+0x2d0>)
 8009828:	4806      	ldr	r0, [pc, #24]	; (8009844 <lwip_netconn_do_close_internal+0x2c0>)
 800982a:	f00f fa05 	bl	8018c38 <iprintf>
  return err;
 800982e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	0801a574 	.word	0x0801a574
 8009840:	0801a8b0 	.word	0x0801a8b0
 8009844:	0801a5b8 	.word	0x0801a5b8
 8009848:	08008dfd 	.word	0x08008dfd
 800984c:	08008d35 	.word	0x08008d35
 8009850:	08008ea5 	.word	0x08008ea5
 8009854:	0801a8d4 	.word	0x0801a8d4

08009858 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00d      	beq.n	800988e <lwip_netconn_do_delconn+0x36>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800987c:	2b10      	cmp	r3, #16
 800987e:	d006      	beq.n	800988e <lwip_netconn_do_delconn+0x36>
 8009880:	4b60      	ldr	r3, [pc, #384]	; (8009a04 <lwip_netconn_do_delconn+0x1ac>)
 8009882:	f240 425e 	movw	r2, #1118	; 0x45e
 8009886:	4960      	ldr	r1, [pc, #384]	; (8009a08 <lwip_netconn_do_delconn+0x1b0>)
 8009888:	4860      	ldr	r0, [pc, #384]	; (8009a0c <lwip_netconn_do_delconn+0x1b4>)
 800988a:	f00f f9d5 	bl	8018c38 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <lwip_netconn_do_delconn+0x48>
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	2b02      	cmp	r3, #2
 8009898:	d002      	beq.n	80098a0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d109      	bne.n	80098b4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d10a      	bne.n	80098bc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	7f1b      	ldrb	r3, [r3, #28]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	22fb      	movs	r2, #251	; 0xfb
 80098b8:	711a      	strb	r2, [r3, #4]
 80098ba:	e097      	b.n	80099ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80098bc:	7afb      	ldrb	r3, [r7, #11]
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d10d      	bne.n	80098de <lwip_netconn_do_delconn+0x86>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	7f1b      	ldrb	r3, [r3, #28]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <lwip_netconn_do_delconn+0x86>
 80098d0:	4b4c      	ldr	r3, [pc, #304]	; (8009a04 <lwip_netconn_do_delconn+0x1ac>)
 80098d2:	f240 427a 	movw	r2, #1146	; 0x47a
 80098d6:	494e      	ldr	r1, [pc, #312]	; (8009a10 <lwip_netconn_do_delconn+0x1b8>)
 80098d8:	484c      	ldr	r0, [pc, #304]	; (8009a0c <lwip_netconn_do_delconn+0x1b4>)
 80098da:	f00f f9ad 	bl	8018c38 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fdcd 	bl	8009488 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d05f      	beq.n	80099b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009902:	2b10      	cmp	r3, #16
 8009904:	d00d      	beq.n	8009922 <lwip_netconn_do_delconn+0xca>
 8009906:	2b20      	cmp	r3, #32
 8009908:	d151      	bne.n	80099ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f00a fc7e 	bl	801421c <udp_remove>
          break;
 8009920:	e046      	b.n	80099b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d006      	beq.n	800993a <lwip_netconn_do_delconn+0xe2>
 800992c:	4b35      	ldr	r3, [pc, #212]	; (8009a04 <lwip_netconn_do_delconn+0x1ac>)
 800992e:	f240 4294 	movw	r2, #1172	; 0x494
 8009932:	4938      	ldr	r1, [pc, #224]	; (8009a14 <lwip_netconn_do_delconn+0x1bc>)
 8009934:	4835      	ldr	r0, [pc, #212]	; (8009a0c <lwip_netconn_do_delconn+0x1b4>)
 8009936:	f00f f97f 	bl	8018c38 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2204      	movs	r2, #4
 8009940:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2203      	movs	r2, #3
 8009946:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff fe14 	bl	8009584 <lwip_netconn_do_close_internal>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d04b      	beq.n	80099fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	2b04      	cmp	r3, #4
 800996a:	d006      	beq.n	800997a <lwip_netconn_do_delconn+0x122>
 800996c:	4b25      	ldr	r3, [pc, #148]	; (8009a04 <lwip_netconn_do_delconn+0x1ac>)
 800996e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009972:	4929      	ldr	r1, [pc, #164]	; (8009a18 <lwip_netconn_do_delconn+0x1c0>)
 8009974:	4825      	ldr	r0, [pc, #148]	; (8009a0c <lwip_netconn_do_delconn+0x1b4>)
 8009976:	f00f f95f 	bl	8018c38 <iprintf>
            UNLOCK_TCPIP_CORE();
 800997a:	4828      	ldr	r0, [pc, #160]	; (8009a1c <lwip_netconn_do_delconn+0x1c4>)
 800997c:	f00e ffef 	bl	801895e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	2100      	movs	r1, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f00e ff46 	bl	801881a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800998e:	4823      	ldr	r0, [pc, #140]	; (8009a1c <lwip_netconn_do_delconn+0x1c4>)
 8009990:	f00e ffd6 	bl	8018940 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d02d      	beq.n	80099fa <lwip_netconn_do_delconn+0x1a2>
 800999e:	4b19      	ldr	r3, [pc, #100]	; (8009a04 <lwip_netconn_do_delconn+0x1ac>)
 80099a0:	f240 429e 	movw	r2, #1182	; 0x49e
 80099a4:	491c      	ldr	r1, [pc, #112]	; (8009a18 <lwip_netconn_do_delconn+0x1c0>)
 80099a6:	4819      	ldr	r0, [pc, #100]	; (8009a0c <lwip_netconn_do_delconn+0x1b4>)
 80099a8:	f00f f946 	bl	8018c38 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80099ac:	e025      	b.n	80099fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80099ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <lwip_netconn_do_delconn+0x17a>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	6810      	ldr	r0, [r2, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <lwip_netconn_do_delconn+0x194>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	6810      	ldr	r0, [r2, #0]
 80099e6:	2200      	movs	r2, #0
 80099e8:	2102      	movs	r1, #2
 80099ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	4618      	mov	r0, r3
 80099f4:	f00e ff5c 	bl	80188b0 <sys_sem_valid>
 80099f8:	e000      	b.n	80099fc <lwip_netconn_do_delconn+0x1a4>
          return;
 80099fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	0801a574 	.word	0x0801a574
 8009a08:	0801a8e4 	.word	0x0801a8e4
 8009a0c:	0801a5b8 	.word	0x0801a5b8
 8009a10:	0801a8f8 	.word	0x0801a8f8
 8009a14:	0801a918 	.word	0x0801a918
 8009a18:	0801a934 	.word	0x0801a934
 8009a1c:	2000d5f8 	.word	0x2000d5f8

08009a20 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d025      	beq.n	8009a82 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a40:	2b10      	cmp	r3, #16
 8009a42:	d00e      	beq.n	8009a62 <lwip_netconn_do_bind+0x42>
 8009a44:	2b20      	cmp	r3, #32
 8009a46:	d119      	bne.n	8009a7c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6858      	ldr	r0, [r3, #4]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6899      	ldr	r1, [r3, #8]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	899b      	ldrh	r3, [r3, #12]
 8009a56:	461a      	mov	r2, r3
 8009a58:	f00a faca 	bl	8013ff0 <udp_bind>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8009a60:	e011      	b.n	8009a86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6858      	ldr	r0, [r3, #4]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6899      	ldr	r1, [r3, #8]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	899b      	ldrh	r3, [r3, #12]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f003 ffbb 	bl	800d9ec <tcp_bind>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]
        break;
 8009a7a:	e004      	b.n	8009a86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009a7c:	23fa      	movs	r3, #250	; 0xfa
 8009a7e:	73fb      	strb	r3, [r7, #15]
        break;
 8009a80:	e001      	b.n	8009a86 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009a82:	23fa      	movs	r3, #250	; 0xfa
 8009a84:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	7bfa      	ldrb	r2, [r7, #15]
 8009a8a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009ab0:	f06f 0305 	mvn.w	r3, #5
 8009ab4:	e070      	b.n	8009b98 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d006      	beq.n	8009acc <lwip_netconn_do_connected+0x38>
 8009abe:	4b38      	ldr	r3, [pc, #224]	; (8009ba0 <lwip_netconn_do_connected+0x10c>)
 8009ac0:	f240 5223 	movw	r2, #1315	; 0x523
 8009ac4:	4937      	ldr	r1, [pc, #220]	; (8009ba4 <lwip_netconn_do_connected+0x110>)
 8009ac6:	4838      	ldr	r0, [pc, #224]	; (8009ba8 <lwip_netconn_do_connected+0x114>)
 8009ac8:	f00f f8b6 	bl	8018c38 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10c      	bne.n	8009aee <lwip_netconn_do_connected+0x5a>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	7f1b      	ldrb	r3, [r3, #28]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <lwip_netconn_do_connected+0x5a>
 8009ae0:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <lwip_netconn_do_connected+0x10c>)
 8009ae2:	f240 5224 	movw	r2, #1316	; 0x524
 8009ae6:	4931      	ldr	r1, [pc, #196]	; (8009bac <lwip_netconn_do_connected+0x118>)
 8009ae8:	482f      	ldr	r0, [pc, #188]	; (8009ba8 <lwip_netconn_do_connected+0x114>)
 8009aea:	f00f f8a5 	bl	8018c38 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d008      	beq.n	8009b08 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	79fa      	ldrb	r2, [r7, #7]
 8009afc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	330c      	adds	r3, #12
 8009b06:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d106      	bne.n	8009b22 <lwip_netconn_do_connected+0x8e>
 8009b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009b1c:	69b8      	ldr	r0, [r7, #24]
 8009b1e:	f7ff fa97 	bl	8009050 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	7f1b      	ldrb	r3, [r3, #28]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bf0c      	ite	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	2300      	movne	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	7f1b      	ldrb	r3, [r3, #28]
 8009b3a:	f023 0304 	bic.w	r3, r3, #4
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <lwip_netconn_do_connected+0xbc>
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10c      	bne.n	8009b6a <lwip_netconn_do_connected+0xd6>
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d102      	bne.n	8009b5c <lwip_netconn_do_connected+0xc8>
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <lwip_netconn_do_connected+0xd6>
 8009b5c:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <lwip_netconn_do_connected+0x10c>)
 8009b5e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009b62:	4913      	ldr	r1, [pc, #76]	; (8009bb0 <lwip_netconn_do_connected+0x11c>)
 8009b64:	4810      	ldr	r0, [pc, #64]	; (8009ba8 <lwip_netconn_do_connected+0x114>)
 8009b66:	f00f f867 	bl	8018c38 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	2200      	movs	r2, #0
 8009b74:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d005      	beq.n	8009b8a <lwip_netconn_do_connected+0xf6>
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2200      	movs	r2, #0
 8009b84:	2102      	movs	r1, #2
 8009b86:	69b8      	ldr	r0, [r7, #24]
 8009b88:	4798      	blx	r3

  if (was_blocking) {
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009b90:	69f8      	ldr	r0, [r7, #28]
 8009b92:	f00e fe73 	bl	801887c <sys_sem_signal>
  }
  return ERR_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	0801a574 	.word	0x0801a574
 8009ba4:	0801a93c 	.word	0x0801a93c
 8009ba8:	0801a5b8 	.word	0x0801a5b8
 8009bac:	0801a95c 	.word	0x0801a95c
 8009bb0:	0801a99c 	.word	0x0801a99c

08009bb4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009bca:	23f1      	movs	r3, #241	; 0xf1
 8009bcc:	75fb      	strb	r3, [r7, #23]
 8009bce:	e09b      	b.n	8009d08 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d00f      	beq.n	8009bfe <lwip_netconn_do_connect+0x4a>
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	f040 8087 	bne.w	8009cf2 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6858      	ldr	r0, [r3, #4]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	6899      	ldr	r1, [r3, #8]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	899b      	ldrh	r3, [r3, #12]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f00a fa84 	bl	8014100 <udp_connect>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]
        break;
 8009bfc:	e084      	b.n	8009d08 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d102      	bne.n	8009c0e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009c08:	23f7      	movs	r3, #247	; 0xf7
 8009c0a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009c0c:	e07b      	b.n	8009d06 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	785b      	ldrb	r3, [r3, #1]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009c18:	23f6      	movs	r3, #246	; 0xf6
 8009c1a:	75fb      	strb	r3, [r7, #23]
        break;
 8009c1c:	e073      	b.n	8009d06 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fa14 	bl	8009050 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6858      	ldr	r0, [r3, #4]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6899      	ldr	r1, [r3, #8]
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	899a      	ldrh	r2, [r3, #12]
 8009c36:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <lwip_netconn_do_connect+0x164>)
 8009c38:	f004 f93c 	bl	800deb4 <tcp_connect>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d15e      	bne.n	8009d06 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	7f1b      	ldrb	r3, [r3, #28]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf14      	ite	ne
 8009c56:	2301      	movne	r3, #1
 8009c58:	2300      	moveq	r3, #0
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2203      	movs	r2, #3
 8009c64:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d009      	beq.n	8009c80 <lwip_netconn_do_connect+0xcc>
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	7f1a      	ldrb	r2, [r3, #28]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0204 	orr.w	r2, r2, #4
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	771a      	strb	r2, [r3, #28]
 8009c7e:	e008      	b.n	8009c92 <lwip_netconn_do_connect+0xde>
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	7f1a      	ldrb	r2, [r3, #28]
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0204 	bic.w	r2, r2, #4
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009c98:	23fb      	movs	r3, #251	; 0xfb
 8009c9a:	75fb      	strb	r3, [r7, #23]
        break;
 8009c9c:	e033      	b.n	8009d06 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d006      	beq.n	8009cbe <lwip_netconn_do_connect+0x10a>
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <lwip_netconn_do_connect+0x168>)
 8009cb2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009cb6:	491a      	ldr	r1, [pc, #104]	; (8009d20 <lwip_netconn_do_connect+0x16c>)
 8009cb8:	481a      	ldr	r0, [pc, #104]	; (8009d24 <lwip_netconn_do_connect+0x170>)
 8009cba:	f00e ffbd 	bl	8018c38 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009cbe:	481a      	ldr	r0, [pc, #104]	; (8009d28 <lwip_netconn_do_connect+0x174>)
 8009cc0:	f00e fe4d 	bl	801895e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00e fda4 	bl	801881a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009cd2:	4815      	ldr	r0, [pc, #84]	; (8009d28 <lwip_netconn_do_connect+0x174>)
 8009cd4:	f00e fe34 	bl	8018940 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d116      	bne.n	8009d10 <lwip_netconn_do_connect+0x15c>
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <lwip_netconn_do_connect+0x168>)
 8009ce4:	f240 5274 	movw	r2, #1396	; 0x574
 8009ce8:	490d      	ldr	r1, [pc, #52]	; (8009d20 <lwip_netconn_do_connect+0x16c>)
 8009cea:	480e      	ldr	r0, [pc, #56]	; (8009d24 <lwip_netconn_do_connect+0x170>)
 8009cec:	f00e ffa4 	bl	8018c38 <iprintf>
              return;
 8009cf0:	e00e      	b.n	8009d10 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <lwip_netconn_do_connect+0x168>)
 8009cf4:	f240 527d 	movw	r2, #1405	; 0x57d
 8009cf8:	490c      	ldr	r1, [pc, #48]	; (8009d2c <lwip_netconn_do_connect+0x178>)
 8009cfa:	480a      	ldr	r0, [pc, #40]	; (8009d24 <lwip_netconn_do_connect+0x170>)
 8009cfc:	f00e ff9c 	bl	8018c38 <iprintf>
 8009d00:	23fa      	movs	r3, #250	; 0xfa
 8009d02:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009d04:	e000      	b.n	8009d08 <lwip_netconn_do_connect+0x154>
        break;
 8009d06:	bf00      	nop
    }
  }
  msg->err = err;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	7dfa      	ldrb	r2, [r7, #23]
 8009d0c:	711a      	strb	r2, [r3, #4]
 8009d0e:	e000      	b.n	8009d12 <lwip_netconn_do_connect+0x15e>
              return;
 8009d10:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	08009a95 	.word	0x08009a95
 8009d1c:	0801a574 	.word	0x0801a574
 8009d20:	0801a934 	.word	0x0801a934
 8009d24:	0801a5b8 	.word	0x0801a5b8
 8009d28:	2000d5f8 	.word	0x2000d5f8
 8009d2c:	0801a9bc 	.word	0x0801a9bc

08009d30 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d07f      	beq.n	8009e46 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d175      	bne.n	8009e40 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d165      	bne.n	8009e2a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	7d1b      	ldrb	r3, [r3, #20]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009d6a:	23fa      	movs	r3, #250	; 0xfa
 8009d6c:	72fb      	strb	r3, [r7, #11]
 8009d6e:	e06c      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009d70:	23ff      	movs	r3, #255	; 0xff
 8009d72:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f107 020b 	add.w	r2, r7, #11
 8009d7e:	7cf9      	ldrb	r1, [r7, #19]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f003 fefd 	bl	800db80 <tcp_listen_with_backlog_and_err>
 8009d86:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d05d      	beq.n	8009e4a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3310      	adds	r3, #16
 8009d94:	4618      	mov	r0, r3
 8009d96:	f00e fcfa 	bl	801878e <sys_mbox_valid>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3310      	adds	r3, #16
 8009da6:	4618      	mov	r0, r3
 8009da8:	f00e fc6a 	bl	8018680 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3310      	adds	r3, #16
 8009db2:	4618      	mov	r0, r3
 8009db4:	f00e fcfc 	bl	80187b0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f00e fce3 	bl	801878e <sys_mbox_valid>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d108      	bne.n	8009de0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3314      	adds	r3, #20
 8009dd4:	2106      	movs	r1, #6
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f00e fc30 	bl	801863c <sys_mbox_new>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009de0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d118      	bne.n	8009e1a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2202      	movs	r2, #2
 8009dee:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f004 ffbb 	bl	800ed80 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4912      	ldr	r1, [pc, #72]	; (8009e5c <lwip_netconn_do_listen+0x12c>)
 8009e12:	4618      	mov	r0, r3
 8009e14:	f005 f82c 	bl	800ee70 <tcp_accept>
 8009e18:	e017      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f003 fc94 	bl	800d748 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	605a      	str	r2, [r3, #4]
 8009e28:	e00f      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d102      	bne.n	8009e3a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	72fb      	strb	r3, [r7, #11]
 8009e38:	e007      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009e3a:	23f5      	movs	r3, #245	; 0xf5
 8009e3c:	72fb      	strb	r3, [r7, #11]
 8009e3e:	e004      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009e40:	23f0      	movs	r3, #240	; 0xf0
 8009e42:	72fb      	strb	r3, [r7, #11]
 8009e44:	e001      	b.n	8009e4a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009e46:	23f5      	movs	r3, #245	; 0xf5
 8009e48:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009e4a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009e52:	bf00      	nop
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	080090a1 	.word	0x080090a1

08009e60 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d022      	beq.n	8009ec2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d11b      	bne.n	8009ec2 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e96:	d202      	bcs.n	8009e9e <lwip_netconn_do_recv+0x3e>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	e001      	b.n	8009ea2 <lwip_netconn_do_recv+0x42>
 8009e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ea2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	89fa      	ldrh	r2, [r7, #14]
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f003 ff6a 	bl	800dd88 <tcp_recved>
        remaining -= recved;
 8009eb4:	89fb      	ldrh	r3, [r7, #14]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e6      	bne.n	8009e90 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009ec2:	bf00      	nop
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b088      	sub	sp, #32
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <lwip_netconn_do_writemore+0x24>
 8009ee2:	4b96      	ldr	r3, [pc, #600]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009ee4:	f240 6273 	movw	r2, #1651	; 0x673
 8009ee8:	4995      	ldr	r1, [pc, #596]	; (800a140 <lwip_netconn_do_writemore+0x274>)
 8009eea:	4896      	ldr	r0, [pc, #600]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009eec:	f00e fea4 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d006      	beq.n	8009f06 <lwip_netconn_do_writemore+0x3a>
 8009ef8:	4b90      	ldr	r3, [pc, #576]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009efa:	f240 6274 	movw	r2, #1652	; 0x674
 8009efe:	4992      	ldr	r1, [pc, #584]	; (800a148 <lwip_netconn_do_writemore+0x27c>)
 8009f00:	4890      	ldr	r0, [pc, #576]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009f02:	f00e fe99 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <lwip_netconn_do_writemore+0x50>
 8009f0e:	4b8b      	ldr	r3, [pc, #556]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009f10:	f240 6275 	movw	r2, #1653	; 0x675
 8009f14:	498d      	ldr	r1, [pc, #564]	; (800a14c <lwip_netconn_do_writemore+0x280>)
 8009f16:	488b      	ldr	r0, [pc, #556]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009f18:	f00e fe8e 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d106      	bne.n	8009f32 <lwip_netconn_do_writemore+0x66>
 8009f24:	4b85      	ldr	r3, [pc, #532]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009f26:	f240 6276 	movw	r2, #1654	; 0x676
 8009f2a:	4989      	ldr	r1, [pc, #548]	; (800a150 <lwip_netconn_do_writemore+0x284>)
 8009f2c:	4885      	ldr	r0, [pc, #532]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009f2e:	f00e fe83 	bl	8018c38 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	699a      	ldr	r2, [r3, #24]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d306      	bcc.n	8009f50 <lwip_netconn_do_writemore+0x84>
 8009f42:	4b7e      	ldr	r3, [pc, #504]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009f44:	f240 6277 	movw	r2, #1655	; 0x677
 8009f48:	4982      	ldr	r1, [pc, #520]	; (800a154 <lwip_netconn_do_writemore+0x288>)
 8009f4a:	487e      	ldr	r0, [pc, #504]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009f4c:	f00e fe74 	bl	8018c38 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <lwip_netconn_do_writemore+0x9c>
 8009f5a:	4b78      	ldr	r3, [pc, #480]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 8009f5c:	f240 6279 	movw	r2, #1657	; 0x679
 8009f60:	497d      	ldr	r1, [pc, #500]	; (800a158 <lwip_netconn_do_writemore+0x28c>)
 8009f62:	4878      	ldr	r0, [pc, #480]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 8009f64:	f00e fe68 	bl	8018c38 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	7f1b      	ldrb	r3, [r3, #28]
 8009f6e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	7f1b      	ldrb	r3, [r3, #28]
 8009f74:	f003 0302 	and.w	r3, r3, #2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <lwip_netconn_do_writemore+0xba>
 8009f7c:	7ebb      	ldrb	r3, [r7, #26]
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <lwip_netconn_do_writemore+0xbe>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e000      	b.n	8009f8c <lwip_netconn_do_writemore+0xc0>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb8:	d307      	bcc.n	8009fca <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fbe:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fc0:	7ebb      	ldrb	r3, [r7, #26]
 8009fc2:	f043 0302 	orr.w	r3, r3, #2
 8009fc6:	76bb      	strb	r3, [r7, #26]
 8009fc8:	e001      	b.n	8009fce <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fd6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009fd8:	89fa      	ldrh	r2, [r7, #14]
 8009fda:	8bbb      	ldrh	r3, [r7, #28]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d216      	bcs.n	800a00e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009fe0:	89fb      	ldrh	r3, [r7, #14]
 8009fe2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009fe4:	7e3b      	ldrb	r3, [r7, #24]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00d      	beq.n	800a006 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009fea:	8bbb      	ldrh	r3, [r7, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10e      	bne.n	800a00e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <lwip_netconn_do_writemore+0x134>
 8009ffa:	f06f 0306 	mvn.w	r3, #6
 8009ffe:	e000      	b.n	800a002 <lwip_netconn_do_writemore+0x136>
 800a000:	2300      	movs	r3, #0
 800a002:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a004:	e07d      	b.n	800a102 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a006:	7ebb      	ldrb	r3, [r7, #26]
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	8bbb      	ldrh	r3, [r7, #28]
 800a016:	441a      	add	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d906      	bls.n	800a032 <lwip_netconn_do_writemore+0x166>
 800a024:	4b45      	ldr	r3, [pc, #276]	; (800a13c <lwip_netconn_do_writemore+0x270>)
 800a026:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a02a:	494c      	ldr	r1, [pc, #304]	; (800a15c <lwip_netconn_do_writemore+0x290>)
 800a02c:	4845      	ldr	r0, [pc, #276]	; (800a144 <lwip_netconn_do_writemore+0x278>)
 800a02e:	f00e fe03 	bl	8018c38 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a032:	8bbb      	ldrh	r3, [r7, #28]
 800a034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a038:	4293      	cmp	r3, r2
 800a03a:	d103      	bne.n	800a044 <lwip_netconn_do_writemore+0x178>
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a042:	d209      	bcs.n	800a058 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a048:	8bba      	ldrh	r2, [r7, #28]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d10b      	bne.n	800a066 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	899b      	ldrh	r3, [r3, #12]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d906      	bls.n	800a066 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a058:	2301      	movs	r3, #1
 800a05a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a05c:	7ebb      	ldrb	r3, [r7, #26]
 800a05e:	f043 0302 	orr.w	r3, r3, #2
 800a062:	76bb      	strb	r3, [r7, #26]
 800a064:	e001      	b.n	800a06a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6858      	ldr	r0, [r3, #4]
 800a06e:	7ebb      	ldrb	r3, [r7, #26]
 800a070:	8bba      	ldrh	r2, [r7, #28]
 800a072:	6979      	ldr	r1, [r7, #20]
 800a074:	f007 fdc6 	bl	8011c04 <tcp_write>
 800a078:	4603      	mov	r3, r0
 800a07a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a07c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d12c      	bne.n	800a0de <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	6999      	ldr	r1, [r3, #24]
 800a08a:	8bba      	ldrh	r2, [r7, #28]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	440a      	add	r2, r1
 800a092:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	6919      	ldr	r1, [r3, #16]
 800a09a:	8bba      	ldrh	r2, [r7, #28]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	440a      	add	r2, r1
 800a0a2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d113      	bne.n	800a0de <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	899a      	ldrh	r2, [r3, #12]
 800a0bc:	3a01      	subs	r2, #1
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	899b      	ldrh	r3, [r3, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d008      	beq.n	800a0de <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	3208      	adds	r2, #8
 800a0d4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a0de:	7e7b      	ldrb	r3, [r7, #25]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <lwip_netconn_do_writemore+0x222>
 800a0e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f43f af50 	beq.w	8009f8e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <lwip_netconn_do_writemore+0x234>
 800a0f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d146      	bne.n	800a18e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a100:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a102:	7e3b      	ldrb	r3, [r7, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d02b      	beq.n	800a160 <lwip_netconn_do_writemore+0x294>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	429a      	cmp	r2, r3
 800a116:	d223      	bcs.n	800a160 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <lwip_netconn_do_writemore+0x260>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2200      	movs	r2, #0
 800a126:	2103      	movs	r1, #3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7f1b      	ldrb	r3, [r3, #28]
 800a130:	f043 0310 	orr.w	r3, r3, #16
 800a134:	b2da      	uxtb	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	771a      	strb	r2, [r3, #28]
 800a13a:	e028      	b.n	800a18e <lwip_netconn_do_writemore+0x2c2>
 800a13c:	0801a574 	.word	0x0801a574
 800a140:	0801a6cc 	.word	0x0801a6cc
 800a144:	0801a5b8 	.word	0x0801a5b8
 800a148:	0801a9d4 	.word	0x0801a9d4
 800a14c:	0801a6dc 	.word	0x0801a6dc
 800a150:	0801a9f4 	.word	0x0801a9f4
 800a154:	0801aa0c 	.word	0x0801aa0c
 800a158:	0801aa4c 	.word	0x0801aa4c
 800a15c:	0801aa74 	.word	0x0801aa74
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a168:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a16c:	d305      	bcc.n	800a17a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a176:	2b04      	cmp	r3, #4
 800a178:	d909      	bls.n	800a18e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d005      	beq.n	800a18e <lwip_netconn_do_writemore+0x2c2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2200      	movs	r2, #0
 800a188:	2103      	movs	r1, #3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a18e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d11d      	bne.n	800a1d2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d002      	beq.n	800a1ac <lwip_netconn_do_writemore+0x2e0>
 800a1a6:	7e3b      	ldrb	r3, [r7, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f008 fb0f 	bl	80127d8 <tcp_output>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a1be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a1c2:	f113 0f04 	cmn.w	r3, #4
 800a1c6:	d12c      	bne.n	800a222 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a1c8:	7b3b      	ldrb	r3, [r7, #12]
 800a1ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	76fb      	strb	r3, [r7, #27]
 800a1d0:	e027      	b.n	800a222 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a1d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d120      	bne.n	800a21e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f008 faf9 	bl	80127d8 <tcp_output>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a1ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1ee:	f113 0f04 	cmn.w	r3, #4
 800a1f2:	d104      	bne.n	800a1fe <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a1f4:	7b7b      	ldrb	r3, [r7, #13]
 800a1f6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	76fb      	strb	r3, [r7, #27]
 800a1fc:	e011      	b.n	800a222 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a1fe:	7e3b      	ldrb	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00e      	beq.n	800a222 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d102      	bne.n	800a214 <lwip_netconn_do_writemore+0x348>
 800a20e:	f06f 0306 	mvn.w	r3, #6
 800a212:	e000      	b.n	800a216 <lwip_netconn_do_writemore+0x34a>
 800a214:	2300      	movs	r3, #0
 800a216:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a218:	2301      	movs	r3, #1
 800a21a:	76fb      	strb	r3, [r7, #27]
 800a21c:	e001      	b.n	800a222 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a21e:	2301      	movs	r3, #1
 800a220:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a222:	7efb      	ldrb	r3, [r7, #27]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d015      	beq.n	800a254 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	7ffa      	ldrb	r2, [r7, #31]
 800a238:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d006      	beq.n	800a25a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f00e fb15 	bl	801887c <sys_sem_signal>
 800a252:	e002      	b.n	800a25a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a254:	f04f 33ff 	mov.w	r3, #4294967295
 800a258:	e000      	b.n	800a25c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3720      	adds	r7, #32
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fbce 	bl	8008a16 <netconn_err>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d166      	bne.n	800a354 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a290:	2b10      	cmp	r3, #16
 800a292:	d15d      	bne.n	800a350 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a29e:	23fb      	movs	r3, #251	; 0xfb
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	e057      	b.n	800a354 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d04d      	beq.n	800a34a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <lwip_netconn_do_write+0x6a>
 800a2c0:	4b28      	ldr	r3, [pc, #160]	; (800a364 <lwip_netconn_do_write+0x100>)
 800a2c2:	f240 7223 	movw	r2, #1827	; 0x723
 800a2c6:	4928      	ldr	r1, [pc, #160]	; (800a368 <lwip_netconn_do_write+0x104>)
 800a2c8:	4828      	ldr	r0, [pc, #160]	; (800a36c <lwip_netconn_do_write+0x108>)
 800a2ca:	f00e fcb5 	bl	8018c38 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <lwip_netconn_do_write+0x80>
 800a2d6:	4b23      	ldr	r3, [pc, #140]	; (800a364 <lwip_netconn_do_write+0x100>)
 800a2d8:	f240 7224 	movw	r2, #1828	; 0x724
 800a2dc:	4924      	ldr	r1, [pc, #144]	; (800a370 <lwip_netconn_do_write+0x10c>)
 800a2de:	4823      	ldr	r0, [pc, #140]	; (800a36c <lwip_netconn_do_write+0x108>)
 800a2e0:	f00e fcaa 	bl	8018c38 <iprintf>
        msg->conn->current_msg = msg;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fdea 	bl	8009ecc <lwip_netconn_do_writemore>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d02e      	beq.n	800a35c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	785b      	ldrb	r3, [r3, #1]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d006      	beq.n	800a316 <lwip_netconn_do_write+0xb2>
 800a308:	4b16      	ldr	r3, [pc, #88]	; (800a364 <lwip_netconn_do_write+0x100>)
 800a30a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a30e:	4919      	ldr	r1, [pc, #100]	; (800a374 <lwip_netconn_do_write+0x110>)
 800a310:	4816      	ldr	r0, [pc, #88]	; (800a36c <lwip_netconn_do_write+0x108>)
 800a312:	f00e fc91 	bl	8018c38 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a316:	4818      	ldr	r0, [pc, #96]	; (800a378 <lwip_netconn_do_write+0x114>)
 800a318:	f00e fb21 	bl	801895e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	330c      	adds	r3, #12
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f00e fa78 	bl	801881a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a32a:	4813      	ldr	r0, [pc, #76]	; (800a378 <lwip_netconn_do_write+0x114>)
 800a32c:	f00e fb08 	bl	8018940 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d110      	bne.n	800a35c <lwip_netconn_do_write+0xf8>
 800a33a:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <lwip_netconn_do_write+0x100>)
 800a33c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a340:	490c      	ldr	r1, [pc, #48]	; (800a374 <lwip_netconn_do_write+0x110>)
 800a342:	480a      	ldr	r0, [pc, #40]	; (800a36c <lwip_netconn_do_write+0x108>)
 800a344:	f00e fc78 	bl	8018c38 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a348:	e008      	b.n	800a35c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a34a:	23f5      	movs	r3, #245	; 0xf5
 800a34c:	73fb      	strb	r3, [r7, #15]
 800a34e:	e001      	b.n	800a354 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a350:	23fa      	movs	r3, #250	; 0xfa
 800a352:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	7bfa      	ldrb	r2, [r7, #15]
 800a358:	711a      	strb	r2, [r3, #4]
 800a35a:	e000      	b.n	800a35e <lwip_netconn_do_write+0xfa>
        return;
 800a35c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	0801a574 	.word	0x0801a574
 800a368:	0801a918 	.word	0x0801a918
 800a36c:	0801a5b8 	.word	0x0801a5b8
 800a370:	0801aaa0 	.word	0x0801aaa0
 800a374:	0801a934 	.word	0x0801a934
 800a378:	2000d5f8 	.word	0x2000d5f8

0800a37c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d069      	beq.n	800a46e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a3a4:	2b10      	cmp	r3, #16
 800a3a6:	d162      	bne.n	800a46e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d002      	beq.n	800a3b6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d05b      	beq.n	800a46e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d103      	bne.n	800a3c4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	22f5      	movs	r2, #245	; 0xf5
 800a3c0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a3c2:	e059      	b.n	800a478 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d103      	bne.n	800a3d2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	22fb      	movs	r2, #251	; 0xfb
 800a3ce:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a3d0:	e052      	b.n	800a478 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	7a1b      	ldrb	r3, [r3, #8]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d004      	beq.n	800a3e8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff f850 	bl	8009488 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d006      	beq.n	800a400 <lwip_netconn_do_close+0x84>
 800a3f2:	4b23      	ldr	r3, [pc, #140]	; (800a480 <lwip_netconn_do_close+0x104>)
 800a3f4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a3f8:	4922      	ldr	r1, [pc, #136]	; (800a484 <lwip_netconn_do_close+0x108>)
 800a3fa:	4823      	ldr	r0, [pc, #140]	; (800a488 <lwip_netconn_do_close+0x10c>)
 800a3fc:	f00e fc1c 	bl	8018c38 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2204      	movs	r2, #4
 800a406:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2100      	movs	r1, #0
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff f8b4 	bl	8009584 <lwip_netconn_do_close_internal>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d029      	beq.n	800a476 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	785b      	ldrb	r3, [r3, #1]
 800a428:	2b04      	cmp	r3, #4
 800a42a:	d006      	beq.n	800a43a <lwip_netconn_do_close+0xbe>
 800a42c:	4b14      	ldr	r3, [pc, #80]	; (800a480 <lwip_netconn_do_close+0x104>)
 800a42e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a432:	4916      	ldr	r1, [pc, #88]	; (800a48c <lwip_netconn_do_close+0x110>)
 800a434:	4814      	ldr	r0, [pc, #80]	; (800a488 <lwip_netconn_do_close+0x10c>)
 800a436:	f00e fbff 	bl	8018c38 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a43a:	4815      	ldr	r0, [pc, #84]	; (800a490 <lwip_netconn_do_close+0x114>)
 800a43c:	f00e fa8f 	bl	801895e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	330c      	adds	r3, #12
 800a446:	2100      	movs	r1, #0
 800a448:	4618      	mov	r0, r3
 800a44a:	f00e f9e6 	bl	801881a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a44e:	4810      	ldr	r0, [pc, #64]	; (800a490 <lwip_netconn_do_close+0x114>)
 800a450:	f00e fa76 	bl	8018940 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <lwip_netconn_do_close+0xfa>
 800a45e:	4b08      	ldr	r3, [pc, #32]	; (800a480 <lwip_netconn_do_close+0x104>)
 800a460:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a464:	4909      	ldr	r1, [pc, #36]	; (800a48c <lwip_netconn_do_close+0x110>)
 800a466:	4808      	ldr	r0, [pc, #32]	; (800a488 <lwip_netconn_do_close+0x10c>)
 800a468:	f00e fbe6 	bl	8018c38 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a46c:	e003      	b.n	800a476 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	22f5      	movs	r2, #245	; 0xf5
 800a472:	711a      	strb	r2, [r3, #4]
 800a474:	e000      	b.n	800a478 <lwip_netconn_do_close+0xfc>
      return;
 800a476:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	0801a574 	.word	0x0801a574
 800a484:	0801a918 	.word	0x0801a918
 800a488:	0801a5b8 	.word	0x0801a5b8
 800a48c:	0801a934 	.word	0x0801a934
 800a490:	2000d5f8 	.word	0x2000d5f8

0800a494 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d013      	beq.n	800a4ca <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00b      	beq.n	800a4c2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f002 fc90 	bl	800cdd4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	605a      	str	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	2006      	movs	r0, #6
 800a4c6:	f001 fdd5 	bl	800c074 <memp_free>
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d108      	bne.n	800a4f8 <netbuf_data+0x24>
 800a4e6:	4b1b      	ldr	r3, [pc, #108]	; (800a554 <netbuf_data+0x80>)
 800a4e8:	22c6      	movs	r2, #198	; 0xc6
 800a4ea:	491b      	ldr	r1, [pc, #108]	; (800a558 <netbuf_data+0x84>)
 800a4ec:	481b      	ldr	r0, [pc, #108]	; (800a55c <netbuf_data+0x88>)
 800a4ee:	f00e fba3 	bl	8018c38 <iprintf>
 800a4f2:	f06f 030f 	mvn.w	r3, #15
 800a4f6:	e029      	b.n	800a54c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d108      	bne.n	800a510 <netbuf_data+0x3c>
 800a4fe:	4b15      	ldr	r3, [pc, #84]	; (800a554 <netbuf_data+0x80>)
 800a500:	22c7      	movs	r2, #199	; 0xc7
 800a502:	4917      	ldr	r1, [pc, #92]	; (800a560 <netbuf_data+0x8c>)
 800a504:	4815      	ldr	r0, [pc, #84]	; (800a55c <netbuf_data+0x88>)
 800a506:	f00e fb97 	bl	8018c38 <iprintf>
 800a50a:	f06f 030f 	mvn.w	r3, #15
 800a50e:	e01d      	b.n	800a54c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d108      	bne.n	800a528 <netbuf_data+0x54>
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <netbuf_data+0x80>)
 800a518:	22c8      	movs	r2, #200	; 0xc8
 800a51a:	4912      	ldr	r1, [pc, #72]	; (800a564 <netbuf_data+0x90>)
 800a51c:	480f      	ldr	r0, [pc, #60]	; (800a55c <netbuf_data+0x88>)
 800a51e:	f00e fb8b 	bl	8018c38 <iprintf>
 800a522:	f06f 030f 	mvn.w	r3, #15
 800a526:	e011      	b.n	800a54c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <netbuf_data+0x62>
    return ERR_BUF;
 800a530:	f06f 0301 	mvn.w	r3, #1
 800a534:	e00a      	b.n	800a54c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	895a      	ldrh	r2, [r3, #10]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	0801aacc 	.word	0x0801aacc
 800a558:	0801abd4 	.word	0x0801abd4
 800a55c:	0801ab1c 	.word	0x0801ab1c
 800a560:	0801abf0 	.word	0x0801abf0
 800a564:	0801ac10 	.word	0x0801ac10

0800a568 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d108      	bne.n	800a588 <netbuf_next+0x20>
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <netbuf_next+0x54>)
 800a578:	22e0      	movs	r2, #224	; 0xe0
 800a57a:	4911      	ldr	r1, [pc, #68]	; (800a5c0 <netbuf_next+0x58>)
 800a57c:	4811      	ldr	r0, [pc, #68]	; (800a5c4 <netbuf_next+0x5c>)
 800a57e:	f00e fb5b 	bl	8018c38 <iprintf>
 800a582:	f04f 33ff 	mov.w	r3, #4294967295
 800a586:	e014      	b.n	800a5b2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <netbuf_next+0x30>
    return -1;
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	e00c      	b.n	800a5b2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <netbuf_next+0x48>
    return 1;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <netbuf_next+0x4a>
  }
  return 0;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0801aacc 	.word	0x0801aacc
 800a5c0:	0801ac2c 	.word	0x0801ac2c
 800a5c4:	0801ab1c 	.word	0x0801ab1c

0800a5c8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a5d2:	f009 f9b9 	bl	8013948 <sys_timeouts_sleeptime>
 800a5d6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d10b      	bne.n	800a5f8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a5e0:	4813      	ldr	r0, [pc, #76]	; (800a630 <tcpip_timeouts_mbox_fetch+0x68>)
 800a5e2:	f00e f9bc 	bl	801895e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f00e f874 	bl	80186d8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a5f0:	480f      	ldr	r0, [pc, #60]	; (800a630 <tcpip_timeouts_mbox_fetch+0x68>)
 800a5f2:	f00e f9a5 	bl	8018940 <sys_mutex_lock>
    return;
 800a5f6:	e018      	b.n	800a62a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a5fe:	f009 f969 	bl	80138d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a602:	e7e6      	b.n	800a5d2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a604:	480a      	ldr	r0, [pc, #40]	; (800a630 <tcpip_timeouts_mbox_fetch+0x68>)
 800a606:	f00e f9aa 	bl	801895e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f00e f862 	bl	80186d8 <sys_arch_mbox_fetch>
 800a614:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a616:	4806      	ldr	r0, [pc, #24]	; (800a630 <tcpip_timeouts_mbox_fetch+0x68>)
 800a618:	f00e f992 	bl	8018940 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	d102      	bne.n	800a62a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a624:	f009 f956 	bl	80138d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a628:	e7d3      	b.n	800a5d2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	2000d5f8 	.word	0x2000d5f8

0800a634 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a63c:	4810      	ldr	r0, [pc, #64]	; (800a680 <tcpip_thread+0x4c>)
 800a63e:	f00e f97f 	bl	8018940 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <tcpip_thread+0x50>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <tcpip_thread+0x50>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <tcpip_thread+0x54>)
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	4619      	mov	r1, r3
 800a65c:	480b      	ldr	r0, [pc, #44]	; (800a68c <tcpip_thread+0x58>)
 800a65e:	f7ff ffb3 	bl	800a5c8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a668:	4b09      	ldr	r3, [pc, #36]	; (800a690 <tcpip_thread+0x5c>)
 800a66a:	2291      	movs	r2, #145	; 0x91
 800a66c:	4909      	ldr	r1, [pc, #36]	; (800a694 <tcpip_thread+0x60>)
 800a66e:	480a      	ldr	r0, [pc, #40]	; (800a698 <tcpip_thread+0x64>)
 800a670:	f00e fae2 	bl	8018c38 <iprintf>
      continue;
 800a674:	e003      	b.n	800a67e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f80f 	bl	800a69c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a67e:	e7ea      	b.n	800a656 <tcpip_thread+0x22>
 800a680:	2000d5f8 	.word	0x2000d5f8
 800a684:	2000d5ec 	.word	0x2000d5ec
 800a688:	2000d5f0 	.word	0x2000d5f0
 800a68c:	2000d5f4 	.word	0x2000d5f4
 800a690:	0801ac64 	.word	0x0801ac64
 800a694:	0801ac94 	.word	0x0801ac94
 800a698:	0801acb4 	.word	0x0801acb4

0800a69c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d026      	beq.n	800a6fa <tcpip_thread_handle_msg+0x5e>
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	dc2b      	bgt.n	800a708 <tcpip_thread_handle_msg+0x6c>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <tcpip_thread_handle_msg+0x1e>
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d015      	beq.n	800a6e4 <tcpip_thread_handle_msg+0x48>
 800a6b8:	e026      	b.n	800a708 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	6850      	ldr	r0, [r2, #4]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6892      	ldr	r2, [r2, #8]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4798      	blx	r3
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f002 fb7d 	bl	800cdd4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	2009      	movs	r0, #9
 800a6de:	f001 fcc9 	bl	800c074 <memp_free>
      break;
 800a6e2:	e018      	b.n	800a716 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	6892      	ldr	r2, [r2, #8]
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	2008      	movs	r0, #8
 800a6f4:	f001 fcbe 	bl	800c074 <memp_free>
      break;
 800a6f8:	e00d      	b.n	800a716 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6892      	ldr	r2, [r2, #8]
 800a702:	4610      	mov	r0, r2
 800a704:	4798      	blx	r3
      break;
 800a706:	e006      	b.n	800a716 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a708:	4b05      	ldr	r3, [pc, #20]	; (800a720 <tcpip_thread_handle_msg+0x84>)
 800a70a:	22cf      	movs	r2, #207	; 0xcf
 800a70c:	4905      	ldr	r1, [pc, #20]	; (800a724 <tcpip_thread_handle_msg+0x88>)
 800a70e:	4806      	ldr	r0, [pc, #24]	; (800a728 <tcpip_thread_handle_msg+0x8c>)
 800a710:	f00e fa92 	bl	8018c38 <iprintf>
      break;
 800a714:	bf00      	nop
  }
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	0801ac64 	.word	0x0801ac64
 800a724:	0801ac94 	.word	0x0801ac94
 800a728:	0801acb4 	.word	0x0801acb4

0800a72c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a738:	481a      	ldr	r0, [pc, #104]	; (800a7a4 <tcpip_inpkt+0x78>)
 800a73a:	f00e f828 	bl	801878e <sys_mbox_valid>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d105      	bne.n	800a750 <tcpip_inpkt+0x24>
 800a744:	4b18      	ldr	r3, [pc, #96]	; (800a7a8 <tcpip_inpkt+0x7c>)
 800a746:	22fc      	movs	r2, #252	; 0xfc
 800a748:	4918      	ldr	r1, [pc, #96]	; (800a7ac <tcpip_inpkt+0x80>)
 800a74a:	4819      	ldr	r0, [pc, #100]	; (800a7b0 <tcpip_inpkt+0x84>)
 800a74c:	f00e fa74 	bl	8018c38 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a750:	2009      	movs	r0, #9
 800a752:	f001 fc19 	bl	800bf88 <memp_malloc>
 800a756:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d102      	bne.n	800a764 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a75e:	f04f 33ff 	mov.w	r3, #4294967295
 800a762:	e01a      	b.n	800a79a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2200      	movs	r2, #0
 800a768:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	4809      	ldr	r0, [pc, #36]	; (800a7a4 <tcpip_inpkt+0x78>)
 800a780:	f00d ff90 	bl	80186a4 <sys_mbox_trypost>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a78a:	6979      	ldr	r1, [r7, #20]
 800a78c:	2009      	movs	r0, #9
 800a78e:	f001 fc71 	bl	800c074 <memp_free>
    return ERR_MEM;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	e000      	b.n	800a79a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a798:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000d5f4 	.word	0x2000d5f4
 800a7a8:	0801ac64 	.word	0x0801ac64
 800a7ac:	0801acdc 	.word	0x0801acdc
 800a7b0:	0801acb4 	.word	0x0801acb4

0800a7b4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c4:	f003 0318 	and.w	r3, r3, #24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a7cc:	4a08      	ldr	r2, [pc, #32]	; (800a7f0 <tcpip_input+0x3c>)
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f7ff ffab 	bl	800a72c <tcpip_inpkt>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	e005      	b.n	800a7e6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a7da:	4a06      	ldr	r2, [pc, #24]	; (800a7f4 <tcpip_input+0x40>)
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff ffa4 	bl	800a72c <tcpip_inpkt>
 800a7e4:	4603      	mov	r3, r0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	08018491 	.word	0x08018491
 800a7f4:	0801735d 	.word	0x0801735d

0800a7f8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a802:	4819      	ldr	r0, [pc, #100]	; (800a868 <tcpip_try_callback+0x70>)
 800a804:	f00d ffc3 	bl	801878e <sys_mbox_valid>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <tcpip_try_callback+0x24>
 800a80e:	4b17      	ldr	r3, [pc, #92]	; (800a86c <tcpip_try_callback+0x74>)
 800a810:	f240 125d 	movw	r2, #349	; 0x15d
 800a814:	4916      	ldr	r1, [pc, #88]	; (800a870 <tcpip_try_callback+0x78>)
 800a816:	4817      	ldr	r0, [pc, #92]	; (800a874 <tcpip_try_callback+0x7c>)
 800a818:	f00e fa0e 	bl	8018c38 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a81c:	2008      	movs	r0, #8
 800a81e:	f001 fbb3 	bl	800bf88 <memp_malloc>
 800a822:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	e017      	b.n	800a860 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2201      	movs	r2, #1
 800a834:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	4808      	ldr	r0, [pc, #32]	; (800a868 <tcpip_try_callback+0x70>)
 800a846:	f00d ff2d 	bl	80186a4 <sys_mbox_trypost>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d006      	beq.n	800a85e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	2008      	movs	r0, #8
 800a854:	f001 fc0e 	bl	800c074 <memp_free>
    return ERR_MEM;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295
 800a85c:	e000      	b.n	800a860 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	2000d5f4 	.word	0x2000d5f4
 800a86c:	0801ac64 	.word	0x0801ac64
 800a870:	0801acdc 	.word	0x0801acdc
 800a874:	0801acb4 	.word	0x0801acb4

0800a878 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a884:	4806      	ldr	r0, [pc, #24]	; (800a8a0 <tcpip_send_msg_wait_sem+0x28>)
 800a886:	f00e f85b 	bl	8018940 <sys_mutex_lock>
  fn(apimsg);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68b8      	ldr	r0, [r7, #8]
 800a88e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a890:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <tcpip_send_msg_wait_sem+0x28>)
 800a892:	f00e f864 	bl	801895e <sys_mutex_unlock>
  return ERR_OK;
 800a896:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	2000d5f8 	.word	0x2000d5f8

0800a8a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a8ae:	f000 fec1 	bl	800b634 <lwip_init>

  tcpip_init_done = initfunc;
 800a8b2:	4a17      	ldr	r2, [pc, #92]	; (800a910 <tcpip_init+0x6c>)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a8b8:	4a16      	ldr	r2, [pc, #88]	; (800a914 <tcpip_init+0x70>)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a8be:	2106      	movs	r1, #6
 800a8c0:	4815      	ldr	r0, [pc, #84]	; (800a918 <tcpip_init+0x74>)
 800a8c2:	f00d febb 	bl	801863c <sys_mbox_new>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d006      	beq.n	800a8da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a8cc:	4b13      	ldr	r3, [pc, #76]	; (800a91c <tcpip_init+0x78>)
 800a8ce:	f240 2261 	movw	r2, #609	; 0x261
 800a8d2:	4913      	ldr	r1, [pc, #76]	; (800a920 <tcpip_init+0x7c>)
 800a8d4:	4813      	ldr	r0, [pc, #76]	; (800a924 <tcpip_init+0x80>)
 800a8d6:	f00e f9af 	bl	8018c38 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a8da:	4813      	ldr	r0, [pc, #76]	; (800a928 <tcpip_init+0x84>)
 800a8dc:	f00e f814 	bl	8018908 <sys_mutex_new>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d006      	beq.n	800a8f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <tcpip_init+0x78>)
 800a8e8:	f240 2265 	movw	r2, #613	; 0x265
 800a8ec:	490f      	ldr	r1, [pc, #60]	; (800a92c <tcpip_init+0x88>)
 800a8ee:	480d      	ldr	r0, [pc, #52]	; (800a924 <tcpip_init+0x80>)
 800a8f0:	f00e f9a2 	bl	8018c38 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	490c      	ldr	r1, [pc, #48]	; (800a930 <tcpip_init+0x8c>)
 800a900:	480c      	ldr	r0, [pc, #48]	; (800a934 <tcpip_init+0x90>)
 800a902:	f00e f839 	bl	8018978 <sys_thread_new>
}
 800a906:	bf00      	nop
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	2000d5ec 	.word	0x2000d5ec
 800a914:	2000d5f0 	.word	0x2000d5f0
 800a918:	2000d5f4 	.word	0x2000d5f4
 800a91c:	0801ac64 	.word	0x0801ac64
 800a920:	0801acec 	.word	0x0801acec
 800a924:	0801acb4 	.word	0x0801acb4
 800a928:	2000d5f8 	.word	0x2000d5f8
 800a92c:	0801ad10 	.word	0x0801ad10
 800a930:	0800a635 	.word	0x0800a635
 800a934:	0801ad34 	.word	0x0801ad34

0800a938 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <fs_open+0x16>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d102      	bne.n	800a954 <fs_open+0x1c>
    return ERR_ARG;
 800a94e:	f06f 030f 	mvn.w	r3, #15
 800a952:	e028      	b.n	800a9a6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a954:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <fs_open+0x78>)
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e020      	b.n	800a99c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	4619      	mov	r1, r3
 800a960:	6838      	ldr	r0, [r7, #0]
 800a962:	f7f5 fc45 	bl	80001f0 <strcmp>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d114      	bne.n	800a996 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68da      	ldr	r2, [r3, #12]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	7c1a      	ldrb	r2, [r3, #16]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	e007      	b.n	800a9a6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1db      	bne.n	800a95a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a9a2:	f06f 0305 	mvn.w	r3, #5
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	08027dd0 	.word	0x08027dd0

0800a9b4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	1ad3      	subs	r3, r2, r3
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a9ee:	222c      	movs	r2, #44	; 0x2c
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f00e fab0 	bl	8018f58 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800aa06:	202c      	movs	r0, #44	; 0x2c
 800aa08:	f001 f91a 	bl	800bc40 <mem_malloc>
 800aa0c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <http_state_alloc+0x1a>
    http_state_init(ret);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7ff ffe6 	bl	800a9e6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800aa1a:	687b      	ldr	r3, [r7, #4]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff ffbb 	bl	800a9b4 <fs_close>
    hs->handle = NULL;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d007      	beq.n	800aa5c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 f9bf 	bl	800cdd4 <pbuf_free>
    hs->req = NULL;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <http_state_free+0x1a>
    http_state_eof(hs);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff ffd6 	bl	800aa24 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 ff47 	bl	800b90c <mem_free>
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <http_write+0x22>
 800aa9c:	4b2c      	ldr	r3, [pc, #176]	; (800ab50 <http_write+0xc8>)
 800aa9e:	f240 2219 	movw	r2, #537	; 0x219
 800aaa2:	492c      	ldr	r1, [pc, #176]	; (800ab54 <http_write+0xcc>)
 800aaa4:	482c      	ldr	r0, [pc, #176]	; (800ab58 <http_write+0xd0>)
 800aaa6:	f00e f8c7 	bl	8018c38 <iprintf>
  len = *length;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aab0:	8afb      	ldrh	r3, [r7, #22]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <http_write+0x32>
    return ERR_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	e045      	b.n	800ab46 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aac0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aac2:	8aba      	ldrh	r2, [r7, #20]
 800aac4:	8afb      	ldrh	r3, [r7, #22]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d201      	bcs.n	800aace <http_write+0x46>
    len = max_len;
 800aaca:	8abb      	ldrh	r3, [r7, #20]
 800aacc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800aad6:	8afa      	ldrh	r2, [r7, #22]
 800aad8:	8abb      	ldrh	r3, [r7, #20]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d901      	bls.n	800aae2 <http_write+0x5a>
    len = max_len;
 800aade:	8abb      	ldrh	r3, [r7, #20]
 800aae0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	8afa      	ldrh	r2, [r7, #22]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f007 f88b 	bl	8011c04 <tcp_write>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aaf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafa:	d10f      	bne.n	800ab1c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d902      	bls.n	800ab16 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ab10:	2301      	movs	r3, #1
 800ab12:	82fb      	strh	r3, [r7, #22]
 800ab14:	e002      	b.n	800ab1c <http_write+0x94>
      } else {
        len /= 2;
 800ab16:	8afb      	ldrh	r3, [r7, #22]
 800ab18:	085b      	lsrs	r3, r3, #1
 800ab1a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ab1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d102      	bne.n	800ab2c <http_write+0xa4>
 800ab26:	8afb      	ldrh	r3, [r7, #22]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d8da      	bhi.n	800aae2 <http_write+0x5a>

  if (err == ERR_OK) {
 800ab2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d103      	bne.n	800ab3c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8afa      	ldrh	r2, [r7, #22]
 800ab38:	801a      	strh	r2, [r3, #0]
 800ab3a:	e002      	b.n	800ab42 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ab42:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	0801ad84 	.word	0x0801ad84
 800ab54:	0801adbc 	.word	0x0801adbc
 800ab58:	0801adcc 	.word	0x0801adcc

0800ab5c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f004 f907 	bl	800ed80 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ab72:	2100      	movs	r1, #0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f004 f915 	bl	800eda4 <tcp_recv>
  altcp_err(pcb, NULL);
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f004 f955 	bl	800ee2c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f004 f98a 	bl	800eea0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f004 f92a 	bl	800ede8 <tcp_sent>
  if (hs != NULL) {
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ab9a:	68b8      	ldr	r0, [r7, #8]
 800ab9c:	f7ff ff62 	bl	800aa64 <http_state_free>
  }

  if (abort_conn) {
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d004      	beq.n	800abb0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f002 ff14 	bl	800d9d4 <tcp_abort>
    return ERR_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e00f      	b.n	800abd0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f002 fdc9 	bl	800d748 <tcp_close>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800abba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800abc2:	2204      	movs	r2, #4
 800abc4:	4904      	ldr	r1, [pc, #16]	; (800abd8 <http_close_or_abort_conn+0x7c>)
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f004 f96a 	bl	800eea0 <tcp_poll>
  }
  return err;
 800abcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	0800b29f 	.word	0x0800b29f

0800abdc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800abe6:	2200      	movs	r2, #0
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff ffb6 	bl	800ab5c <http_close_or_abort_conn>
 800abf0:	4603      	mov	r3, r0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff ffe8 	bl	800abdc <http_close_conn>
  }
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d105      	bne.n	800ac32 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff ffe6 	bl	800abfa <http_eof>
    return 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e016      	b.n	800ac60 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fec6 	bl	800a9c8 <fs_bytes_left>
 800ac3c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc05      	bgt.n	800ac50 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff ffd7 	bl	800abfa <http_eof>
    return 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	e007      	b.n	800ac60 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <http_check_eof+0x54>)
 800ac52:	f240 429d 	movw	r2, #1181	; 0x49d
 800ac56:	4905      	ldr	r1, [pc, #20]	; (800ac6c <http_check_eof+0x58>)
 800ac58:	4805      	ldr	r0, [pc, #20]	; (800ac70 <http_check_eof+0x5c>)
 800ac5a:	f00d ffed 	bl	8018c38 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ac5e:	2301      	movs	r3, #1
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	0801ad84 	.word	0x0801ad84
 800ac6c:	0801adf4 	.word	0x0801adf4
 800ac70:	0801adcc 	.word	0x0801adcc

0800ac74 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d803      	bhi.n	800ac96 <http_send_data_nonssi+0x22>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	e001      	b.n	800ac9a <http_send_data_nonssi+0x26>
 800ac96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac9a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6999      	ldr	r1, [r3, #24]
 800aca0:	f107 020c 	add.w	r2, r7, #12
 800aca4:	2300      	movs	r3, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff feee 	bl	800aa88 <http_write>
 800acac:	4603      	mov	r3, r0
 800acae:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800acb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10d      	bne.n	800acd4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	89ba      	ldrh	r2, [r7, #12]
 800acc2:	441a      	add	r2, r3
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	89ba      	ldrh	r2, [r7, #12]
 800acce:	1a9a      	subs	r2, r3, r2
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <http_send+0x18>
    return 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	e025      	b.n	800ad42 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d108      	bne.n	800ad10 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff ff87 	bl	800ac14 <http_check_eof>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <http_send+0x32>
      return 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e018      	b.n	800ad42 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff ffae 	bl	800ac74 <http_send_data_nonssi>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10d      	bne.n	800ad40 <http_send+0x62>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff fe4d 	bl	800a9c8 <fs_bytes_left>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dc05      	bgt.n	800ad40 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ff5f 	bl	800abfa <http_eof>
    return 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e000      	b.n	800ad42 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	4a1c      	ldr	r2, [pc, #112]	; (800adcc <http_get_404_file+0x80>)
 800ad5a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f7ff fde7 	bl	800a938 <fs_open>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ad6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d024      	beq.n	800adc0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	4a15      	ldr	r2, [pc, #84]	; (800add0 <http_get_404_file+0x84>)
 800ad7a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4619      	mov	r1, r3
 800ad84:	4610      	mov	r0, r2
 800ad86:	f7ff fdd7 	bl	800a938 <fs_open>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ad8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d014      	beq.n	800adc0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	4a0e      	ldr	r2, [pc, #56]	; (800add4 <http_get_404_file+0x88>)
 800ad9a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7ff fdc7 	bl	800a938 <fs_open>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800adae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
        return NULL;
 800adbc:	2300      	movs	r3, #0
 800adbe:	e000      	b.n	800adc2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800adc0:	687b      	ldr	r3, [r7, #4]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	0801ae2c 	.word	0x0801ae2c
 800add0:	0801ae38 	.word	0x0801ae38
 800add4:	0801ae44 	.word	0x0801ae44

0800add8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08e      	sub	sp, #56	; 0x38
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <http_parse_request+0x24>
 800adee:	4b65      	ldr	r3, [pc, #404]	; (800af84 <http_parse_request+0x1ac>)
 800adf0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800adf4:	4964      	ldr	r1, [pc, #400]	; (800af88 <http_parse_request+0x1b0>)
 800adf6:	4865      	ldr	r0, [pc, #404]	; (800af8c <http_parse_request+0x1b4>)
 800adf8:	f00d ff1e 	bl	8018c38 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <http_parse_request+0x38>
 800ae02:	4b60      	ldr	r3, [pc, #384]	; (800af84 <http_parse_request+0x1ac>)
 800ae04:	f240 72af 	movw	r2, #1967	; 0x7af
 800ae08:	4961      	ldr	r1, [pc, #388]	; (800af90 <http_parse_request+0x1b8>)
 800ae0a:	4860      	ldr	r0, [pc, #384]	; (800af8c <http_parse_request+0x1b4>)
 800ae0c:	f00d ff14 	bl	8018c38 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <http_parse_request+0x48>
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ae20:	f06f 0307 	mvn.w	r3, #7
 800ae24:	e0a9      	b.n	800af7a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae32:	621a      	str	r2, [r3, #32]
 800ae34:	e005      	b.n	800ae42 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f002 f897 	bl	800cf70 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ae42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae44:	f002 f86c 	bl	800cf20 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d012      	beq.n	800ae78 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	891b      	ldrh	r3, [r3, #8]
 800ae58:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	bf28      	it	cs
 800ae60:	4613      	movcs	r3, r2
 800ae62:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	6a18      	ldr	r0, [r3, #32]
 800ae68:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4949      	ldr	r1, [pc, #292]	; (800af94 <http_parse_request+0x1bc>)
 800ae6e:	f002 f9b7 	bl	800d1e0 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ae72:	4b48      	ldr	r3, [pc, #288]	; (800af94 <http_parse_request+0x1bc>)
 800ae74:	637b      	str	r3, [r7, #52]	; 0x34
 800ae76:	e005      	b.n	800ae84 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	895b      	ldrh	r3, [r3, #10]
 800ae82:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ae84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae86:	2b06      	cmp	r3, #6
 800ae88:	d962      	bls.n	800af50 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ae8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4942      	ldr	r1, [pc, #264]	; (800af98 <http_parse_request+0x1c0>)
 800ae90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae92:	f000 fb99 	bl	800b5c8 <lwip_strnstr>
 800ae96:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d058      	beq.n	800af50 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800aea2:	2204      	movs	r2, #4
 800aea4:	493d      	ldr	r1, [pc, #244]	; (800af9c <http_parse_request+0x1c4>)
 800aea6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aea8:	f00e f885 	bl	8018fb6 <strncmp>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d116      	bne.n	800aee0 <http_parse_request+0x108>
        sp1 = data + 3;
 800aeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb4:	3303      	adds	r3, #3
 800aeb6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	3301      	adds	r3, #1
 800aecc:	8b7a      	ldrh	r2, [r7, #26]
 800aece:	4934      	ldr	r1, [pc, #208]	; (800afa0 <http_parse_request+0x1c8>)
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fb79 	bl	800b5c8 <lwip_strnstr>
 800aed6:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d111      	bne.n	800af02 <http_parse_request+0x12a>
 800aede:	e006      	b.n	800aeee <http_parse_request+0x116>
        data[4] = 0;
 800aee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee2:	3304      	adds	r3, #4
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800aee8:	f06f 030f 	mvn.w	r3, #15
 800aeec:	e045      	b.n	800af7a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	3301      	adds	r3, #1
 800aef2:	8b7a      	ldrh	r2, [r7, #26]
 800aef4:	4928      	ldr	r1, [pc, #160]	; (800af98 <http_parse_request+0x1c0>)
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fb66 	bl	800b5c8 <lwip_strnstr>
 800aefc:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800aefe:	2301      	movs	r3, #1
 800af00:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	3301      	adds	r3, #1
 800af06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01e      	beq.n	800af50 <http_parse_request+0x178>
 800af12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	429a      	cmp	r2, r3
 800af18:	d91a      	bls.n	800af50 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800af1a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af1c:	461a      	mov	r2, r3
 800af1e:	4921      	ldr	r1, [pc, #132]	; (800afa4 <http_parse_request+0x1cc>)
 800af20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af22:	f000 fb51 	bl	800b5c8 <lwip_strnstr>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d011      	beq.n	800af50 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	3301      	adds	r3, #1
 800af30:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800af38:	8b3b      	ldrh	r3, [r7, #24]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	4413      	add	r3, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800af42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af44:	6979      	ldr	r1, [r7, #20]
 800af46:	68b8      	ldr	r0, [r7, #8]
 800af48:	f000 f82e 	bl	800afa8 <http_find_file>
 800af4c:	4603      	mov	r3, r0
 800af4e:	e014      	b.n	800af7a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	4618      	mov	r0, r3
 800af56:	f001 ffcb 	bl	800cef0 <pbuf_clen>
 800af5a:	4603      	mov	r3, r0
 800af5c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	891b      	ldrh	r3, [r3, #8]
 800af64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af68:	d205      	bcs.n	800af76 <http_parse_request+0x19e>
 800af6a:	8a7b      	ldrh	r3, [r7, #18]
 800af6c:	2b05      	cmp	r3, #5
 800af6e:	d802      	bhi.n	800af76 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800af70:	f06f 0304 	mvn.w	r3, #4
 800af74:	e001      	b.n	800af7a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800af76:	f06f 030f 	mvn.w	r3, #15
  }
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3738      	adds	r7, #56	; 0x38
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	0801ad84 	.word	0x0801ad84
 800af88:	0801ae50 	.word	0x0801ae50
 800af8c:	0801adcc 	.word	0x0801adcc
 800af90:	0801ae5c 	.word	0x0801ae5c
 800af94:	2000d5fc 	.word	0x2000d5fc
 800af98:	0801ae68 	.word	0x0801ae68
 800af9c:	0801ae6c 	.word	0x0801ae6c
 800afa0:	0801ae74 	.word	0x0801ae74
 800afa4:	0801ae78 	.word	0x0801ae78

0800afa8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b092      	sub	sp, #72	; 0x48
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800afb4:	2300      	movs	r3, #0
 800afb6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7f5 f91d 	bl	8000204 <strlen>
 800afca:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d06b      	beq.n	800b0aa <http_find_file+0x102>
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	3b01      	subs	r3, #1
 800afd8:	4413      	add	r3, r2
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b2f      	cmp	r3, #47	; 0x2f
 800afde:	d164      	bne.n	800b0aa <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800afe0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800afe2:	4a53      	ldr	r2, [pc, #332]	; (800b130 <http_find_file+0x188>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d102      	bne.n	800afee <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b01      	cmp	r3, #1
 800afec:	d15d      	bne.n	800b0aa <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	3b01      	subs	r3, #1
 800aff2:	2b3f      	cmp	r3, #63	; 0x3f
 800aff4:	bf28      	it	cs
 800aff6:	233f      	movcs	r3, #63	; 0x3f
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00a      	beq.n	800b016 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b004:	4619      	mov	r1, r3
 800b006:	484a      	ldr	r0, [pc, #296]	; (800b130 <http_find_file+0x188>)
 800b008:	f00e f906 	bl	8019218 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b00c:	4a48      	ldr	r2, [pc, #288]	; (800b130 <http_find_file+0x188>)
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	4413      	add	r3, r2
 800b012:	2200      	movs	r2, #0
 800b014:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01a:	e043      	b.n	800b0a4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d028      	beq.n	800b074 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b028:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01e      	beq.n	800b06e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b030:	4a40      	ldr	r2, [pc, #256]	; (800b134 <http_find_file+0x18c>)
 800b032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b034:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f5 f8e3 	bl	8000204 <strlen>
 800b03e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	4293      	cmp	r3, r2
 800b046:	bf28      	it	cs
 800b048:	4613      	movcs	r3, r2
 800b04a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	4a38      	ldr	r2, [pc, #224]	; (800b130 <http_find_file+0x188>)
 800b050:	1898      	adds	r0, r3, r2
 800b052:	4a38      	ldr	r2, [pc, #224]	; (800b134 <http_find_file+0x18c>)
 800b054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b056:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	4619      	mov	r1, r3
 800b05e:	f00e f8db 	bl	8019218 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	4413      	add	r3, r2
 800b068:	4a31      	ldr	r2, [pc, #196]	; (800b130 <http_find_file+0x188>)
 800b06a:	2100      	movs	r1, #0
 800b06c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b06e:	4b30      	ldr	r3, [pc, #192]	; (800b130 <http_find_file+0x188>)
 800b070:	633b      	str	r3, [r7, #48]	; 0x30
 800b072:	e004      	b.n	800b07e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b074:	4a2f      	ldr	r2, [pc, #188]	; (800b134 <http_find_file+0x18c>)
 800b076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b07c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff fc58 	bl	800a938 <fs_open>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <http_find_file+0xf6>
        uri = file_name;
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b09c:	e005      	b.n	800b0aa <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d9b8      	bls.n	800b01c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d124      	bne.n	800b0fa <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	213f      	movs	r1, #63	; 0x3f
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f00d ff71 	bl	8018f9c <strchr>
 800b0ba:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	701a      	strb	r2, [r3, #0]
      params++;
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fc2f 	bl	800a938 <fs_open>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <http_find_file+0x144>
      file = &hs->file_handle;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0ea:	e006      	b.n	800b0fa <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b0ec:	f107 0308 	add.w	r3, r7, #8
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff fe2a 	bl	800ad4c <http_get_404_file>
 800b0f8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b100:	f107 0308 	add.w	r3, r7, #8
 800b104:	4619      	mov	r1, r3
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f7ff fe20 	bl	800ad4c <http_get_404_file>
 800b10c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4613      	mov	r3, r2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f809 	bl	800b138 <http_init_file>
 800b126:	4603      	mov	r3, r0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3740      	adds	r7, #64	; 0x40
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	2000d9fc 	.word	0x2000d9fc
 800b134:	08027de4 	.word	0x08027de4

0800b138 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d05c      	beq.n	800b206 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <http_init_file+0x2a>
 800b154:	4b35      	ldr	r3, [pc, #212]	; (800b22c <http_init_file+0xf4>)
 800b156:	f640 120b 	movw	r2, #2315	; 0x90b
 800b15a:	4935      	ldr	r1, [pc, #212]	; (800b230 <http_init_file+0xf8>)
 800b15c:	4835      	ldr	r0, [pc, #212]	; (800b234 <http_init_file+0xfc>)
 800b15e:	f00d fd6b 	bl	8018c38 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	da06      	bge.n	800b186 <http_init_file+0x4e>
 800b178:	4b2c      	ldr	r3, [pc, #176]	; (800b22c <http_init_file+0xf4>)
 800b17a:	f640 1234 	movw	r2, #2356	; 0x934
 800b17e:	492e      	ldr	r1, [pc, #184]	; (800b238 <http_init_file+0x100>)
 800b180:	482c      	ldr	r0, [pc, #176]	; (800b234 <http_init_file+0xfc>)
 800b182:	f00d fd59 	bl	8018c38 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	461a      	mov	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	7c1b      	ldrb	r3, [r3, #16]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <http_init_file+0x7c>
 800b1a6:	4b21      	ldr	r3, [pc, #132]	; (800b22c <http_init_file+0xf4>)
 800b1a8:	f640 1243 	movw	r2, #2371	; 0x943
 800b1ac:	4923      	ldr	r1, [pc, #140]	; (800b23c <http_init_file+0x104>)
 800b1ae:	4821      	ldr	r0, [pc, #132]	; (800b234 <http_init_file+0xfc>)
 800b1b0:	f00d fd42 	bl	8018c38 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d032      	beq.n	800b220 <http_init_file+0xe8>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	7c1b      	ldrb	r3, [r3, #16]
 800b1c0:	f003 0301 	and.w	r3, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d02b      	beq.n	800b220 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6998      	ldr	r0, [r3, #24]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	491b      	ldr	r1, [pc, #108]	; (800b240 <http_init_file+0x108>)
 800b1d4:	f000 f9f8 	bl	800b5c8 <lwip_strnstr>
 800b1d8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01f      	beq.n	800b220 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	1d1a      	adds	r2, r3, #4
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	699a      	ldr	r2, [r3, #24]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	441a      	add	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	625a      	str	r2, [r3, #36]	; 0x24
 800b204:	e00c      	b.n	800b220 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	0801ad84 	.word	0x0801ad84
 800b230:	0801ae80 	.word	0x0801ae80
 800b234:	0801adcc 	.word	0x0801adcc
 800b238:	0801ae94 	.word	0x0801ae94
 800b23c:	0801aeb4 	.word	0x0801aeb4
 800b240:	0801ae78 	.word	0x0801ae78

0800b244 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <http_err+0x1c>
    http_state_free(hs);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff fc02 	bl	800aa64 <http_state_free>
  }
}
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <http_sent+0x1c>
    return ERR_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	e008      	b.n	800b296 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b28c:	6979      	ldr	r1, [r7, #20]
 800b28e:	68b8      	ldr	r0, [r7, #8]
 800b290:	f7ff fd25 	bl	800acde <http_send>

  return ERR_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d107      	bne.n	800b2c2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	6838      	ldr	r0, [r7, #0]
 800b2b6:	f7ff fc91 	bl	800abdc <http_close_conn>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e021      	b.n	800b306 <http_poll+0x68>
  } else {
    hs->retries++;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	d105      	bne.n	800b2e8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b2dc:	68f9      	ldr	r1, [r7, #12]
 800b2de:	6838      	ldr	r0, [r7, #0]
 800b2e0:	f7ff fc7c 	bl	800abdc <http_close_conn>
      return ERR_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e00e      	b.n	800b306 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d009      	beq.n	800b304 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	6838      	ldr	r0, [r7, #0]
 800b2f4:	f7ff fcf3 	bl	800acde <http_send>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b2fe:	6838      	ldr	r0, [r7, #0]
 800b300:	f007 fa6a 	bl	80127d8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d105      	bne.n	800b336 <http_recv+0x26>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <http_recv+0x26>
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d111      	bne.n	800b35a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	891b      	ldrh	r3, [r3, #8]
 800b340:	4619      	mov	r1, r3
 800b342:	68b8      	ldr	r0, [r7, #8]
 800b344:	f002 fd20 	bl	800dd88 <tcp_recved>
      pbuf_free(p);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 fd43 	bl	800cdd4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b34e:	6979      	ldr	r1, [r7, #20]
 800b350:	68b8      	ldr	r0, [r7, #8]
 800b352:	f7ff fc43 	bl	800abdc <http_close_conn>
    return ERR_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	e055      	b.n	800b406 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	891b      	ldrh	r3, [r3, #8]
 800b35e:	4619      	mov	r1, r3
 800b360:	68b8      	ldr	r0, [r7, #8]
 800b362:	f002 fd11 	bl	800dd88 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	695b      	ldr	r3, [r3, #20]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d147      	bne.n	800b3fe <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	6979      	ldr	r1, [r7, #20]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fd30 	bl	800add8 <http_parse_request>
 800b378:	4603      	mov	r3, r0
 800b37a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b37c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d015      	beq.n	800b3b0 <http_recv+0xa0>
 800b384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b388:	f113 0f05 	cmn.w	r3, #5
 800b38c:	d010      	beq.n	800b3b0 <http_recv+0xa0>
 800b38e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b392:	f113 0f10 	cmn.w	r3, #16
 800b396:	d00b      	beq.n	800b3b0 <http_recv+0xa0>
 800b398:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b39c:	f113 0f08 	cmn.w	r3, #8
 800b3a0:	d006      	beq.n	800b3b0 <http_recv+0xa0>
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	; (800b410 <http_recv+0x100>)
 800b3a4:	f640 2204 	movw	r2, #2564	; 0xa04
 800b3a8:	491a      	ldr	r1, [pc, #104]	; (800b414 <http_recv+0x104>)
 800b3aa:	481b      	ldr	r0, [pc, #108]	; (800b418 <http_recv+0x108>)
 800b3ac:	f00d fc44 	bl	8018c38 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b3b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3b4:	f113 0f05 	cmn.w	r3, #5
 800b3b8:	d00b      	beq.n	800b3d2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d007      	beq.n	800b3d2 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 fd04 	bl	800cdd4 <pbuf_free>
          hs->req = NULL;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fcfe 	bl	800cdd4 <pbuf_free>
      if (parsed == ERR_OK) {
 800b3d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b3e0:	6979      	ldr	r1, [r7, #20]
 800b3e2:	68b8      	ldr	r0, [r7, #8]
 800b3e4:	f7ff fc7b 	bl	800acde <http_send>
 800b3e8:	e00c      	b.n	800b404 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b3ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3ee:	f113 0f10 	cmn.w	r3, #16
 800b3f2:	d107      	bne.n	800b404 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b3f4:	6979      	ldr	r1, [r7, #20]
 800b3f6:	68b8      	ldr	r0, [r7, #8]
 800b3f8:	f7ff fbf0 	bl	800abdc <http_close_conn>
 800b3fc:	e002      	b.n	800b404 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 fce8 	bl	800cdd4 <pbuf_free>
    }
  }
  return ERR_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	0801ad84 	.word	0x0801ad84
 800b414:	0801aee0 	.word	0x0801aee0
 800b418:	0801adcc 	.word	0x0801adcc

0800b41c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <http_accept+0x1c>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <http_accept+0x22>
    return ERR_VAL;
 800b438:	f06f 0305 	mvn.w	r3, #5
 800b43c:	e025      	b.n	800b48a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b43e:	2101      	movs	r1, #1
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f003 fa9d 	bl	800e980 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b446:	f7ff fadb 	bl	800aa00 <http_state_alloc>
 800b44a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b452:	f04f 33ff 	mov.w	r3, #4294967295
 800b456:	e018      	b.n	800b48a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	68b8      	ldr	r0, [r7, #8]
 800b462:	f003 fc8d 	bl	800ed80 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b466:	490b      	ldr	r1, [pc, #44]	; (800b494 <http_accept+0x78>)
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	f003 fc9b 	bl	800eda4 <tcp_recv>
  altcp_err(pcb, http_err);
 800b46e:	490a      	ldr	r1, [pc, #40]	; (800b498 <http_accept+0x7c>)
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f003 fcdb 	bl	800ee2c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b476:	2204      	movs	r2, #4
 800b478:	4908      	ldr	r1, [pc, #32]	; (800b49c <http_accept+0x80>)
 800b47a:	68b8      	ldr	r0, [r7, #8]
 800b47c:	f003 fd10 	bl	800eea0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b480:	4907      	ldr	r1, [pc, #28]	; (800b4a0 <http_accept+0x84>)
 800b482:	68b8      	ldr	r0, [r7, #8]
 800b484:	f003 fcb0 	bl	800ede8 <tcp_sent>

  return ERR_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	0800b311 	.word	0x0800b311
 800b498:	0800b245 	.word	0x0800b245
 800b49c:	0800b29f 	.word	0x0800b29f
 800b4a0:	0800b269 	.word	0x0800b269

0800b4a4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d029      	beq.n	800b50a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f003 fa61 	bl	800e980 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b4be:	887b      	ldrh	r3, [r7, #2]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4914      	ldr	r1, [pc, #80]	; (800b514 <httpd_init_pcb+0x70>)
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f002 fa91 	bl	800d9ec <tcp_bind>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <httpd_init_pcb+0x40>
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <httpd_init_pcb+0x74>)
 800b4d8:	f640 2257 	movw	r2, #2647	; 0xa57
 800b4dc:	490f      	ldr	r1, [pc, #60]	; (800b51c <httpd_init_pcb+0x78>)
 800b4de:	4810      	ldr	r0, [pc, #64]	; (800b520 <httpd_init_pcb+0x7c>)
 800b4e0:	f00d fbaa 	bl	8018c38 <iprintf>
    pcb = altcp_listen(pcb);
 800b4e4:	21ff      	movs	r1, #255	; 0xff
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f002 fb38 	bl	800db5c <tcp_listen_with_backlog>
 800b4ec:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <httpd_init_pcb+0x5e>
 800b4f4:	4b08      	ldr	r3, [pc, #32]	; (800b518 <httpd_init_pcb+0x74>)
 800b4f6:	f640 2259 	movw	r2, #2649	; 0xa59
 800b4fa:	490a      	ldr	r1, [pc, #40]	; (800b524 <httpd_init_pcb+0x80>)
 800b4fc:	4808      	ldr	r0, [pc, #32]	; (800b520 <httpd_init_pcb+0x7c>)
 800b4fe:	f00d fb9b 	bl	8018c38 <iprintf>
    altcp_accept(pcb, http_accept);
 800b502:	4909      	ldr	r1, [pc, #36]	; (800b528 <httpd_init_pcb+0x84>)
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f003 fcb3 	bl	800ee70 <tcp_accept>
  }
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	08027f2c 	.word	0x08027f2c
 800b518:	0801ad84 	.word	0x0801ad84
 800b51c:	0801af0c 	.word	0x0801af0c
 800b520:	0801adcc 	.word	0x0801adcc
 800b524:	0801af28 	.word	0x0801af28
 800b528:	0800b41d 	.word	0x0800b41d

0800b52c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b532:	202e      	movs	r0, #46	; 0x2e
 800b534:	f003 fc16 	bl	800ed64 <tcp_new_ip_type>
 800b538:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <httpd_init+0x22>
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <httpd_init+0x34>)
 800b542:	f640 2272 	movw	r2, #2674	; 0xa72
 800b546:	4907      	ldr	r1, [pc, #28]	; (800b564 <httpd_init+0x38>)
 800b548:	4807      	ldr	r0, [pc, #28]	; (800b568 <httpd_init+0x3c>)
 800b54a:	f00d fb75 	bl	8018c38 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b54e:	2150      	movs	r1, #80	; 0x50
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff ffa7 	bl	800b4a4 <httpd_init_pcb>
}
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	0801ad84 	.word	0x0801ad84
 800b564:	0801af48 	.word	0x0801af48
 800b568:	0801adcc 	.word	0x0801adcc

0800b56c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	4603      	mov	r3, r0
 800b574:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	b21a      	sxth	r2, r3
 800b57c:	88fb      	ldrh	r3, [r7, #6]
 800b57e:	0a1b      	lsrs	r3, r3, #8
 800b580:	b29b      	uxth	r3, r3
 800b582:	b21b      	sxth	r3, r3
 800b584:	4313      	orrs	r3, r2
 800b586:	b21b      	sxth	r3, r3
 800b588:	b29b      	uxth	r3, r3
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b596:	b480      	push	{r7}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	061a      	lsls	r2, r3, #24
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	0a1b      	lsrs	r3, r3, #8
 800b5b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	0e1b      	lsrs	r3, r3, #24
 800b5ba:	4313      	orrs	r3, r2
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	f7f4 fe15 	bl	8000204 <strlen>
 800b5da:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	e022      	b.n	800b62c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	e012      	b.n	800b612 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d109      	bne.n	800b60c <lwip_strnstr+0x44>
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	6978      	ldr	r0, [r7, #20]
 800b5fe:	f00d fcda 	bl	8018fb6 <strncmp>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	e00f      	b.n	800b62c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	3301      	adds	r3, #1
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d007      	beq.n	800b62a <lwip_strnstr+0x62>
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	441a      	add	r2, r3
 800b620:	68f9      	ldr	r1, [r7, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	440b      	add	r3, r1
 800b626:	429a      	cmp	r2, r3
 800b628:	d9e0      	bls.n	800b5ec <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b63e:	f00d f955 	bl	80188ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b642:	f000 f8d5 	bl	800b7f0 <mem_init>
  memp_init();
 800b646:	f000 fc31 	bl	800beac <memp_init>
  pbuf_init();
  netif_init();
 800b64a:	f000 fd3d 	bl	800c0c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b64e:	f008 f9b3 	bl	80139b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b652:	f001 fe69 	bl	800d328 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b656:	f008 f8f5 	bl	8013844 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b65a:	bf00      	nop
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b66e:	4b05      	ldr	r3, [pc, #20]	; (800b684 <ptr_to_mem+0x20>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	4413      	add	r3, r2
}
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	2000e0a8 	.word	0x2000e0a8

0800b688 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b690:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <mem_to_ptr+0x20>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29b      	uxth	r3, r3
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	2000e0a8 	.word	0x2000e0a8

0800b6ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b6b4:	4b45      	ldr	r3, [pc, #276]	; (800b7cc <plug_holes+0x120>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d206      	bcs.n	800b6cc <plug_holes+0x20>
 800b6be:	4b44      	ldr	r3, [pc, #272]	; (800b7d0 <plug_holes+0x124>)
 800b6c0:	f240 12df 	movw	r2, #479	; 0x1df
 800b6c4:	4943      	ldr	r1, [pc, #268]	; (800b7d4 <plug_holes+0x128>)
 800b6c6:	4844      	ldr	r0, [pc, #272]	; (800b7d8 <plug_holes+0x12c>)
 800b6c8:	f00d fab6 	bl	8018c38 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b6cc:	4b43      	ldr	r3, [pc, #268]	; (800b7dc <plug_holes+0x130>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d306      	bcc.n	800b6e4 <plug_holes+0x38>
 800b6d6:	4b3e      	ldr	r3, [pc, #248]	; (800b7d0 <plug_holes+0x124>)
 800b6d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b6dc:	4940      	ldr	r1, [pc, #256]	; (800b7e0 <plug_holes+0x134>)
 800b6de:	483e      	ldr	r0, [pc, #248]	; (800b7d8 <plug_holes+0x12c>)
 800b6e0:	f00d faaa 	bl	8018c38 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	791b      	ldrb	r3, [r3, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <plug_holes+0x4e>
 800b6ec:	4b38      	ldr	r3, [pc, #224]	; (800b7d0 <plug_holes+0x124>)
 800b6ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b6f2:	493c      	ldr	r1, [pc, #240]	; (800b7e4 <plug_holes+0x138>)
 800b6f4:	4838      	ldr	r0, [pc, #224]	; (800b7d8 <plug_holes+0x12c>)
 800b6f6:	f00d fa9f 	bl	8018c38 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b702:	d906      	bls.n	800b712 <plug_holes+0x66>
 800b704:	4b32      	ldr	r3, [pc, #200]	; (800b7d0 <plug_holes+0x124>)
 800b706:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b70a:	4937      	ldr	r1, [pc, #220]	; (800b7e8 <plug_holes+0x13c>)
 800b70c:	4832      	ldr	r0, [pc, #200]	; (800b7d8 <plug_holes+0x12c>)
 800b70e:	f00d fa93 	bl	8018c38 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff ffa4 	bl	800b664 <ptr_to_mem>
 800b71c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d024      	beq.n	800b770 <plug_holes+0xc4>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	791b      	ldrb	r3, [r3, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d120      	bne.n	800b770 <plug_holes+0xc4>
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <plug_holes+0x130>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	429a      	cmp	r2, r3
 800b736:	d01b      	beq.n	800b770 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b738:	4b2c      	ldr	r3, [pc, #176]	; (800b7ec <plug_holes+0x140>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d102      	bne.n	800b748 <plug_holes+0x9c>
      lfree = mem;
 800b742:	4a2a      	ldr	r2, [pc, #168]	; (800b7ec <plug_holes+0x140>)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	881a      	ldrh	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b758:	d00a      	beq.n	800b770 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff ff80 	bl	800b664 <ptr_to_mem>
 800b764:	4604      	mov	r4, r0
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ff8e 	bl	800b688 <mem_to_ptr>
 800b76c:	4603      	mov	r3, r0
 800b76e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	885b      	ldrh	r3, [r3, #2]
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff ff75 	bl	800b664 <ptr_to_mem>
 800b77a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	429a      	cmp	r2, r3
 800b782:	d01f      	beq.n	800b7c4 <plug_holes+0x118>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	791b      	ldrb	r3, [r3, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d11b      	bne.n	800b7c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b78c:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <plug_holes+0x140>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d102      	bne.n	800b79c <plug_holes+0xf0>
      lfree = pmem;
 800b796:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <plug_holes+0x140>)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	881a      	ldrh	r2, [r3, #0]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7ac:	d00a      	beq.n	800b7c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ff56 	bl	800b664 <ptr_to_mem>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	68b8      	ldr	r0, [r7, #8]
 800b7bc:	f7ff ff64 	bl	800b688 <mem_to_ptr>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd90      	pop	{r4, r7, pc}
 800b7cc:	2000e0a8 	.word	0x2000e0a8
 800b7d0:	0801af64 	.word	0x0801af64
 800b7d4:	0801af94 	.word	0x0801af94
 800b7d8:	0801afac 	.word	0x0801afac
 800b7dc:	2000e0ac 	.word	0x2000e0ac
 800b7e0:	0801afd4 	.word	0x0801afd4
 800b7e4:	0801aff0 	.word	0x0801aff0
 800b7e8:	0801b00c 	.word	0x0801b00c
 800b7ec:	2000e0b4 	.word	0x2000e0b4

0800b7f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b7f6:	4b1f      	ldr	r3, [pc, #124]	; (800b874 <mem_init+0x84>)
 800b7f8:	3303      	adds	r3, #3
 800b7fa:	f023 0303 	bic.w	r3, r3, #3
 800b7fe:	461a      	mov	r2, r3
 800b800:	4b1d      	ldr	r3, [pc, #116]	; (800b878 <mem_init+0x88>)
 800b802:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b804:	4b1c      	ldr	r3, [pc, #112]	; (800b878 <mem_init+0x88>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b810:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b81e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b822:	f7ff ff1f 	bl	800b664 <ptr_to_mem>
 800b826:	4603      	mov	r3, r0
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <mem_init+0x8c>)
 800b82a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b82c:	4b13      	ldr	r3, [pc, #76]	; (800b87c <mem_init+0x8c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2201      	movs	r2, #1
 800b832:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b834:	4b11      	ldr	r3, [pc, #68]	; (800b87c <mem_init+0x8c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b83c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b83e:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <mem_init+0x8c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b846:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <mem_init+0x88>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a0c      	ldr	r2, [pc, #48]	; (800b880 <mem_init+0x90>)
 800b84e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b850:	480c      	ldr	r0, [pc, #48]	; (800b884 <mem_init+0x94>)
 800b852:	f00d f859 	bl	8018908 <sys_mutex_new>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <mem_init+0x98>)
 800b85e:	f240 221f 	movw	r2, #543	; 0x21f
 800b862:	490a      	ldr	r1, [pc, #40]	; (800b88c <mem_init+0x9c>)
 800b864:	480a      	ldr	r0, [pc, #40]	; (800b890 <mem_init+0xa0>)
 800b866:	f00d f9e7 	bl	8018c38 <iprintf>
  }
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	2000da54 	.word	0x2000da54
 800b878:	2000e0a8 	.word	0x2000e0a8
 800b87c:	2000e0ac 	.word	0x2000e0ac
 800b880:	2000e0b4 	.word	0x2000e0b4
 800b884:	2000e0b0 	.word	0x2000e0b0
 800b888:	0801af64 	.word	0x0801af64
 800b88c:	0801b038 	.word	0x0801b038
 800b890:	0801afac 	.word	0x0801afac

0800b894 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fef3 	bl	800b688 <mem_to_ptr>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff feda 	bl	800b664 <ptr_to_mem>
 800b8b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	885b      	ldrh	r3, [r3, #2]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff fed4 	bl	800b664 <ptr_to_mem>
 800b8bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8c6:	d818      	bhi.n	800b8fa <mem_link_valid+0x66>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	885b      	ldrh	r3, [r3, #2]
 800b8cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8d0:	d813      	bhi.n	800b8fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b8d6:	8afa      	ldrh	r2, [r7, #22]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d004      	beq.n	800b8e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	8afa      	ldrh	r2, [r7, #22]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d109      	bne.n	800b8fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8e6:	4b08      	ldr	r3, [pc, #32]	; (800b908 <mem_link_valid+0x74>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d006      	beq.n	800b8fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	885b      	ldrh	r3, [r3, #2]
 800b8f4:	8afa      	ldrh	r2, [r7, #22]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d001      	beq.n	800b8fe <mem_link_valid+0x6a>
    return 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e000      	b.n	800b900 <mem_link_valid+0x6c>
  }
  return 1;
 800b8fe:	2301      	movs	r3, #1
}
 800b900:	4618      	mov	r0, r3
 800b902:	3718      	adds	r7, #24
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	2000e0ac 	.word	0x2000e0ac

0800b90c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d070      	beq.n	800b9fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f003 0303 	and.w	r3, r3, #3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00d      	beq.n	800b940 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b924:	4b37      	ldr	r3, [pc, #220]	; (800ba04 <mem_free+0xf8>)
 800b926:	f240 2273 	movw	r2, #627	; 0x273
 800b92a:	4937      	ldr	r1, [pc, #220]	; (800ba08 <mem_free+0xfc>)
 800b92c:	4837      	ldr	r0, [pc, #220]	; (800ba0c <mem_free+0x100>)
 800b92e:	f00d f983 	bl	8018c38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b932:	f00d f847 	bl	80189c4 <sys_arch_protect>
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f00d f851 	bl	80189e0 <sys_arch_unprotect>
    return;
 800b93e:	e05e      	b.n	800b9fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3b08      	subs	r3, #8
 800b944:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b946:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <mem_free+0x104>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d306      	bcc.n	800b95e <mem_free+0x52>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f103 020c 	add.w	r2, r3, #12
 800b956:	4b2f      	ldr	r3, [pc, #188]	; (800ba14 <mem_free+0x108>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d90d      	bls.n	800b97a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b95e:	4b29      	ldr	r3, [pc, #164]	; (800ba04 <mem_free+0xf8>)
 800b960:	f240 227f 	movw	r2, #639	; 0x27f
 800b964:	492c      	ldr	r1, [pc, #176]	; (800ba18 <mem_free+0x10c>)
 800b966:	4829      	ldr	r0, [pc, #164]	; (800ba0c <mem_free+0x100>)
 800b968:	f00d f966 	bl	8018c38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b96c:	f00d f82a 	bl	80189c4 <sys_arch_protect>
 800b970:	6138      	str	r0, [r7, #16]
 800b972:	6938      	ldr	r0, [r7, #16]
 800b974:	f00d f834 	bl	80189e0 <sys_arch_unprotect>
    return;
 800b978:	e041      	b.n	800b9fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b97a:	4828      	ldr	r0, [pc, #160]	; (800ba1c <mem_free+0x110>)
 800b97c:	f00c ffe0 	bl	8018940 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	791b      	ldrb	r3, [r3, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d110      	bne.n	800b9aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b988:	4b1e      	ldr	r3, [pc, #120]	; (800ba04 <mem_free+0xf8>)
 800b98a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b98e:	4924      	ldr	r1, [pc, #144]	; (800ba20 <mem_free+0x114>)
 800b990:	481e      	ldr	r0, [pc, #120]	; (800ba0c <mem_free+0x100>)
 800b992:	f00d f951 	bl	8018c38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b996:	4821      	ldr	r0, [pc, #132]	; (800ba1c <mem_free+0x110>)
 800b998:	f00c ffe1 	bl	801895e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b99c:	f00d f812 	bl	80189c4 <sys_arch_protect>
 800b9a0:	6178      	str	r0, [r7, #20]
 800b9a2:	6978      	ldr	r0, [r7, #20]
 800b9a4:	f00d f81c 	bl	80189e0 <sys_arch_unprotect>
    return;
 800b9a8:	e029      	b.n	800b9fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b9aa:	69f8      	ldr	r0, [r7, #28]
 800b9ac:	f7ff ff72 	bl	800b894 <mem_link_valid>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d110      	bne.n	800b9d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b9b6:	4b13      	ldr	r3, [pc, #76]	; (800ba04 <mem_free+0xf8>)
 800b9b8:	f240 2295 	movw	r2, #661	; 0x295
 800b9bc:	4919      	ldr	r1, [pc, #100]	; (800ba24 <mem_free+0x118>)
 800b9be:	4813      	ldr	r0, [pc, #76]	; (800ba0c <mem_free+0x100>)
 800b9c0:	f00d f93a 	bl	8018c38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b9c4:	4815      	ldr	r0, [pc, #84]	; (800ba1c <mem_free+0x110>)
 800b9c6:	f00c ffca 	bl	801895e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9ca:	f00c fffb 	bl	80189c4 <sys_arch_protect>
 800b9ce:	61b8      	str	r0, [r7, #24]
 800b9d0:	69b8      	ldr	r0, [r7, #24]
 800b9d2:	f00d f805 	bl	80189e0 <sys_arch_unprotect>
    return;
 800b9d6:	e012      	b.n	800b9fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b9de:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <mem_free+0x11c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d202      	bcs.n	800b9ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b9e8:	4a0f      	ldr	r2, [pc, #60]	; (800ba28 <mem_free+0x11c>)
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b9ee:	69f8      	ldr	r0, [r7, #28]
 800b9f0:	f7ff fe5c 	bl	800b6ac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b9f4:	4809      	ldr	r0, [pc, #36]	; (800ba1c <mem_free+0x110>)
 800b9f6:	f00c ffb2 	bl	801895e <sys_mutex_unlock>
 800b9fa:	e000      	b.n	800b9fe <mem_free+0xf2>
    return;
 800b9fc:	bf00      	nop
}
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	0801af64 	.word	0x0801af64
 800ba08:	0801b054 	.word	0x0801b054
 800ba0c:	0801afac 	.word	0x0801afac
 800ba10:	2000e0a8 	.word	0x2000e0a8
 800ba14:	2000e0ac 	.word	0x2000e0ac
 800ba18:	0801b078 	.word	0x0801b078
 800ba1c:	2000e0b0 	.word	0x2000e0b0
 800ba20:	0801b094 	.word	0x0801b094
 800ba24:	0801b0bc 	.word	0x0801b0bc
 800ba28:	2000e0b4 	.word	0x2000e0b4

0800ba2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ba38:	887b      	ldrh	r3, [r7, #2]
 800ba3a:	3303      	adds	r3, #3
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ba44:	8bfb      	ldrh	r3, [r7, #30]
 800ba46:	2b0b      	cmp	r3, #11
 800ba48:	d801      	bhi.n	800ba4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ba4e:	8bfb      	ldrh	r3, [r7, #30]
 800ba50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba54:	d803      	bhi.n	800ba5e <mem_trim+0x32>
 800ba56:	8bfa      	ldrh	r2, [r7, #30]
 800ba58:	887b      	ldrh	r3, [r7, #2]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d201      	bcs.n	800ba62 <mem_trim+0x36>
    return NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e0d8      	b.n	800bc14 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ba62:	4b6e      	ldr	r3, [pc, #440]	; (800bc1c <mem_trim+0x1f0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d304      	bcc.n	800ba76 <mem_trim+0x4a>
 800ba6c:	4b6c      	ldr	r3, [pc, #432]	; (800bc20 <mem_trim+0x1f4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d306      	bcc.n	800ba84 <mem_trim+0x58>
 800ba76:	4b6b      	ldr	r3, [pc, #428]	; (800bc24 <mem_trim+0x1f8>)
 800ba78:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ba7c:	496a      	ldr	r1, [pc, #424]	; (800bc28 <mem_trim+0x1fc>)
 800ba7e:	486b      	ldr	r0, [pc, #428]	; (800bc2c <mem_trim+0x200>)
 800ba80:	f00d f8da 	bl	8018c38 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ba84:	4b65      	ldr	r3, [pc, #404]	; (800bc1c <mem_trim+0x1f0>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d304      	bcc.n	800ba98 <mem_trim+0x6c>
 800ba8e:	4b64      	ldr	r3, [pc, #400]	; (800bc20 <mem_trim+0x1f4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d307      	bcc.n	800baa8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba98:	f00c ff94 	bl	80189c4 <sys_arch_protect>
 800ba9c:	60b8      	str	r0, [r7, #8]
 800ba9e:	68b8      	ldr	r0, [r7, #8]
 800baa0:	f00c ff9e 	bl	80189e0 <sys_arch_unprotect>
    return rmem;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	e0b5      	b.n	800bc14 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3b08      	subs	r3, #8
 800baac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800baae:	69b8      	ldr	r0, [r7, #24]
 800bab0:	f7ff fdea 	bl	800b688 <mem_to_ptr>
 800bab4:	4603      	mov	r3, r0
 800bab6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	881a      	ldrh	r2, [r3, #0]
 800babc:	8afb      	ldrh	r3, [r7, #22]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3b08      	subs	r3, #8
 800bac4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bac6:	8bfa      	ldrh	r2, [r7, #30]
 800bac8:	8abb      	ldrh	r3, [r7, #20]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d906      	bls.n	800badc <mem_trim+0xb0>
 800bace:	4b55      	ldr	r3, [pc, #340]	; (800bc24 <mem_trim+0x1f8>)
 800bad0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bad4:	4956      	ldr	r1, [pc, #344]	; (800bc30 <mem_trim+0x204>)
 800bad6:	4855      	ldr	r0, [pc, #340]	; (800bc2c <mem_trim+0x200>)
 800bad8:	f00d f8ae 	bl	8018c38 <iprintf>
  if (newsize > size) {
 800badc:	8bfa      	ldrh	r2, [r7, #30]
 800bade:	8abb      	ldrh	r3, [r7, #20]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d901      	bls.n	800bae8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	e095      	b.n	800bc14 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bae8:	8bfa      	ldrh	r2, [r7, #30]
 800baea:	8abb      	ldrh	r3, [r7, #20]
 800baec:	429a      	cmp	r2, r3
 800baee:	d101      	bne.n	800baf4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	e08f      	b.n	800bc14 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800baf4:	484f      	ldr	r0, [pc, #316]	; (800bc34 <mem_trim+0x208>)
 800baf6:	f00c ff23 	bl	8018940 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff fdb0 	bl	800b664 <ptr_to_mem>
 800bb04:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	791b      	ldrb	r3, [r3, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d13f      	bne.n	800bb8e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb16:	d106      	bne.n	800bb26 <mem_trim+0xfa>
 800bb18:	4b42      	ldr	r3, [pc, #264]	; (800bc24 <mem_trim+0x1f8>)
 800bb1a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bb1e:	4946      	ldr	r1, [pc, #280]	; (800bc38 <mem_trim+0x20c>)
 800bb20:	4842      	ldr	r0, [pc, #264]	; (800bc2c <mem_trim+0x200>)
 800bb22:	f00d f889 	bl	8018c38 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bb2c:	8afa      	ldrh	r2, [r7, #22]
 800bb2e:	8bfb      	ldrh	r3, [r7, #30]
 800bb30:	4413      	add	r3, r2
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	3308      	adds	r3, #8
 800bb36:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bb38:	4b40      	ldr	r3, [pc, #256]	; (800bc3c <mem_trim+0x210>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d106      	bne.n	800bb50 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bb42:	89fb      	ldrh	r3, [r7, #14]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff fd8d 	bl	800b664 <ptr_to_mem>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	4a3b      	ldr	r2, [pc, #236]	; (800bc3c <mem_trim+0x210>)
 800bb4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff fd86 	bl	800b664 <ptr_to_mem>
 800bb58:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	89ba      	ldrh	r2, [r7, #12]
 800bb64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	8afa      	ldrh	r2, [r7, #22]
 800bb6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	89fa      	ldrh	r2, [r7, #14]
 800bb70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb7a:	d047      	beq.n	800bc0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff fd6f 	bl	800b664 <ptr_to_mem>
 800bb86:	4602      	mov	r2, r0
 800bb88:	89fb      	ldrh	r3, [r7, #14]
 800bb8a:	8053      	strh	r3, [r2, #2]
 800bb8c:	e03e      	b.n	800bc0c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bb8e:	8bfb      	ldrh	r3, [r7, #30]
 800bb90:	f103 0214 	add.w	r2, r3, #20
 800bb94:	8abb      	ldrh	r3, [r7, #20]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d838      	bhi.n	800bc0c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bb9a:	8afa      	ldrh	r2, [r7, #22]
 800bb9c:	8bfb      	ldrh	r3, [r7, #30]
 800bb9e:	4413      	add	r3, r2
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3308      	adds	r3, #8
 800bba4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbae:	d106      	bne.n	800bbbe <mem_trim+0x192>
 800bbb0:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <mem_trim+0x1f8>)
 800bbb2:	f240 3216 	movw	r2, #790	; 0x316
 800bbb6:	4920      	ldr	r1, [pc, #128]	; (800bc38 <mem_trim+0x20c>)
 800bbb8:	481c      	ldr	r0, [pc, #112]	; (800bc2c <mem_trim+0x200>)
 800bbba:	f00d f83d 	bl	8018c38 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bbbe:	89fb      	ldrh	r3, [r7, #14]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fd4f 	bl	800b664 <ptr_to_mem>
 800bbc6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <mem_trim+0x210>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d202      	bcs.n	800bbd8 <mem_trim+0x1ac>
      lfree = mem2;
 800bbd2:	4a1a      	ldr	r2, [pc, #104]	; (800bc3c <mem_trim+0x210>)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	881a      	ldrh	r2, [r3, #0]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	8afa      	ldrh	r2, [r7, #22]
 800bbea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	89fa      	ldrh	r2, [r7, #14]
 800bbf0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbfa:	d007      	beq.n	800bc0c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff fd2f 	bl	800b664 <ptr_to_mem>
 800bc06:	4602      	mov	r2, r0
 800bc08:	89fb      	ldrh	r3, [r7, #14]
 800bc0a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc0c:	4809      	ldr	r0, [pc, #36]	; (800bc34 <mem_trim+0x208>)
 800bc0e:	f00c fea6 	bl	801895e <sys_mutex_unlock>
  return rmem;
 800bc12:	687b      	ldr	r3, [r7, #4]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	2000e0a8 	.word	0x2000e0a8
 800bc20:	2000e0ac 	.word	0x2000e0ac
 800bc24:	0801af64 	.word	0x0801af64
 800bc28:	0801b0f0 	.word	0x0801b0f0
 800bc2c:	0801afac 	.word	0x0801afac
 800bc30:	0801b108 	.word	0x0801b108
 800bc34:	2000e0b0 	.word	0x2000e0b0
 800bc38:	0801b128 	.word	0x0801b128
 800bc3c:	2000e0b4 	.word	0x2000e0b4

0800bc40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <mem_malloc+0x14>
    return NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e0e2      	b.n	800be1a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bc54:	88fb      	ldrh	r3, [r7, #6]
 800bc56:	3303      	adds	r3, #3
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	f023 0303 	bic.w	r3, r3, #3
 800bc5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bc60:	8bbb      	ldrh	r3, [r7, #28]
 800bc62:	2b0b      	cmp	r3, #11
 800bc64:	d801      	bhi.n	800bc6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bc66:	230c      	movs	r3, #12
 800bc68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bc6a:	8bbb      	ldrh	r3, [r7, #28]
 800bc6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc70:	d803      	bhi.n	800bc7a <mem_malloc+0x3a>
 800bc72:	8bba      	ldrh	r2, [r7, #28]
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d201      	bcs.n	800bc7e <mem_malloc+0x3e>
    return NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	e0cd      	b.n	800be1a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bc7e:	4869      	ldr	r0, [pc, #420]	; (800be24 <mem_malloc+0x1e4>)
 800bc80:	f00c fe5e 	bl	8018940 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bc84:	4b68      	ldr	r3, [pc, #416]	; (800be28 <mem_malloc+0x1e8>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fcfd 	bl	800b688 <mem_to_ptr>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	83fb      	strh	r3, [r7, #30]
 800bc92:	e0b7      	b.n	800be04 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bc94:	8bfb      	ldrh	r3, [r7, #30]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff fce4 	bl	800b664 <ptr_to_mem>
 800bc9c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	791b      	ldrb	r3, [r3, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80a7 	bne.w	800bdf6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	461a      	mov	r2, r3
 800bcae:	8bfb      	ldrh	r3, [r7, #30]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	f1a3 0208 	sub.w	r2, r3, #8
 800bcb6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	f0c0 809c 	bcc.w	800bdf6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	8bfb      	ldrh	r3, [r7, #30]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f1a3 0208 	sub.w	r2, r3, #8
 800bccc:	8bbb      	ldrh	r3, [r7, #28]
 800bcce:	3314      	adds	r3, #20
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d333      	bcc.n	800bd3c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bcd4:	8bfa      	ldrh	r2, [r7, #30]
 800bcd6:	8bbb      	ldrh	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3308      	adds	r3, #8
 800bcde:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bce0:	8a7b      	ldrh	r3, [r7, #18]
 800bce2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bce6:	d106      	bne.n	800bcf6 <mem_malloc+0xb6>
 800bce8:	4b50      	ldr	r3, [pc, #320]	; (800be2c <mem_malloc+0x1ec>)
 800bcea:	f240 3287 	movw	r2, #903	; 0x387
 800bcee:	4950      	ldr	r1, [pc, #320]	; (800be30 <mem_malloc+0x1f0>)
 800bcf0:	4850      	ldr	r0, [pc, #320]	; (800be34 <mem_malloc+0x1f4>)
 800bcf2:	f00c ffa1 	bl	8018c38 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bcf6:	8a7b      	ldrh	r3, [r7, #18]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff fcb3 	bl	800b664 <ptr_to_mem>
 800bcfe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	881a      	ldrh	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	8bfa      	ldrh	r2, [r7, #30]
 800bd12:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	8a7a      	ldrh	r2, [r7, #18]
 800bd18:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd28:	d00b      	beq.n	800bd42 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fc98 	bl	800b664 <ptr_to_mem>
 800bd34:	4602      	mov	r2, r0
 800bd36:	8a7b      	ldrh	r3, [r7, #18]
 800bd38:	8053      	strh	r3, [r2, #2]
 800bd3a:	e002      	b.n	800bd42 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bd42:	4b39      	ldr	r3, [pc, #228]	; (800be28 <mem_malloc+0x1e8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d127      	bne.n	800bd9c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bd4c:	4b36      	ldr	r3, [pc, #216]	; (800be28 <mem_malloc+0x1e8>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bd52:	e005      	b.n	800bd60 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fc83 	bl	800b664 <ptr_to_mem>
 800bd5e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	791b      	ldrb	r3, [r3, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <mem_malloc+0x132>
 800bd68:	4b33      	ldr	r3, [pc, #204]	; (800be38 <mem_malloc+0x1f8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d1f0      	bne.n	800bd54 <mem_malloc+0x114>
          }
          lfree = cur;
 800bd72:	4a2d      	ldr	r2, [pc, #180]	; (800be28 <mem_malloc+0x1e8>)
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bd78:	4b2b      	ldr	r3, [pc, #172]	; (800be28 <mem_malloc+0x1e8>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	4b2e      	ldr	r3, [pc, #184]	; (800be38 <mem_malloc+0x1f8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d00b      	beq.n	800bd9c <mem_malloc+0x15c>
 800bd84:	4b28      	ldr	r3, [pc, #160]	; (800be28 <mem_malloc+0x1e8>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	791b      	ldrb	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d006      	beq.n	800bd9c <mem_malloc+0x15c>
 800bd8e:	4b27      	ldr	r3, [pc, #156]	; (800be2c <mem_malloc+0x1ec>)
 800bd90:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bd94:	4929      	ldr	r1, [pc, #164]	; (800be3c <mem_malloc+0x1fc>)
 800bd96:	4827      	ldr	r0, [pc, #156]	; (800be34 <mem_malloc+0x1f4>)
 800bd98:	f00c ff4e 	bl	8018c38 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bd9c:	4821      	ldr	r0, [pc, #132]	; (800be24 <mem_malloc+0x1e4>)
 800bd9e:	f00c fdde 	bl	801895e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bda2:	8bba      	ldrh	r2, [r7, #28]
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	4413      	add	r3, r2
 800bda8:	3308      	adds	r3, #8
 800bdaa:	4a23      	ldr	r2, [pc, #140]	; (800be38 <mem_malloc+0x1f8>)
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d906      	bls.n	800bdc0 <mem_malloc+0x180>
 800bdb2:	4b1e      	ldr	r3, [pc, #120]	; (800be2c <mem_malloc+0x1ec>)
 800bdb4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bdb8:	4921      	ldr	r1, [pc, #132]	; (800be40 <mem_malloc+0x200>)
 800bdba:	481e      	ldr	r0, [pc, #120]	; (800be34 <mem_malloc+0x1f4>)
 800bdbc:	f00c ff3c 	bl	8018c38 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	f003 0303 	and.w	r3, r3, #3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <mem_malloc+0x198>
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <mem_malloc+0x1ec>)
 800bdcc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bdd0:	491c      	ldr	r1, [pc, #112]	; (800be44 <mem_malloc+0x204>)
 800bdd2:	4818      	ldr	r0, [pc, #96]	; (800be34 <mem_malloc+0x1f4>)
 800bdd4:	f00c ff30 	bl	8018c38 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f003 0303 	and.w	r3, r3, #3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d006      	beq.n	800bdf0 <mem_malloc+0x1b0>
 800bde2:	4b12      	ldr	r3, [pc, #72]	; (800be2c <mem_malloc+0x1ec>)
 800bde4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bde8:	4917      	ldr	r1, [pc, #92]	; (800be48 <mem_malloc+0x208>)
 800bdea:	4812      	ldr	r0, [pc, #72]	; (800be34 <mem_malloc+0x1f4>)
 800bdec:	f00c ff24 	bl	8018c38 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	e011      	b.n	800be1a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bdf6:	8bfb      	ldrh	r3, [r7, #30]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fc33 	bl	800b664 <ptr_to_mem>
 800bdfe:	4603      	mov	r3, r0
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be04:	8bfa      	ldrh	r2, [r7, #30]
 800be06:	8bbb      	ldrh	r3, [r7, #28]
 800be08:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800be0c:	429a      	cmp	r2, r3
 800be0e:	f4ff af41 	bcc.w	800bc94 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800be12:	4804      	ldr	r0, [pc, #16]	; (800be24 <mem_malloc+0x1e4>)
 800be14:	f00c fda3 	bl	801895e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3720      	adds	r7, #32
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	2000e0b0 	.word	0x2000e0b0
 800be28:	2000e0b4 	.word	0x2000e0b4
 800be2c:	0801af64 	.word	0x0801af64
 800be30:	0801b128 	.word	0x0801b128
 800be34:	0801afac 	.word	0x0801afac
 800be38:	2000e0ac 	.word	0x2000e0ac
 800be3c:	0801b13c 	.word	0x0801b13c
 800be40:	0801b158 	.word	0x0801b158
 800be44:	0801b188 	.word	0x0801b188
 800be48:	0801b1b8 	.word	0x0801b1b8

0800be4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	3303      	adds	r3, #3
 800be62:	f023 0303 	bic.w	r3, r3, #3
 800be66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800be68:	2300      	movs	r3, #0
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	e011      	b.n	800be92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	461a      	mov	r2, r3
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	4413      	add	r3, r2
 800be8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3301      	adds	r3, #1
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	885b      	ldrh	r3, [r3, #2]
 800be96:	461a      	mov	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4293      	cmp	r3, r2
 800be9c:	dbe7      	blt.n	800be6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800beb2:	2300      	movs	r3, #0
 800beb4:	80fb      	strh	r3, [r7, #6]
 800beb6:	e009      	b.n	800becc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800beb8:	88fb      	ldrh	r3, [r7, #6]
 800beba:	4a08      	ldr	r2, [pc, #32]	; (800bedc <memp_init+0x30>)
 800bebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff ffc3 	bl	800be4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	3301      	adds	r3, #1
 800beca:	80fb      	strh	r3, [r7, #6]
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	2b0c      	cmp	r3, #12
 800bed0:	d9f2      	bls.n	800beb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bed2:	bf00      	nop
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	08027ea8 	.word	0x08027ea8

0800bee0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bee8:	f00c fd6c 	bl	80189c4 <sys_arch_protect>
 800beec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d015      	beq.n	800bf28 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	6812      	ldr	r2, [r2, #0]
 800bf04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	f003 0303 	and.w	r3, r3, #3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d006      	beq.n	800bf1e <do_memp_malloc_pool+0x3e>
 800bf10:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <do_memp_malloc_pool+0x58>)
 800bf12:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bf16:	4909      	ldr	r1, [pc, #36]	; (800bf3c <do_memp_malloc_pool+0x5c>)
 800bf18:	4809      	ldr	r0, [pc, #36]	; (800bf40 <do_memp_malloc_pool+0x60>)
 800bf1a:	f00c fe8d 	bl	8018c38 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f00c fd5e 	bl	80189e0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	e003      	b.n	800bf30 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f00c fd59 	bl	80189e0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	0801b1dc 	.word	0x0801b1dc
 800bf3c:	0801b20c 	.word	0x0801b20c
 800bf40:	0801b230 	.word	0x0801b230

0800bf44 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <memp_malloc_pool+0x1c>
 800bf52:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <memp_malloc_pool+0x38>)
 800bf54:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bf58:	4909      	ldr	r1, [pc, #36]	; (800bf80 <memp_malloc_pool+0x3c>)
 800bf5a:	480a      	ldr	r0, [pc, #40]	; (800bf84 <memp_malloc_pool+0x40>)
 800bf5c:	f00c fe6c 	bl	8018c38 <iprintf>
  if (desc == NULL) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <memp_malloc_pool+0x26>
    return NULL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	e003      	b.n	800bf72 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff ffb8 	bl	800bee0 <do_memp_malloc_pool>
 800bf70:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	0801b1dc 	.word	0x0801b1dc
 800bf80:	0801b258 	.word	0x0801b258
 800bf84:	0801b230 	.word	0x0801b230

0800bf88 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	2b0c      	cmp	r3, #12
 800bf96:	d908      	bls.n	800bfaa <memp_malloc+0x22>
 800bf98:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <memp_malloc+0x3c>)
 800bf9a:	f240 1257 	movw	r2, #343	; 0x157
 800bf9e:	490a      	ldr	r1, [pc, #40]	; (800bfc8 <memp_malloc+0x40>)
 800bfa0:	480a      	ldr	r0, [pc, #40]	; (800bfcc <memp_malloc+0x44>)
 800bfa2:	f00c fe49 	bl	8018c38 <iprintf>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e008      	b.n	800bfbc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	4a08      	ldr	r2, [pc, #32]	; (800bfd0 <memp_malloc+0x48>)
 800bfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff ff94 	bl	800bee0 <do_memp_malloc_pool>
 800bfb8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bfba:	68fb      	ldr	r3, [r7, #12]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	0801b1dc 	.word	0x0801b1dc
 800bfc8:	0801b26c 	.word	0x0801b26c
 800bfcc:	0801b230 	.word	0x0801b230
 800bfd0:	08027ea8 	.word	0x08027ea8

0800bfd4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	f003 0303 	and.w	r3, r3, #3
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d006      	beq.n	800bff6 <do_memp_free_pool+0x22>
 800bfe8:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <do_memp_free_pool+0x4c>)
 800bfea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bfee:	490d      	ldr	r1, [pc, #52]	; (800c024 <do_memp_free_pool+0x50>)
 800bff0:	480d      	ldr	r0, [pc, #52]	; (800c028 <do_memp_free_pool+0x54>)
 800bff2:	f00c fe21 	bl	8018c38 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bffa:	f00c fce3 	bl	80189c4 <sys_arch_protect>
 800bffe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c012:	68b8      	ldr	r0, [r7, #8]
 800c014:	f00c fce4 	bl	80189e0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	0801b1dc 	.word	0x0801b1dc
 800c024:	0801b28c 	.word	0x0801b28c
 800c028:	0801b230 	.word	0x0801b230

0800c02c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <memp_free_pool+0x1e>
 800c03c:	4b0a      	ldr	r3, [pc, #40]	; (800c068 <memp_free_pool+0x3c>)
 800c03e:	f240 1295 	movw	r2, #405	; 0x195
 800c042:	490a      	ldr	r1, [pc, #40]	; (800c06c <memp_free_pool+0x40>)
 800c044:	480a      	ldr	r0, [pc, #40]	; (800c070 <memp_free_pool+0x44>)
 800c046:	f00c fdf7 	bl	8018c38 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <memp_free_pool+0x34>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d004      	beq.n	800c060 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff ffbb 	bl	800bfd4 <do_memp_free_pool>
 800c05e:	e000      	b.n	800c062 <memp_free_pool+0x36>
    return;
 800c060:	bf00      	nop
}
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	0801b1dc 	.word	0x0801b1dc
 800c06c:	0801b258 	.word	0x0801b258
 800c070:	0801b230 	.word	0x0801b230

0800c074 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	2b0c      	cmp	r3, #12
 800c084:	d907      	bls.n	800c096 <memp_free+0x22>
 800c086:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <memp_free+0x44>)
 800c088:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c08c:	490b      	ldr	r1, [pc, #44]	; (800c0bc <memp_free+0x48>)
 800c08e:	480c      	ldr	r0, [pc, #48]	; (800c0c0 <memp_free+0x4c>)
 800c090:	f00c fdd2 	bl	8018c38 <iprintf>
 800c094:	e00c      	b.n	800c0b0 <memp_free+0x3c>

  if (mem == NULL) {
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d008      	beq.n	800c0ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	4a09      	ldr	r2, [pc, #36]	; (800c0c4 <memp_free+0x50>)
 800c0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff ff94 	bl	800bfd4 <do_memp_free_pool>
 800c0ac:	e000      	b.n	800c0b0 <memp_free+0x3c>
    return;
 800c0ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	0801b1dc 	.word	0x0801b1dc
 800c0bc:	0801b2ac 	.word	0x0801b2ac
 800c0c0:	0801b230 	.word	0x0801b230
 800c0c4:	08027ea8 	.word	0x08027ea8

0800c0c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c0cc:	bf00      	nop
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d108      	bne.n	800c0fe <netif_add+0x26>
 800c0ec:	4b5b      	ldr	r3, [pc, #364]	; (800c25c <netif_add+0x184>)
 800c0ee:	f240 1227 	movw	r2, #295	; 0x127
 800c0f2:	495b      	ldr	r1, [pc, #364]	; (800c260 <netif_add+0x188>)
 800c0f4:	485b      	ldr	r0, [pc, #364]	; (800c264 <netif_add+0x18c>)
 800c0f6:	f00c fd9f 	bl	8018c38 <iprintf>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e0a9      	b.n	800c252 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d108      	bne.n	800c116 <netif_add+0x3e>
 800c104:	4b55      	ldr	r3, [pc, #340]	; (800c25c <netif_add+0x184>)
 800c106:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c10a:	4957      	ldr	r1, [pc, #348]	; (800c268 <netif_add+0x190>)
 800c10c:	4855      	ldr	r0, [pc, #340]	; (800c264 <netif_add+0x18c>)
 800c10e:	f00c fd93 	bl	8018c38 <iprintf>
 800c112:	2300      	movs	r3, #0
 800c114:	e09d      	b.n	800c252 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c11c:	4b53      	ldr	r3, [pc, #332]	; (800c26c <netif_add+0x194>)
 800c11e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c126:	4b51      	ldr	r3, [pc, #324]	; (800c26c <netif_add+0x194>)
 800c128:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c130:	4b4e      	ldr	r3, [pc, #312]	; (800c26c <netif_add+0x194>)
 800c132:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4a49      	ldr	r2, [pc, #292]	; (800c270 <netif_add+0x198>)
 800c14a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3324      	adds	r3, #36	; 0x24
 800c15e:	2204      	movs	r2, #4
 800c160:	2100      	movs	r1, #0
 800c162:	4618      	mov	r0, r3
 800c164:	f00c fef8 	bl	8018f58 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a3a      	ldr	r2, [r7, #32]
 800c172:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c174:	4b3f      	ldr	r3, [pc, #252]	; (800c274 <netif_add+0x19c>)
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c182:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 f914 	bl	800c3b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	4798      	blx	r3
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <netif_add+0xc8>
    return NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	e058      	b.n	800c252 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1a6:	2bff      	cmp	r3, #255	; 0xff
 800c1a8:	d103      	bne.n	800c1b2 <netif_add+0xda>
        netif->num = 0;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c1b6:	4b30      	ldr	r3, [pc, #192]	; (800c278 <netif_add+0x1a0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	e02b      	b.n	800c216 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d106      	bne.n	800c1d4 <netif_add+0xfc>
 800c1c6:	4b25      	ldr	r3, [pc, #148]	; (800c25c <netif_add+0x184>)
 800c1c8:	f240 128b 	movw	r2, #395	; 0x18b
 800c1cc:	492b      	ldr	r1, [pc, #172]	; (800c27c <netif_add+0x1a4>)
 800c1ce:	4825      	ldr	r0, [pc, #148]	; (800c264 <netif_add+0x18c>)
 800c1d0:	f00c fd32 	bl	8018c38 <iprintf>
        num_netifs++;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2bff      	cmp	r3, #255	; 0xff
 800c1de:	dd06      	ble.n	800c1ee <netif_add+0x116>
 800c1e0:	4b1e      	ldr	r3, [pc, #120]	; (800c25c <netif_add+0x184>)
 800c1e2:	f240 128d 	movw	r2, #397	; 0x18d
 800c1e6:	4926      	ldr	r1, [pc, #152]	; (800c280 <netif_add+0x1a8>)
 800c1e8:	481e      	ldr	r0, [pc, #120]	; (800c264 <netif_add+0x18c>)
 800c1ea:	f00c fd25 	bl	8018c38 <iprintf>
        if (netif2->num == netif->num) {
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d108      	bne.n	800c210 <netif_add+0x138>
          netif->num++;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c204:	3301      	adds	r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c20e:	e005      	b.n	800c21c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1d0      	bne.n	800c1be <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1be      	bne.n	800c1a0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c228:	2bfe      	cmp	r3, #254	; 0xfe
 800c22a:	d103      	bne.n	800c234 <netif_add+0x15c>
    netif_num = 0;
 800c22c:	4b11      	ldr	r3, [pc, #68]	; (800c274 <netif_add+0x19c>)
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	e006      	b.n	800c242 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <netif_add+0x19c>)
 800c240:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c242:	4b0d      	ldr	r3, [pc, #52]	; (800c278 <netif_add+0x1a0>)
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c24a:	4a0b      	ldr	r2, [pc, #44]	; (800c278 <netif_add+0x1a0>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c250:	68fb      	ldr	r3, [r7, #12]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	0801b2c8 	.word	0x0801b2c8
 800c260:	0801b35c 	.word	0x0801b35c
 800c264:	0801b318 	.word	0x0801b318
 800c268:	0801b378 	.word	0x0801b378
 800c26c:	08027f2c 	.word	0x08027f2c
 800c270:	0800c69b 	.word	0x0800c69b
 800c274:	200111ac 	.word	0x200111ac
 800c278:	200111a4 	.word	0x200111a4
 800c27c:	0801b39c 	.word	0x0801b39c
 800c280:	0801b3b0 	.word	0x0801b3b0

0800c284 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f002 ffab 	bl	800f1ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f008 f825 	bl	80142e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c29e:	bf00      	nop
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
	...

0800c2a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d106      	bne.n	800c2c8 <netif_do_set_ipaddr+0x20>
 800c2ba:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <netif_do_set_ipaddr+0x88>)
 800c2bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c2c0:	491c      	ldr	r1, [pc, #112]	; (800c334 <netif_do_set_ipaddr+0x8c>)
 800c2c2:	481d      	ldr	r0, [pc, #116]	; (800c338 <netif_do_set_ipaddr+0x90>)
 800c2c4:	f00c fcb8 	bl	8018c38 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <netif_do_set_ipaddr+0x34>
 800c2ce:	4b18      	ldr	r3, [pc, #96]	; (800c330 <netif_do_set_ipaddr+0x88>)
 800c2d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c2d4:	4917      	ldr	r1, [pc, #92]	; (800c334 <netif_do_set_ipaddr+0x8c>)
 800c2d6:	4818      	ldr	r0, [pc, #96]	; (800c338 <netif_do_set_ipaddr+0x90>)
 800c2d8:	f00c fcae 	bl	8018c38 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d01c      	beq.n	800c324 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c2fa:	f107 0314 	add.w	r3, r7, #20
 800c2fe:	4619      	mov	r1, r3
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff ffbf 	bl	800c284 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <netif_do_set_ipaddr+0x6a>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	e000      	b.n	800c314 <netif_do_set_ipaddr+0x6c>
 800c312:	2300      	movs	r3, #0
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c318:	2101      	movs	r1, #1
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 f8d2 	bl	800c4c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c320:	2301      	movs	r3, #1
 800c322:	e000      	b.n	800c326 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	0801b2c8 	.word	0x0801b2c8
 800c334:	0801b3e0 	.word	0x0801b3e0
 800c338:	0801b318 	.word	0x0801b318

0800c33c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3308      	adds	r3, #8
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d00a      	beq.n	800c36c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <netif_do_set_netmask+0x26>
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	e000      	b.n	800c364 <netif_do_set_netmask+0x28>
 800c362:	2300      	movs	r3, #0
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c368:	2301      	movs	r3, #1
 800c36a:	e000      	b.n	800c36e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	330c      	adds	r3, #12
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d00a      	beq.n	800c3aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <netif_do_set_gw+0x26>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	e000      	b.n	800c3a2 <netif_do_set_gw+0x28>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b088      	sub	sp, #32
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c3d4:	4b1c      	ldr	r3, [pc, #112]	; (800c448 <netif_set_addr+0x90>)
 800c3d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c3de:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <netif_set_addr+0x90>)
 800c3e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <netif_set_addr+0x90>)
 800c3ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <netif_set_addr+0x42>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d101      	bne.n	800c3fe <netif_set_addr+0x46>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e000      	b.n	800c400 <netif_set_addr+0x48>
 800c3fe:	2300      	movs	r3, #0
 800c400:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d006      	beq.n	800c416 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c408:	f107 0310 	add.w	r3, r7, #16
 800c40c:	461a      	mov	r2, r3
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff ff49 	bl	800c2a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c416:	69fa      	ldr	r2, [r7, #28]
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff ff8e 	bl	800c33c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c420:	69ba      	ldr	r2, [r7, #24]
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f7ff ffa8 	bl	800c37a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c430:	f107 0310 	add.w	r3, r7, #16
 800c434:	461a      	mov	r2, r3
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f7ff ff35 	bl	800c2a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c43e:	bf00      	nop
 800c440:	3720      	adds	r7, #32
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	08027f2c 	.word	0x08027f2c

0800c44c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c454:	4a04      	ldr	r2, [pc, #16]	; (800c468 <netif_set_default+0x1c>)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	200111a8 	.word	0x200111a8

0800c46c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d107      	bne.n	800c48a <netif_set_up+0x1e>
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <netif_set_up+0x4c>)
 800c47c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c480:	490e      	ldr	r1, [pc, #56]	; (800c4bc <netif_set_up+0x50>)
 800c482:	480f      	ldr	r0, [pc, #60]	; (800c4c0 <netif_set_up+0x54>)
 800c484:	f00c fbd8 	bl	8018c38 <iprintf>
 800c488:	e013      	b.n	800c4b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10c      	bne.n	800c4b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c4aa:	2103      	movs	r1, #3
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f809 	bl	800c4c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	0801b2c8 	.word	0x0801b2c8
 800c4bc:	0801b450 	.word	0x0801b450
 800c4c0:	0801b318 	.word	0x0801b318

0800c4c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <netif_issue_reports+0x20>
 800c4d6:	4b18      	ldr	r3, [pc, #96]	; (800c538 <netif_issue_reports+0x74>)
 800c4d8:	f240 326d 	movw	r2, #877	; 0x36d
 800c4dc:	4917      	ldr	r1, [pc, #92]	; (800c53c <netif_issue_reports+0x78>)
 800c4de:	4818      	ldr	r0, [pc, #96]	; (800c540 <netif_issue_reports+0x7c>)
 800c4e0:	f00c fbaa 	bl	8018c38 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d01e      	beq.n	800c530 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d013      	beq.n	800c532 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3304      	adds	r3, #4
 800c50e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00e      	beq.n	800c532 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c51a:	f003 0308 	and.w	r3, r3, #8
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d007      	beq.n	800c532 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3304      	adds	r3, #4
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f00a fcdd 	bl	8016ee8 <etharp_request>
 800c52e:	e000      	b.n	800c532 <netif_issue_reports+0x6e>
    return;
 800c530:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	0801b2c8 	.word	0x0801b2c8
 800c53c:	0801b46c 	.word	0x0801b46c
 800c540:	0801b318 	.word	0x0801b318

0800c544 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d107      	bne.n	800c562 <netif_set_down+0x1e>
 800c552:	4b12      	ldr	r3, [pc, #72]	; (800c59c <netif_set_down+0x58>)
 800c554:	f240 329b 	movw	r2, #923	; 0x39b
 800c558:	4911      	ldr	r1, [pc, #68]	; (800c5a0 <netif_set_down+0x5c>)
 800c55a:	4812      	ldr	r0, [pc, #72]	; (800c5a4 <netif_set_down+0x60>)
 800c55c:	f00c fb6c 	bl	8018c38 <iprintf>
 800c560:	e019      	b.n	800c596 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d012      	beq.n	800c596 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c576:	f023 0301 	bic.w	r3, r3, #1
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c588:	f003 0308 	and.w	r3, r3, #8
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f00a f863 	bl	801665c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	0801b2c8 	.word	0x0801b2c8
 800c5a0:	0801b490 	.word	0x0801b490
 800c5a4:	0801b318 	.word	0x0801b318

0800c5a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d107      	bne.n	800c5c6 <netif_set_link_up+0x1e>
 800c5b6:	4b15      	ldr	r3, [pc, #84]	; (800c60c <netif_set_link_up+0x64>)
 800c5b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c5bc:	4914      	ldr	r1, [pc, #80]	; (800c610 <netif_set_link_up+0x68>)
 800c5be:	4815      	ldr	r0, [pc, #84]	; (800c614 <netif_set_link_up+0x6c>)
 800c5c0:	f00c fb3a 	bl	8018c38 <iprintf>
 800c5c4:	e01e      	b.n	800c604 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d117      	bne.n	800c604 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5da:	f043 0304 	orr.w	r3, r3, #4
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f008 faa8 	bl	8014b3c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c5ec:	2103      	movs	r1, #3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff ff68 	bl	800c4c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	69db      	ldr	r3, [r3, #28]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <netif_set_link_up+0x5c>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	0801b2c8 	.word	0x0801b2c8
 800c610:	0801b4b0 	.word	0x0801b4b0
 800c614:	0801b318 	.word	0x0801b318

0800c618 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d107      	bne.n	800c636 <netif_set_link_down+0x1e>
 800c626:	4b11      	ldr	r3, [pc, #68]	; (800c66c <netif_set_link_down+0x54>)
 800c628:	f240 4206 	movw	r2, #1030	; 0x406
 800c62c:	4910      	ldr	r1, [pc, #64]	; (800c670 <netif_set_link_down+0x58>)
 800c62e:	4811      	ldr	r0, [pc, #68]	; (800c674 <netif_set_link_down+0x5c>)
 800c630:	f00c fb02 	bl	8018c38 <iprintf>
 800c634:	e017      	b.n	800c666 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d010      	beq.n	800c666 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c64a:	f023 0304 	bic.w	r3, r3, #4
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <netif_set_link_down+0x4e>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	0801b2c8 	.word	0x0801b2c8
 800c670:	0801b4d4 	.word	0x0801b4d4
 800c674:	0801b318 	.word	0x0801b318

0800c678 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	61da      	str	r2, [r3, #28]
  }
}
 800c68e:	bf00      	nop
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b085      	sub	sp, #20
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c6a6:	f06f 030b 	mvn.w	r3, #11
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d013      	beq.n	800c6f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c6c8:	4b0d      	ldr	r3, [pc, #52]	; (800c700 <netif_get_by_index+0x48>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e00c      	b.n	800c6ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	79fa      	ldrb	r2, [r7, #7]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d101      	bne.n	800c6e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	e006      	b.n	800c6f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1ef      	bne.n	800c6d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	200111a4 	.word	0x200111a4

0800c704 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c70a:	f00c f95b 	bl	80189c4 <sys_arch_protect>
 800c70e:	6038      	str	r0, [r7, #0]
 800c710:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <pbuf_free_ooseq+0x44>)
 800c712:	2200      	movs	r2, #0
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	6838      	ldr	r0, [r7, #0]
 800c718:	f00c f962 	bl	80189e0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c71c:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <pbuf_free_ooseq+0x48>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	607b      	str	r3, [r7, #4]
 800c722:	e00a      	b.n	800c73a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f002 fd9b 	bl	800f268 <tcp_free_ooseq>
      return;
 800c732:	e005      	b.n	800c740 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1f1      	bne.n	800c724 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	200111ad 	.word	0x200111ad
 800c74c:	200111bc 	.word	0x200111bc

0800c750 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c758:	f7ff ffd4 	bl	800c704 <pbuf_free_ooseq>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c76a:	f00c f92b 	bl	80189c4 <sys_arch_protect>
 800c76e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c770:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <pbuf_pool_is_empty+0x4c>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c776:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <pbuf_pool_is_empty+0x4c>)
 800c778:	2201      	movs	r2, #1
 800c77a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f00c f92f 	bl	80189e0 <sys_arch_unprotect>

  if (!queued) {
 800c782:	78fb      	ldrb	r3, [r7, #3]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10f      	bne.n	800c7a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c788:	2100      	movs	r1, #0
 800c78a:	480a      	ldr	r0, [pc, #40]	; (800c7b4 <pbuf_pool_is_empty+0x50>)
 800c78c:	f7fe f834 	bl	800a7f8 <tcpip_try_callback>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d008      	beq.n	800c7a8 <pbuf_pool_is_empty+0x44>
 800c796:	f00c f915 	bl	80189c4 <sys_arch_protect>
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <pbuf_pool_is_empty+0x4c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f00c f91c 	bl	80189e0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200111ad 	.word	0x200111ad
 800c7b4:	0800c751 	.word	0x0800c751

0800c7b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	80fb      	strh	r3, [r7, #6]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	88fa      	ldrh	r2, [r7, #6]
 800c7de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	88ba      	ldrh	r2, [r7, #4]
 800c7e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c7e6:	8b3b      	ldrh	r3, [r7, #24]
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	7f3a      	ldrb	r2, [r7, #28]
 800c7f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	73da      	strb	r2, [r3, #15]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b08c      	sub	sp, #48	; 0x30
 800c810:	af02      	add	r7, sp, #8
 800c812:	4603      	mov	r3, r0
 800c814:	71fb      	strb	r3, [r7, #7]
 800c816:	460b      	mov	r3, r1
 800c818:	80bb      	strh	r3, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c822:	887b      	ldrh	r3, [r7, #2]
 800c824:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c828:	d07f      	beq.n	800c92a <pbuf_alloc+0x11e>
 800c82a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c82e:	f300 80c8 	bgt.w	800c9c2 <pbuf_alloc+0x1b6>
 800c832:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c836:	d010      	beq.n	800c85a <pbuf_alloc+0x4e>
 800c838:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c83c:	f300 80c1 	bgt.w	800c9c2 <pbuf_alloc+0x1b6>
 800c840:	2b01      	cmp	r3, #1
 800c842:	d002      	beq.n	800c84a <pbuf_alloc+0x3e>
 800c844:	2b41      	cmp	r3, #65	; 0x41
 800c846:	f040 80bc 	bne.w	800c9c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c84a:	887a      	ldrh	r2, [r7, #2]
 800c84c:	88bb      	ldrh	r3, [r7, #4]
 800c84e:	4619      	mov	r1, r3
 800c850:	2000      	movs	r0, #0
 800c852:	f000 f8d1 	bl	800c9f8 <pbuf_alloc_reference>
 800c856:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c858:	e0bd      	b.n	800c9d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c85a:	2300      	movs	r3, #0
 800c85c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c862:	88bb      	ldrh	r3, [r7, #4]
 800c864:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c866:	200c      	movs	r0, #12
 800c868:	f7ff fb8e 	bl	800bf88 <memp_malloc>
 800c86c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d109      	bne.n	800c888 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c874:	f7ff ff76 	bl	800c764 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c87e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c880:	f000 faa8 	bl	800cdd4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	e0a7      	b.n	800c9d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c88a:	3303      	adds	r3, #3
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	b29b      	uxth	r3, r3
 800c894:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c898:	b29b      	uxth	r3, r3
 800c89a:	8b7a      	ldrh	r2, [r7, #26]
 800c89c:	4293      	cmp	r3, r2
 800c89e:	bf28      	it	cs
 800c8a0:	4613      	movcs	r3, r2
 800c8a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a6:	3310      	adds	r3, #16
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	3303      	adds	r3, #3
 800c8ae:	f023 0303 	bic.w	r3, r3, #3
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	89f9      	ldrh	r1, [r7, #14]
 800c8b6:	8b7a      	ldrh	r2, [r7, #26]
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	887b      	ldrh	r3, [r7, #2]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	6938      	ldr	r0, [r7, #16]
 800c8c6:	f7ff ff77 	bl	800c7b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <pbuf_alloc+0xd8>
 800c8d6:	4b42      	ldr	r3, [pc, #264]	; (800c9e0 <pbuf_alloc+0x1d4>)
 800c8d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8dc:	4941      	ldr	r1, [pc, #260]	; (800c9e4 <pbuf_alloc+0x1d8>)
 800c8de:	4842      	ldr	r0, [pc, #264]	; (800c9e8 <pbuf_alloc+0x1dc>)
 800c8e0:	f00c f9aa 	bl	8018c38 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e6:	3303      	adds	r3, #3
 800c8e8:	f023 0303 	bic.w	r3, r3, #3
 800c8ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c8f0:	d106      	bne.n	800c900 <pbuf_alloc+0xf4>
 800c8f2:	4b3b      	ldr	r3, [pc, #236]	; (800c9e0 <pbuf_alloc+0x1d4>)
 800c8f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c8f8:	493c      	ldr	r1, [pc, #240]	; (800c9ec <pbuf_alloc+0x1e0>)
 800c8fa:	483b      	ldr	r0, [pc, #236]	; (800c9e8 <pbuf_alloc+0x1dc>)
 800c8fc:	f00c f99c 	bl	8018c38 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
 800c90a:	e002      	b.n	800c912 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c916:	8b7a      	ldrh	r2, [r7, #26]
 800c918:	89fb      	ldrh	r3, [r7, #14]
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c922:	8b7b      	ldrh	r3, [r7, #26]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d19e      	bne.n	800c866 <pbuf_alloc+0x5a>
      break;
 800c928:	e055      	b.n	800c9d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c92a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c92c:	3303      	adds	r3, #3
 800c92e:	b29b      	uxth	r3, r3
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	b29a      	uxth	r2, r3
 800c936:	88bb      	ldrh	r3, [r7, #4]
 800c938:	3303      	adds	r3, #3
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	b29b      	uxth	r3, r3
 800c942:	4413      	add	r3, r2
 800c944:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c946:	8b3b      	ldrh	r3, [r7, #24]
 800c948:	3310      	adds	r3, #16
 800c94a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c94c:	8b3a      	ldrh	r2, [r7, #24]
 800c94e:	88bb      	ldrh	r3, [r7, #4]
 800c950:	3303      	adds	r3, #3
 800c952:	f023 0303 	bic.w	r3, r3, #3
 800c956:	429a      	cmp	r2, r3
 800c958:	d306      	bcc.n	800c968 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c95a:	8afa      	ldrh	r2, [r7, #22]
 800c95c:	88bb      	ldrh	r3, [r7, #4]
 800c95e:	3303      	adds	r3, #3
 800c960:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c964:	429a      	cmp	r2, r3
 800c966:	d201      	bcs.n	800c96c <pbuf_alloc+0x160>
        return NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	e035      	b.n	800c9d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c96c:	8afb      	ldrh	r3, [r7, #22]
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff f966 	bl	800bc40 <mem_malloc>
 800c974:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <pbuf_alloc+0x174>
        return NULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e02b      	b.n	800c9d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c982:	3310      	adds	r3, #16
 800c984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c986:	4413      	add	r3, r2
 800c988:	3303      	adds	r3, #3
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	4618      	mov	r0, r3
 800c990:	88b9      	ldrh	r1, [r7, #4]
 800c992:	88ba      	ldrh	r2, [r7, #4]
 800c994:	2300      	movs	r3, #0
 800c996:	9301      	str	r3, [sp, #4]
 800c998:	887b      	ldrh	r3, [r7, #2]
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	460b      	mov	r3, r1
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9a2:	f7ff ff09 	bl	800c7b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f003 0303 	and.w	r3, r3, #3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d010      	beq.n	800c9d4 <pbuf_alloc+0x1c8>
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <pbuf_alloc+0x1d4>)
 800c9b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c9b8:	490d      	ldr	r1, [pc, #52]	; (800c9f0 <pbuf_alloc+0x1e4>)
 800c9ba:	480b      	ldr	r0, [pc, #44]	; (800c9e8 <pbuf_alloc+0x1dc>)
 800c9bc:	f00c f93c 	bl	8018c38 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c9c0:	e008      	b.n	800c9d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <pbuf_alloc+0x1d4>)
 800c9c4:	f240 1227 	movw	r2, #295	; 0x127
 800c9c8:	490a      	ldr	r1, [pc, #40]	; (800c9f4 <pbuf_alloc+0x1e8>)
 800c9ca:	4807      	ldr	r0, [pc, #28]	; (800c9e8 <pbuf_alloc+0x1dc>)
 800c9cc:	f00c f934 	bl	8018c38 <iprintf>
      return NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e001      	b.n	800c9d8 <pbuf_alloc+0x1cc>
      break;
 800c9d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3728      	adds	r7, #40	; 0x28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	0801b4f8 	.word	0x0801b4f8
 800c9e4:	0801b528 	.word	0x0801b528
 800c9e8:	0801b558 	.word	0x0801b558
 800c9ec:	0801b580 	.word	0x0801b580
 800c9f0:	0801b5b4 	.word	0x0801b5b4
 800c9f4:	0801b5e0 	.word	0x0801b5e0

0800c9f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af02      	add	r7, sp, #8
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	807b      	strh	r3, [r7, #2]
 800ca04:	4613      	mov	r3, r2
 800ca06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca08:	883b      	ldrh	r3, [r7, #0]
 800ca0a:	2b41      	cmp	r3, #65	; 0x41
 800ca0c:	d009      	beq.n	800ca22 <pbuf_alloc_reference+0x2a>
 800ca0e:	883b      	ldrh	r3, [r7, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d006      	beq.n	800ca22 <pbuf_alloc_reference+0x2a>
 800ca14:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <pbuf_alloc_reference+0x5c>)
 800ca16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca1a:	490f      	ldr	r1, [pc, #60]	; (800ca58 <pbuf_alloc_reference+0x60>)
 800ca1c:	480f      	ldr	r0, [pc, #60]	; (800ca5c <pbuf_alloc_reference+0x64>)
 800ca1e:	f00c f90b 	bl	8018c38 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca22:	200b      	movs	r0, #11
 800ca24:	f7ff fab0 	bl	800bf88 <memp_malloc>
 800ca28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	e00b      	b.n	800ca4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ca34:	8879      	ldrh	r1, [r7, #2]
 800ca36:	887a      	ldrh	r2, [r7, #2]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	883b      	ldrh	r3, [r7, #0]
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	460b      	mov	r3, r1
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f7ff feb7 	bl	800c7b8 <pbuf_init_alloced_pbuf>
  return p;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0801b4f8 	.word	0x0801b4f8
 800ca58:	0801b5fc 	.word	0x0801b5fc
 800ca5c:	0801b558 	.word	0x0801b558

0800ca60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b088      	sub	sp, #32
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	607b      	str	r3, [r7, #4]
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73fb      	strb	r3, [r7, #15]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	81bb      	strh	r3, [r7, #12]
 800ca70:	4613      	mov	r3, r2
 800ca72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca78:	8a7b      	ldrh	r3, [r7, #18]
 800ca7a:	3303      	adds	r3, #3
 800ca7c:	f023 0203 	bic.w	r2, r3, #3
 800ca80:	89bb      	ldrh	r3, [r7, #12]
 800ca82:	441a      	add	r2, r3
 800ca84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d901      	bls.n	800ca8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e018      	b.n	800cac0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d007      	beq.n	800caa4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ca94:	8a7b      	ldrh	r3, [r7, #18]
 800ca96:	3303      	adds	r3, #3
 800ca98:	f023 0303 	bic.w	r3, r3, #3
 800ca9c:	6a3a      	ldr	r2, [r7, #32]
 800ca9e:	4413      	add	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]
 800caa2:	e001      	b.n	800caa8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800caa4:	2300      	movs	r3, #0
 800caa6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	89b9      	ldrh	r1, [r7, #12]
 800caac:	89ba      	ldrh	r2, [r7, #12]
 800caae:	2302      	movs	r3, #2
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	897b      	ldrh	r3, [r7, #10]
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	460b      	mov	r3, r1
 800cab8:	6979      	ldr	r1, [r7, #20]
 800caba:	f7ff fe7d 	bl	800c7b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cabe:	687b      	ldr	r3, [r7, #4]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	460b      	mov	r3, r1
 800cad2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <pbuf_realloc+0x20>
 800cada:	4b3a      	ldr	r3, [pc, #232]	; (800cbc4 <pbuf_realloc+0xfc>)
 800cadc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cae0:	4939      	ldr	r1, [pc, #228]	; (800cbc8 <pbuf_realloc+0x100>)
 800cae2:	483a      	ldr	r0, [pc, #232]	; (800cbcc <pbuf_realloc+0x104>)
 800cae4:	f00c f8a8 	bl	8018c38 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	891b      	ldrh	r3, [r3, #8]
 800caec:	887a      	ldrh	r2, [r7, #2]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d263      	bcs.n	800cbba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	891a      	ldrh	r2, [r3, #8]
 800caf6:	887b      	ldrh	r3, [r7, #2]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cafc:	887b      	ldrh	r3, [r7, #2]
 800cafe:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb04:	e018      	b.n	800cb38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	895b      	ldrh	r3, [r3, #10]
 800cb0a:	897a      	ldrh	r2, [r7, #10]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	891a      	ldrh	r2, [r3, #8]
 800cb14:	893b      	ldrh	r3, [r7, #8]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <pbuf_realloc+0x70>
 800cb2a:	4b26      	ldr	r3, [pc, #152]	; (800cbc4 <pbuf_realloc+0xfc>)
 800cb2c:	f240 12af 	movw	r2, #431	; 0x1af
 800cb30:	4927      	ldr	r1, [pc, #156]	; (800cbd0 <pbuf_realloc+0x108>)
 800cb32:	4826      	ldr	r0, [pc, #152]	; (800cbcc <pbuf_realloc+0x104>)
 800cb34:	f00c f880 	bl	8018c38 <iprintf>
  while (rem_len > q->len) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	895b      	ldrh	r3, [r3, #10]
 800cb3c:	897a      	ldrh	r2, [r7, #10]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d8e1      	bhi.n	800cb06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	7b1b      	ldrb	r3, [r3, #12]
 800cb46:	f003 030f 	and.w	r3, r3, #15
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d121      	bne.n	800cb92 <pbuf_realloc+0xca>
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	895b      	ldrh	r3, [r3, #10]
 800cb52:	897a      	ldrh	r2, [r7, #10]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d01c      	beq.n	800cb92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	7b5b      	ldrb	r3, [r3, #13]
 800cb5c:	f003 0302 	and.w	r3, r3, #2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d116      	bne.n	800cb92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	897b      	ldrh	r3, [r7, #10]
 800cb70:	4413      	add	r3, r2
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	4619      	mov	r1, r3
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f7fe ff58 	bl	800ba2c <mem_trim>
 800cb7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <pbuf_realloc+0xca>
 800cb84:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <pbuf_realloc+0xfc>)
 800cb86:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cb8a:	4912      	ldr	r1, [pc, #72]	; (800cbd4 <pbuf_realloc+0x10c>)
 800cb8c:	480f      	ldr	r0, [pc, #60]	; (800cbcc <pbuf_realloc+0x104>)
 800cb8e:	f00c f853 	bl	8018c38 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	897a      	ldrh	r2, [r7, #10]
 800cb96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	895a      	ldrh	r2, [r3, #10]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f911 	bl	800cdd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	e000      	b.n	800cbbc <pbuf_realloc+0xf4>
    return;
 800cbba:	bf00      	nop

}
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	0801b4f8 	.word	0x0801b4f8
 800cbc8:	0801b610 	.word	0x0801b610
 800cbcc:	0801b558 	.word	0x0801b558
 800cbd0:	0801b628 	.word	0x0801b628
 800cbd4:	0801b640 	.word	0x0801b640

0800cbd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b086      	sub	sp, #24
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d106      	bne.n	800cbfa <pbuf_add_header_impl+0x22>
 800cbec:	4b2b      	ldr	r3, [pc, #172]	; (800cc9c <pbuf_add_header_impl+0xc4>)
 800cbee:	f240 12df 	movw	r2, #479	; 0x1df
 800cbf2:	492b      	ldr	r1, [pc, #172]	; (800cca0 <pbuf_add_header_impl+0xc8>)
 800cbf4:	482b      	ldr	r0, [pc, #172]	; (800cca4 <pbuf_add_header_impl+0xcc>)
 800cbf6:	f00c f81f 	bl	8018c38 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <pbuf_add_header_impl+0x30>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc06:	d301      	bcc.n	800cc0c <pbuf_add_header_impl+0x34>
    return 1;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e043      	b.n	800cc94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <pbuf_add_header_impl+0x3e>
    return 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	e03e      	b.n	800cc94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	891a      	ldrh	r2, [r3, #8]
 800cc1e:	8a7b      	ldrh	r3, [r7, #18]
 800cc20:	4413      	add	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	8a7a      	ldrh	r2, [r7, #18]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d901      	bls.n	800cc2e <pbuf_add_header_impl+0x56>
    return 1;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e032      	b.n	800cc94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	7b1b      	ldrb	r3, [r3, #12]
 800cc32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cc34:	8a3b      	ldrh	r3, [r7, #16]
 800cc36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00c      	beq.n	800cc58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	425b      	negs	r3, r3
 800cc46:	4413      	add	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3310      	adds	r3, #16
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d20d      	bcs.n	800cc70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e01d      	b.n	800cc94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d006      	beq.n	800cc6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	425b      	negs	r3, r3
 800cc66:	4413      	add	r3, r2
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e001      	b.n	800cc70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e011      	b.n	800cc94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	895a      	ldrh	r2, [r3, #10]
 800cc7a:	8a7b      	ldrh	r3, [r7, #18]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	891a      	ldrh	r2, [r3, #8]
 800cc88:	8a7b      	ldrh	r3, [r7, #18]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	811a      	strh	r2, [r3, #8]


  return 0;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0801b4f8 	.word	0x0801b4f8
 800cca0:	0801b65c 	.word	0x0801b65c
 800cca4:	0801b558 	.word	0x0801b558

0800cca8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff ff8e 	bl	800cbd8 <pbuf_add_header_impl>
 800ccbc:	4603      	mov	r3, r0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <pbuf_remove_header+0x1e>
 800ccd8:	4b20      	ldr	r3, [pc, #128]	; (800cd5c <pbuf_remove_header+0x94>)
 800ccda:	f240 224b 	movw	r2, #587	; 0x24b
 800ccde:	4920      	ldr	r1, [pc, #128]	; (800cd60 <pbuf_remove_header+0x98>)
 800cce0:	4820      	ldr	r0, [pc, #128]	; (800cd64 <pbuf_remove_header+0x9c>)
 800cce2:	f00b ffa9 	bl	8018c38 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d003      	beq.n	800ccf4 <pbuf_remove_header+0x2c>
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf2:	d301      	bcc.n	800ccf8 <pbuf_remove_header+0x30>
    return 1;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e02c      	b.n	800cd52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <pbuf_remove_header+0x3a>
    return 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e027      	b.n	800cd52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	895b      	ldrh	r3, [r3, #10]
 800cd0a:	89fa      	ldrh	r2, [r7, #14]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d908      	bls.n	800cd22 <pbuf_remove_header+0x5a>
 800cd10:	4b12      	ldr	r3, [pc, #72]	; (800cd5c <pbuf_remove_header+0x94>)
 800cd12:	f240 2255 	movw	r2, #597	; 0x255
 800cd16:	4914      	ldr	r1, [pc, #80]	; (800cd68 <pbuf_remove_header+0xa0>)
 800cd18:	4812      	ldr	r0, [pc, #72]	; (800cd64 <pbuf_remove_header+0x9c>)
 800cd1a:	f00b ff8d 	bl	8018c38 <iprintf>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e017      	b.n	800cd52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	441a      	add	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	895a      	ldrh	r2, [r3, #10]
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	891a      	ldrh	r2, [r3, #8]
 800cd46:	89fb      	ldrh	r3, [r7, #14]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	0801b4f8 	.word	0x0801b4f8
 800cd60:	0801b65c 	.word	0x0801b65c
 800cd64:	0801b558 	.word	0x0801b558
 800cd68:	0801b668 	.word	0x0801b668

0800cd6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	807b      	strh	r3, [r7, #2]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cd7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	da08      	bge.n	800cd96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cd84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd88:	425b      	negs	r3, r3
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ff9b 	bl	800ccc8 <pbuf_remove_header>
 800cd92:	4603      	mov	r3, r0
 800cd94:	e007      	b.n	800cda6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cd96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd9a:	787a      	ldrb	r2, [r7, #1]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff ff1a 	bl	800cbd8 <pbuf_add_header_impl>
 800cda4:	4603      	mov	r3, r0
  }
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cdba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff ffd2 	bl	800cd6c <pbuf_header_impl>
 800cdc8:	4603      	mov	r3, r0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d10b      	bne.n	800cdfa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d106      	bne.n	800cdf6 <pbuf_free+0x22>
 800cde8:	4b3b      	ldr	r3, [pc, #236]	; (800ced8 <pbuf_free+0x104>)
 800cdea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cdee:	493b      	ldr	r1, [pc, #236]	; (800cedc <pbuf_free+0x108>)
 800cdf0:	483b      	ldr	r0, [pc, #236]	; (800cee0 <pbuf_free+0x10c>)
 800cdf2:	f00b ff21 	bl	8018c38 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e069      	b.n	800cece <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cdfe:	e062      	b.n	800cec6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ce00:	f00b fde0 	bl	80189c4 <sys_arch_protect>
 800ce04:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	7b9b      	ldrb	r3, [r3, #14]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <pbuf_free+0x48>
 800ce0e:	4b32      	ldr	r3, [pc, #200]	; (800ced8 <pbuf_free+0x104>)
 800ce10:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce14:	4933      	ldr	r1, [pc, #204]	; (800cee4 <pbuf_free+0x110>)
 800ce16:	4832      	ldr	r0, [pc, #200]	; (800cee0 <pbuf_free+0x10c>)
 800ce18:	f00b ff0e 	bl	8018c38 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7b9b      	ldrb	r3, [r3, #14]
 800ce20:	3b01      	subs	r3, #1
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	739a      	strb	r2, [r3, #14]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7b9b      	ldrb	r3, [r3, #14]
 800ce2c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ce2e:	69b8      	ldr	r0, [r7, #24]
 800ce30:	f00b fdd6 	bl	80189e0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d143      	bne.n	800cec2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	7b1b      	ldrb	r3, [r3, #12]
 800ce44:	f003 030f 	and.w	r3, r3, #15
 800ce48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	7b5b      	ldrb	r3, [r3, #13]
 800ce4e:	f003 0302 	and.w	r3, r3, #2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d011      	beq.n	800ce7a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <pbuf_free+0x9c>
 800ce62:	4b1d      	ldr	r3, [pc, #116]	; (800ced8 <pbuf_free+0x104>)
 800ce64:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ce68:	491f      	ldr	r1, [pc, #124]	; (800cee8 <pbuf_free+0x114>)
 800ce6a:	481d      	ldr	r0, [pc, #116]	; (800cee0 <pbuf_free+0x10c>)
 800ce6c:	f00b fee4 	bl	8018c38 <iprintf>
        pc->custom_free_function(p);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	4798      	blx	r3
 800ce78:	e01d      	b.n	800ceb6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d104      	bne.n	800ce8a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	200c      	movs	r0, #12
 800ce84:	f7ff f8f6 	bl	800c074 <memp_free>
 800ce88:	e015      	b.n	800ceb6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d104      	bne.n	800ce9a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ce90:	6879      	ldr	r1, [r7, #4]
 800ce92:	200b      	movs	r0, #11
 800ce94:	f7ff f8ee 	bl	800c074 <memp_free>
 800ce98:	e00d      	b.n	800ceb6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d103      	bne.n	800cea8 <pbuf_free+0xd4>
          mem_free(p);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7fe fd33 	bl	800b90c <mem_free>
 800cea6:	e006      	b.n	800ceb6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <pbuf_free+0x104>)
 800ceaa:	f240 320f 	movw	r2, #783	; 0x30f
 800ceae:	490f      	ldr	r1, [pc, #60]	; (800ceec <pbuf_free+0x118>)
 800ceb0:	480b      	ldr	r0, [pc, #44]	; (800cee0 <pbuf_free+0x10c>)
 800ceb2:	f00b fec1 	bl	8018c38 <iprintf>
        }
      }
      count++;
 800ceb6:	7ffb      	ldrb	r3, [r7, #31]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	607b      	str	r3, [r7, #4]
 800cec0:	e001      	b.n	800cec6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d199      	bne.n	800ce00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cecc:	7ffb      	ldrb	r3, [r7, #31]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3720      	adds	r7, #32
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	0801b4f8 	.word	0x0801b4f8
 800cedc:	0801b65c 	.word	0x0801b65c
 800cee0:	0801b558 	.word	0x0801b558
 800cee4:	0801b688 	.word	0x0801b688
 800cee8:	0801b6a0 	.word	0x0801b6a0
 800ceec:	0801b6c4 	.word	0x0801b6c4

0800cef0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cefc:	e005      	b.n	800cf0a <pbuf_clen+0x1a>
    ++len;
 800cefe:	89fb      	ldrh	r3, [r7, #14]
 800cf00:	3301      	adds	r3, #1
 800cf02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1f6      	bne.n	800cefe <pbuf_clen+0xe>
  }
  return len;
 800cf10:	89fb      	ldrh	r3, [r7, #14]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
	...

0800cf20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d016      	beq.n	800cf5c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf2e:	f00b fd49 	bl	80189c4 <sys_arch_protect>
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7b9b      	ldrb	r3, [r3, #14]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	739a      	strb	r2, [r3, #14]
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f00b fd4d 	bl	80189e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7b9b      	ldrb	r3, [r3, #14]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <pbuf_ref+0x3c>
 800cf4e:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <pbuf_ref+0x44>)
 800cf50:	f240 3242 	movw	r2, #834	; 0x342
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <pbuf_ref+0x48>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <pbuf_ref+0x4c>)
 800cf58:	f00b fe6e 	bl	8018c38 <iprintf>
  }
}
 800cf5c:	bf00      	nop
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	0801b4f8 	.word	0x0801b4f8
 800cf68:	0801b6d8 	.word	0x0801b6d8
 800cf6c:	0801b558 	.word	0x0801b558

0800cf70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <pbuf_cat+0x16>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d107      	bne.n	800cf96 <pbuf_cat+0x26>
 800cf86:	4b20      	ldr	r3, [pc, #128]	; (800d008 <pbuf_cat+0x98>)
 800cf88:	f240 3259 	movw	r2, #857	; 0x359
 800cf8c:	491f      	ldr	r1, [pc, #124]	; (800d00c <pbuf_cat+0x9c>)
 800cf8e:	4820      	ldr	r0, [pc, #128]	; (800d010 <pbuf_cat+0xa0>)
 800cf90:	f00b fe52 	bl	8018c38 <iprintf>
 800cf94:	e034      	b.n	800d000 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	e00a      	b.n	800cfb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	891a      	ldrh	r2, [r3, #8]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	891b      	ldrh	r3, [r3, #8]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891a      	ldrh	r2, [r3, #8]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	895b      	ldrh	r3, [r3, #10]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d006      	beq.n	800cfd4 <pbuf_cat+0x64>
 800cfc6:	4b10      	ldr	r3, [pc, #64]	; (800d008 <pbuf_cat+0x98>)
 800cfc8:	f240 3262 	movw	r2, #866	; 0x362
 800cfcc:	4911      	ldr	r1, [pc, #68]	; (800d014 <pbuf_cat+0xa4>)
 800cfce:	4810      	ldr	r0, [pc, #64]	; (800d010 <pbuf_cat+0xa0>)
 800cfd0:	f00b fe32 	bl	8018c38 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d006      	beq.n	800cfea <pbuf_cat+0x7a>
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <pbuf_cat+0x98>)
 800cfde:	f240 3263 	movw	r2, #867	; 0x363
 800cfe2:	490d      	ldr	r1, [pc, #52]	; (800d018 <pbuf_cat+0xa8>)
 800cfe4:	480a      	ldr	r0, [pc, #40]	; (800d010 <pbuf_cat+0xa0>)
 800cfe6:	f00b fe27 	bl	8018c38 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	891a      	ldrh	r2, [r3, #8]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	891b      	ldrh	r3, [r3, #8]
 800cff2:	4413      	add	r3, r2
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	683a      	ldr	r2, [r7, #0]
 800cffe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	0801b4f8 	.word	0x0801b4f8
 800d00c:	0801b6ec 	.word	0x0801b6ec
 800d010:	0801b558 	.word	0x0801b558
 800d014:	0801b724 	.word	0x0801b724
 800d018:	0801b754 	.word	0x0801b754

0800d01c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7ff ffa1 	bl	800cf70 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d02e:	6838      	ldr	r0, [r7, #0]
 800d030:	f7ff ff76 	bl	800cf20 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d034:	bf00      	nop
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d008      	beq.n	800d066 <pbuf_copy+0x2a>
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d005      	beq.n	800d066 <pbuf_copy+0x2a>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	891a      	ldrh	r2, [r3, #8]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	891b      	ldrh	r3, [r3, #8]
 800d062:	429a      	cmp	r2, r3
 800d064:	d209      	bcs.n	800d07a <pbuf_copy+0x3e>
 800d066:	4b57      	ldr	r3, [pc, #348]	; (800d1c4 <pbuf_copy+0x188>)
 800d068:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d06c:	4956      	ldr	r1, [pc, #344]	; (800d1c8 <pbuf_copy+0x18c>)
 800d06e:	4857      	ldr	r0, [pc, #348]	; (800d1cc <pbuf_copy+0x190>)
 800d070:	f00b fde2 	bl	8018c38 <iprintf>
 800d074:	f06f 030f 	mvn.w	r3, #15
 800d078:	e09f      	b.n	800d1ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	895b      	ldrh	r3, [r3, #10]
 800d07e:	461a      	mov	r2, r3
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	1ad2      	subs	r2, r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	895b      	ldrh	r3, [r3, #10]
 800d088:	4619      	mov	r1, r3
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	1acb      	subs	r3, r1, r3
 800d08e:	429a      	cmp	r2, r3
 800d090:	d306      	bcc.n	800d0a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	895b      	ldrh	r3, [r3, #10]
 800d096:	461a      	mov	r2, r3
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	60fb      	str	r3, [r7, #12]
 800d09e:	e005      	b.n	800d0ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	18d0      	adds	r0, r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	f00c f8aa 	bl	8019218 <memcpy>
    offset_to += len;
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d906      	bls.n	800d0ee <pbuf_copy+0xb2>
 800d0e0:	4b38      	ldr	r3, [pc, #224]	; (800d1c4 <pbuf_copy+0x188>)
 800d0e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d0e6:	493a      	ldr	r1, [pc, #232]	; (800d1d0 <pbuf_copy+0x194>)
 800d0e8:	4838      	ldr	r0, [pc, #224]	; (800d1cc <pbuf_copy+0x190>)
 800d0ea:	f00b fda5 	bl	8018c38 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	895b      	ldrh	r3, [r3, #10]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d906      	bls.n	800d108 <pbuf_copy+0xcc>
 800d0fa:	4b32      	ldr	r3, [pc, #200]	; (800d1c4 <pbuf_copy+0x188>)
 800d0fc:	f240 32da 	movw	r2, #986	; 0x3da
 800d100:	4934      	ldr	r1, [pc, #208]	; (800d1d4 <pbuf_copy+0x198>)
 800d102:	4832      	ldr	r0, [pc, #200]	; (800d1cc <pbuf_copy+0x190>)
 800d104:	f00b fd98 	bl	8018c38 <iprintf>
    if (offset_from >= p_from->len) {
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	895b      	ldrh	r3, [r3, #10]
 800d10c:	461a      	mov	r2, r3
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	4293      	cmp	r3, r2
 800d112:	d304      	bcc.n	800d11e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	895b      	ldrh	r3, [r3, #10]
 800d122:	461a      	mov	r2, r3
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	4293      	cmp	r3, r2
 800d128:	d114      	bne.n	800d154 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10c      	bne.n	800d154 <pbuf_copy+0x118>
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d009      	beq.n	800d154 <pbuf_copy+0x118>
 800d140:	4b20      	ldr	r3, [pc, #128]	; (800d1c4 <pbuf_copy+0x188>)
 800d142:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d146:	4924      	ldr	r1, [pc, #144]	; (800d1d8 <pbuf_copy+0x19c>)
 800d148:	4820      	ldr	r0, [pc, #128]	; (800d1cc <pbuf_copy+0x190>)
 800d14a:	f00b fd75 	bl	8018c38 <iprintf>
 800d14e:	f06f 030f 	mvn.w	r3, #15
 800d152:	e032      	b.n	800d1ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d013      	beq.n	800d182 <pbuf_copy+0x146>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	895a      	ldrh	r2, [r3, #10]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d10d      	bne.n	800d182 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d009      	beq.n	800d182 <pbuf_copy+0x146>
 800d16e:	4b15      	ldr	r3, [pc, #84]	; (800d1c4 <pbuf_copy+0x188>)
 800d170:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d174:	4919      	ldr	r1, [pc, #100]	; (800d1dc <pbuf_copy+0x1a0>)
 800d176:	4815      	ldr	r0, [pc, #84]	; (800d1cc <pbuf_copy+0x190>)
 800d178:	f00b fd5e 	bl	8018c38 <iprintf>
 800d17c:	f06f 0305 	mvn.w	r3, #5
 800d180:	e01b      	b.n	800d1ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d013      	beq.n	800d1b0 <pbuf_copy+0x174>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	895a      	ldrh	r2, [r3, #10]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	891b      	ldrh	r3, [r3, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	d10d      	bne.n	800d1b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <pbuf_copy+0x174>
 800d19c:	4b09      	ldr	r3, [pc, #36]	; (800d1c4 <pbuf_copy+0x188>)
 800d19e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d1a2:	490e      	ldr	r1, [pc, #56]	; (800d1dc <pbuf_copy+0x1a0>)
 800d1a4:	4809      	ldr	r0, [pc, #36]	; (800d1cc <pbuf_copy+0x190>)
 800d1a6:	f00b fd47 	bl	8018c38 <iprintf>
 800d1aa:	f06f 0305 	mvn.w	r3, #5
 800d1ae:	e004      	b.n	800d1ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f47f af61 	bne.w	800d07a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0801b4f8 	.word	0x0801b4f8
 800d1c8:	0801b7a0 	.word	0x0801b7a0
 800d1cc:	0801b558 	.word	0x0801b558
 800d1d0:	0801b7d0 	.word	0x0801b7d0
 800d1d4:	0801b7e8 	.word	0x0801b7e8
 800d1d8:	0801b804 	.word	0x0801b804
 800d1dc:	0801b814 	.word	0x0801b814

0800d1e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	80fb      	strh	r3, [r7, #6]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d108      	bne.n	800d216 <pbuf_copy_partial+0x36>
 800d204:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <pbuf_copy_partial+0xd4>)
 800d206:	f240 420a 	movw	r2, #1034	; 0x40a
 800d20a:	492b      	ldr	r1, [pc, #172]	; (800d2b8 <pbuf_copy_partial+0xd8>)
 800d20c:	482b      	ldr	r0, [pc, #172]	; (800d2bc <pbuf_copy_partial+0xdc>)
 800d20e:	f00b fd13 	bl	8018c38 <iprintf>
 800d212:	2300      	movs	r3, #0
 800d214:	e04a      	b.n	800d2ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d108      	bne.n	800d22e <pbuf_copy_partial+0x4e>
 800d21c:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <pbuf_copy_partial+0xd4>)
 800d21e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d222:	4927      	ldr	r1, [pc, #156]	; (800d2c0 <pbuf_copy_partial+0xe0>)
 800d224:	4825      	ldr	r0, [pc, #148]	; (800d2bc <pbuf_copy_partial+0xdc>)
 800d226:	f00b fd07 	bl	8018c38 <iprintf>
 800d22a:	2300      	movs	r3, #0
 800d22c:	e03e      	b.n	800d2ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	61fb      	str	r3, [r7, #28]
 800d232:	e034      	b.n	800d29e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d234:	88bb      	ldrh	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <pbuf_copy_partial+0x70>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	895b      	ldrh	r3, [r3, #10]
 800d23e:	88ba      	ldrh	r2, [r7, #4]
 800d240:	429a      	cmp	r2, r3
 800d242:	d305      	bcc.n	800d250 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	895b      	ldrh	r3, [r3, #10]
 800d248:	88ba      	ldrh	r2, [r7, #4]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	80bb      	strh	r3, [r7, #4]
 800d24e:	e023      	b.n	800d298 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	895a      	ldrh	r2, [r3, #10]
 800d254:	88bb      	ldrh	r3, [r7, #4]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d25a:	8b3a      	ldrh	r2, [r7, #24]
 800d25c:	88fb      	ldrh	r3, [r7, #6]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d901      	bls.n	800d266 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d262:	88fb      	ldrh	r3, [r7, #6]
 800d264:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d266:	8b7b      	ldrh	r3, [r7, #26]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	18d0      	adds	r0, r2, r3
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	88bb      	ldrh	r3, [r7, #4]
 800d272:	4413      	add	r3, r2
 800d274:	8b3a      	ldrh	r2, [r7, #24]
 800d276:	4619      	mov	r1, r3
 800d278:	f00b ffce 	bl	8019218 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d27c:	8afa      	ldrh	r2, [r7, #22]
 800d27e:	8b3b      	ldrh	r3, [r7, #24]
 800d280:	4413      	add	r3, r2
 800d282:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d284:	8b7a      	ldrh	r2, [r7, #26]
 800d286:	8b3b      	ldrh	r3, [r7, #24]
 800d288:	4413      	add	r3, r2
 800d28a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d28c:	88fa      	ldrh	r2, [r7, #6]
 800d28e:	8b3b      	ldrh	r3, [r7, #24]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	61fb      	str	r3, [r7, #28]
 800d29e:	88fb      	ldrh	r3, [r7, #6]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <pbuf_copy_partial+0xca>
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1c4      	bne.n	800d234 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d2aa:	8afb      	ldrh	r3, [r7, #22]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	0801b4f8 	.word	0x0801b4f8
 800d2b8:	0801b840 	.word	0x0801b840
 800d2bc:	0801b558 	.word	0x0801b558
 800d2c0:	0801b860 	.word	0x0801b860

0800d2c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	603a      	str	r2, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	8919      	ldrh	r1, [r3, #8]
 800d2d8:	88ba      	ldrh	r2, [r7, #4]
 800d2da:	79fb      	ldrb	r3, [r7, #7]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fa95 	bl	800c80c <pbuf_alloc>
 800d2e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d101      	bne.n	800d2ee <pbuf_clone+0x2a>
    return NULL;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e011      	b.n	800d312 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d2ee:	6839      	ldr	r1, [r7, #0]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff fea3 	bl	800d03c <pbuf_copy>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d2fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d006      	beq.n	800d310 <pbuf_clone+0x4c>
 800d302:	4b06      	ldr	r3, [pc, #24]	; (800d31c <pbuf_clone+0x58>)
 800d304:	f240 5224 	movw	r2, #1316	; 0x524
 800d308:	4905      	ldr	r1, [pc, #20]	; (800d320 <pbuf_clone+0x5c>)
 800d30a:	4806      	ldr	r0, [pc, #24]	; (800d324 <pbuf_clone+0x60>)
 800d30c:	f00b fc94 	bl	8018c38 <iprintf>
  return q;
 800d310:	68fb      	ldr	r3, [r7, #12]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	0801b4f8 	.word	0x0801b4f8
 800d320:	0801b96c 	.word	0x0801b96c
 800d324:	0801b558 	.word	0x0801b558

0800d328 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d32c:	f00b fb96 	bl	8018a5c <rand>
 800d330:	4603      	mov	r3, r0
 800d332:	b29b      	uxth	r3, r3
 800d334:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d338:	b29b      	uxth	r3, r3
 800d33a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d33e:	b29a      	uxth	r2, r3
 800d340:	4b01      	ldr	r3, [pc, #4]	; (800d348 <tcp_init+0x20>)
 800d342:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d344:	bf00      	nop
 800d346:	bd80      	pop	{r7, pc}
 800d348:	20000024 	.word	0x20000024

0800d34c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7d1b      	ldrb	r3, [r3, #20]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d105      	bne.n	800d368 <tcp_free+0x1c>
 800d35c:	4b06      	ldr	r3, [pc, #24]	; (800d378 <tcp_free+0x2c>)
 800d35e:	22d4      	movs	r2, #212	; 0xd4
 800d360:	4906      	ldr	r1, [pc, #24]	; (800d37c <tcp_free+0x30>)
 800d362:	4807      	ldr	r0, [pc, #28]	; (800d380 <tcp_free+0x34>)
 800d364:	f00b fc68 	bl	8018c38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d368:	6879      	ldr	r1, [r7, #4]
 800d36a:	2001      	movs	r0, #1
 800d36c:	f7fe fe82 	bl	800c074 <memp_free>
}
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	0801b9f8 	.word	0x0801b9f8
 800d37c:	0801ba28 	.word	0x0801ba28
 800d380:	0801ba3c 	.word	0x0801ba3c

0800d384 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7d1b      	ldrb	r3, [r3, #20]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d105      	bne.n	800d3a0 <tcp_free_listen+0x1c>
 800d394:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <tcp_free_listen+0x2c>)
 800d396:	22df      	movs	r2, #223	; 0xdf
 800d398:	4906      	ldr	r1, [pc, #24]	; (800d3b4 <tcp_free_listen+0x30>)
 800d39a:	4807      	ldr	r0, [pc, #28]	; (800d3b8 <tcp_free_listen+0x34>)
 800d39c:	f00b fc4c 	bl	8018c38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	2002      	movs	r0, #2
 800d3a4:	f7fe fe66 	bl	800c074 <memp_free>
}
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	0801b9f8 	.word	0x0801b9f8
 800d3b4:	0801ba64 	.word	0x0801ba64
 800d3b8:	0801ba3c 	.word	0x0801ba3c

0800d3bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d3c0:	f001 f9d0 	bl	800e764 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d3c4:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <tcp_tmr+0x28>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <tcp_tmr+0x28>)
 800d3ce:	701a      	strb	r2, [r3, #0]
 800d3d0:	4b04      	ldr	r3, [pc, #16]	; (800d3e4 <tcp_tmr+0x28>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d3dc:	f000 fe82 	bl	800e0e4 <tcp_slowtmr>
  }
}
 800d3e0:	bf00      	nop
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	200111c5 	.word	0x200111c5

0800d3e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d105      	bne.n	800d404 <tcp_remove_listener+0x1c>
 800d3f8:	4b0d      	ldr	r3, [pc, #52]	; (800d430 <tcp_remove_listener+0x48>)
 800d3fa:	22ff      	movs	r2, #255	; 0xff
 800d3fc:	490d      	ldr	r1, [pc, #52]	; (800d434 <tcp_remove_listener+0x4c>)
 800d3fe:	480e      	ldr	r0, [pc, #56]	; (800d438 <tcp_remove_listener+0x50>)
 800d400:	f00b fc1a 	bl	8018c38 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	e00a      	b.n	800d420 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d102      	bne.n	800d41a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	60fb      	str	r3, [r7, #12]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1f1      	bne.n	800d40a <tcp_remove_listener+0x22>
    }
  }
}
 800d426:	bf00      	nop
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	0801b9f8 	.word	0x0801b9f8
 800d434:	0801ba80 	.word	0x0801ba80
 800d438:	0801ba3c 	.word	0x0801ba3c

0800d43c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <tcp_listen_closed+0x1c>
 800d44a:	4b14      	ldr	r3, [pc, #80]	; (800d49c <tcp_listen_closed+0x60>)
 800d44c:	f240 1211 	movw	r2, #273	; 0x111
 800d450:	4913      	ldr	r1, [pc, #76]	; (800d4a0 <tcp_listen_closed+0x64>)
 800d452:	4814      	ldr	r0, [pc, #80]	; (800d4a4 <tcp_listen_closed+0x68>)
 800d454:	f00b fbf0 	bl	8018c38 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7d1b      	ldrb	r3, [r3, #20]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d006      	beq.n	800d46e <tcp_listen_closed+0x32>
 800d460:	4b0e      	ldr	r3, [pc, #56]	; (800d49c <tcp_listen_closed+0x60>)
 800d462:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d466:	4910      	ldr	r1, [pc, #64]	; (800d4a8 <tcp_listen_closed+0x6c>)
 800d468:	480e      	ldr	r0, [pc, #56]	; (800d4a4 <tcp_listen_closed+0x68>)
 800d46a:	f00b fbe5 	bl	8018c38 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d46e:	2301      	movs	r3, #1
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	e00b      	b.n	800d48c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d474:	4a0d      	ldr	r2, [pc, #52]	; (800d4ac <tcp_listen_closed+0x70>)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6879      	ldr	r1, [r7, #4]
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff ffb1 	bl	800d3e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d9f0      	bls.n	800d474 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	0801b9f8 	.word	0x0801b9f8
 800d4a0:	0801baa8 	.word	0x0801baa8
 800d4a4:	0801ba3c 	.word	0x0801ba3c
 800d4a8:	0801bab4 	.word	0x0801bab4
 800d4ac:	08027ef4 	.word	0x08027ef4

0800d4b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d4b0:	b5b0      	push	{r4, r5, r7, lr}
 800d4b2:	b088      	sub	sp, #32
 800d4b4:	af04      	add	r7, sp, #16
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <tcp_close_shutdown+0x20>
 800d4c2:	4b63      	ldr	r3, [pc, #396]	; (800d650 <tcp_close_shutdown+0x1a0>)
 800d4c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d4c8:	4962      	ldr	r1, [pc, #392]	; (800d654 <tcp_close_shutdown+0x1a4>)
 800d4ca:	4863      	ldr	r0, [pc, #396]	; (800d658 <tcp_close_shutdown+0x1a8>)
 800d4cc:	f00b fbb4 	bl	8018c38 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d066      	beq.n	800d5a4 <tcp_close_shutdown+0xf4>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	7d1b      	ldrb	r3, [r3, #20]
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	d003      	beq.n	800d4e6 <tcp_close_shutdown+0x36>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
 800d4e2:	2b07      	cmp	r3, #7
 800d4e4:	d15e      	bne.n	800d5a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d104      	bne.n	800d4f8 <tcp_close_shutdown+0x48>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d4f6:	d055      	beq.n	800d5a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	8b5b      	ldrh	r3, [r3, #26]
 800d4fc:	f003 0310 	and.w	r3, r3, #16
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <tcp_close_shutdown+0x62>
 800d504:	4b52      	ldr	r3, [pc, #328]	; (800d650 <tcp_close_shutdown+0x1a0>)
 800d506:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d50a:	4954      	ldr	r1, [pc, #336]	; (800d65c <tcp_close_shutdown+0x1ac>)
 800d50c:	4852      	ldr	r0, [pc, #328]	; (800d658 <tcp_close_shutdown+0x1a8>)
 800d50e:	f00b fb93 	bl	8018c38 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d51a:	687d      	ldr	r5, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3304      	adds	r3, #4
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	8ad2      	ldrh	r2, [r2, #22]
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	8b09      	ldrh	r1, [r1, #24]
 800d528:	9102      	str	r1, [sp, #8]
 800d52a:	9201      	str	r2, [sp, #4]
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	462b      	mov	r3, r5
 800d530:	4622      	mov	r2, r4
 800d532:	4601      	mov	r1, r0
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f005 ff03 	bl	8013340 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 fce0 	bl	800ef00 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d540:	4b47      	ldr	r3, [pc, #284]	; (800d660 <tcp_close_shutdown+0x1b0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d105      	bne.n	800d556 <tcp_close_shutdown+0xa6>
 800d54a:	4b45      	ldr	r3, [pc, #276]	; (800d660 <tcp_close_shutdown+0x1b0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	4a43      	ldr	r2, [pc, #268]	; (800d660 <tcp_close_shutdown+0x1b0>)
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	e013      	b.n	800d57e <tcp_close_shutdown+0xce>
 800d556:	4b42      	ldr	r3, [pc, #264]	; (800d660 <tcp_close_shutdown+0x1b0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	60fb      	str	r3, [r7, #12]
 800d55c:	e00c      	b.n	800d578 <tcp_close_shutdown+0xc8>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d104      	bne.n	800d572 <tcp_close_shutdown+0xc2>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68da      	ldr	r2, [r3, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	60da      	str	r2, [r3, #12]
 800d570:	e005      	b.n	800d57e <tcp_close_shutdown+0xce>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1ef      	bne.n	800d55e <tcp_close_shutdown+0xae>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	60da      	str	r2, [r3, #12]
 800d584:	4b37      	ldr	r3, [pc, #220]	; (800d664 <tcp_close_shutdown+0x1b4>)
 800d586:	2201      	movs	r2, #1
 800d588:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d58a:	4b37      	ldr	r3, [pc, #220]	; (800d668 <tcp_close_shutdown+0x1b8>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d102      	bne.n	800d59a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d594:	f004 f978 	bl	8011888 <tcp_trigger_input_pcb_close>
 800d598:	e002      	b.n	800d5a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fed6 	bl	800d34c <tcp_free>
      }
      return ERR_OK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e050      	b.n	800d646 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d03b      	beq.n	800d624 <tcp_close_shutdown+0x174>
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	dc44      	bgt.n	800d63a <tcp_close_shutdown+0x18a>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d002      	beq.n	800d5ba <tcp_close_shutdown+0x10a>
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d02a      	beq.n	800d60e <tcp_close_shutdown+0x15e>
 800d5b8:	e03f      	b.n	800d63a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	8adb      	ldrh	r3, [r3, #22]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d021      	beq.n	800d606 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d5c2:	4b2a      	ldr	r3, [pc, #168]	; (800d66c <tcp_close_shutdown+0x1bc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d105      	bne.n	800d5d8 <tcp_close_shutdown+0x128>
 800d5cc:	4b27      	ldr	r3, [pc, #156]	; (800d66c <tcp_close_shutdown+0x1bc>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	4a26      	ldr	r2, [pc, #152]	; (800d66c <tcp_close_shutdown+0x1bc>)
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	e013      	b.n	800d600 <tcp_close_shutdown+0x150>
 800d5d8:	4b24      	ldr	r3, [pc, #144]	; (800d66c <tcp_close_shutdown+0x1bc>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	60bb      	str	r3, [r7, #8]
 800d5de:	e00c      	b.n	800d5fa <tcp_close_shutdown+0x14a>
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d104      	bne.n	800d5f4 <tcp_close_shutdown+0x144>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	60da      	str	r2, [r3, #12]
 800d5f2:	e005      	b.n	800d600 <tcp_close_shutdown+0x150>
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	60bb      	str	r3, [r7, #8]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1ef      	bne.n	800d5e0 <tcp_close_shutdown+0x130>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff fea0 	bl	800d34c <tcp_free>
      break;
 800d60c:	e01a      	b.n	800d644 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff ff14 	bl	800d43c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4816      	ldr	r0, [pc, #88]	; (800d670 <tcp_close_shutdown+0x1c0>)
 800d618:	f001 fcc2 	bl	800efa0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f7ff feb1 	bl	800d384 <tcp_free_listen>
      break;
 800d622:	e00f      	b.n	800d644 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d624:	6879      	ldr	r1, [r7, #4]
 800d626:	480e      	ldr	r0, [pc, #56]	; (800d660 <tcp_close_shutdown+0x1b0>)
 800d628:	f001 fcba 	bl	800efa0 <tcp_pcb_remove>
 800d62c:	4b0d      	ldr	r3, [pc, #52]	; (800d664 <tcp_close_shutdown+0x1b4>)
 800d62e:	2201      	movs	r2, #1
 800d630:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7ff fe8a 	bl	800d34c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d638:	e004      	b.n	800d644 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f81a 	bl	800d674 <tcp_close_shutdown_fin>
 800d640:	4603      	mov	r3, r0
 800d642:	e000      	b.n	800d646 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bdb0      	pop	{r4, r5, r7, pc}
 800d64e:	bf00      	nop
 800d650:	0801b9f8 	.word	0x0801b9f8
 800d654:	0801bacc 	.word	0x0801bacc
 800d658:	0801ba3c 	.word	0x0801ba3c
 800d65c:	0801baec 	.word	0x0801baec
 800d660:	200111bc 	.word	0x200111bc
 800d664:	200111c4 	.word	0x200111c4
 800d668:	200111fc 	.word	0x200111fc
 800d66c:	200111b4 	.word	0x200111b4
 800d670:	200111b8 	.word	0x200111b8

0800d674 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <tcp_close_shutdown_fin+0x1c>
 800d682:	4b2e      	ldr	r3, [pc, #184]	; (800d73c <tcp_close_shutdown_fin+0xc8>)
 800d684:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d688:	492d      	ldr	r1, [pc, #180]	; (800d740 <tcp_close_shutdown_fin+0xcc>)
 800d68a:	482e      	ldr	r0, [pc, #184]	; (800d744 <tcp_close_shutdown_fin+0xd0>)
 800d68c:	f00b fad4 	bl	8018c38 <iprintf>

  switch (pcb->state) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	2b07      	cmp	r3, #7
 800d696:	d020      	beq.n	800d6da <tcp_close_shutdown_fin+0x66>
 800d698:	2b07      	cmp	r3, #7
 800d69a:	dc2b      	bgt.n	800d6f4 <tcp_close_shutdown_fin+0x80>
 800d69c:	2b03      	cmp	r3, #3
 800d69e:	d002      	beq.n	800d6a6 <tcp_close_shutdown_fin+0x32>
 800d6a0:	2b04      	cmp	r3, #4
 800d6a2:	d00d      	beq.n	800d6c0 <tcp_close_shutdown_fin+0x4c>
 800d6a4:	e026      	b.n	800d6f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f004 ff58 	bl	801255c <tcp_send_fin>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d11f      	bne.n	800d6f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2205      	movs	r2, #5
 800d6bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6be:	e01b      	b.n	800d6f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f004 ff4b 	bl	801255c <tcp_send_fin>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d114      	bne.n	800d6fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2205      	movs	r2, #5
 800d6d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6d8:	e010      	b.n	800d6fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f004 ff3e 	bl	801255c <tcp_send_fin>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d109      	bne.n	800d700 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2209      	movs	r2, #9
 800d6f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6f2:	e005      	b.n	800d700 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	e01c      	b.n	800d732 <tcp_close_shutdown_fin+0xbe>
      break;
 800d6f8:	bf00      	nop
 800d6fa:	e002      	b.n	800d702 <tcp_close_shutdown_fin+0x8e>
      break;
 800d6fc:	bf00      	nop
 800d6fe:	e000      	b.n	800d702 <tcp_close_shutdown_fin+0x8e>
      break;
 800d700:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d103      	bne.n	800d712 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f005 f864 	bl	80127d8 <tcp_output>
 800d710:	e00d      	b.n	800d72e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d108      	bne.n	800d72e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	8b5b      	ldrh	r3, [r3, #26]
 800d720:	f043 0308 	orr.w	r3, r3, #8
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	e001      	b.n	800d732 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	0801b9f8 	.word	0x0801b9f8
 800d740:	0801baa8 	.word	0x0801baa8
 800d744:	0801ba3c 	.word	0x0801ba3c

0800d748 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d109      	bne.n	800d76a <tcp_close+0x22>
 800d756:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <tcp_close+0x4c>)
 800d758:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d75c:	490e      	ldr	r1, [pc, #56]	; (800d798 <tcp_close+0x50>)
 800d75e:	480f      	ldr	r0, [pc, #60]	; (800d79c <tcp_close+0x54>)
 800d760:	f00b fa6a 	bl	8018c38 <iprintf>
 800d764:	f06f 030f 	mvn.w	r3, #15
 800d768:	e00f      	b.n	800d78a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	7d1b      	ldrb	r3, [r3, #20]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d006      	beq.n	800d780 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	8b5b      	ldrh	r3, [r3, #26]
 800d776:	f043 0310 	orr.w	r3, r3, #16
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d780:	2101      	movs	r1, #1
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fe94 	bl	800d4b0 <tcp_close_shutdown>
 800d788:	4603      	mov	r3, r0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	0801b9f8 	.word	0x0801b9f8
 800d798:	0801bb08 	.word	0x0801bb08
 800d79c:	0801ba3c 	.word	0x0801ba3c

0800d7a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d109      	bne.n	800d7c6 <tcp_shutdown+0x26>
 800d7b2:	4b26      	ldr	r3, [pc, #152]	; (800d84c <tcp_shutdown+0xac>)
 800d7b4:	f240 2207 	movw	r2, #519	; 0x207
 800d7b8:	4925      	ldr	r1, [pc, #148]	; (800d850 <tcp_shutdown+0xb0>)
 800d7ba:	4826      	ldr	r0, [pc, #152]	; (800d854 <tcp_shutdown+0xb4>)
 800d7bc:	f00b fa3c 	bl	8018c38 <iprintf>
 800d7c0:	f06f 030f 	mvn.w	r3, #15
 800d7c4:	e03d      	b.n	800d842 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d102      	bne.n	800d7d4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d7ce:	f06f 030a 	mvn.w	r3, #10
 800d7d2:	e036      	b.n	800d842 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01b      	beq.n	800d812 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8b5b      	ldrh	r3, [r3, #26]
 800d7de:	f043 0310 	orr.w	r3, r3, #16
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d005      	beq.n	800d7fa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d7ee:	2101      	movs	r1, #1
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff fe5d 	bl	800d4b0 <tcp_close_shutdown>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	e023      	b.n	800d842 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d007      	beq.n	800d812 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff fae4 	bl	800cdd4 <pbuf_free>
      pcb->refused_data = NULL;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d013      	beq.n	800d840 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	7d1b      	ldrb	r3, [r3, #20]
 800d81c:	2b04      	cmp	r3, #4
 800d81e:	dc02      	bgt.n	800d826 <tcp_shutdown+0x86>
 800d820:	2b03      	cmp	r3, #3
 800d822:	da02      	bge.n	800d82a <tcp_shutdown+0x8a>
 800d824:	e009      	b.n	800d83a <tcp_shutdown+0x9a>
 800d826:	2b07      	cmp	r3, #7
 800d828:	d107      	bne.n	800d83a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	4619      	mov	r1, r3
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7ff fe3d 	bl	800d4b0 <tcp_close_shutdown>
 800d836:	4603      	mov	r3, r0
 800d838:	e003      	b.n	800d842 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d83a:	f06f 030a 	mvn.w	r3, #10
 800d83e:	e000      	b.n	800d842 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	0801b9f8 	.word	0x0801b9f8
 800d850:	0801bb20 	.word	0x0801bb20
 800d854:	0801ba3c 	.word	0x0801ba3c

0800d858 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08e      	sub	sp, #56	; 0x38
 800d85c:	af04      	add	r7, sp, #16
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d107      	bne.n	800d878 <tcp_abandon+0x20>
 800d868:	4b52      	ldr	r3, [pc, #328]	; (800d9b4 <tcp_abandon+0x15c>)
 800d86a:	f240 223d 	movw	r2, #573	; 0x23d
 800d86e:	4952      	ldr	r1, [pc, #328]	; (800d9b8 <tcp_abandon+0x160>)
 800d870:	4852      	ldr	r0, [pc, #328]	; (800d9bc <tcp_abandon+0x164>)
 800d872:	f00b f9e1 	bl	8018c38 <iprintf>
 800d876:	e099      	b.n	800d9ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	7d1b      	ldrb	r3, [r3, #20]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d106      	bne.n	800d88e <tcp_abandon+0x36>
 800d880:	4b4c      	ldr	r3, [pc, #304]	; (800d9b4 <tcp_abandon+0x15c>)
 800d882:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d886:	494e      	ldr	r1, [pc, #312]	; (800d9c0 <tcp_abandon+0x168>)
 800d888:	484c      	ldr	r0, [pc, #304]	; (800d9bc <tcp_abandon+0x164>)
 800d88a:	f00b f9d5 	bl	8018c38 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7d1b      	ldrb	r3, [r3, #20]
 800d892:	2b0a      	cmp	r3, #10
 800d894:	d107      	bne.n	800d8a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d896:	6879      	ldr	r1, [r7, #4]
 800d898:	484a      	ldr	r0, [pc, #296]	; (800d9c4 <tcp_abandon+0x16c>)
 800d89a:	f001 fb81 	bl	800efa0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff fd54 	bl	800d34c <tcp_free>
 800d8a4:	e082      	b.n	800d9ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7d1b      	ldrb	r3, [r3, #20]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d126      	bne.n	800d91e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	8adb      	ldrh	r3, [r3, #22]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d02e      	beq.n	800d936 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8d8:	4b3b      	ldr	r3, [pc, #236]	; (800d9c8 <tcp_abandon+0x170>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d105      	bne.n	800d8ee <tcp_abandon+0x96>
 800d8e2:	4b39      	ldr	r3, [pc, #228]	; (800d9c8 <tcp_abandon+0x170>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	4a37      	ldr	r2, [pc, #220]	; (800d9c8 <tcp_abandon+0x170>)
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	e013      	b.n	800d916 <tcp_abandon+0xbe>
 800d8ee:	4b36      	ldr	r3, [pc, #216]	; (800d9c8 <tcp_abandon+0x170>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	61fb      	str	r3, [r7, #28]
 800d8f4:	e00c      	b.n	800d910 <tcp_abandon+0xb8>
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d104      	bne.n	800d90a <tcp_abandon+0xb2>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68da      	ldr	r2, [r3, #12]
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	60da      	str	r2, [r3, #12]
 800d908:	e005      	b.n	800d916 <tcp_abandon+0xbe>
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	61fb      	str	r3, [r7, #28]
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1ef      	bne.n	800d8f6 <tcp_abandon+0x9e>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	60da      	str	r2, [r3, #12]
 800d91c:	e00b      	b.n	800d936 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8adb      	ldrh	r3, [r3, #22]
 800d926:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d928:	6879      	ldr	r1, [r7, #4]
 800d92a:	4828      	ldr	r0, [pc, #160]	; (800d9cc <tcp_abandon+0x174>)
 800d92c:	f001 fb38 	bl	800efa0 <tcp_pcb_remove>
 800d930:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <tcp_abandon+0x178>)
 800d932:	2201      	movs	r2, #1
 800d934:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d942:	4618      	mov	r0, r3
 800d944:	f000 ffee 	bl	800e924 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d954:	4618      	mov	r0, r3
 800d956:	f000 ffe5 	bl	800e924 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d004      	beq.n	800d96c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d966:	4618      	mov	r0, r3
 800d968:	f000 ffdc 	bl	800e924 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00e      	beq.n	800d990 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3304      	adds	r3, #4
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	8b12      	ldrh	r2, [r2, #24]
 800d97c:	9202      	str	r2, [sp, #8]
 800d97e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d980:	9201      	str	r2, [sp, #4]
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	460b      	mov	r3, r1
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	69b9      	ldr	r1, [r7, #24]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f005 fcd8 	bl	8013340 <tcp_rst>
    }
    last_state = pcb->state;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	7d1b      	ldrb	r3, [r3, #20]
 800d994:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f7ff fcd8 	bl	800d34c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d004      	beq.n	800d9ac <tcp_abandon+0x154>
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	f06f 010c 	mvn.w	r1, #12
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	4798      	blx	r3
  }
}
 800d9ac:	3728      	adds	r7, #40	; 0x28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	0801b9f8 	.word	0x0801b9f8
 800d9b8:	0801bb3c 	.word	0x0801bb3c
 800d9bc:	0801ba3c 	.word	0x0801ba3c
 800d9c0:	0801bb58 	.word	0x0801bb58
 800d9c4:	200111c0 	.word	0x200111c0
 800d9c8:	200111b4 	.word	0x200111b4
 800d9cc:	200111bc 	.word	0x200111bc
 800d9d0:	200111c4 	.word	0x200111c4

0800d9d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d9dc:	2101      	movs	r1, #1
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff ff3a 	bl	800d858 <tcp_abandon>
}
 800d9e4:	bf00      	nop
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b088      	sub	sp, #32
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d9fa:	2304      	movs	r3, #4
 800d9fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800da04:	4b3e      	ldr	r3, [pc, #248]	; (800db00 <tcp_bind+0x114>)
 800da06:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d109      	bne.n	800da22 <tcp_bind+0x36>
 800da0e:	4b3d      	ldr	r3, [pc, #244]	; (800db04 <tcp_bind+0x118>)
 800da10:	f240 22a9 	movw	r2, #681	; 0x2a9
 800da14:	493c      	ldr	r1, [pc, #240]	; (800db08 <tcp_bind+0x11c>)
 800da16:	483d      	ldr	r0, [pc, #244]	; (800db0c <tcp_bind+0x120>)
 800da18:	f00b f90e 	bl	8018c38 <iprintf>
 800da1c:	f06f 030f 	mvn.w	r3, #15
 800da20:	e06a      	b.n	800daf8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	7d1b      	ldrb	r3, [r3, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d009      	beq.n	800da3e <tcp_bind+0x52>
 800da2a:	4b36      	ldr	r3, [pc, #216]	; (800db04 <tcp_bind+0x118>)
 800da2c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800da30:	4937      	ldr	r1, [pc, #220]	; (800db10 <tcp_bind+0x124>)
 800da32:	4836      	ldr	r0, [pc, #216]	; (800db0c <tcp_bind+0x120>)
 800da34:	f00b f900 	bl	8018c38 <iprintf>
 800da38:	f06f 0305 	mvn.w	r3, #5
 800da3c:	e05c      	b.n	800daf8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800da3e:	88fb      	ldrh	r3, [r7, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d109      	bne.n	800da58 <tcp_bind+0x6c>
    port = tcp_new_port();
 800da44:	f000 f9f0 	bl	800de28 <tcp_new_port>
 800da48:	4603      	mov	r3, r0
 800da4a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800da4c:	88fb      	ldrh	r3, [r7, #6]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d135      	bne.n	800dabe <tcp_bind+0xd2>
      return ERR_BUF;
 800da52:	f06f 0301 	mvn.w	r3, #1
 800da56:	e04f      	b.n	800daf8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800da58:	2300      	movs	r3, #0
 800da5a:	61fb      	str	r3, [r7, #28]
 800da5c:	e02b      	b.n	800dab6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da5e:	4a2d      	ldr	r2, [pc, #180]	; (800db14 <tcp_bind+0x128>)
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	61bb      	str	r3, [r7, #24]
 800da6a:	e01e      	b.n	800daaa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	8adb      	ldrh	r3, [r3, #22]
 800da70:	88fa      	ldrh	r2, [r7, #6]
 800da72:	429a      	cmp	r2, r3
 800da74:	d116      	bne.n	800daa4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800da76:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d010      	beq.n	800da9e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00c      	beq.n	800da9e <tcp_bind+0xb2>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d009      	beq.n	800da9e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d005      	beq.n	800da9e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d102      	bne.n	800daa4 <tcp_bind+0xb8>
              return ERR_USE;
 800da9e:	f06f 0307 	mvn.w	r3, #7
 800daa2:	e029      	b.n	800daf8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	61bb      	str	r3, [r7, #24]
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1dd      	bne.n	800da6c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	3301      	adds	r3, #1
 800dab4:	61fb      	str	r3, [r7, #28]
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	429a      	cmp	r2, r3
 800dabc:	dbcf      	blt.n	800da5e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00c      	beq.n	800dade <tcp_bind+0xf2>
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d008      	beq.n	800dade <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <tcp_bind+0xec>
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	e000      	b.n	800dada <tcp_bind+0xee>
 800dad8:	2300      	movs	r3, #0
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	88fa      	ldrh	r2, [r7, #6]
 800dae2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <tcp_bind+0x12c>)
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	60da      	str	r2, [r3, #12]
 800daec:	4a0a      	ldr	r2, [pc, #40]	; (800db18 <tcp_bind+0x12c>)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6013      	str	r3, [r2, #0]
 800daf2:	f005 fde7 	bl	80136c4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3720      	adds	r7, #32
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	08027f2c 	.word	0x08027f2c
 800db04:	0801b9f8 	.word	0x0801b9f8
 800db08:	0801bb8c 	.word	0x0801bb8c
 800db0c:	0801ba3c 	.word	0x0801ba3c
 800db10:	0801bba4 	.word	0x0801bba4
 800db14:	08027ef4 	.word	0x08027ef4
 800db18:	200111b4 	.word	0x200111b4

0800db1c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	4613      	mov	r3, r2
 800db28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <tcp_accept_null+0x22>
 800db30:	4b07      	ldr	r3, [pc, #28]	; (800db50 <tcp_accept_null+0x34>)
 800db32:	f240 320f 	movw	r2, #783	; 0x30f
 800db36:	4907      	ldr	r1, [pc, #28]	; (800db54 <tcp_accept_null+0x38>)
 800db38:	4807      	ldr	r0, [pc, #28]	; (800db58 <tcp_accept_null+0x3c>)
 800db3a:	f00b f87d 	bl	8018c38 <iprintf>

  tcp_abort(pcb);
 800db3e:	68b8      	ldr	r0, [r7, #8]
 800db40:	f7ff ff48 	bl	800d9d4 <tcp_abort>

  return ERR_ABRT;
 800db44:	f06f 030c 	mvn.w	r3, #12
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	0801b9f8 	.word	0x0801b9f8
 800db54:	0801bbcc 	.word	0x0801bbcc
 800db58:	0801ba3c 	.word	0x0801ba3c

0800db5c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800db68:	78fb      	ldrb	r3, [r7, #3]
 800db6a:	2200      	movs	r2, #0
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f806 	bl	800db80 <tcp_listen_with_backlog_and_err>
 800db74:	4603      	mov	r3, r0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	460b      	mov	r3, r1
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d109      	bne.n	800dbac <tcp_listen_with_backlog_and_err+0x2c>
 800db98:	4b47      	ldr	r3, [pc, #284]	; (800dcb8 <tcp_listen_with_backlog_and_err+0x138>)
 800db9a:	f240 3259 	movw	r2, #857	; 0x359
 800db9e:	4947      	ldr	r1, [pc, #284]	; (800dcbc <tcp_listen_with_backlog_and_err+0x13c>)
 800dba0:	4847      	ldr	r0, [pc, #284]	; (800dcc0 <tcp_listen_with_backlog_and_err+0x140>)
 800dba2:	f00b f849 	bl	8018c38 <iprintf>
 800dba6:	23f0      	movs	r3, #240	; 0xf0
 800dba8:	76fb      	strb	r3, [r7, #27]
 800dbaa:	e079      	b.n	800dca0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	7d1b      	ldrb	r3, [r3, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d009      	beq.n	800dbc8 <tcp_listen_with_backlog_and_err+0x48>
 800dbb4:	4b40      	ldr	r3, [pc, #256]	; (800dcb8 <tcp_listen_with_backlog_and_err+0x138>)
 800dbb6:	f240 325a 	movw	r2, #858	; 0x35a
 800dbba:	4942      	ldr	r1, [pc, #264]	; (800dcc4 <tcp_listen_with_backlog_and_err+0x144>)
 800dbbc:	4840      	ldr	r0, [pc, #256]	; (800dcc0 <tcp_listen_with_backlog_and_err+0x140>)
 800dbbe:	f00b f83b 	bl	8018c38 <iprintf>
 800dbc2:	23f1      	movs	r3, #241	; 0xf1
 800dbc4:	76fb      	strb	r3, [r7, #27]
 800dbc6:	e06b      	b.n	800dca0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d104      	bne.n	800dbda <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dbd4:	23f7      	movs	r3, #247	; 0xf7
 800dbd6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dbd8:	e062      	b.n	800dca0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dbda:	2002      	movs	r0, #2
 800dbdc:	f7fe f9d4 	bl	800bf88 <memp_malloc>
 800dbe0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d102      	bne.n	800dbee <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dbe8:	23ff      	movs	r3, #255	; 0xff
 800dbea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dbec:	e058      	b.n	800dca0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	691a      	ldr	r2, [r3, #16]
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	8ada      	ldrh	r2, [r3, #22]
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2201      	movs	r2, #1
 800dc02:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	7d5a      	ldrb	r2, [r3, #21]
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	7a5a      	ldrb	r2, [r3, #9]
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	2200      	movs	r2, #0
 800dc18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	7ada      	ldrb	r2, [r3, #11]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	7a9a      	ldrb	r2, [r3, #10]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	8adb      	ldrh	r3, [r3, #22]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d021      	beq.n	800dc7e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc3a:	4b23      	ldr	r3, [pc, #140]	; (800dcc8 <tcp_listen_with_backlog_and_err+0x148>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68fa      	ldr	r2, [r7, #12]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d105      	bne.n	800dc50 <tcp_listen_with_backlog_and_err+0xd0>
 800dc44:	4b20      	ldr	r3, [pc, #128]	; (800dcc8 <tcp_listen_with_backlog_and_err+0x148>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	4a1f      	ldr	r2, [pc, #124]	; (800dcc8 <tcp_listen_with_backlog_and_err+0x148>)
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	e013      	b.n	800dc78 <tcp_listen_with_backlog_and_err+0xf8>
 800dc50:	4b1d      	ldr	r3, [pc, #116]	; (800dcc8 <tcp_listen_with_backlog_and_err+0x148>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	617b      	str	r3, [r7, #20]
 800dc56:	e00c      	b.n	800dc72 <tcp_listen_with_backlog_and_err+0xf2>
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d104      	bne.n	800dc6c <tcp_listen_with_backlog_and_err+0xec>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	68da      	ldr	r2, [r3, #12]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	60da      	str	r2, [r3, #12]
 800dc6a:	e005      	b.n	800dc78 <tcp_listen_with_backlog_and_err+0xf8>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	617b      	str	r3, [r7, #20]
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1ef      	bne.n	800dc58 <tcp_listen_with_backlog_and_err+0xd8>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f7ff fb64 	bl	800d34c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	4a11      	ldr	r2, [pc, #68]	; (800dccc <tcp_listen_with_backlog_and_err+0x14c>)
 800dc88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dc8a:	4b11      	ldr	r3, [pc, #68]	; (800dcd0 <tcp_listen_with_backlog_and_err+0x150>)
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	60da      	str	r2, [r3, #12]
 800dc92:	4a0f      	ldr	r2, [pc, #60]	; (800dcd0 <tcp_listen_with_backlog_and_err+0x150>)
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	f005 fd14 	bl	80136c4 <tcp_timer_needed>
  res = ERR_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	7efa      	ldrb	r2, [r7, #27]
 800dcaa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dcac:	69fb      	ldr	r3, [r7, #28]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3720      	adds	r7, #32
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	0801b9f8 	.word	0x0801b9f8
 800dcbc:	0801bbec 	.word	0x0801bbec
 800dcc0:	0801ba3c 	.word	0x0801ba3c
 800dcc4:	0801bc1c 	.word	0x0801bc1c
 800dcc8:	200111b4 	.word	0x200111b4
 800dccc:	0800db1d 	.word	0x0800db1d
 800dcd0:	200111b8 	.word	0x200111b8

0800dcd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d106      	bne.n	800dcf0 <tcp_update_rcv_ann_wnd+0x1c>
 800dce2:	4b25      	ldr	r3, [pc, #148]	; (800dd78 <tcp_update_rcv_ann_wnd+0xa4>)
 800dce4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dce8:	4924      	ldr	r1, [pc, #144]	; (800dd7c <tcp_update_rcv_ann_wnd+0xa8>)
 800dcea:	4825      	ldr	r0, [pc, #148]	; (800dd80 <tcp_update_rcv_ann_wnd+0xac>)
 800dcec:	f00a ffa4 	bl	8018c38 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dcf8:	4413      	add	r3, r2
 800dcfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd08:	bf28      	it	cs
 800dd0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	4413      	add	r3, r2
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	db08      	blt.n	800dd2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	e020      	b.n	800dd6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	dd03      	ble.n	800dd42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd40:	e014      	b.n	800dd6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd54:	d306      	bcc.n	800dd64 <tcp_update_rcv_ann_wnd+0x90>
 800dd56:	4b08      	ldr	r3, [pc, #32]	; (800dd78 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd58:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd5c:	4909      	ldr	r1, [pc, #36]	; (800dd84 <tcp_update_rcv_ann_wnd+0xb0>)
 800dd5e:	4808      	ldr	r0, [pc, #32]	; (800dd80 <tcp_update_rcv_ann_wnd+0xac>)
 800dd60:	f00a ff6a 	bl	8018c38 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dd6c:	2300      	movs	r3, #0
  }
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	0801b9f8 	.word	0x0801b9f8
 800dd7c:	0801bc54 	.word	0x0801bc54
 800dd80:	0801ba3c 	.word	0x0801ba3c
 800dd84:	0801bc78 	.word	0x0801bc78

0800dd88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d107      	bne.n	800ddaa <tcp_recved+0x22>
 800dd9a:	4b1f      	ldr	r3, [pc, #124]	; (800de18 <tcp_recved+0x90>)
 800dd9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dda0:	491e      	ldr	r1, [pc, #120]	; (800de1c <tcp_recved+0x94>)
 800dda2:	481f      	ldr	r0, [pc, #124]	; (800de20 <tcp_recved+0x98>)
 800dda4:	f00a ff48 	bl	8018c38 <iprintf>
 800dda8:	e032      	b.n	800de10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	7d1b      	ldrb	r3, [r3, #20]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d106      	bne.n	800ddc0 <tcp_recved+0x38>
 800ddb2:	4b19      	ldr	r3, [pc, #100]	; (800de18 <tcp_recved+0x90>)
 800ddb4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ddb8:	491a      	ldr	r1, [pc, #104]	; (800de24 <tcp_recved+0x9c>)
 800ddba:	4819      	ldr	r0, [pc, #100]	; (800de20 <tcp_recved+0x98>)
 800ddbc:	f00a ff3c 	bl	8018c38 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddc4:	887b      	ldrh	r3, [r7, #2]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddd0:	d804      	bhi.n	800dddc <tcp_recved+0x54>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddd6:	89fa      	ldrh	r2, [r7, #14]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d204      	bcs.n	800dde6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dde2:	851a      	strh	r2, [r3, #40]	; 0x28
 800dde4:	e002      	b.n	800ddec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	89fa      	ldrh	r2, [r7, #14]
 800ddea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff ff71 	bl	800dcd4 <tcp_update_rcv_ann_wnd>
 800ddf2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ddfa:	d309      	bcc.n	800de10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	8b5b      	ldrh	r3, [r3, #26]
 800de00:	f043 0302 	orr.w	r3, r3, #2
 800de04:	b29a      	uxth	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f004 fce4 	bl	80127d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	0801b9f8 	.word	0x0801b9f8
 800de1c:	0801bc94 	.word	0x0801bc94
 800de20:	0801ba3c 	.word	0x0801ba3c
 800de24:	0801bcac 	.word	0x0801bcac

0800de28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800de32:	4b1e      	ldr	r3, [pc, #120]	; (800deac <tcp_new_port+0x84>)
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	3301      	adds	r3, #1
 800de38:	b29a      	uxth	r2, r3
 800de3a:	4b1c      	ldr	r3, [pc, #112]	; (800deac <tcp_new_port+0x84>)
 800de3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800de3e:	4b1b      	ldr	r3, [pc, #108]	; (800deac <tcp_new_port+0x84>)
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de46:	4293      	cmp	r3, r2
 800de48:	d103      	bne.n	800de52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800de4a:	4b18      	ldr	r3, [pc, #96]	; (800deac <tcp_new_port+0x84>)
 800de4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800de50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de52:	2300      	movs	r3, #0
 800de54:	71fb      	strb	r3, [r7, #7]
 800de56:	e01e      	b.n	800de96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de58:	79fb      	ldrb	r3, [r7, #7]
 800de5a:	4a15      	ldr	r2, [pc, #84]	; (800deb0 <tcp_new_port+0x88>)
 800de5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	e011      	b.n	800de8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	8ada      	ldrh	r2, [r3, #22]
 800de6a:	4b10      	ldr	r3, [pc, #64]	; (800deac <tcp_new_port+0x84>)
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d108      	bne.n	800de84 <tcp_new_port+0x5c>
        n++;
 800de72:	88bb      	ldrh	r3, [r7, #4]
 800de74:	3301      	adds	r3, #1
 800de76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800de78:	88bb      	ldrh	r3, [r7, #4]
 800de7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de7e:	d3d8      	bcc.n	800de32 <tcp_new_port+0xa>
          return 0;
 800de80:	2300      	movs	r3, #0
 800de82:	e00d      	b.n	800dea0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1ea      	bne.n	800de66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de90:	79fb      	ldrb	r3, [r7, #7]
 800de92:	3301      	adds	r3, #1
 800de94:	71fb      	strb	r3, [r7, #7]
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d9dd      	bls.n	800de58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800de9c:	4b03      	ldr	r3, [pc, #12]	; (800deac <tcp_new_port+0x84>)
 800de9e:	881b      	ldrh	r3, [r3, #0]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	20000024 	.word	0x20000024
 800deb0:	08027ef4 	.word	0x08027ef4

0800deb4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	4613      	mov	r3, r2
 800dec2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800dec4:	2300      	movs	r3, #0
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <tcp_connect+0x2e>
 800dece:	4b7d      	ldr	r3, [pc, #500]	; (800e0c4 <tcp_connect+0x210>)
 800ded0:	f240 4235 	movw	r2, #1077	; 0x435
 800ded4:	497c      	ldr	r1, [pc, #496]	; (800e0c8 <tcp_connect+0x214>)
 800ded6:	487d      	ldr	r0, [pc, #500]	; (800e0cc <tcp_connect+0x218>)
 800ded8:	f00a feae 	bl	8018c38 <iprintf>
 800dedc:	f06f 030f 	mvn.w	r3, #15
 800dee0:	e0ec      	b.n	800e0bc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d109      	bne.n	800defc <tcp_connect+0x48>
 800dee8:	4b76      	ldr	r3, [pc, #472]	; (800e0c4 <tcp_connect+0x210>)
 800deea:	f240 4236 	movw	r2, #1078	; 0x436
 800deee:	4978      	ldr	r1, [pc, #480]	; (800e0d0 <tcp_connect+0x21c>)
 800def0:	4876      	ldr	r0, [pc, #472]	; (800e0cc <tcp_connect+0x218>)
 800def2:	f00a fea1 	bl	8018c38 <iprintf>
 800def6:	f06f 030f 	mvn.w	r3, #15
 800defa:	e0df      	b.n	800e0bc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	7d1b      	ldrb	r3, [r3, #20]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d009      	beq.n	800df18 <tcp_connect+0x64>
 800df04:	4b6f      	ldr	r3, [pc, #444]	; (800e0c4 <tcp_connect+0x210>)
 800df06:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800df0a:	4972      	ldr	r1, [pc, #456]	; (800e0d4 <tcp_connect+0x220>)
 800df0c:	486f      	ldr	r0, [pc, #444]	; (800e0cc <tcp_connect+0x218>)
 800df0e:	f00a fe93 	bl	8018c38 <iprintf>
 800df12:	f06f 0309 	mvn.w	r3, #9
 800df16:	e0d1      	b.n	800e0bc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <tcp_connect+0x70>
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	e000      	b.n	800df26 <tcp_connect+0x72>
 800df24:	2300      	movs	r3, #0
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	88fa      	ldrh	r2, [r7, #6]
 800df2e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	7a1b      	ldrb	r3, [r3, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d006      	beq.n	800df46 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7a1b      	ldrb	r3, [r3, #8]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fe fbbb 	bl	800c6b8 <netif_get_by_index>
 800df42:	6278      	str	r0, [r7, #36]	; 0x24
 800df44:	e005      	b.n	800df52 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3304      	adds	r3, #4
 800df4a:	4618      	mov	r0, r3
 800df4c:	f009 f96c 	bl	8017228 <ip4_route>
 800df50:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800df58:	f06f 0303 	mvn.w	r3, #3
 800df5c:	e0ae      	b.n	800e0bc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <tcp_connect+0xb8>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d111      	bne.n	800df90 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <tcp_connect+0xc4>
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	3304      	adds	r3, #4
 800df76:	e000      	b.n	800df7a <tcp_connect+0xc6>
 800df78:	2300      	movs	r3, #0
 800df7a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <tcp_connect+0xd4>
      return ERR_RTE;
 800df82:	f06f 0303 	mvn.w	r3, #3
 800df86:	e099      	b.n	800e0bc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8adb      	ldrh	r3, [r3, #22]
 800df94:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	8adb      	ldrh	r3, [r3, #22]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10c      	bne.n	800dfb8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800df9e:	f7ff ff43 	bl	800de28 <tcp_new_port>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	8adb      	ldrh	r3, [r3, #22]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d102      	bne.n	800dfb8 <tcp_connect+0x104>
      return ERR_BUF;
 800dfb2:	f06f 0301 	mvn.w	r3, #1
 800dfb6:	e081      	b.n	800e0bc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f001 f885 	bl	800f0c8 <tcp_next_iss>
 800dfbe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	1e5a      	subs	r2, r3, #1
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	1e5a      	subs	r2, r3, #1
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	1e5a      	subs	r2, r3, #1
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dfea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e00c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	3304      	adds	r3, #4
 800e016:	461a      	mov	r2, r3
 800e018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e01a:	f001 f87b 	bl	800f114 <tcp_eff_send_mss_netif>
 800e01e:	4603      	mov	r3, r0
 800e020:	461a      	mov	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2201      	movs	r2, #1
 800e02a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e036:	2102      	movs	r1, #2
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f004 fadf 	bl	80125fc <tcp_enqueue_flags>
 800e03e:	4603      	mov	r3, r0
 800e040:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e042:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d136      	bne.n	800e0b8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2202      	movs	r2, #2
 800e04e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e050:	8b7b      	ldrh	r3, [r7, #26]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d021      	beq.n	800e09a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e056:	4b20      	ldr	r3, [pc, #128]	; (800e0d8 <tcp_connect+0x224>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d105      	bne.n	800e06c <tcp_connect+0x1b8>
 800e060:	4b1d      	ldr	r3, [pc, #116]	; (800e0d8 <tcp_connect+0x224>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	4a1c      	ldr	r2, [pc, #112]	; (800e0d8 <tcp_connect+0x224>)
 800e068:	6013      	str	r3, [r2, #0]
 800e06a:	e013      	b.n	800e094 <tcp_connect+0x1e0>
 800e06c:	4b1a      	ldr	r3, [pc, #104]	; (800e0d8 <tcp_connect+0x224>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	623b      	str	r3, [r7, #32]
 800e072:	e00c      	b.n	800e08e <tcp_connect+0x1da>
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d104      	bne.n	800e088 <tcp_connect+0x1d4>
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	68da      	ldr	r2, [r3, #12]
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	60da      	str	r2, [r3, #12]
 800e086:	e005      	b.n	800e094 <tcp_connect+0x1e0>
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	623b      	str	r3, [r7, #32]
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1ef      	bne.n	800e074 <tcp_connect+0x1c0>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e09a:	4b10      	ldr	r3, [pc, #64]	; (800e0dc <tcp_connect+0x228>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	4a0e      	ldr	r2, [pc, #56]	; (800e0dc <tcp_connect+0x228>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	f005 fb0c 	bl	80136c4 <tcp_timer_needed>
 800e0ac:	4b0c      	ldr	r3, [pc, #48]	; (800e0e0 <tcp_connect+0x22c>)
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f004 fb90 	bl	80127d8 <tcp_output>
  }
  return ret;
 800e0b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3728      	adds	r7, #40	; 0x28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	0801b9f8 	.word	0x0801b9f8
 800e0c8:	0801bcd4 	.word	0x0801bcd4
 800e0cc:	0801ba3c 	.word	0x0801ba3c
 800e0d0:	0801bcf0 	.word	0x0801bcf0
 800e0d4:	0801bd0c 	.word	0x0801bd0c
 800e0d8:	200111b4 	.word	0x200111b4
 800e0dc:	200111bc 	.word	0x200111bc
 800e0e0:	200111c4 	.word	0x200111c4

0800e0e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e0e4:	b5b0      	push	{r4, r5, r7, lr}
 800e0e6:	b090      	sub	sp, #64	; 0x40
 800e0e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e0f0:	4b94      	ldr	r3, [pc, #592]	; (800e344 <tcp_slowtmr+0x260>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	4a93      	ldr	r2, [pc, #588]	; (800e344 <tcp_slowtmr+0x260>)
 800e0f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e0fa:	4b93      	ldr	r3, [pc, #588]	; (800e348 <tcp_slowtmr+0x264>)
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	4b91      	ldr	r3, [pc, #580]	; (800e348 <tcp_slowtmr+0x264>)
 800e104:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e106:	2300      	movs	r3, #0
 800e108:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e10a:	4b90      	ldr	r3, [pc, #576]	; (800e34c <tcp_slowtmr+0x268>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e110:	e29f      	b.n	800e652 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	7d1b      	ldrb	r3, [r3, #20]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <tcp_slowtmr+0x44>
 800e11a:	4b8d      	ldr	r3, [pc, #564]	; (800e350 <tcp_slowtmr+0x26c>)
 800e11c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e120:	498c      	ldr	r1, [pc, #560]	; (800e354 <tcp_slowtmr+0x270>)
 800e122:	488d      	ldr	r0, [pc, #564]	; (800e358 <tcp_slowtmr+0x274>)
 800e124:	f00a fd88 	bl	8018c38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d106      	bne.n	800e13e <tcp_slowtmr+0x5a>
 800e130:	4b87      	ldr	r3, [pc, #540]	; (800e350 <tcp_slowtmr+0x26c>)
 800e132:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e136:	4989      	ldr	r1, [pc, #548]	; (800e35c <tcp_slowtmr+0x278>)
 800e138:	4887      	ldr	r0, [pc, #540]	; (800e358 <tcp_slowtmr+0x274>)
 800e13a:	f00a fd7d 	bl	8018c38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	7d1b      	ldrb	r3, [r3, #20]
 800e142:	2b0a      	cmp	r3, #10
 800e144:	d106      	bne.n	800e154 <tcp_slowtmr+0x70>
 800e146:	4b82      	ldr	r3, [pc, #520]	; (800e350 <tcp_slowtmr+0x26c>)
 800e148:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e14c:	4984      	ldr	r1, [pc, #528]	; (800e360 <tcp_slowtmr+0x27c>)
 800e14e:	4882      	ldr	r0, [pc, #520]	; (800e358 <tcp_slowtmr+0x274>)
 800e150:	f00a fd72 	bl	8018c38 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e156:	7f9a      	ldrb	r2, [r3, #30]
 800e158:	4b7b      	ldr	r3, [pc, #492]	; (800e348 <tcp_slowtmr+0x264>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d105      	bne.n	800e16c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e16a:	e272      	b.n	800e652 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e16c:	4b76      	ldr	r3, [pc, #472]	; (800e348 <tcp_slowtmr+0x264>)
 800e16e:	781a      	ldrb	r2, [r3, #0]
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	7d1b      	ldrb	r3, [r3, #20]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d10a      	bne.n	800e19e <tcp_slowtmr+0xba>
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e18e:	2b05      	cmp	r3, #5
 800e190:	d905      	bls.n	800e19e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e196:	3301      	adds	r3, #1
 800e198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e19c:	e11e      	b.n	800e3dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1a4:	2b0b      	cmp	r3, #11
 800e1a6:	d905      	bls.n	800e1b4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1b2:	e113      	b.n	800e3dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d075      	beq.n	800e2aa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <tcp_slowtmr+0xf0>
 800e1c6:	4b62      	ldr	r3, [pc, #392]	; (800e350 <tcp_slowtmr+0x26c>)
 800e1c8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e1cc:	4965      	ldr	r1, [pc, #404]	; (800e364 <tcp_slowtmr+0x280>)
 800e1ce:	4862      	ldr	r0, [pc, #392]	; (800e358 <tcp_slowtmr+0x274>)
 800e1d0:	f00a fd32 	bl	8018c38 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d106      	bne.n	800e1ea <tcp_slowtmr+0x106>
 800e1dc:	4b5c      	ldr	r3, [pc, #368]	; (800e350 <tcp_slowtmr+0x26c>)
 800e1de:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e1e2:	4961      	ldr	r1, [pc, #388]	; (800e368 <tcp_slowtmr+0x284>)
 800e1e4:	485c      	ldr	r0, [pc, #368]	; (800e358 <tcp_slowtmr+0x274>)
 800e1e6:	f00a fd27 	bl	8018c38 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e1f0:	2b0b      	cmp	r3, #11
 800e1f2:	d905      	bls.n	800e200 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1fe:	e0ed      	b.n	800e3dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e202:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e206:	3b01      	subs	r3, #1
 800e208:	4a58      	ldr	r2, [pc, #352]	; (800e36c <tcp_slowtmr+0x288>)
 800e20a:	5cd3      	ldrb	r3, [r2, r3]
 800e20c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e214:	7c7a      	ldrb	r2, [r7, #17]
 800e216:	429a      	cmp	r2, r3
 800e218:	d907      	bls.n	800e22a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e220:	3301      	adds	r3, #1
 800e222:	b2da      	uxtb	r2, r3
 800e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e226:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e230:	7c7a      	ldrb	r2, [r7, #17]
 800e232:	429a      	cmp	r2, r3
 800e234:	f200 80d2 	bhi.w	800e3dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e238:	2301      	movs	r3, #1
 800e23a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e242:	2b00      	cmp	r3, #0
 800e244:	d108      	bne.n	800e258 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e248:	f005 f96e 	bl	8013528 <tcp_zero_window_probe>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d014      	beq.n	800e27c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e252:	2300      	movs	r3, #0
 800e254:	623b      	str	r3, [r7, #32]
 800e256:	e011      	b.n	800e27c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e25e:	4619      	mov	r1, r3
 800e260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e262:	f004 f833 	bl	80122cc <tcp_split_unsent_seg>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d107      	bne.n	800e27c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e26e:	f004 fab3 	bl	80127d8 <tcp_output>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e27c:	6a3b      	ldr	r3, [r7, #32]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 80ac 	beq.w	800e3dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2200      	movs	r2, #0
 800e288:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e292:	2b06      	cmp	r3, #6
 800e294:	f200 80a2 	bhi.w	800e3dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e29e:	3301      	adds	r3, #1
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e2a8:	e098      	b.n	800e3dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	db0f      	blt.n	800e2d4 <tcp_slowtmr+0x1f0>
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d008      	beq.n	800e2d4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	b21a      	sxth	r2, r3
 800e2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	db7b      	blt.n	800e3dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e2e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2e6:	f004 fd6b 	bl	8012dc0 <tcp_rexmit_rto_prepare>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d007      	beq.n	800e300 <tcp_slowtmr+0x21c>
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d171      	bne.n	800e3dc <tcp_slowtmr+0x2f8>
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d06d      	beq.n	800e3dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	7d1b      	ldrb	r3, [r3, #20]
 800e304:	2b02      	cmp	r3, #2
 800e306:	d03a      	beq.n	800e37e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e30e:	2b0c      	cmp	r3, #12
 800e310:	bf28      	it	cs
 800e312:	230c      	movcs	r3, #12
 800e314:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e318:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e31c:	10db      	asrs	r3, r3, #3
 800e31e:	b21b      	sxth	r3, r3
 800e320:	461a      	mov	r2, r3
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e328:	4413      	add	r3, r2
 800e32a:	7efa      	ldrb	r2, [r7, #27]
 800e32c:	4910      	ldr	r1, [pc, #64]	; (800e370 <tcp_slowtmr+0x28c>)
 800e32e:	5c8a      	ldrb	r2, [r1, r2]
 800e330:	4093      	lsls	r3, r2
 800e332:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e33a:	4293      	cmp	r3, r2
 800e33c:	dc1a      	bgt.n	800e374 <tcp_slowtmr+0x290>
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	b21a      	sxth	r2, r3
 800e342:	e019      	b.n	800e378 <tcp_slowtmr+0x294>
 800e344:	200111b0 	.word	0x200111b0
 800e348:	200111c6 	.word	0x200111c6
 800e34c:	200111bc 	.word	0x200111bc
 800e350:	0801b9f8 	.word	0x0801b9f8
 800e354:	0801bd3c 	.word	0x0801bd3c
 800e358:	0801ba3c 	.word	0x0801ba3c
 800e35c:	0801bd68 	.word	0x0801bd68
 800e360:	0801bd94 	.word	0x0801bd94
 800e364:	0801bdc4 	.word	0x0801bdc4
 800e368:	0801bdf8 	.word	0x0801bdf8
 800e36c:	08027eec 	.word	0x08027eec
 800e370:	08027edc 	.word	0x08027edc
 800e374:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	2200      	movs	r2, #0
 800e382:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e390:	4293      	cmp	r3, r2
 800e392:	bf28      	it	cs
 800e394:	4613      	movcs	r3, r2
 800e396:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e398:	8a7b      	ldrh	r3, [r7, #18]
 800e39a:	085b      	lsrs	r3, r3, #1
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d206      	bcs.n	800e3c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3d8:	f004 fd62 	bl	8012ea0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3de:	7d1b      	ldrb	r3, [r3, #20]
 800e3e0:	2b06      	cmp	r3, #6
 800e3e2:	d111      	bne.n	800e408 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	8b5b      	ldrh	r3, [r3, #26]
 800e3e8:	f003 0310 	and.w	r3, r3, #16
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00b      	beq.n	800e408 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3f0:	4b9d      	ldr	r3, [pc, #628]	; (800e668 <tcp_slowtmr+0x584>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	2b28      	cmp	r3, #40	; 0x28
 800e3fc:	d904      	bls.n	800e408 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e402:	3301      	adds	r3, #1
 800e404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	7a5b      	ldrb	r3, [r3, #9]
 800e40c:	f003 0308 	and.w	r3, r3, #8
 800e410:	2b00      	cmp	r3, #0
 800e412:	d04c      	beq.n	800e4ae <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e418:	2b04      	cmp	r3, #4
 800e41a:	d003      	beq.n	800e424 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e420:	2b07      	cmp	r3, #7
 800e422:	d144      	bne.n	800e4ae <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e424:	4b90      	ldr	r3, [pc, #576]	; (800e668 <tcp_slowtmr+0x584>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	6a1b      	ldr	r3, [r3, #32]
 800e42c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e434:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e438:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e43c:	498b      	ldr	r1, [pc, #556]	; (800e66c <tcp_slowtmr+0x588>)
 800e43e:	fba1 1303 	umull	r1, r3, r1, r3
 800e442:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e444:	429a      	cmp	r2, r3
 800e446:	d90a      	bls.n	800e45e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e44c:	3301      	adds	r3, #1
 800e44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e456:	3301      	adds	r3, #1
 800e458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e45c:	e027      	b.n	800e4ae <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e45e:	4b82      	ldr	r3, [pc, #520]	; (800e668 <tcp_slowtmr+0x584>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e474:	4618      	mov	r0, r3
 800e476:	4b7e      	ldr	r3, [pc, #504]	; (800e670 <tcp_slowtmr+0x58c>)
 800e478:	fb00 f303 	mul.w	r3, r0, r3
 800e47c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e47e:	497b      	ldr	r1, [pc, #492]	; (800e66c <tcp_slowtmr+0x588>)
 800e480:	fba1 1303 	umull	r1, r3, r1, r3
 800e484:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e486:	429a      	cmp	r2, r3
 800e488:	d911      	bls.n	800e4ae <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e48c:	f005 f80c 	bl	80134a8 <tcp_keepalive>
 800e490:	4603      	mov	r3, r0
 800e492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e496:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d107      	bne.n	800e4ae <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4aa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d011      	beq.n	800e4da <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e4b6:	4b6c      	ldr	r3, [pc, #432]	; (800e668 <tcp_slowtmr+0x584>)
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	005b      	lsls	r3, r3, #1
 800e4cc:	440b      	add	r3, r1
 800e4ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d302      	bcc.n	800e4da <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e4d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4d6:	f000 fec7 	bl	800f268 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	7d1b      	ldrb	r3, [r3, #20]
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d10b      	bne.n	800e4fa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4e2:	4b61      	ldr	r3, [pc, #388]	; (800e668 <tcp_slowtmr+0x584>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	6a1b      	ldr	r3, [r3, #32]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	2b28      	cmp	r3, #40	; 0x28
 800e4ee:	d904      	bls.n	800e4fa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	7d1b      	ldrb	r3, [r3, #20]
 800e4fe:	2b09      	cmp	r3, #9
 800e500:	d10b      	bne.n	800e51a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e502:	4b59      	ldr	r3, [pc, #356]	; (800e668 <tcp_slowtmr+0x584>)
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	2bf0      	cmp	r3, #240	; 0xf0
 800e50e:	d904      	bls.n	800e51a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e514:	3301      	adds	r3, #1
 800e516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e51a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d060      	beq.n	800e5e4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e528:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e52c:	f000 fce8 	bl	800ef00 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	2b00      	cmp	r3, #0
 800e534:	d010      	beq.n	800e558 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e536:	4b4f      	ldr	r3, [pc, #316]	; (800e674 <tcp_slowtmr+0x590>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d106      	bne.n	800e54e <tcp_slowtmr+0x46a>
 800e540:	4b4d      	ldr	r3, [pc, #308]	; (800e678 <tcp_slowtmr+0x594>)
 800e542:	f240 526d 	movw	r2, #1389	; 0x56d
 800e546:	494d      	ldr	r1, [pc, #308]	; (800e67c <tcp_slowtmr+0x598>)
 800e548:	484d      	ldr	r0, [pc, #308]	; (800e680 <tcp_slowtmr+0x59c>)
 800e54a:	f00a fb75 	bl	8018c38 <iprintf>
        prev->next = pcb->next;
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	68da      	ldr	r2, [r3, #12]
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	60da      	str	r2, [r3, #12]
 800e556:	e00f      	b.n	800e578 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e558:	4b46      	ldr	r3, [pc, #280]	; (800e674 <tcp_slowtmr+0x590>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e55e:	429a      	cmp	r2, r3
 800e560:	d006      	beq.n	800e570 <tcp_slowtmr+0x48c>
 800e562:	4b45      	ldr	r3, [pc, #276]	; (800e678 <tcp_slowtmr+0x594>)
 800e564:	f240 5271 	movw	r2, #1393	; 0x571
 800e568:	4946      	ldr	r1, [pc, #280]	; (800e684 <tcp_slowtmr+0x5a0>)
 800e56a:	4845      	ldr	r0, [pc, #276]	; (800e680 <tcp_slowtmr+0x59c>)
 800e56c:	f00a fb64 	bl	8018c38 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	4a3f      	ldr	r2, [pc, #252]	; (800e674 <tcp_slowtmr+0x590>)
 800e576:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d013      	beq.n	800e5a8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e586:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e588:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58c:	3304      	adds	r3, #4
 800e58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e590:	8ad2      	ldrh	r2, [r2, #22]
 800e592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e594:	8b09      	ldrh	r1, [r1, #24]
 800e596:	9102      	str	r1, [sp, #8]
 800e598:	9201      	str	r2, [sp, #4]
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	462b      	mov	r3, r5
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4601      	mov	r1, r0
 800e5a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5a4:	f004 fecc 	bl	8013340 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b0:	7d1b      	ldrb	r3, [r3, #20]
 800e5b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e5be:	6838      	ldr	r0, [r7, #0]
 800e5c0:	f7fe fec4 	bl	800d34c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e5c4:	4b30      	ldr	r3, [pc, #192]	; (800e688 <tcp_slowtmr+0x5a4>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d004      	beq.n	800e5da <tcp_slowtmr+0x4f6>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f06f 010c 	mvn.w	r1, #12
 800e5d6:	68b8      	ldr	r0, [r7, #8]
 800e5d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e5da:	4b2b      	ldr	r3, [pc, #172]	; (800e688 <tcp_slowtmr+0x5a4>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d037      	beq.n	800e652 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e5e2:	e590      	b.n	800e106 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f0:	7f1b      	ldrb	r3, [r3, #28]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	7f1a      	ldrb	r2, [r3, #28]
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	7f5b      	ldrb	r3, [r3, #29]
 800e602:	429a      	cmp	r2, r3
 800e604:	d325      	bcc.n	800e652 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	2200      	movs	r2, #0
 800e60a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e60c:	4b1e      	ldr	r3, [pc, #120]	; (800e688 <tcp_slowtmr+0x5a4>)
 800e60e:	2200      	movs	r2, #0
 800e610:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00b      	beq.n	800e634 <tcp_slowtmr+0x550>
 800e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e624:	6912      	ldr	r2, [r2, #16]
 800e626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e628:	4610      	mov	r0, r2
 800e62a:	4798      	blx	r3
 800e62c:	4603      	mov	r3, r0
 800e62e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e632:	e002      	b.n	800e63a <tcp_slowtmr+0x556>
 800e634:	2300      	movs	r3, #0
 800e636:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e63a:	4b13      	ldr	r3, [pc, #76]	; (800e688 <tcp_slowtmr+0x5a4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d000      	beq.n	800e644 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e642:	e560      	b.n	800e106 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e644:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e64e:	f004 f8c3 	bl	80127d8 <tcp_output>
  while (pcb != NULL) {
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	2b00      	cmp	r3, #0
 800e656:	f47f ad5c 	bne.w	800e112 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e65e:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <tcp_slowtmr+0x5a8>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e664:	e067      	b.n	800e736 <tcp_slowtmr+0x652>
 800e666:	bf00      	nop
 800e668:	200111b0 	.word	0x200111b0
 800e66c:	10624dd3 	.word	0x10624dd3
 800e670:	000124f8 	.word	0x000124f8
 800e674:	200111bc 	.word	0x200111bc
 800e678:	0801b9f8 	.word	0x0801b9f8
 800e67c:	0801be30 	.word	0x0801be30
 800e680:	0801ba3c 	.word	0x0801ba3c
 800e684:	0801be5c 	.word	0x0801be5c
 800e688:	200111c4 	.word	0x200111c4
 800e68c:	200111c0 	.word	0x200111c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	7d1b      	ldrb	r3, [r3, #20]
 800e694:	2b0a      	cmp	r3, #10
 800e696:	d006      	beq.n	800e6a6 <tcp_slowtmr+0x5c2>
 800e698:	4b2b      	ldr	r3, [pc, #172]	; (800e748 <tcp_slowtmr+0x664>)
 800e69a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e69e:	492b      	ldr	r1, [pc, #172]	; (800e74c <tcp_slowtmr+0x668>)
 800e6a0:	482b      	ldr	r0, [pc, #172]	; (800e750 <tcp_slowtmr+0x66c>)
 800e6a2:	f00a fac9 	bl	8018c38 <iprintf>
    pcb_remove = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6ac:	4b29      	ldr	r3, [pc, #164]	; (800e754 <tcp_slowtmr+0x670>)
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	6a1b      	ldr	r3, [r3, #32]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	2bf0      	cmp	r3, #240	; 0xf0
 800e6b8:	d904      	bls.n	800e6c4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6be:	3301      	adds	r3, #1
 800e6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d02f      	beq.n	800e72c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e6cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ce:	f000 fc17 	bl	800ef00 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d010      	beq.n	800e6fa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e6d8:	4b1f      	ldr	r3, [pc, #124]	; (800e758 <tcp_slowtmr+0x674>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d106      	bne.n	800e6f0 <tcp_slowtmr+0x60c>
 800e6e2:	4b19      	ldr	r3, [pc, #100]	; (800e748 <tcp_slowtmr+0x664>)
 800e6e4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e6e8:	491c      	ldr	r1, [pc, #112]	; (800e75c <tcp_slowtmr+0x678>)
 800e6ea:	4819      	ldr	r0, [pc, #100]	; (800e750 <tcp_slowtmr+0x66c>)
 800e6ec:	f00a faa4 	bl	8018c38 <iprintf>
        prev->next = pcb->next;
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	68da      	ldr	r2, [r3, #12]
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	60da      	str	r2, [r3, #12]
 800e6f8:	e00f      	b.n	800e71a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e6fa:	4b17      	ldr	r3, [pc, #92]	; (800e758 <tcp_slowtmr+0x674>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e700:	429a      	cmp	r2, r3
 800e702:	d006      	beq.n	800e712 <tcp_slowtmr+0x62e>
 800e704:	4b10      	ldr	r3, [pc, #64]	; (800e748 <tcp_slowtmr+0x664>)
 800e706:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e70a:	4915      	ldr	r1, [pc, #84]	; (800e760 <tcp_slowtmr+0x67c>)
 800e70c:	4810      	ldr	r0, [pc, #64]	; (800e750 <tcp_slowtmr+0x66c>)
 800e70e:	f00a fa93 	bl	8018c38 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	4a10      	ldr	r2, [pc, #64]	; (800e758 <tcp_slowtmr+0x674>)
 800e718:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e724:	69f8      	ldr	r0, [r7, #28]
 800e726:	f7fe fe11 	bl	800d34c <tcp_free>
 800e72a:	e004      	b.n	800e736 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1a9      	bne.n	800e690 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e73c:	bf00      	nop
 800e73e:	bf00      	nop
 800e740:	3730      	adds	r7, #48	; 0x30
 800e742:	46bd      	mov	sp, r7
 800e744:	bdb0      	pop	{r4, r5, r7, pc}
 800e746:	bf00      	nop
 800e748:	0801b9f8 	.word	0x0801b9f8
 800e74c:	0801be88 	.word	0x0801be88
 800e750:	0801ba3c 	.word	0x0801ba3c
 800e754:	200111b0 	.word	0x200111b0
 800e758:	200111c0 	.word	0x200111c0
 800e75c:	0801beb8 	.word	0x0801beb8
 800e760:	0801bee0 	.word	0x0801bee0

0800e764 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e76a:	4b2d      	ldr	r3, [pc, #180]	; (800e820 <tcp_fasttmr+0xbc>)
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	3301      	adds	r3, #1
 800e770:	b2da      	uxtb	r2, r3
 800e772:	4b2b      	ldr	r3, [pc, #172]	; (800e820 <tcp_fasttmr+0xbc>)
 800e774:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e776:	4b2b      	ldr	r3, [pc, #172]	; (800e824 <tcp_fasttmr+0xc0>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e77c:	e048      	b.n	800e810 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	7f9a      	ldrb	r2, [r3, #30]
 800e782:	4b27      	ldr	r3, [pc, #156]	; (800e820 <tcp_fasttmr+0xbc>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d03f      	beq.n	800e80a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e78a:	4b25      	ldr	r3, [pc, #148]	; (800e820 <tcp_fasttmr+0xbc>)
 800e78c:	781a      	ldrb	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	8b5b      	ldrh	r3, [r3, #26]
 800e796:	f003 0301 	and.w	r3, r3, #1
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d010      	beq.n	800e7c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8b5b      	ldrh	r3, [r3, #26]
 800e7a2:	f043 0302 	orr.w	r3, r3, #2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f004 f813 	bl	80127d8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	8b5b      	ldrh	r3, [r3, #26]
 800e7b6:	f023 0303 	bic.w	r3, r3, #3
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	8b5b      	ldrh	r3, [r3, #26]
 800e7c4:	f003 0308 	and.w	r3, r3, #8
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d009      	beq.n	800e7e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	8b5b      	ldrh	r3, [r3, #26]
 800e7d0:	f023 0308 	bic.w	r3, r3, #8
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7fe ff4a 	bl	800d674 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00a      	beq.n	800e804 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e7ee:	4b0e      	ldr	r3, [pc, #56]	; (800e828 <tcp_fasttmr+0xc4>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 f819 	bl	800e82c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e7fa:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <tcp_fasttmr+0xc4>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d000      	beq.n	800e804 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e802:	e7b8      	b.n	800e776 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	607b      	str	r3, [r7, #4]
 800e808:	e002      	b.n	800e810 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1b3      	bne.n	800e77e <tcp_fasttmr+0x1a>
    }
  }
}
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	200111c6 	.word	0x200111c6
 800e824:	200111bc 	.word	0x200111bc
 800e828:	200111c4 	.word	0x200111c4

0800e82c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e82c:	b590      	push	{r4, r7, lr}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d109      	bne.n	800e84e <tcp_process_refused_data+0x22>
 800e83a:	4b37      	ldr	r3, [pc, #220]	; (800e918 <tcp_process_refused_data+0xec>)
 800e83c:	f240 6209 	movw	r2, #1545	; 0x609
 800e840:	4936      	ldr	r1, [pc, #216]	; (800e91c <tcp_process_refused_data+0xf0>)
 800e842:	4837      	ldr	r0, [pc, #220]	; (800e920 <tcp_process_refused_data+0xf4>)
 800e844:	f00a f9f8 	bl	8018c38 <iprintf>
 800e848:	f06f 030f 	mvn.w	r3, #15
 800e84c:	e060      	b.n	800e910 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e852:	7b5b      	ldrb	r3, [r3, #13]
 800e854:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e85a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <tcp_process_refused_data+0x58>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6918      	ldr	r0, [r3, #16]
 800e876:	2300      	movs	r3, #0
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	6879      	ldr	r1, [r7, #4]
 800e87c:	47a0      	blx	r4
 800e87e:	4603      	mov	r3, r0
 800e880:	73fb      	strb	r3, [r7, #15]
 800e882:	e007      	b.n	800e894 <tcp_process_refused_data+0x68>
 800e884:	2300      	movs	r3, #0
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	6879      	ldr	r1, [r7, #4]
 800e88a:	2000      	movs	r0, #0
 800e88c:	f000 f8c2 	bl	800ea14 <tcp_recv_null>
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d12a      	bne.n	800e8f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e89c:	7bbb      	ldrb	r3, [r7, #14]
 800e89e:	f003 0320 	and.w	r3, r3, #32
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d033      	beq.n	800e90e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8ae:	d005      	beq.n	800e8bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00b      	beq.n	800e8de <tcp_process_refused_data+0xb2>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6918      	ldr	r0, [r3, #16]
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	47a0      	blx	r4
 800e8d8:	4603      	mov	r3, r0
 800e8da:	73fb      	strb	r3, [r7, #15]
 800e8dc:	e001      	b.n	800e8e2 <tcp_process_refused_data+0xb6>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e6:	f113 0f0d 	cmn.w	r3, #13
 800e8ea:	d110      	bne.n	800e90e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e8ec:	f06f 030c 	mvn.w	r3, #12
 800e8f0:	e00e      	b.n	800e910 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8f6:	f113 0f0d 	cmn.w	r3, #13
 800e8fa:	d102      	bne.n	800e902 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e8fc:	f06f 030c 	mvn.w	r3, #12
 800e900:	e006      	b.n	800e910 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68ba      	ldr	r2, [r7, #8]
 800e906:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e908:	f06f 0304 	mvn.w	r3, #4
 800e90c:	e000      	b.n	800e910 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}
 800e918:	0801b9f8 	.word	0x0801b9f8
 800e91c:	0801bf08 	.word	0x0801bf08
 800e920:	0801ba3c 	.word	0x0801ba3c

0800e924 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e92c:	e007      	b.n	800e93e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f80a 	bl	800e94e <tcp_seg_free>
    seg = next;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1f4      	bne.n	800e92e <tcp_segs_free+0xa>
  }
}
 800e944:	bf00      	nop
 800e946:	bf00      	nop
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00c      	beq.n	800e976 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	4618      	mov	r0, r3
 800e96a:	f7fe fa33 	bl	800cdd4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	2003      	movs	r0, #3
 800e972:	f7fd fb7f 	bl	800c074 <memp_free>
  }
}
 800e976:	bf00      	nop
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d107      	bne.n	800e9a2 <tcp_setprio+0x22>
 800e992:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <tcp_setprio+0x30>)
 800e994:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e998:	4906      	ldr	r1, [pc, #24]	; (800e9b4 <tcp_setprio+0x34>)
 800e99a:	4807      	ldr	r0, [pc, #28]	; (800e9b8 <tcp_setprio+0x38>)
 800e99c:	f00a f94c 	bl	8018c38 <iprintf>
 800e9a0:	e002      	b.n	800e9a8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	78fa      	ldrb	r2, [r7, #3]
 800e9a6:	755a      	strb	r2, [r3, #21]
}
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	0801b9f8 	.word	0x0801b9f8
 800e9b4:	0801bf30 	.word	0x0801bf30
 800e9b8:	0801ba3c 	.word	0x0801ba3c

0800e9bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <tcp_seg_copy+0x1c>
 800e9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <tcp_seg_copy+0x4c>)
 800e9cc:	f240 6282 	movw	r2, #1666	; 0x682
 800e9d0:	490e      	ldr	r1, [pc, #56]	; (800ea0c <tcp_seg_copy+0x50>)
 800e9d2:	480f      	ldr	r0, [pc, #60]	; (800ea10 <tcp_seg_copy+0x54>)
 800e9d4:	f00a f930 	bl	8018c38 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e9d8:	2003      	movs	r0, #3
 800e9da:	f7fd fad5 	bl	800bf88 <memp_malloc>
 800e9de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <tcp_seg_copy+0x2e>
    return NULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e00a      	b.n	800ea00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e9ea:	2210      	movs	r2, #16
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f00a fc12 	bl	8019218 <memcpy>
  pbuf_ref(cseg->p);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fe fa91 	bl	800cf20 <pbuf_ref>
  return cseg;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	0801b9f8 	.word	0x0801b9f8
 800ea0c:	0801bf4c 	.word	0x0801bf4c
 800ea10:	0801ba3c 	.word	0x0801ba3c

0800ea14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
 800ea20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d109      	bne.n	800ea3c <tcp_recv_null+0x28>
 800ea28:	4b12      	ldr	r3, [pc, #72]	; (800ea74 <tcp_recv_null+0x60>)
 800ea2a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea2e:	4912      	ldr	r1, [pc, #72]	; (800ea78 <tcp_recv_null+0x64>)
 800ea30:	4812      	ldr	r0, [pc, #72]	; (800ea7c <tcp_recv_null+0x68>)
 800ea32:	f00a f901 	bl	8018c38 <iprintf>
 800ea36:	f06f 030f 	mvn.w	r3, #15
 800ea3a:	e016      	b.n	800ea6a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	891b      	ldrh	r3, [r3, #8]
 800ea46:	4619      	mov	r1, r3
 800ea48:	68b8      	ldr	r0, [r7, #8]
 800ea4a:	f7ff f99d 	bl	800dd88 <tcp_recved>
    pbuf_free(p);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7fe f9c0 	bl	800cdd4 <pbuf_free>
 800ea54:	e008      	b.n	800ea68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d104      	bne.n	800ea68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea5e:	68b8      	ldr	r0, [r7, #8]
 800ea60:	f7fe fe72 	bl	800d748 <tcp_close>
 800ea64:	4603      	mov	r3, r0
 800ea66:	e000      	b.n	800ea6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	0801b9f8 	.word	0x0801b9f8
 800ea78:	0801bf68 	.word	0x0801bf68
 800ea7c:	0801ba3c 	.word	0x0801ba3c

0800ea80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ea8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	db01      	blt.n	800ea96 <tcp_kill_prio+0x16>
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	e000      	b.n	800ea98 <tcp_kill_prio+0x18>
 800ea96:	237f      	movs	r3, #127	; 0x7f
 800ea98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ea9a:	7afb      	ldrb	r3, [r7, #11]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d034      	beq.n	800eb0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eaa0:	7afb      	ldrb	r3, [r7, #11]
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaae:	4b19      	ldr	r3, [pc, #100]	; (800eb14 <tcp_kill_prio+0x94>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	e01f      	b.n	800eaf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	7d5b      	ldrb	r3, [r3, #21]
 800eaba:	7afa      	ldrb	r2, [r7, #11]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d80c      	bhi.n	800eada <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eac4:	7afa      	ldrb	r2, [r7, #11]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d112      	bne.n	800eaf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eaca:	4b13      	ldr	r3, [pc, #76]	; (800eb18 <tcp_kill_prio+0x98>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d80a      	bhi.n	800eaf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eada:	4b0f      	ldr	r3, [pc, #60]	; (800eb18 <tcp_kill_prio+0x98>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	7d5b      	ldrb	r3, [r3, #21]
 800eaee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	617b      	str	r3, [r7, #20]
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1dc      	bne.n	800eab6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d004      	beq.n	800eb0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb02:	6938      	ldr	r0, [r7, #16]
 800eb04:	f7fe ff66 	bl	800d9d4 <tcp_abort>
 800eb08:	e000      	b.n	800eb0c <tcp_kill_prio+0x8c>
    return;
 800eb0a:	bf00      	nop
  }
}
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	200111bc 	.word	0x200111bc
 800eb18:	200111b0 	.word	0x200111b0

0800eb1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	2b08      	cmp	r3, #8
 800eb2a:	d009      	beq.n	800eb40 <tcp_kill_state+0x24>
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	2b09      	cmp	r3, #9
 800eb30:	d006      	beq.n	800eb40 <tcp_kill_state+0x24>
 800eb32:	4b1a      	ldr	r3, [pc, #104]	; (800eb9c <tcp_kill_state+0x80>)
 800eb34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb38:	4919      	ldr	r1, [pc, #100]	; (800eba0 <tcp_kill_state+0x84>)
 800eb3a:	481a      	ldr	r0, [pc, #104]	; (800eba4 <tcp_kill_state+0x88>)
 800eb3c:	f00a f87c 	bl	8018c38 <iprintf>

  inactivity = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb44:	2300      	movs	r3, #0
 800eb46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb48:	4b17      	ldr	r3, [pc, #92]	; (800eba8 <tcp_kill_state+0x8c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	617b      	str	r3, [r7, #20]
 800eb4e:	e017      	b.n	800eb80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	7d1b      	ldrb	r3, [r3, #20]
 800eb54:	79fa      	ldrb	r2, [r7, #7]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d10f      	bne.n	800eb7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb5a:	4b14      	ldr	r3, [pc, #80]	; (800ebac <tcp_kill_state+0x90>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	6a1b      	ldr	r3, [r3, #32]
 800eb62:	1ad3      	subs	r3, r2, r3
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d807      	bhi.n	800eb7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eb6a:	4b10      	ldr	r3, [pc, #64]	; (800ebac <tcp_kill_state+0x90>)
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	617b      	str	r3, [r7, #20]
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e4      	bne.n	800eb50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6938      	ldr	r0, [r7, #16]
 800eb90:	f7fe fe62 	bl	800d858 <tcp_abandon>
  }
}
 800eb94:	bf00      	nop
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	0801b9f8 	.word	0x0801b9f8
 800eba0:	0801bf84 	.word	0x0801bf84
 800eba4:	0801ba3c 	.word	0x0801ba3c
 800eba8:	200111bc 	.word	0x200111bc
 800ebac:	200111b0 	.word	0x200111b0

0800ebb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebbe:	4b12      	ldr	r3, [pc, #72]	; (800ec08 <tcp_kill_timewait+0x58>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	e012      	b.n	800ebec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ebc6:	4b11      	ldr	r3, [pc, #68]	; (800ec0c <tcp_kill_timewait+0x5c>)
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d807      	bhi.n	800ebe6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ebd6:	4b0d      	ldr	r3, [pc, #52]	; (800ec0c <tcp_kill_timewait+0x5c>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e9      	bne.n	800ebc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ebf8:	68b8      	ldr	r0, [r7, #8]
 800ebfa:	f7fe feeb 	bl	800d9d4 <tcp_abort>
  }
}
 800ebfe:	bf00      	nop
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	200111c0 	.word	0x200111c0
 800ec0c:	200111b0 	.word	0x200111b0

0800ec10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec16:	4b10      	ldr	r3, [pc, #64]	; (800ec58 <tcp_handle_closepend+0x48>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec1c:	e014      	b.n	800ec48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	8b5b      	ldrh	r3, [r3, #26]
 800ec28:	f003 0308 	and.w	r3, r3, #8
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d009      	beq.n	800ec44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8b5b      	ldrh	r3, [r3, #26]
 800ec34:	f023 0308 	bic.w	r3, r3, #8
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7fe fd18 	bl	800d674 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e7      	bne.n	800ec1e <tcp_handle_closepend+0xe>
  }
}
 800ec4e:	bf00      	nop
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	200111bc 	.word	0x200111bc

0800ec5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec66:	2001      	movs	r0, #1
 800ec68:	f7fd f98e 	bl	800bf88 <memp_malloc>
 800ec6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d126      	bne.n	800ecc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ec74:	f7ff ffcc 	bl	800ec10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec78:	f7ff ff9a 	bl	800ebb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	f7fd f983 	bl	800bf88 <memp_malloc>
 800ec82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d11b      	bne.n	800ecc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ec8a:	2009      	movs	r0, #9
 800ec8c:	f7ff ff46 	bl	800eb1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec90:	2001      	movs	r0, #1
 800ec92:	f7fd f979 	bl	800bf88 <memp_malloc>
 800ec96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d111      	bne.n	800ecc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ec9e:	2008      	movs	r0, #8
 800eca0:	f7ff ff3c 	bl	800eb1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca4:	2001      	movs	r0, #1
 800eca6:	f7fd f96f 	bl	800bf88 <memp_malloc>
 800ecaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d107      	bne.n	800ecc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff fee3 	bl	800ea80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecba:	2001      	movs	r0, #1
 800ecbc:	f7fd f964 	bl	800bf88 <memp_malloc>
 800ecc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d03f      	beq.n	800ed48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ecc8:	229c      	movs	r2, #156	; 0x9c
 800ecca:	2100      	movs	r1, #0
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f00a f943 	bl	8018f58 <memset>
    pcb->prio = prio;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	79fa      	ldrb	r2, [r7, #7]
 800ecd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ecde:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ece8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	22ff      	movs	r2, #255	; 0xff
 800ecf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ecfe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2206      	movs	r2, #6
 800ed04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2206      	movs	r2, #6
 800ed0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed14:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <tcp_alloc+0xf8>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed26:	4b0c      	ldr	r3, [pc, #48]	; (800ed58 <tcp_alloc+0xfc>)
 800ed28:	781a      	ldrb	r2, [r3, #0]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	4a08      	ldr	r2, [pc, #32]	; (800ed5c <tcp_alloc+0x100>)
 800ed3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	4a07      	ldr	r2, [pc, #28]	; (800ed60 <tcp_alloc+0x104>)
 800ed44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed48:	68fb      	ldr	r3, [r7, #12]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	200111b0 	.word	0x200111b0
 800ed58:	200111c6 	.word	0x200111c6
 800ed5c:	0800ea15 	.word	0x0800ea15
 800ed60:	006ddd00 	.word	0x006ddd00

0800ed64 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ed6e:	2040      	movs	r0, #64	; 0x40
 800ed70:	f7ff ff74 	bl	800ec5c <tcp_alloc>
 800ed74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ed76:	68fb      	ldr	r3, [r7, #12]
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	611a      	str	r2, [r3, #16]
  }
}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
	...

0800eda4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00e      	beq.n	800edd2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	7d1b      	ldrb	r3, [r3, #20]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d106      	bne.n	800edca <tcp_recv+0x26>
 800edbc:	4b07      	ldr	r3, [pc, #28]	; (800eddc <tcp_recv+0x38>)
 800edbe:	f240 72df 	movw	r2, #2015	; 0x7df
 800edc2:	4907      	ldr	r1, [pc, #28]	; (800ede0 <tcp_recv+0x3c>)
 800edc4:	4807      	ldr	r0, [pc, #28]	; (800ede4 <tcp_recv+0x40>)
 800edc6:	f009 ff37 	bl	8018c38 <iprintf>
    pcb->recv = recv;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800edd2:	bf00      	nop
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	0801b9f8 	.word	0x0801b9f8
 800ede0:	0801bf94 	.word	0x0801bf94
 800ede4:	0801ba3c 	.word	0x0801ba3c

0800ede8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00e      	beq.n	800ee16 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	7d1b      	ldrb	r3, [r3, #20]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d106      	bne.n	800ee0e <tcp_sent+0x26>
 800ee00:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <tcp_sent+0x38>)
 800ee02:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ee06:	4907      	ldr	r1, [pc, #28]	; (800ee24 <tcp_sent+0x3c>)
 800ee08:	4807      	ldr	r0, [pc, #28]	; (800ee28 <tcp_sent+0x40>)
 800ee0a:	f009 ff15 	bl	8018c38 <iprintf>
    pcb->sent = sent;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	0801b9f8 	.word	0x0801b9f8
 800ee24:	0801bfbc 	.word	0x0801bfbc
 800ee28:	0801ba3c 	.word	0x0801ba3c

0800ee2c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00e      	beq.n	800ee5a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	7d1b      	ldrb	r3, [r3, #20]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d106      	bne.n	800ee52 <tcp_err+0x26>
 800ee44:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <tcp_err+0x38>)
 800ee46:	f640 020d 	movw	r2, #2061	; 0x80d
 800ee4a:	4907      	ldr	r1, [pc, #28]	; (800ee68 <tcp_err+0x3c>)
 800ee4c:	4807      	ldr	r0, [pc, #28]	; (800ee6c <tcp_err+0x40>)
 800ee4e:	f009 fef3 	bl	8018c38 <iprintf>
    pcb->errf = err;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	683a      	ldr	r2, [r7, #0]
 800ee56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ee5a:	bf00      	nop
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	0801b9f8 	.word	0x0801b9f8
 800ee68:	0801bfe4 	.word	0x0801bfe4
 800ee6c:	0801ba3c 	.word	0x0801ba3c

0800ee70 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b085      	sub	sp, #20
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d008      	beq.n	800ee92 <tcp_accept+0x22>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	7d1b      	ldrb	r3, [r3, #20]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d104      	bne.n	800ee92 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	619a      	str	r2, [r3, #24]
  }
}
 800ee92:	bf00      	nop
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
	...

0800eea0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d107      	bne.n	800eec4 <tcp_poll+0x24>
 800eeb4:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <tcp_poll+0x50>)
 800eeb6:	f640 023d 	movw	r2, #2109	; 0x83d
 800eeba:	490e      	ldr	r1, [pc, #56]	; (800eef4 <tcp_poll+0x54>)
 800eebc:	480e      	ldr	r0, [pc, #56]	; (800eef8 <tcp_poll+0x58>)
 800eebe:	f009 febb 	bl	8018c38 <iprintf>
 800eec2:	e011      	b.n	800eee8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	7d1b      	ldrb	r3, [r3, #20]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d106      	bne.n	800eeda <tcp_poll+0x3a>
 800eecc:	4b08      	ldr	r3, [pc, #32]	; (800eef0 <tcp_poll+0x50>)
 800eece:	f640 023e 	movw	r2, #2110	; 0x83e
 800eed2:	490a      	ldr	r1, [pc, #40]	; (800eefc <tcp_poll+0x5c>)
 800eed4:	4808      	ldr	r0, [pc, #32]	; (800eef8 <tcp_poll+0x58>)
 800eed6:	f009 feaf 	bl	8018c38 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	79fa      	ldrb	r2, [r7, #7]
 800eee6:	775a      	strb	r2, [r3, #29]
}
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	0801b9f8 	.word	0x0801b9f8
 800eef4:	0801c00c 	.word	0x0801c00c
 800eef8:	0801ba3c 	.word	0x0801ba3c
 800eefc:	0801c024 	.word	0x0801c024

0800ef00 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d107      	bne.n	800ef1e <tcp_pcb_purge+0x1e>
 800ef0e:	4b21      	ldr	r3, [pc, #132]	; (800ef94 <tcp_pcb_purge+0x94>)
 800ef10:	f640 0251 	movw	r2, #2129	; 0x851
 800ef14:	4920      	ldr	r1, [pc, #128]	; (800ef98 <tcp_pcb_purge+0x98>)
 800ef16:	4821      	ldr	r0, [pc, #132]	; (800ef9c <tcp_pcb_purge+0x9c>)
 800ef18:	f009 fe8e 	bl	8018c38 <iprintf>
 800ef1c:	e037      	b.n	800ef8e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7d1b      	ldrb	r3, [r3, #20]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d033      	beq.n	800ef8e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef2a:	2b0a      	cmp	r3, #10
 800ef2c:	d02f      	beq.n	800ef8e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d02b      	beq.n	800ef8e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d007      	beq.n	800ef4e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd ff46 	bl	800cdd4 <pbuf_free>
      pcb->refused_data = NULL;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f986 	bl	800f268 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7ff fcdb 	bl	800e924 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff fcd6 	bl	800e924 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	0801b9f8 	.word	0x0801b9f8
 800ef98:	0801c044 	.word	0x0801c044
 800ef9c:	0801ba3c 	.word	0x0801ba3c

0800efa0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d106      	bne.n	800efbe <tcp_pcb_remove+0x1e>
 800efb0:	4b3e      	ldr	r3, [pc, #248]	; (800f0ac <tcp_pcb_remove+0x10c>)
 800efb2:	f640 0283 	movw	r2, #2179	; 0x883
 800efb6:	493e      	ldr	r1, [pc, #248]	; (800f0b0 <tcp_pcb_remove+0x110>)
 800efb8:	483e      	ldr	r0, [pc, #248]	; (800f0b4 <tcp_pcb_remove+0x114>)
 800efba:	f009 fe3d 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <tcp_pcb_remove+0x32>
 800efc4:	4b39      	ldr	r3, [pc, #228]	; (800f0ac <tcp_pcb_remove+0x10c>)
 800efc6:	f640 0284 	movw	r2, #2180	; 0x884
 800efca:	493b      	ldr	r1, [pc, #236]	; (800f0b8 <tcp_pcb_remove+0x118>)
 800efcc:	4839      	ldr	r0, [pc, #228]	; (800f0b4 <tcp_pcb_remove+0x114>)
 800efce:	f009 fe33 	bl	8018c38 <iprintf>

  TCP_RMV(pcblist, pcb);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	683a      	ldr	r2, [r7, #0]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d105      	bne.n	800efe8 <tcp_pcb_remove+0x48>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68da      	ldr	r2, [r3, #12]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	e013      	b.n	800f010 <tcp_pcb_remove+0x70>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	60fb      	str	r3, [r7, #12]
 800efee:	e00c      	b.n	800f00a <tcp_pcb_remove+0x6a>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d104      	bne.n	800f004 <tcp_pcb_remove+0x64>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	68da      	ldr	r2, [r3, #12]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	60da      	str	r2, [r3, #12]
 800f002:	e005      	b.n	800f010 <tcp_pcb_remove+0x70>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	60fb      	str	r3, [r7, #12]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d1ef      	bne.n	800eff0 <tcp_pcb_remove+0x50>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2200      	movs	r2, #0
 800f014:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f016:	6838      	ldr	r0, [r7, #0]
 800f018:	f7ff ff72 	bl	800ef00 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	7d1b      	ldrb	r3, [r3, #20]
 800f020:	2b0a      	cmp	r3, #10
 800f022:	d013      	beq.n	800f04c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d00f      	beq.n	800f04c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	8b5b      	ldrh	r3, [r3, #26]
 800f030:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f034:	2b00      	cmp	r3, #0
 800f036:	d009      	beq.n	800f04c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	8b5b      	ldrh	r3, [r3, #26]
 800f03c:	f043 0302 	orr.w	r3, r3, #2
 800f040:	b29a      	uxth	r2, r3
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f046:	6838      	ldr	r0, [r7, #0]
 800f048:	f003 fbc6 	bl	80127d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	7d1b      	ldrb	r3, [r3, #20]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d020      	beq.n	800f096 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d006      	beq.n	800f06a <tcp_pcb_remove+0xca>
 800f05c:	4b13      	ldr	r3, [pc, #76]	; (800f0ac <tcp_pcb_remove+0x10c>)
 800f05e:	f640 0293 	movw	r2, #2195	; 0x893
 800f062:	4916      	ldr	r1, [pc, #88]	; (800f0bc <tcp_pcb_remove+0x11c>)
 800f064:	4813      	ldr	r0, [pc, #76]	; (800f0b4 <tcp_pcb_remove+0x114>)
 800f066:	f009 fde7 	bl	8018c38 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <tcp_pcb_remove+0xe0>
 800f072:	4b0e      	ldr	r3, [pc, #56]	; (800f0ac <tcp_pcb_remove+0x10c>)
 800f074:	f640 0294 	movw	r2, #2196	; 0x894
 800f078:	4911      	ldr	r1, [pc, #68]	; (800f0c0 <tcp_pcb_remove+0x120>)
 800f07a:	480e      	ldr	r0, [pc, #56]	; (800f0b4 <tcp_pcb_remove+0x114>)
 800f07c:	f009 fddc 	bl	8018c38 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f084:	2b00      	cmp	r3, #0
 800f086:	d006      	beq.n	800f096 <tcp_pcb_remove+0xf6>
 800f088:	4b08      	ldr	r3, [pc, #32]	; (800f0ac <tcp_pcb_remove+0x10c>)
 800f08a:	f640 0296 	movw	r2, #2198	; 0x896
 800f08e:	490d      	ldr	r1, [pc, #52]	; (800f0c4 <tcp_pcb_remove+0x124>)
 800f090:	4808      	ldr	r0, [pc, #32]	; (800f0b4 <tcp_pcb_remove+0x114>)
 800f092:	f009 fdd1 	bl	8018c38 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	2200      	movs	r2, #0
 800f09a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	0801b9f8 	.word	0x0801b9f8
 800f0b0:	0801c060 	.word	0x0801c060
 800f0b4:	0801ba3c 	.word	0x0801ba3c
 800f0b8:	0801c07c 	.word	0x0801c07c
 800f0bc:	0801c09c 	.word	0x0801c09c
 800f0c0:	0801c0b4 	.word	0x0801c0b4
 800f0c4:	0801c0d0 	.word	0x0801c0d0

0800f0c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d106      	bne.n	800f0e4 <tcp_next_iss+0x1c>
 800f0d6:	4b0a      	ldr	r3, [pc, #40]	; (800f100 <tcp_next_iss+0x38>)
 800f0d8:	f640 02af 	movw	r2, #2223	; 0x8af
 800f0dc:	4909      	ldr	r1, [pc, #36]	; (800f104 <tcp_next_iss+0x3c>)
 800f0de:	480a      	ldr	r0, [pc, #40]	; (800f108 <tcp_next_iss+0x40>)
 800f0e0:	f009 fdaa 	bl	8018c38 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f0e4:	4b09      	ldr	r3, [pc, #36]	; (800f10c <tcp_next_iss+0x44>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	4b09      	ldr	r3, [pc, #36]	; (800f110 <tcp_next_iss+0x48>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	4a07      	ldr	r2, [pc, #28]	; (800f10c <tcp_next_iss+0x44>)
 800f0f0:	6013      	str	r3, [r2, #0]
  return iss;
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <tcp_next_iss+0x44>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	0801b9f8 	.word	0x0801b9f8
 800f104:	0801c0e8 	.word	0x0801c0e8
 800f108:	0801ba3c 	.word	0x0801ba3c
 800f10c:	20000028 	.word	0x20000028
 800f110:	200111b0 	.word	0x200111b0

0800f114 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b086      	sub	sp, #24
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d106      	bne.n	800f136 <tcp_eff_send_mss_netif+0x22>
 800f128:	4b14      	ldr	r3, [pc, #80]	; (800f17c <tcp_eff_send_mss_netif+0x68>)
 800f12a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f12e:	4914      	ldr	r1, [pc, #80]	; (800f180 <tcp_eff_send_mss_netif+0x6c>)
 800f130:	4814      	ldr	r0, [pc, #80]	; (800f184 <tcp_eff_send_mss_netif+0x70>)
 800f132:	f009 fd81 	bl	8018c38 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f13c:	89fb      	ldrh	r3, [r7, #14]
 800f13e:	e019      	b.n	800f174 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f144:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f146:	8afb      	ldrh	r3, [r7, #22]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d012      	beq.n	800f172 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f14c:	2328      	movs	r3, #40	; 0x28
 800f14e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f150:	8afa      	ldrh	r2, [r7, #22]
 800f152:	8abb      	ldrh	r3, [r7, #20]
 800f154:	429a      	cmp	r2, r3
 800f156:	d904      	bls.n	800f162 <tcp_eff_send_mss_netif+0x4e>
 800f158:	8afa      	ldrh	r2, [r7, #22]
 800f15a:	8abb      	ldrh	r3, [r7, #20]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	b29b      	uxth	r3, r3
 800f160:	e000      	b.n	800f164 <tcp_eff_send_mss_netif+0x50>
 800f162:	2300      	movs	r3, #0
 800f164:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f166:	8a7a      	ldrh	r2, [r7, #18]
 800f168:	89fb      	ldrh	r3, [r7, #14]
 800f16a:	4293      	cmp	r3, r2
 800f16c:	bf28      	it	cs
 800f16e:	4613      	movcs	r3, r2
 800f170:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f172:	89fb      	ldrh	r3, [r7, #14]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3718      	adds	r7, #24
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	0801b9f8 	.word	0x0801b9f8
 800f180:	0801c104 	.word	0x0801c104
 800f184:	0801ba3c 	.word	0x0801ba3c

0800f188 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d119      	bne.n	800f1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f19c:	4b10      	ldr	r3, [pc, #64]	; (800f1e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f19e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f1a2:	4910      	ldr	r1, [pc, #64]	; (800f1e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f1a4:	4810      	ldr	r0, [pc, #64]	; (800f1e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f1a6:	f009 fd47 	bl	8018c38 <iprintf>

  while (pcb != NULL) {
 800f1aa:	e011      	b.n	800f1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d108      	bne.n	800f1ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7fe fc08 	bl	800d9d4 <tcp_abort>
      pcb = next;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	60fb      	str	r3, [r7, #12]
 800f1c8:	e002      	b.n	800f1d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d1ea      	bne.n	800f1ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1d6:	bf00      	nop
 800f1d8:	bf00      	nop
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	0801b9f8 	.word	0x0801b9f8
 800f1e4:	0801c12c 	.word	0x0801c12c
 800f1e8:	0801ba3c 	.word	0x0801ba3c

0800f1ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d02a      	beq.n	800f252 <tcp_netif_ip_addr_changed+0x66>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d026      	beq.n	800f252 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f204:	4b15      	ldr	r3, [pc, #84]	; (800f25c <tcp_netif_ip_addr_changed+0x70>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff ffbc 	bl	800f188 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f210:	4b13      	ldr	r3, [pc, #76]	; (800f260 <tcp_netif_ip_addr_changed+0x74>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff ffb6 	bl	800f188 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d017      	beq.n	800f252 <tcp_netif_ip_addr_changed+0x66>
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d013      	beq.n	800f252 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f22a:	4b0e      	ldr	r3, [pc, #56]	; (800f264 <tcp_netif_ip_addr_changed+0x78>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	e00c      	b.n	800f24c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d103      	bne.n	800f246 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1ef      	bne.n	800f232 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f252:	bf00      	nop
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	200111bc 	.word	0x200111bc
 800f260:	200111b4 	.word	0x200111b4
 800f264:	200111b8 	.word	0x200111b8

0800f268 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f274:	2b00      	cmp	r3, #0
 800f276:	d007      	beq.n	800f288 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7ff fb51 	bl	800e924 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f288:	bf00      	nop
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f290:	b590      	push	{r4, r7, lr}
 800f292:	b08d      	sub	sp, #52	; 0x34
 800f294:	af04      	add	r7, sp, #16
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d105      	bne.n	800f2ac <tcp_input+0x1c>
 800f2a0:	4b9b      	ldr	r3, [pc, #620]	; (800f510 <tcp_input+0x280>)
 800f2a2:	2283      	movs	r2, #131	; 0x83
 800f2a4:	499b      	ldr	r1, [pc, #620]	; (800f514 <tcp_input+0x284>)
 800f2a6:	489c      	ldr	r0, [pc, #624]	; (800f518 <tcp_input+0x288>)
 800f2a8:	f009 fcc6 	bl	8018c38 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	4a9a      	ldr	r2, [pc, #616]	; (800f51c <tcp_input+0x28c>)
 800f2b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	895b      	ldrh	r3, [r3, #10]
 800f2b8:	2b13      	cmp	r3, #19
 800f2ba:	f240 83d1 	bls.w	800fa60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2be:	4b98      	ldr	r3, [pc, #608]	; (800f520 <tcp_input+0x290>)
 800f2c0:	695b      	ldr	r3, [r3, #20]
 800f2c2:	4a97      	ldr	r2, [pc, #604]	; (800f520 <tcp_input+0x290>)
 800f2c4:	6812      	ldr	r2, [r2, #0]
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f008 fa61 	bl	8017790 <ip4_addr_isbroadcast_u32>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 83c7 	bne.w	800fa64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2d6:	4b92      	ldr	r3, [pc, #584]	; (800f520 <tcp_input+0x290>)
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2de:	2be0      	cmp	r3, #224	; 0xe0
 800f2e0:	f000 83c0 	beq.w	800fa64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f2e4:	4b8d      	ldr	r3, [pc, #564]	; (800f51c <tcp_input+0x28c>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	899b      	ldrh	r3, [r3, #12]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fc f93d 	bl	800b56c <lwip_htons>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	0b1b      	lsrs	r3, r3, #12
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f2fe:	7cbb      	ldrb	r3, [r7, #18]
 800f300:	2b13      	cmp	r3, #19
 800f302:	f240 83b1 	bls.w	800fa68 <tcp_input+0x7d8>
 800f306:	7cbb      	ldrb	r3, [r7, #18]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	891b      	ldrh	r3, [r3, #8]
 800f30e:	429a      	cmp	r2, r3
 800f310:	f200 83aa 	bhi.w	800fa68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f314:	7cbb      	ldrb	r3, [r7, #18]
 800f316:	b29b      	uxth	r3, r3
 800f318:	3b14      	subs	r3, #20
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	4b81      	ldr	r3, [pc, #516]	; (800f524 <tcp_input+0x294>)
 800f31e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f320:	4b81      	ldr	r3, [pc, #516]	; (800f528 <tcp_input+0x298>)
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	895a      	ldrh	r2, [r3, #10]
 800f32a:	7cbb      	ldrb	r3, [r7, #18]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	429a      	cmp	r2, r3
 800f330:	d309      	bcc.n	800f346 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f332:	4b7c      	ldr	r3, [pc, #496]	; (800f524 <tcp_input+0x294>)
 800f334:	881a      	ldrh	r2, [r3, #0]
 800f336:	4b7d      	ldr	r3, [pc, #500]	; (800f52c <tcp_input+0x29c>)
 800f338:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f33a:	7cbb      	ldrb	r3, [r7, #18]
 800f33c:	4619      	mov	r1, r3
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f7fd fcc2 	bl	800ccc8 <pbuf_remove_header>
 800f344:	e04e      	b.n	800f3e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d105      	bne.n	800f35a <tcp_input+0xca>
 800f34e:	4b70      	ldr	r3, [pc, #448]	; (800f510 <tcp_input+0x280>)
 800f350:	22c2      	movs	r2, #194	; 0xc2
 800f352:	4977      	ldr	r1, [pc, #476]	; (800f530 <tcp_input+0x2a0>)
 800f354:	4870      	ldr	r0, [pc, #448]	; (800f518 <tcp_input+0x288>)
 800f356:	f009 fc6f 	bl	8018c38 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f35a:	2114      	movs	r1, #20
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7fd fcb3 	bl	800ccc8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	895a      	ldrh	r2, [r3, #10]
 800f366:	4b71      	ldr	r3, [pc, #452]	; (800f52c <tcp_input+0x29c>)
 800f368:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f36a:	4b6e      	ldr	r3, [pc, #440]	; (800f524 <tcp_input+0x294>)
 800f36c:	881a      	ldrh	r2, [r3, #0]
 800f36e:	4b6f      	ldr	r3, [pc, #444]	; (800f52c <tcp_input+0x29c>)
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	1ad3      	subs	r3, r2, r3
 800f374:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f376:	4b6d      	ldr	r3, [pc, #436]	; (800f52c <tcp_input+0x29c>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7fd fca3 	bl	800ccc8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	895b      	ldrh	r3, [r3, #10]
 800f388:	8a3a      	ldrh	r2, [r7, #16]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	f200 836e 	bhi.w	800fa6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	4a64      	ldr	r2, [pc, #400]	; (800f528 <tcp_input+0x298>)
 800f398:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	8a3a      	ldrh	r2, [r7, #16]
 800f3a0:	4611      	mov	r1, r2
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd fc90 	bl	800ccc8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	891a      	ldrh	r2, [r3, #8]
 800f3ac:	8a3b      	ldrh	r3, [r7, #16]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	895b      	ldrh	r3, [r3, #10]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d005      	beq.n	800f3ca <tcp_input+0x13a>
 800f3be:	4b54      	ldr	r3, [pc, #336]	; (800f510 <tcp_input+0x280>)
 800f3c0:	22df      	movs	r2, #223	; 0xdf
 800f3c2:	495c      	ldr	r1, [pc, #368]	; (800f534 <tcp_input+0x2a4>)
 800f3c4:	4854      	ldr	r0, [pc, #336]	; (800f518 <tcp_input+0x288>)
 800f3c6:	f009 fc37 	bl	8018c38 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	891a      	ldrh	r2, [r3, #8]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	891b      	ldrh	r3, [r3, #8]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d005      	beq.n	800f3e4 <tcp_input+0x154>
 800f3d8:	4b4d      	ldr	r3, [pc, #308]	; (800f510 <tcp_input+0x280>)
 800f3da:	22e0      	movs	r2, #224	; 0xe0
 800f3dc:	4956      	ldr	r1, [pc, #344]	; (800f538 <tcp_input+0x2a8>)
 800f3de:	484e      	ldr	r0, [pc, #312]	; (800f518 <tcp_input+0x288>)
 800f3e0:	f009 fc2a 	bl	8018c38 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f3e4:	4b4d      	ldr	r3, [pc, #308]	; (800f51c <tcp_input+0x28c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	4a4b      	ldr	r2, [pc, #300]	; (800f51c <tcp_input+0x28c>)
 800f3ee:	6814      	ldr	r4, [r2, #0]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fc f8bb 	bl	800b56c <lwip_htons>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f3fa:	4b48      	ldr	r3, [pc, #288]	; (800f51c <tcp_input+0x28c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	885b      	ldrh	r3, [r3, #2]
 800f400:	b29b      	uxth	r3, r3
 800f402:	4a46      	ldr	r2, [pc, #280]	; (800f51c <tcp_input+0x28c>)
 800f404:	6814      	ldr	r4, [r2, #0]
 800f406:	4618      	mov	r0, r3
 800f408:	f7fc f8b0 	bl	800b56c <lwip_htons>
 800f40c:	4603      	mov	r3, r0
 800f40e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f410:	4b42      	ldr	r3, [pc, #264]	; (800f51c <tcp_input+0x28c>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	4a41      	ldr	r2, [pc, #260]	; (800f51c <tcp_input+0x28c>)
 800f418:	6814      	ldr	r4, [r2, #0]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fc f8bb 	bl	800b596 <lwip_htonl>
 800f420:	4603      	mov	r3, r0
 800f422:	6063      	str	r3, [r4, #4]
 800f424:	6863      	ldr	r3, [r4, #4]
 800f426:	4a45      	ldr	r2, [pc, #276]	; (800f53c <tcp_input+0x2ac>)
 800f428:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f42a:	4b3c      	ldr	r3, [pc, #240]	; (800f51c <tcp_input+0x28c>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	4a3a      	ldr	r2, [pc, #232]	; (800f51c <tcp_input+0x28c>)
 800f432:	6814      	ldr	r4, [r2, #0]
 800f434:	4618      	mov	r0, r3
 800f436:	f7fc f8ae 	bl	800b596 <lwip_htonl>
 800f43a:	4603      	mov	r3, r0
 800f43c:	60a3      	str	r3, [r4, #8]
 800f43e:	68a3      	ldr	r3, [r4, #8]
 800f440:	4a3f      	ldr	r2, [pc, #252]	; (800f540 <tcp_input+0x2b0>)
 800f442:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f444:	4b35      	ldr	r3, [pc, #212]	; (800f51c <tcp_input+0x28c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	89db      	ldrh	r3, [r3, #14]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4a33      	ldr	r2, [pc, #204]	; (800f51c <tcp_input+0x28c>)
 800f44e:	6814      	ldr	r4, [r2, #0]
 800f450:	4618      	mov	r0, r3
 800f452:	f7fc f88b 	bl	800b56c <lwip_htons>
 800f456:	4603      	mov	r3, r0
 800f458:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f45a:	4b30      	ldr	r3, [pc, #192]	; (800f51c <tcp_input+0x28c>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	899b      	ldrh	r3, [r3, #12]
 800f460:	b29b      	uxth	r3, r3
 800f462:	4618      	mov	r0, r3
 800f464:	f7fc f882 	bl	800b56c <lwip_htons>
 800f468:	4603      	mov	r3, r0
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f470:	b2da      	uxtb	r2, r3
 800f472:	4b34      	ldr	r3, [pc, #208]	; (800f544 <tcp_input+0x2b4>)
 800f474:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	891a      	ldrh	r2, [r3, #8]
 800f47a:	4b33      	ldr	r3, [pc, #204]	; (800f548 <tcp_input+0x2b8>)
 800f47c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f47e:	4b31      	ldr	r3, [pc, #196]	; (800f544 <tcp_input+0x2b4>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	f003 0303 	and.w	r3, r3, #3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d00c      	beq.n	800f4a4 <tcp_input+0x214>
    tcplen++;
 800f48a:	4b2f      	ldr	r3, [pc, #188]	; (800f548 <tcp_input+0x2b8>)
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	3301      	adds	r3, #1
 800f490:	b29a      	uxth	r2, r3
 800f492:	4b2d      	ldr	r3, [pc, #180]	; (800f548 <tcp_input+0x2b8>)
 800f494:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	891a      	ldrh	r2, [r3, #8]
 800f49a:	4b2b      	ldr	r3, [pc, #172]	; (800f548 <tcp_input+0x2b8>)
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	f200 82e6 	bhi.w	800fa70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4a8:	4b28      	ldr	r3, [pc, #160]	; (800f54c <tcp_input+0x2bc>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	61fb      	str	r3, [r7, #28]
 800f4ae:	e09d      	b.n	800f5ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d105      	bne.n	800f4c4 <tcp_input+0x234>
 800f4b8:	4b15      	ldr	r3, [pc, #84]	; (800f510 <tcp_input+0x280>)
 800f4ba:	22fb      	movs	r2, #251	; 0xfb
 800f4bc:	4924      	ldr	r1, [pc, #144]	; (800f550 <tcp_input+0x2c0>)
 800f4be:	4816      	ldr	r0, [pc, #88]	; (800f518 <tcp_input+0x288>)
 800f4c0:	f009 fbba 	bl	8018c38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	7d1b      	ldrb	r3, [r3, #20]
 800f4c8:	2b0a      	cmp	r3, #10
 800f4ca:	d105      	bne.n	800f4d8 <tcp_input+0x248>
 800f4cc:	4b10      	ldr	r3, [pc, #64]	; (800f510 <tcp_input+0x280>)
 800f4ce:	22fc      	movs	r2, #252	; 0xfc
 800f4d0:	4920      	ldr	r1, [pc, #128]	; (800f554 <tcp_input+0x2c4>)
 800f4d2:	4811      	ldr	r0, [pc, #68]	; (800f518 <tcp_input+0x288>)
 800f4d4:	f009 fbb0 	bl	8018c38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	7d1b      	ldrb	r3, [r3, #20]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d105      	bne.n	800f4ec <tcp_input+0x25c>
 800f4e0:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <tcp_input+0x280>)
 800f4e2:	22fd      	movs	r2, #253	; 0xfd
 800f4e4:	491c      	ldr	r1, [pc, #112]	; (800f558 <tcp_input+0x2c8>)
 800f4e6:	480c      	ldr	r0, [pc, #48]	; (800f518 <tcp_input+0x288>)
 800f4e8:	f009 fba6 	bl	8018c38 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	7a1b      	ldrb	r3, [r3, #8]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d033      	beq.n	800f55c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	7a1a      	ldrb	r2, [r3, #8]
 800f4f8:	4b09      	ldr	r3, [pc, #36]	; (800f520 <tcp_input+0x290>)
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f500:	3301      	adds	r3, #1
 800f502:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f504:	429a      	cmp	r2, r3
 800f506:	d029      	beq.n	800f55c <tcp_input+0x2cc>
      prev = pcb;
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	61bb      	str	r3, [r7, #24]
      continue;
 800f50c:	e06b      	b.n	800f5e6 <tcp_input+0x356>
 800f50e:	bf00      	nop
 800f510:	0801c160 	.word	0x0801c160
 800f514:	0801c194 	.word	0x0801c194
 800f518:	0801c1ac 	.word	0x0801c1ac
 800f51c:	200111d8 	.word	0x200111d8
 800f520:	2000da3c 	.word	0x2000da3c
 800f524:	200111dc 	.word	0x200111dc
 800f528:	200111e0 	.word	0x200111e0
 800f52c:	200111de 	.word	0x200111de
 800f530:	0801c1d4 	.word	0x0801c1d4
 800f534:	0801c1e4 	.word	0x0801c1e4
 800f538:	0801c1f0 	.word	0x0801c1f0
 800f53c:	200111e8 	.word	0x200111e8
 800f540:	200111ec 	.word	0x200111ec
 800f544:	200111f4 	.word	0x200111f4
 800f548:	200111f2 	.word	0x200111f2
 800f54c:	200111bc 	.word	0x200111bc
 800f550:	0801c210 	.word	0x0801c210
 800f554:	0801c238 	.word	0x0801c238
 800f558:	0801c264 	.word	0x0801c264
    }

    if (pcb->remote_port == tcphdr->src &&
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	8b1a      	ldrh	r2, [r3, #24]
 800f560:	4b72      	ldr	r3, [pc, #456]	; (800f72c <tcp_input+0x49c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	b29b      	uxth	r3, r3
 800f568:	429a      	cmp	r2, r3
 800f56a:	d13a      	bne.n	800f5e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	8ada      	ldrh	r2, [r3, #22]
 800f570:	4b6e      	ldr	r3, [pc, #440]	; (800f72c <tcp_input+0x49c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	885b      	ldrh	r3, [r3, #2]
 800f576:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f578:	429a      	cmp	r2, r3
 800f57a:	d132      	bne.n	800f5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	685a      	ldr	r2, [r3, #4]
 800f580:	4b6b      	ldr	r3, [pc, #428]	; (800f730 <tcp_input+0x4a0>)
 800f582:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f584:	429a      	cmp	r2, r3
 800f586:	d12c      	bne.n	800f5e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	4b68      	ldr	r3, [pc, #416]	; (800f730 <tcp_input+0x4a0>)
 800f58e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f590:	429a      	cmp	r2, r3
 800f592:	d126      	bne.n	800f5e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d106      	bne.n	800f5ac <tcp_input+0x31c>
 800f59e:	4b65      	ldr	r3, [pc, #404]	; (800f734 <tcp_input+0x4a4>)
 800f5a0:	f240 120d 	movw	r2, #269	; 0x10d
 800f5a4:	4964      	ldr	r1, [pc, #400]	; (800f738 <tcp_input+0x4a8>)
 800f5a6:	4865      	ldr	r0, [pc, #404]	; (800f73c <tcp_input+0x4ac>)
 800f5a8:	f009 fb46 	bl	8018c38 <iprintf>
      if (prev != NULL) {
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00a      	beq.n	800f5c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	68da      	ldr	r2, [r3, #12]
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5ba:	4b61      	ldr	r3, [pc, #388]	; (800f740 <tcp_input+0x4b0>)
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5c2:	4a5f      	ldr	r2, [pc, #380]	; (800f740 <tcp_input+0x4b0>)
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	69fa      	ldr	r2, [r7, #28]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d111      	bne.n	800f5f6 <tcp_input+0x366>
 800f5d2:	4b58      	ldr	r3, [pc, #352]	; (800f734 <tcp_input+0x4a4>)
 800f5d4:	f240 1215 	movw	r2, #277	; 0x115
 800f5d8:	495a      	ldr	r1, [pc, #360]	; (800f744 <tcp_input+0x4b4>)
 800f5da:	4858      	ldr	r0, [pc, #352]	; (800f73c <tcp_input+0x4ac>)
 800f5dc:	f009 fb2c 	bl	8018c38 <iprintf>
      break;
 800f5e0:	e009      	b.n	800f5f6 <tcp_input+0x366>
    }
    prev = pcb;
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	61fb      	str	r3, [r7, #28]
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f47f af5e 	bne.w	800f4b0 <tcp_input+0x220>
 800f5f4:	e000      	b.n	800f5f8 <tcp_input+0x368>
      break;
 800f5f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f040 80aa 	bne.w	800f754 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f600:	4b51      	ldr	r3, [pc, #324]	; (800f748 <tcp_input+0x4b8>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	61fb      	str	r3, [r7, #28]
 800f606:	e03f      	b.n	800f688 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	7d1b      	ldrb	r3, [r3, #20]
 800f60c:	2b0a      	cmp	r3, #10
 800f60e:	d006      	beq.n	800f61e <tcp_input+0x38e>
 800f610:	4b48      	ldr	r3, [pc, #288]	; (800f734 <tcp_input+0x4a4>)
 800f612:	f240 121f 	movw	r2, #287	; 0x11f
 800f616:	494d      	ldr	r1, [pc, #308]	; (800f74c <tcp_input+0x4bc>)
 800f618:	4848      	ldr	r0, [pc, #288]	; (800f73c <tcp_input+0x4ac>)
 800f61a:	f009 fb0d 	bl	8018c38 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	7a1b      	ldrb	r3, [r3, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d009      	beq.n	800f63a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	7a1a      	ldrb	r2, [r3, #8]
 800f62a:	4b41      	ldr	r3, [pc, #260]	; (800f730 <tcp_input+0x4a0>)
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f632:	3301      	adds	r3, #1
 800f634:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f636:	429a      	cmp	r2, r3
 800f638:	d122      	bne.n	800f680 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	8b1a      	ldrh	r2, [r3, #24]
 800f63e:	4b3b      	ldr	r3, [pc, #236]	; (800f72c <tcp_input+0x49c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	b29b      	uxth	r3, r3
 800f646:	429a      	cmp	r2, r3
 800f648:	d11b      	bne.n	800f682 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	8ada      	ldrh	r2, [r3, #22]
 800f64e:	4b37      	ldr	r3, [pc, #220]	; (800f72c <tcp_input+0x49c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	885b      	ldrh	r3, [r3, #2]
 800f654:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f656:	429a      	cmp	r2, r3
 800f658:	d113      	bne.n	800f682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	4b34      	ldr	r3, [pc, #208]	; (800f730 <tcp_input+0x4a0>)
 800f660:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f662:	429a      	cmp	r2, r3
 800f664:	d10d      	bne.n	800f682 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	4b31      	ldr	r3, [pc, #196]	; (800f730 <tcp_input+0x4a0>)
 800f66c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f66e:	429a      	cmp	r2, r3
 800f670:	d107      	bne.n	800f682 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f672:	69f8      	ldr	r0, [r7, #28]
 800f674:	f000 fb56 	bl	800fd24 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7fd fbab 	bl	800cdd4 <pbuf_free>
        return;
 800f67e:	e1fd      	b.n	800fa7c <tcp_input+0x7ec>
        continue;
 800f680:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1bc      	bne.n	800f608 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f692:	4b2f      	ldr	r3, [pc, #188]	; (800f750 <tcp_input+0x4c0>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	617b      	str	r3, [r7, #20]
 800f698:	e02a      	b.n	800f6f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	7a1b      	ldrb	r3, [r3, #8]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00c      	beq.n	800f6bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	7a1a      	ldrb	r2, [r3, #8]
 800f6a6:	4b22      	ldr	r3, [pc, #136]	; (800f730 <tcp_input+0x4a0>)
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d002      	beq.n	800f6bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	61bb      	str	r3, [r7, #24]
        continue;
 800f6ba:	e016      	b.n	800f6ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	8ada      	ldrh	r2, [r3, #22]
 800f6c0:	4b1a      	ldr	r3, [pc, #104]	; (800f72c <tcp_input+0x49c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	885b      	ldrh	r3, [r3, #2]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d10c      	bne.n	800f6e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	4b17      	ldr	r3, [pc, #92]	; (800f730 <tcp_input+0x4a0>)
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d00f      	beq.n	800f6f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00d      	beq.n	800f6fa <tcp_input+0x46a>
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d009      	beq.n	800f6fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1d1      	bne.n	800f69a <tcp_input+0x40a>
 800f6f6:	e000      	b.n	800f6fa <tcp_input+0x46a>
            break;
 800f6f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d029      	beq.n	800f754 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00a      	beq.n	800f71c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	68da      	ldr	r2, [r3, #12]
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f70e:	4b10      	ldr	r3, [pc, #64]	; (800f750 <tcp_input+0x4c0>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f716:	4a0e      	ldr	r2, [pc, #56]	; (800f750 <tcp_input+0x4c0>)
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f71c:	6978      	ldr	r0, [r7, #20]
 800f71e:	f000 fa03 	bl	800fb28 <tcp_listen_input>
      }
      pbuf_free(p);
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7fd fb56 	bl	800cdd4 <pbuf_free>
      return;
 800f728:	e1a8      	b.n	800fa7c <tcp_input+0x7ec>
 800f72a:	bf00      	nop
 800f72c:	200111d8 	.word	0x200111d8
 800f730:	2000da3c 	.word	0x2000da3c
 800f734:	0801c160 	.word	0x0801c160
 800f738:	0801c28c 	.word	0x0801c28c
 800f73c:	0801c1ac 	.word	0x0801c1ac
 800f740:	200111bc 	.word	0x200111bc
 800f744:	0801c2b8 	.word	0x0801c2b8
 800f748:	200111c0 	.word	0x200111c0
 800f74c:	0801c2e4 	.word	0x0801c2e4
 800f750:	200111b8 	.word	0x200111b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8158 	beq.w	800fa0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f75c:	4b95      	ldr	r3, [pc, #596]	; (800f9b4 <tcp_input+0x724>)
 800f75e:	2200      	movs	r2, #0
 800f760:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	891a      	ldrh	r2, [r3, #8]
 800f766:	4b93      	ldr	r3, [pc, #588]	; (800f9b4 <tcp_input+0x724>)
 800f768:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f76a:	4a92      	ldr	r2, [pc, #584]	; (800f9b4 <tcp_input+0x724>)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f770:	4b91      	ldr	r3, [pc, #580]	; (800f9b8 <tcp_input+0x728>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a8f      	ldr	r2, [pc, #572]	; (800f9b4 <tcp_input+0x724>)
 800f776:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f778:	4b90      	ldr	r3, [pc, #576]	; (800f9bc <tcp_input+0x72c>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f77e:	4b90      	ldr	r3, [pc, #576]	; (800f9c0 <tcp_input+0x730>)
 800f780:	2200      	movs	r2, #0
 800f782:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f784:	4b8f      	ldr	r3, [pc, #572]	; (800f9c4 <tcp_input+0x734>)
 800f786:	2200      	movs	r2, #0
 800f788:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f78a:	4b8f      	ldr	r3, [pc, #572]	; (800f9c8 <tcp_input+0x738>)
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	f003 0308 	and.w	r3, r3, #8
 800f792:	2b00      	cmp	r3, #0
 800f794:	d006      	beq.n	800f7a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	7b5b      	ldrb	r3, [r3, #13]
 800f79a:	f043 0301 	orr.w	r3, r3, #1
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d017      	beq.n	800f7dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7ac:	69f8      	ldr	r0, [r7, #28]
 800f7ae:	f7ff f83d 	bl	800e82c <tcp_process_refused_data>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	f113 0f0d 	cmn.w	r3, #13
 800f7b8:	d007      	beq.n	800f7ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00c      	beq.n	800f7dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7c2:	4b82      	ldr	r3, [pc, #520]	; (800f9cc <tcp_input+0x73c>)
 800f7c4:	881b      	ldrh	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d008      	beq.n	800f7dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f040 80e3 	bne.w	800f99a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7d4:	69f8      	ldr	r0, [r7, #28]
 800f7d6:	f003 fe05 	bl	80133e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7da:	e0de      	b.n	800f99a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f7dc:	4a7c      	ldr	r2, [pc, #496]	; (800f9d0 <tcp_input+0x740>)
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f7e2:	69f8      	ldr	r0, [r7, #28]
 800f7e4:	f000 fb18 	bl	800fe18 <tcp_process>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7f0:	f113 0f0d 	cmn.w	r3, #13
 800f7f4:	f000 80d3 	beq.w	800f99e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f7f8:	4b71      	ldr	r3, [pc, #452]	; (800f9c0 <tcp_input+0x730>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	f003 0308 	and.w	r3, r3, #8
 800f800:	2b00      	cmp	r3, #0
 800f802:	d015      	beq.n	800f830 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d008      	beq.n	800f820 <tcp_input+0x590>
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f814:	69fa      	ldr	r2, [r7, #28]
 800f816:	6912      	ldr	r2, [r2, #16]
 800f818:	f06f 010d 	mvn.w	r1, #13
 800f81c:	4610      	mov	r0, r2
 800f81e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f820:	69f9      	ldr	r1, [r7, #28]
 800f822:	486c      	ldr	r0, [pc, #432]	; (800f9d4 <tcp_input+0x744>)
 800f824:	f7ff fbbc 	bl	800efa0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f828:	69f8      	ldr	r0, [r7, #28]
 800f82a:	f7fd fd8f 	bl	800d34c <tcp_free>
 800f82e:	e0da      	b.n	800f9e6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f834:	4b63      	ldr	r3, [pc, #396]	; (800f9c4 <tcp_input+0x734>)
 800f836:	881b      	ldrh	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d01d      	beq.n	800f878 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f83c:	4b61      	ldr	r3, [pc, #388]	; (800f9c4 <tcp_input+0x734>)
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00a      	beq.n	800f862 <tcp_input+0x5d2>
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f852:	69fa      	ldr	r2, [r7, #28]
 800f854:	6910      	ldr	r0, [r2, #16]
 800f856:	89fa      	ldrh	r2, [r7, #14]
 800f858:	69f9      	ldr	r1, [r7, #28]
 800f85a:	4798      	blx	r3
 800f85c:	4603      	mov	r3, r0
 800f85e:	74fb      	strb	r3, [r7, #19]
 800f860:	e001      	b.n	800f866 <tcp_input+0x5d6>
 800f862:	2300      	movs	r3, #0
 800f864:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f86a:	f113 0f0d 	cmn.w	r3, #13
 800f86e:	f000 8098 	beq.w	800f9a2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f872:	4b54      	ldr	r3, [pc, #336]	; (800f9c4 <tcp_input+0x734>)
 800f874:	2200      	movs	r2, #0
 800f876:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f878:	69f8      	ldr	r0, [r7, #28]
 800f87a:	f000 f915 	bl	800faa8 <tcp_input_delayed_close>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	f040 8090 	bne.w	800f9a6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f886:	4b4d      	ldr	r3, [pc, #308]	; (800f9bc <tcp_input+0x72c>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d041      	beq.n	800f912 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f892:	2b00      	cmp	r3, #0
 800f894:	d006      	beq.n	800f8a4 <tcp_input+0x614>
 800f896:	4b50      	ldr	r3, [pc, #320]	; (800f9d8 <tcp_input+0x748>)
 800f898:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f89c:	494f      	ldr	r1, [pc, #316]	; (800f9dc <tcp_input+0x74c>)
 800f89e:	4850      	ldr	r0, [pc, #320]	; (800f9e0 <tcp_input+0x750>)
 800f8a0:	f009 f9ca 	bl	8018c38 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	8b5b      	ldrh	r3, [r3, #26]
 800f8a8:	f003 0310 	and.w	r3, r3, #16
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d008      	beq.n	800f8c2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f8b0:	4b42      	ldr	r3, [pc, #264]	; (800f9bc <tcp_input+0x72c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd fa8d 	bl	800cdd4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f8ba:	69f8      	ldr	r0, [r7, #28]
 800f8bc:	f7fe f88a 	bl	800d9d4 <tcp_abort>
            goto aborted;
 800f8c0:	e091      	b.n	800f9e6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00c      	beq.n	800f8e6 <tcp_input+0x656>
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	6918      	ldr	r0, [r3, #16]
 800f8d6:	4b39      	ldr	r3, [pc, #228]	; (800f9bc <tcp_input+0x72c>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	2300      	movs	r3, #0
 800f8dc:	69f9      	ldr	r1, [r7, #28]
 800f8de:	47a0      	blx	r4
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	74fb      	strb	r3, [r7, #19]
 800f8e4:	e008      	b.n	800f8f8 <tcp_input+0x668>
 800f8e6:	4b35      	ldr	r3, [pc, #212]	; (800f9bc <tcp_input+0x72c>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	69f9      	ldr	r1, [r7, #28]
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	f7ff f890 	bl	800ea14 <tcp_recv_null>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f8f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8fc:	f113 0f0d 	cmn.w	r3, #13
 800f900:	d053      	beq.n	800f9aa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f90a:	4b2c      	ldr	r3, [pc, #176]	; (800f9bc <tcp_input+0x72c>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f912:	4b2b      	ldr	r3, [pc, #172]	; (800f9c0 <tcp_input+0x730>)
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	f003 0320 	and.w	r3, r3, #32
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d030      	beq.n	800f980 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f922:	2b00      	cmp	r3, #0
 800f924:	d009      	beq.n	800f93a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f92a:	7b5a      	ldrb	r2, [r3, #13]
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f930:	f042 0220 	orr.w	r2, r2, #32
 800f934:	b2d2      	uxtb	r2, r2
 800f936:	735a      	strb	r2, [r3, #13]
 800f938:	e022      	b.n	800f980 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f93e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f942:	d005      	beq.n	800f950 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f948:	3301      	adds	r3, #1
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <tcp_input+0x6e2>
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	6918      	ldr	r0, [r3, #16]
 800f964:	2300      	movs	r3, #0
 800f966:	2200      	movs	r2, #0
 800f968:	69f9      	ldr	r1, [r7, #28]
 800f96a:	47a0      	blx	r4
 800f96c:	4603      	mov	r3, r0
 800f96e:	74fb      	strb	r3, [r7, #19]
 800f970:	e001      	b.n	800f976 <tcp_input+0x6e6>
 800f972:	2300      	movs	r3, #0
 800f974:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f976:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f97a:	f113 0f0d 	cmn.w	r3, #13
 800f97e:	d016      	beq.n	800f9ae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f980:	4b13      	ldr	r3, [pc, #76]	; (800f9d0 <tcp_input+0x740>)
 800f982:	2200      	movs	r2, #0
 800f984:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f986:	69f8      	ldr	r0, [r7, #28]
 800f988:	f000 f88e 	bl	800faa8 <tcp_input_delayed_close>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d128      	bne.n	800f9e4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f992:	69f8      	ldr	r0, [r7, #28]
 800f994:	f002 ff20 	bl	80127d8 <tcp_output>
 800f998:	e025      	b.n	800f9e6 <tcp_input+0x756>
        goto aborted;
 800f99a:	bf00      	nop
 800f99c:	e023      	b.n	800f9e6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f99e:	bf00      	nop
 800f9a0:	e021      	b.n	800f9e6 <tcp_input+0x756>
              goto aborted;
 800f9a2:	bf00      	nop
 800f9a4:	e01f      	b.n	800f9e6 <tcp_input+0x756>
          goto aborted;
 800f9a6:	bf00      	nop
 800f9a8:	e01d      	b.n	800f9e6 <tcp_input+0x756>
            goto aborted;
 800f9aa:	bf00      	nop
 800f9ac:	e01b      	b.n	800f9e6 <tcp_input+0x756>
              goto aborted;
 800f9ae:	bf00      	nop
 800f9b0:	e019      	b.n	800f9e6 <tcp_input+0x756>
 800f9b2:	bf00      	nop
 800f9b4:	200111c8 	.word	0x200111c8
 800f9b8:	200111d8 	.word	0x200111d8
 800f9bc:	200111f8 	.word	0x200111f8
 800f9c0:	200111f5 	.word	0x200111f5
 800f9c4:	200111f0 	.word	0x200111f0
 800f9c8:	200111f4 	.word	0x200111f4
 800f9cc:	200111f2 	.word	0x200111f2
 800f9d0:	200111fc 	.word	0x200111fc
 800f9d4:	200111bc 	.word	0x200111bc
 800f9d8:	0801c160 	.word	0x0801c160
 800f9dc:	0801c314 	.word	0x0801c314
 800f9e0:	0801c1ac 	.word	0x0801c1ac
          goto aborted;
 800f9e4:	bf00      	nop
    tcp_input_pcb = NULL;
 800f9e6:	4b27      	ldr	r3, [pc, #156]	; (800fa84 <tcp_input+0x7f4>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f9ec:	4b26      	ldr	r3, [pc, #152]	; (800fa88 <tcp_input+0x7f8>)
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f9f2:	4b26      	ldr	r3, [pc, #152]	; (800fa8c <tcp_input+0x7fc>)
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d03f      	beq.n	800fa7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f9fa:	4b24      	ldr	r3, [pc, #144]	; (800fa8c <tcp_input+0x7fc>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fd f9e8 	bl	800cdd4 <pbuf_free>
      inseg.p = NULL;
 800fa04:	4b21      	ldr	r3, [pc, #132]	; (800fa8c <tcp_input+0x7fc>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa0a:	e036      	b.n	800fa7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa0c:	4b20      	ldr	r3, [pc, #128]	; (800fa90 <tcp_input+0x800>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fb fda9 	bl	800b56c <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0304 	and.w	r3, r3, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d118      	bne.n	800fa58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa26:	4b1b      	ldr	r3, [pc, #108]	; (800fa94 <tcp_input+0x804>)
 800fa28:	6819      	ldr	r1, [r3, #0]
 800fa2a:	4b1b      	ldr	r3, [pc, #108]	; (800fa98 <tcp_input+0x808>)
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	4b1a      	ldr	r3, [pc, #104]	; (800fa9c <tcp_input+0x80c>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa36:	4b16      	ldr	r3, [pc, #88]	; (800fa90 <tcp_input+0x800>)
 800fa38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa3a:	885b      	ldrh	r3, [r3, #2]
 800fa3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa3e:	4a14      	ldr	r2, [pc, #80]	; (800fa90 <tcp_input+0x800>)
 800fa40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa42:	8812      	ldrh	r2, [r2, #0]
 800fa44:	b292      	uxth	r2, r2
 800fa46:	9202      	str	r2, [sp, #8]
 800fa48:	9301      	str	r3, [sp, #4]
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <tcp_input+0x810>)
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	4b15      	ldr	r3, [pc, #84]	; (800faa4 <tcp_input+0x814>)
 800fa50:	4602      	mov	r2, r0
 800fa52:	2000      	movs	r0, #0
 800fa54:	f003 fc74 	bl	8013340 <tcp_rst>
    pbuf_free(p);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7fd f9bb 	bl	800cdd4 <pbuf_free>
  return;
 800fa5e:	e00c      	b.n	800fa7a <tcp_input+0x7ea>
    goto dropped;
 800fa60:	bf00      	nop
 800fa62:	e006      	b.n	800fa72 <tcp_input+0x7e2>
    goto dropped;
 800fa64:	bf00      	nop
 800fa66:	e004      	b.n	800fa72 <tcp_input+0x7e2>
    goto dropped;
 800fa68:	bf00      	nop
 800fa6a:	e002      	b.n	800fa72 <tcp_input+0x7e2>
      goto dropped;
 800fa6c:	bf00      	nop
 800fa6e:	e000      	b.n	800fa72 <tcp_input+0x7e2>
      goto dropped;
 800fa70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7fd f9ae 	bl	800cdd4 <pbuf_free>
 800fa78:	e000      	b.n	800fa7c <tcp_input+0x7ec>
  return;
 800fa7a:	bf00      	nop
}
 800fa7c:	3724      	adds	r7, #36	; 0x24
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd90      	pop	{r4, r7, pc}
 800fa82:	bf00      	nop
 800fa84:	200111fc 	.word	0x200111fc
 800fa88:	200111f8 	.word	0x200111f8
 800fa8c:	200111c8 	.word	0x200111c8
 800fa90:	200111d8 	.word	0x200111d8
 800fa94:	200111ec 	.word	0x200111ec
 800fa98:	200111f2 	.word	0x200111f2
 800fa9c:	200111e8 	.word	0x200111e8
 800faa0:	2000da4c 	.word	0x2000da4c
 800faa4:	2000da50 	.word	0x2000da50

0800faa8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d106      	bne.n	800fac4 <tcp_input_delayed_close+0x1c>
 800fab6:	4b17      	ldr	r3, [pc, #92]	; (800fb14 <tcp_input_delayed_close+0x6c>)
 800fab8:	f240 225a 	movw	r2, #602	; 0x25a
 800fabc:	4916      	ldr	r1, [pc, #88]	; (800fb18 <tcp_input_delayed_close+0x70>)
 800fabe:	4817      	ldr	r0, [pc, #92]	; (800fb1c <tcp_input_delayed_close+0x74>)
 800fac0:	f009 f8ba 	bl	8018c38 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fac4:	4b16      	ldr	r3, [pc, #88]	; (800fb20 <tcp_input_delayed_close+0x78>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	f003 0310 	and.w	r3, r3, #16
 800facc:	2b00      	cmp	r3, #0
 800face:	d01c      	beq.n	800fb0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	8b5b      	ldrh	r3, [r3, #26]
 800fad4:	f003 0310 	and.w	r3, r3, #16
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d10d      	bne.n	800faf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d008      	beq.n	800faf8 <tcp_input_delayed_close+0x50>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	6912      	ldr	r2, [r2, #16]
 800faf0:	f06f 010e 	mvn.w	r1, #14
 800faf4:	4610      	mov	r0, r2
 800faf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800faf8:	6879      	ldr	r1, [r7, #4]
 800fafa:	480a      	ldr	r0, [pc, #40]	; (800fb24 <tcp_input_delayed_close+0x7c>)
 800fafc:	f7ff fa50 	bl	800efa0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7fd fc23 	bl	800d34c <tcp_free>
    return 1;
 800fb06:	2301      	movs	r3, #1
 800fb08:	e000      	b.n	800fb0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	0801c160 	.word	0x0801c160
 800fb18:	0801c330 	.word	0x0801c330
 800fb1c:	0801c1ac 	.word	0x0801c1ac
 800fb20:	200111f5 	.word	0x200111f5
 800fb24:	200111bc 	.word	0x200111bc

0800fb28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b08b      	sub	sp, #44	; 0x2c
 800fb2c:	af04      	add	r7, sp, #16
 800fb2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb30:	4b6f      	ldr	r3, [pc, #444]	; (800fcf0 <tcp_listen_input+0x1c8>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	f003 0304 	and.w	r3, r3, #4
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f040 80d2 	bne.w	800fce2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d106      	bne.n	800fb52 <tcp_listen_input+0x2a>
 800fb44:	4b6b      	ldr	r3, [pc, #428]	; (800fcf4 <tcp_listen_input+0x1cc>)
 800fb46:	f240 2281 	movw	r2, #641	; 0x281
 800fb4a:	496b      	ldr	r1, [pc, #428]	; (800fcf8 <tcp_listen_input+0x1d0>)
 800fb4c:	486b      	ldr	r0, [pc, #428]	; (800fcfc <tcp_listen_input+0x1d4>)
 800fb4e:	f009 f873 	bl	8018c38 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb52:	4b67      	ldr	r3, [pc, #412]	; (800fcf0 <tcp_listen_input+0x1c8>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 0310 	and.w	r3, r3, #16
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d019      	beq.n	800fb92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb5e:	4b68      	ldr	r3, [pc, #416]	; (800fd00 <tcp_listen_input+0x1d8>)
 800fb60:	6819      	ldr	r1, [r3, #0]
 800fb62:	4b68      	ldr	r3, [pc, #416]	; (800fd04 <tcp_listen_input+0x1dc>)
 800fb64:	881b      	ldrh	r3, [r3, #0]
 800fb66:	461a      	mov	r2, r3
 800fb68:	4b67      	ldr	r3, [pc, #412]	; (800fd08 <tcp_listen_input+0x1e0>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb6e:	4b67      	ldr	r3, [pc, #412]	; (800fd0c <tcp_listen_input+0x1e4>)
 800fb70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb72:	885b      	ldrh	r3, [r3, #2]
 800fb74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb76:	4a65      	ldr	r2, [pc, #404]	; (800fd0c <tcp_listen_input+0x1e4>)
 800fb78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb7a:	8812      	ldrh	r2, [r2, #0]
 800fb7c:	b292      	uxth	r2, r2
 800fb7e:	9202      	str	r2, [sp, #8]
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	4b63      	ldr	r3, [pc, #396]	; (800fd10 <tcp_listen_input+0x1e8>)
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	4b63      	ldr	r3, [pc, #396]	; (800fd14 <tcp_listen_input+0x1ec>)
 800fb88:	4602      	mov	r2, r0
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f003 fbd8 	bl	8013340 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb90:	e0a9      	b.n	800fce6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb92:	4b57      	ldr	r3, [pc, #348]	; (800fcf0 <tcp_listen_input+0x1c8>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f000 80a3 	beq.w	800fce6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7d5b      	ldrb	r3, [r3, #21]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff f859 	bl	800ec5c <tcp_alloc>
 800fbaa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d111      	bne.n	800fbd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00a      	beq.n	800fbd0 <tcp_listen_input+0xa8>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	699b      	ldr	r3, [r3, #24]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	6910      	ldr	r0, [r2, #16]
 800fbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	4798      	blx	r3
 800fbca:	4603      	mov	r3, r0
 800fbcc:	73bb      	strb	r3, [r7, #14]
      return;
 800fbce:	e08b      	b.n	800fce8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbd0:	23f0      	movs	r3, #240	; 0xf0
 800fbd2:	73bb      	strb	r3, [r7, #14]
      return;
 800fbd4:	e088      	b.n	800fce8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbd6:	4b50      	ldr	r3, [pc, #320]	; (800fd18 <tcp_listen_input+0x1f0>)
 800fbd8:	695a      	ldr	r2, [r3, #20]
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbde:	4b4e      	ldr	r3, [pc, #312]	; (800fd18 <tcp_listen_input+0x1f0>)
 800fbe0:	691a      	ldr	r2, [r3, #16]
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	8ada      	ldrh	r2, [r3, #22]
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fbee:	4b47      	ldr	r3, [pc, #284]	; (800fd0c <tcp_listen_input+0x1e4>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	2203      	movs	r2, #3
 800fbfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc00:	4b41      	ldr	r3, [pc, #260]	; (800fd08 <tcp_listen_input+0x1e0>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fc12:	6978      	ldr	r0, [r7, #20]
 800fc14:	f7ff fa58 	bl	800f0c8 <tcp_next_iss>
 800fc18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	693a      	ldr	r2, [r7, #16]
 800fc1e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	693a      	ldr	r2, [r7, #16]
 800fc2a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc32:	4b35      	ldr	r3, [pc, #212]	; (800fd08 <tcp_listen_input+0x1e0>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	1e5a      	subs	r2, r3, #1
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	691a      	ldr	r2, [r3, #16]
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	7a5b      	ldrb	r3, [r3, #9]
 800fc4e:	f003 030c 	and.w	r3, r3, #12
 800fc52:	b2da      	uxtb	r2, r3
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	7a1a      	ldrb	r2, [r3, #8]
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc60:	4b2e      	ldr	r3, [pc, #184]	; (800fd1c <tcp_listen_input+0x1f4>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	60da      	str	r2, [r3, #12]
 800fc68:	4a2c      	ldr	r2, [pc, #176]	; (800fd1c <tcp_listen_input+0x1f4>)
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	f003 fd29 	bl	80136c4 <tcp_timer_needed>
 800fc72:	4b2b      	ldr	r3, [pc, #172]	; (800fd20 <tcp_listen_input+0x1f8>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc78:	6978      	ldr	r0, [r7, #20]
 800fc7a:	f001 fd8f 	bl	801179c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc7e:	4b23      	ldr	r3, [pc, #140]	; (800fd0c <tcp_listen_input+0x1e4>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	89db      	ldrh	r3, [r3, #14]
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	3304      	adds	r3, #4
 800fca0:	4618      	mov	r0, r3
 800fca2:	f007 fac1 	bl	8017228 <ip4_route>
 800fca6:	4601      	mov	r1, r0
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	3304      	adds	r3, #4
 800fcac:	461a      	mov	r2, r3
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f7ff fa30 	bl	800f114 <tcp_eff_send_mss_netif>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fcbc:	2112      	movs	r1, #18
 800fcbe:	6978      	ldr	r0, [r7, #20]
 800fcc0:	f002 fc9c 	bl	80125fc <tcp_enqueue_flags>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fcc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d004      	beq.n	800fcda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	6978      	ldr	r0, [r7, #20]
 800fcd4:	f7fd fdc0 	bl	800d858 <tcp_abandon>
      return;
 800fcd8:	e006      	b.n	800fce8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fcda:	6978      	ldr	r0, [r7, #20]
 800fcdc:	f002 fd7c 	bl	80127d8 <tcp_output>
  return;
 800fce0:	e001      	b.n	800fce6 <tcp_listen_input+0x1be>
    return;
 800fce2:	bf00      	nop
 800fce4:	e000      	b.n	800fce8 <tcp_listen_input+0x1c0>
  return;
 800fce6:	bf00      	nop
}
 800fce8:	371c      	adds	r7, #28
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd90      	pop	{r4, r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200111f4 	.word	0x200111f4
 800fcf4:	0801c160 	.word	0x0801c160
 800fcf8:	0801c358 	.word	0x0801c358
 800fcfc:	0801c1ac 	.word	0x0801c1ac
 800fd00:	200111ec 	.word	0x200111ec
 800fd04:	200111f2 	.word	0x200111f2
 800fd08:	200111e8 	.word	0x200111e8
 800fd0c:	200111d8 	.word	0x200111d8
 800fd10:	2000da4c 	.word	0x2000da4c
 800fd14:	2000da50 	.word	0x2000da50
 800fd18:	2000da3c 	.word	0x2000da3c
 800fd1c:	200111bc 	.word	0x200111bc
 800fd20:	200111c4 	.word	0x200111c4

0800fd24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af04      	add	r7, sp, #16
 800fd2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd2c:	4b2f      	ldr	r3, [pc, #188]	; (800fdec <tcp_timewait_input+0xc8>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 0304 	and.w	r3, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d153      	bne.n	800fde0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <tcp_timewait_input+0x28>
 800fd3e:	4b2c      	ldr	r3, [pc, #176]	; (800fdf0 <tcp_timewait_input+0xcc>)
 800fd40:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fd44:	492b      	ldr	r1, [pc, #172]	; (800fdf4 <tcp_timewait_input+0xd0>)
 800fd46:	482c      	ldr	r0, [pc, #176]	; (800fdf8 <tcp_timewait_input+0xd4>)
 800fd48:	f008 ff76 	bl	8018c38 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd4c:	4b27      	ldr	r3, [pc, #156]	; (800fdec <tcp_timewait_input+0xc8>)
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 0302 	and.w	r3, r3, #2
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d02a      	beq.n	800fdae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd58:	4b28      	ldr	r3, [pc, #160]	; (800fdfc <tcp_timewait_input+0xd8>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	db2d      	blt.n	800fdc2 <tcp_timewait_input+0x9e>
 800fd66:	4b25      	ldr	r3, [pc, #148]	; (800fdfc <tcp_timewait_input+0xd8>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6e:	6879      	ldr	r1, [r7, #4]
 800fd70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd72:	440b      	add	r3, r1
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	dc23      	bgt.n	800fdc2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd7a:	4b21      	ldr	r3, [pc, #132]	; (800fe00 <tcp_timewait_input+0xdc>)
 800fd7c:	6819      	ldr	r1, [r3, #0]
 800fd7e:	4b21      	ldr	r3, [pc, #132]	; (800fe04 <tcp_timewait_input+0xe0>)
 800fd80:	881b      	ldrh	r3, [r3, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4b1d      	ldr	r3, [pc, #116]	; (800fdfc <tcp_timewait_input+0xd8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd8a:	4b1f      	ldr	r3, [pc, #124]	; (800fe08 <tcp_timewait_input+0xe4>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd8e:	885b      	ldrh	r3, [r3, #2]
 800fd90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd92:	4a1d      	ldr	r2, [pc, #116]	; (800fe08 <tcp_timewait_input+0xe4>)
 800fd94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd96:	8812      	ldrh	r2, [r2, #0]
 800fd98:	b292      	uxth	r2, r2
 800fd9a:	9202      	str	r2, [sp, #8]
 800fd9c:	9301      	str	r3, [sp, #4]
 800fd9e:	4b1b      	ldr	r3, [pc, #108]	; (800fe0c <tcp_timewait_input+0xe8>)
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	4b1b      	ldr	r3, [pc, #108]	; (800fe10 <tcp_timewait_input+0xec>)
 800fda4:	4602      	mov	r2, r0
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f003 faca 	bl	8013340 <tcp_rst>
      return;
 800fdac:	e01b      	b.n	800fde6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fdae:	4b0f      	ldr	r3, [pc, #60]	; (800fdec <tcp_timewait_input+0xc8>)
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	f003 0301 	and.w	r3, r3, #1
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fdba:	4b16      	ldr	r3, [pc, #88]	; (800fe14 <tcp_timewait_input+0xf0>)
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fdc2:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <tcp_timewait_input+0xe0>)
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00c      	beq.n	800fde4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	8b5b      	ldrh	r3, [r3, #26]
 800fdce:	f043 0302 	orr.w	r3, r3, #2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f002 fcfd 	bl	80127d8 <tcp_output>
  }
  return;
 800fdde:	e001      	b.n	800fde4 <tcp_timewait_input+0xc0>
    return;
 800fde0:	bf00      	nop
 800fde2:	e000      	b.n	800fde6 <tcp_timewait_input+0xc2>
  return;
 800fde4:	bf00      	nop
}
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	200111f4 	.word	0x200111f4
 800fdf0:	0801c160 	.word	0x0801c160
 800fdf4:	0801c378 	.word	0x0801c378
 800fdf8:	0801c1ac 	.word	0x0801c1ac
 800fdfc:	200111e8 	.word	0x200111e8
 800fe00:	200111ec 	.word	0x200111ec
 800fe04:	200111f2 	.word	0x200111f2
 800fe08:	200111d8 	.word	0x200111d8
 800fe0c:	2000da4c 	.word	0x2000da4c
 800fe10:	2000da50 	.word	0x2000da50
 800fe14:	200111b0 	.word	0x200111b0

0800fe18 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fe18:	b590      	push	{r4, r7, lr}
 800fe1a:	b08d      	sub	sp, #52	; 0x34
 800fe1c:	af04      	add	r7, sp, #16
 800fe1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe20:	2300      	movs	r3, #0
 800fe22:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe24:	2300      	movs	r3, #0
 800fe26:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d106      	bne.n	800fe3c <tcp_process+0x24>
 800fe2e:	4b9d      	ldr	r3, [pc, #628]	; (80100a4 <tcp_process+0x28c>)
 800fe30:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fe34:	499c      	ldr	r1, [pc, #624]	; (80100a8 <tcp_process+0x290>)
 800fe36:	489d      	ldr	r0, [pc, #628]	; (80100ac <tcp_process+0x294>)
 800fe38:	f008 fefe 	bl	8018c38 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe3c:	4b9c      	ldr	r3, [pc, #624]	; (80100b0 <tcp_process+0x298>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d04e      	beq.n	800fee6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	7d1b      	ldrb	r3, [r3, #20]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d108      	bne.n	800fe62 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe54:	4b97      	ldr	r3, [pc, #604]	; (80100b4 <tcp_process+0x29c>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d123      	bne.n	800fea4 <tcp_process+0x8c>
        acceptable = 1;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	76fb      	strb	r3, [r7, #27]
 800fe60:	e020      	b.n	800fea4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe66:	4b94      	ldr	r3, [pc, #592]	; (80100b8 <tcp_process+0x2a0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d102      	bne.n	800fe74 <tcp_process+0x5c>
        acceptable = 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	76fb      	strb	r3, [r7, #27]
 800fe72:	e017      	b.n	800fea4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe74:	4b90      	ldr	r3, [pc, #576]	; (80100b8 <tcp_process+0x2a0>)
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	db10      	blt.n	800fea4 <tcp_process+0x8c>
 800fe82:	4b8d      	ldr	r3, [pc, #564]	; (80100b8 <tcp_process+0x2a0>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8a:	6879      	ldr	r1, [r7, #4]
 800fe8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dc06      	bgt.n	800fea4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	8b5b      	ldrh	r3, [r3, #26]
 800fe9a:	f043 0302 	orr.w	r3, r3, #2
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fea4:	7efb      	ldrb	r3, [r7, #27]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d01b      	beq.n	800fee2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	7d1b      	ldrb	r3, [r3, #20]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d106      	bne.n	800fec0 <tcp_process+0xa8>
 800feb2:	4b7c      	ldr	r3, [pc, #496]	; (80100a4 <tcp_process+0x28c>)
 800feb4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800feb8:	4980      	ldr	r1, [pc, #512]	; (80100bc <tcp_process+0x2a4>)
 800feba:	487c      	ldr	r0, [pc, #496]	; (80100ac <tcp_process+0x294>)
 800febc:	f008 febc 	bl	8018c38 <iprintf>
      recv_flags |= TF_RESET;
 800fec0:	4b7f      	ldr	r3, [pc, #508]	; (80100c0 <tcp_process+0x2a8>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f043 0308 	orr.w	r3, r3, #8
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	4b7d      	ldr	r3, [pc, #500]	; (80100c0 <tcp_process+0x2a8>)
 800fecc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	8b5b      	ldrh	r3, [r3, #26]
 800fed2:	f023 0301 	bic.w	r3, r3, #1
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fedc:	f06f 030d 	mvn.w	r3, #13
 800fee0:	e37a      	b.n	80105d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fee2:	2300      	movs	r3, #0
 800fee4:	e378      	b.n	80105d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fee6:	4b72      	ldr	r3, [pc, #456]	; (80100b0 <tcp_process+0x298>)
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f003 0302 	and.w	r3, r3, #2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d010      	beq.n	800ff14 <tcp_process+0xfc>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7d1b      	ldrb	r3, [r3, #20]
 800fef6:	2b02      	cmp	r3, #2
 800fef8:	d00c      	beq.n	800ff14 <tcp_process+0xfc>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7d1b      	ldrb	r3, [r3, #20]
 800fefe:	2b03      	cmp	r3, #3
 800ff00:	d008      	beq.n	800ff14 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	8b5b      	ldrh	r3, [r3, #26]
 800ff06:	f043 0302 	orr.w	r3, r3, #2
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e361      	b.n	80105d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8b5b      	ldrh	r3, [r3, #26]
 800ff18:	f003 0310 	and.w	r3, r3, #16
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d103      	bne.n	800ff28 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff20:	4b68      	ldr	r3, [pc, #416]	; (80100c4 <tcp_process+0x2ac>)
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f001 fc2f 	bl	801179c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	3b02      	subs	r3, #2
 800ff44:	2b07      	cmp	r3, #7
 800ff46:	f200 8337 	bhi.w	80105b8 <tcp_process+0x7a0>
 800ff4a:	a201      	add	r2, pc, #4	; (adr r2, 800ff50 <tcp_process+0x138>)
 800ff4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff50:	0800ff71 	.word	0x0800ff71
 800ff54:	080101a1 	.word	0x080101a1
 800ff58:	08010319 	.word	0x08010319
 800ff5c:	08010343 	.word	0x08010343
 800ff60:	08010467 	.word	0x08010467
 800ff64:	08010319 	.word	0x08010319
 800ff68:	080104f3 	.word	0x080104f3
 800ff6c:	08010583 	.word	0x08010583
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff70:	4b4f      	ldr	r3, [pc, #316]	; (80100b0 <tcp_process+0x298>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 0310 	and.w	r3, r3, #16
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 80e4 	beq.w	8010146 <tcp_process+0x32e>
 800ff7e:	4b4c      	ldr	r3, [pc, #304]	; (80100b0 <tcp_process+0x298>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f003 0302 	and.w	r3, r3, #2
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 80dd 	beq.w	8010146 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	4b48      	ldr	r3, [pc, #288]	; (80100b4 <tcp_process+0x29c>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	f040 80d5 	bne.w	8010146 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff9c:	4b46      	ldr	r3, [pc, #280]	; (80100b8 <tcp_process+0x2a0>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	1c5a      	adds	r2, r3, #1
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ffae:	4b41      	ldr	r3, [pc, #260]	; (80100b4 <tcp_process+0x29c>)
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ffb6:	4b44      	ldr	r3, [pc, #272]	; (80100c8 <tcp_process+0x2b0>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	89db      	ldrh	r3, [r3, #14]
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ffd0:	4b39      	ldr	r3, [pc, #228]	; (80100b8 <tcp_process+0x2a0>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	1e5a      	subs	r2, r3, #1
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2204      	movs	r2, #4
 800ffde:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	3304      	adds	r3, #4
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f007 f91d 	bl	8017228 <ip4_route>
 800ffee:	4601      	mov	r1, r0
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	3304      	adds	r3, #4
 800fff4:	461a      	mov	r2, r3
 800fff6:	4620      	mov	r0, r4
 800fff8:	f7ff f88c 	bl	800f114 <tcp_eff_send_mss_netif>
 800fffc:	4603      	mov	r3, r0
 800fffe:	461a      	mov	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010008:	009a      	lsls	r2, r3, #2
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	f241 111c 	movw	r1, #4380	; 0x111c
 8010014:	428b      	cmp	r3, r1
 8010016:	bf38      	it	cc
 8010018:	460b      	movcc	r3, r1
 801001a:	429a      	cmp	r2, r3
 801001c:	d204      	bcs.n	8010028 <tcp_process+0x210>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	b29b      	uxth	r3, r3
 8010026:	e00d      	b.n	8010044 <tcp_process+0x22c>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010032:	4293      	cmp	r3, r2
 8010034:	d904      	bls.n	8010040 <tcp_process+0x228>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	b29b      	uxth	r3, r3
 801003e:	e001      	b.n	8010044 <tcp_process+0x22c>
 8010040:	f241 131c 	movw	r3, #4380	; 0x111c
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010050:	2b00      	cmp	r3, #0
 8010052:	d106      	bne.n	8010062 <tcp_process+0x24a>
 8010054:	4b13      	ldr	r3, [pc, #76]	; (80100a4 <tcp_process+0x28c>)
 8010056:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801005a:	491c      	ldr	r1, [pc, #112]	; (80100cc <tcp_process+0x2b4>)
 801005c:	4813      	ldr	r0, [pc, #76]	; (80100ac <tcp_process+0x294>)
 801005e:	f008 fdeb 	bl	8018c38 <iprintf>
        --pcb->snd_queuelen;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010068:	3b01      	subs	r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010076:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d12a      	bne.n	80100d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010082:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d106      	bne.n	8010098 <tcp_process+0x280>
 801008a:	4b06      	ldr	r3, [pc, #24]	; (80100a4 <tcp_process+0x28c>)
 801008c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010090:	490f      	ldr	r1, [pc, #60]	; (80100d0 <tcp_process+0x2b8>)
 8010092:	4806      	ldr	r0, [pc, #24]	; (80100ac <tcp_process+0x294>)
 8010094:	f008 fdd0 	bl	8018c38 <iprintf>
          pcb->unsent = rseg->next;
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	66da      	str	r2, [r3, #108]	; 0x6c
 80100a0:	e01c      	b.n	80100dc <tcp_process+0x2c4>
 80100a2:	bf00      	nop
 80100a4:	0801c160 	.word	0x0801c160
 80100a8:	0801c398 	.word	0x0801c398
 80100ac:	0801c1ac 	.word	0x0801c1ac
 80100b0:	200111f4 	.word	0x200111f4
 80100b4:	200111ec 	.word	0x200111ec
 80100b8:	200111e8 	.word	0x200111e8
 80100bc:	0801c3b4 	.word	0x0801c3b4
 80100c0:	200111f5 	.word	0x200111f5
 80100c4:	200111b0 	.word	0x200111b0
 80100c8:	200111d8 	.word	0x200111d8
 80100cc:	0801c3d4 	.word	0x0801c3d4
 80100d0:	0801c3ec 	.word	0x0801c3ec
        } else {
          pcb->unacked = rseg->next;
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80100dc:	69f8      	ldr	r0, [r7, #28]
 80100de:	f7fe fc36 	bl	800e94e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d104      	bne.n	80100f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80100f2:	e006      	b.n	8010102 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00a      	beq.n	8010122 <tcp_process+0x30a>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	6910      	ldr	r0, [r2, #16]
 8010116:	2200      	movs	r2, #0
 8010118:	6879      	ldr	r1, [r7, #4]
 801011a:	4798      	blx	r3
 801011c:	4603      	mov	r3, r0
 801011e:	76bb      	strb	r3, [r7, #26]
 8010120:	e001      	b.n	8010126 <tcp_process+0x30e>
 8010122:	2300      	movs	r3, #0
 8010124:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010126:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801012a:	f113 0f0d 	cmn.w	r3, #13
 801012e:	d102      	bne.n	8010136 <tcp_process+0x31e>
          return ERR_ABRT;
 8010130:	f06f 030c 	mvn.w	r3, #12
 8010134:	e250      	b.n	80105d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8b5b      	ldrh	r3, [r3, #26]
 801013a:	f043 0302 	orr.w	r3, r3, #2
 801013e:	b29a      	uxth	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010144:	e23a      	b.n	80105bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010146:	4b98      	ldr	r3, [pc, #608]	; (80103a8 <tcp_process+0x590>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	f003 0310 	and.w	r3, r3, #16
 801014e:	2b00      	cmp	r3, #0
 8010150:	f000 8234 	beq.w	80105bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010154:	4b95      	ldr	r3, [pc, #596]	; (80103ac <tcp_process+0x594>)
 8010156:	6819      	ldr	r1, [r3, #0]
 8010158:	4b95      	ldr	r3, [pc, #596]	; (80103b0 <tcp_process+0x598>)
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	461a      	mov	r2, r3
 801015e:	4b95      	ldr	r3, [pc, #596]	; (80103b4 <tcp_process+0x59c>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010164:	4b94      	ldr	r3, [pc, #592]	; (80103b8 <tcp_process+0x5a0>)
 8010166:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010168:	885b      	ldrh	r3, [r3, #2]
 801016a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801016c:	4a92      	ldr	r2, [pc, #584]	; (80103b8 <tcp_process+0x5a0>)
 801016e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010170:	8812      	ldrh	r2, [r2, #0]
 8010172:	b292      	uxth	r2, r2
 8010174:	9202      	str	r2, [sp, #8]
 8010176:	9301      	str	r3, [sp, #4]
 8010178:	4b90      	ldr	r3, [pc, #576]	; (80103bc <tcp_process+0x5a4>)
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	4b90      	ldr	r3, [pc, #576]	; (80103c0 <tcp_process+0x5a8>)
 801017e:	4602      	mov	r2, r0
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f003 f8dd 	bl	8013340 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801018c:	2b05      	cmp	r3, #5
 801018e:	f200 8215 	bhi.w	80105bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f002 fea9 	bl	8012ef0 <tcp_rexmit_rto>
      break;
 801019e:	e20d      	b.n	80105bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80101a0:	4b81      	ldr	r3, [pc, #516]	; (80103a8 <tcp_process+0x590>)
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 0310 	and.w	r3, r3, #16
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f000 80a1 	beq.w	80102f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101ae:	4b7f      	ldr	r3, [pc, #508]	; (80103ac <tcp_process+0x594>)
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	3b01      	subs	r3, #1
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	db7e      	blt.n	80102bc <tcp_process+0x4a4>
 80101be:	4b7b      	ldr	r3, [pc, #492]	; (80103ac <tcp_process+0x594>)
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	dc77      	bgt.n	80102bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2204      	movs	r2, #4
 80101d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d102      	bne.n	80101e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101da:	23fa      	movs	r3, #250	; 0xfa
 80101dc:	76bb      	strb	r3, [r7, #26]
 80101de:	e01d      	b.n	801021c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101e4:	699b      	ldr	r3, [r3, #24]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d106      	bne.n	80101f8 <tcp_process+0x3e0>
 80101ea:	4b76      	ldr	r3, [pc, #472]	; (80103c4 <tcp_process+0x5ac>)
 80101ec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80101f0:	4975      	ldr	r1, [pc, #468]	; (80103c8 <tcp_process+0x5b0>)
 80101f2:	4876      	ldr	r0, [pc, #472]	; (80103cc <tcp_process+0x5b4>)
 80101f4:	f008 fd20 	bl	8018c38 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101fc:	699b      	ldr	r3, [r3, #24]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d00a      	beq.n	8010218 <tcp_process+0x400>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010206:	699b      	ldr	r3, [r3, #24]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	6910      	ldr	r0, [r2, #16]
 801020c:	2200      	movs	r2, #0
 801020e:	6879      	ldr	r1, [r7, #4]
 8010210:	4798      	blx	r3
 8010212:	4603      	mov	r3, r0
 8010214:	76bb      	strb	r3, [r7, #26]
 8010216:	e001      	b.n	801021c <tcp_process+0x404>
 8010218:	23f0      	movs	r3, #240	; 0xf0
 801021a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801021c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00a      	beq.n	801023a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010224:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010228:	f113 0f0d 	cmn.w	r3, #13
 801022c:	d002      	beq.n	8010234 <tcp_process+0x41c>
              tcp_abort(pcb);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7fd fbd0 	bl	800d9d4 <tcp_abort>
            }
            return ERR_ABRT;
 8010234:	f06f 030c 	mvn.w	r3, #12
 8010238:	e1ce      	b.n	80105d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 fae0 	bl	8010800 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010240:	4b63      	ldr	r3, [pc, #396]	; (80103d0 <tcp_process+0x5b8>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d005      	beq.n	8010254 <tcp_process+0x43c>
            recv_acked--;
 8010248:	4b61      	ldr	r3, [pc, #388]	; (80103d0 <tcp_process+0x5b8>)
 801024a:	881b      	ldrh	r3, [r3, #0]
 801024c:	3b01      	subs	r3, #1
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b5f      	ldr	r3, [pc, #380]	; (80103d0 <tcp_process+0x5b8>)
 8010252:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010258:	009a      	lsls	r2, r3, #2
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801025e:	005b      	lsls	r3, r3, #1
 8010260:	f241 111c 	movw	r1, #4380	; 0x111c
 8010264:	428b      	cmp	r3, r1
 8010266:	bf38      	it	cc
 8010268:	460b      	movcc	r3, r1
 801026a:	429a      	cmp	r2, r3
 801026c:	d204      	bcs.n	8010278 <tcp_process+0x460>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	b29b      	uxth	r3, r3
 8010276:	e00d      	b.n	8010294 <tcp_process+0x47c>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010282:	4293      	cmp	r3, r2
 8010284:	d904      	bls.n	8010290 <tcp_process+0x478>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	b29b      	uxth	r3, r3
 801028e:	e001      	b.n	8010294 <tcp_process+0x47c>
 8010290:	f241 131c 	movw	r3, #4380	; 0x111c
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801029a:	4b4e      	ldr	r3, [pc, #312]	; (80103d4 <tcp_process+0x5bc>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	f003 0320 	and.w	r3, r3, #32
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d037      	beq.n	8010316 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8b5b      	ldrh	r3, [r3, #26]
 80102aa:	f043 0302 	orr.w	r3, r3, #2
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2207      	movs	r2, #7
 80102b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80102ba:	e02c      	b.n	8010316 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102bc:	4b3b      	ldr	r3, [pc, #236]	; (80103ac <tcp_process+0x594>)
 80102be:	6819      	ldr	r1, [r3, #0]
 80102c0:	4b3b      	ldr	r3, [pc, #236]	; (80103b0 <tcp_process+0x598>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b3b      	ldr	r3, [pc, #236]	; (80103b4 <tcp_process+0x59c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102cc:	4b3a      	ldr	r3, [pc, #232]	; (80103b8 <tcp_process+0x5a0>)
 80102ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d0:	885b      	ldrh	r3, [r3, #2]
 80102d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102d4:	4a38      	ldr	r2, [pc, #224]	; (80103b8 <tcp_process+0x5a0>)
 80102d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d8:	8812      	ldrh	r2, [r2, #0]
 80102da:	b292      	uxth	r2, r2
 80102dc:	9202      	str	r2, [sp, #8]
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	4b36      	ldr	r3, [pc, #216]	; (80103bc <tcp_process+0x5a4>)
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	4b36      	ldr	r3, [pc, #216]	; (80103c0 <tcp_process+0x5a8>)
 80102e6:	4602      	mov	r2, r0
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f003 f829 	bl	8013340 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80102ee:	e167      	b.n	80105c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80102f0:	4b2d      	ldr	r3, [pc, #180]	; (80103a8 <tcp_process+0x590>)
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	f003 0302 	and.w	r3, r3, #2
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 8161 	beq.w	80105c0 <tcp_process+0x7a8>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010302:	1e5a      	subs	r2, r3, #1
 8010304:	4b2b      	ldr	r3, [pc, #172]	; (80103b4 <tcp_process+0x59c>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	429a      	cmp	r2, r3
 801030a:	f040 8159 	bne.w	80105c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f002 fe10 	bl	8012f34 <tcp_rexmit>
      break;
 8010314:	e154      	b.n	80105c0 <tcp_process+0x7a8>
 8010316:	e153      	b.n	80105c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 fa71 	bl	8010800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801031e:	4b2d      	ldr	r3, [pc, #180]	; (80103d4 <tcp_process+0x5bc>)
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	f003 0320 	and.w	r3, r3, #32
 8010326:	2b00      	cmp	r3, #0
 8010328:	f000 814c 	beq.w	80105c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	8b5b      	ldrh	r3, [r3, #26]
 8010330:	f043 0302 	orr.w	r3, r3, #2
 8010334:	b29a      	uxth	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2207      	movs	r2, #7
 801033e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010340:	e140      	b.n	80105c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fa5c 	bl	8010800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010348:	4b22      	ldr	r3, [pc, #136]	; (80103d4 <tcp_process+0x5bc>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f003 0320 	and.w	r3, r3, #32
 8010350:	2b00      	cmp	r3, #0
 8010352:	d071      	beq.n	8010438 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010354:	4b14      	ldr	r3, [pc, #80]	; (80103a8 <tcp_process+0x590>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	f003 0310 	and.w	r3, r3, #16
 801035c:	2b00      	cmp	r3, #0
 801035e:	d060      	beq.n	8010422 <tcp_process+0x60a>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010364:	4b11      	ldr	r3, [pc, #68]	; (80103ac <tcp_process+0x594>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	429a      	cmp	r2, r3
 801036a:	d15a      	bne.n	8010422 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010370:	2b00      	cmp	r3, #0
 8010372:	d156      	bne.n	8010422 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8b5b      	ldrh	r3, [r3, #26]
 8010378:	f043 0302 	orr.w	r3, r3, #2
 801037c:	b29a      	uxth	r2, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7fe fdbc 	bl	800ef00 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010388:	4b13      	ldr	r3, [pc, #76]	; (80103d8 <tcp_process+0x5c0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	429a      	cmp	r2, r3
 8010390:	d105      	bne.n	801039e <tcp_process+0x586>
 8010392:	4b11      	ldr	r3, [pc, #68]	; (80103d8 <tcp_process+0x5c0>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	4a0f      	ldr	r2, [pc, #60]	; (80103d8 <tcp_process+0x5c0>)
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	e02e      	b.n	80103fc <tcp_process+0x5e4>
 801039e:	4b0e      	ldr	r3, [pc, #56]	; (80103d8 <tcp_process+0x5c0>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	617b      	str	r3, [r7, #20]
 80103a4:	e027      	b.n	80103f6 <tcp_process+0x5de>
 80103a6:	bf00      	nop
 80103a8:	200111f4 	.word	0x200111f4
 80103ac:	200111ec 	.word	0x200111ec
 80103b0:	200111f2 	.word	0x200111f2
 80103b4:	200111e8 	.word	0x200111e8
 80103b8:	200111d8 	.word	0x200111d8
 80103bc:	2000da4c 	.word	0x2000da4c
 80103c0:	2000da50 	.word	0x2000da50
 80103c4:	0801c160 	.word	0x0801c160
 80103c8:	0801c400 	.word	0x0801c400
 80103cc:	0801c1ac 	.word	0x0801c1ac
 80103d0:	200111f0 	.word	0x200111f0
 80103d4:	200111f5 	.word	0x200111f5
 80103d8:	200111bc 	.word	0x200111bc
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d104      	bne.n	80103f0 <tcp_process+0x5d8>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68da      	ldr	r2, [r3, #12]
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	60da      	str	r2, [r3, #12]
 80103ee:	e005      	b.n	80103fc <tcp_process+0x5e4>
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	617b      	str	r3, [r7, #20]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1ef      	bne.n	80103dc <tcp_process+0x5c4>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	60da      	str	r2, [r3, #12]
 8010402:	4b77      	ldr	r3, [pc, #476]	; (80105e0 <tcp_process+0x7c8>)
 8010404:	2201      	movs	r2, #1
 8010406:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	220a      	movs	r2, #10
 801040c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801040e:	4b75      	ldr	r3, [pc, #468]	; (80105e4 <tcp_process+0x7cc>)
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	60da      	str	r2, [r3, #12]
 8010416:	4a73      	ldr	r2, [pc, #460]	; (80105e4 <tcp_process+0x7cc>)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6013      	str	r3, [r2, #0]
 801041c:	f003 f952 	bl	80136c4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010420:	e0d2      	b.n	80105c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	8b5b      	ldrh	r3, [r3, #26]
 8010426:	f043 0302 	orr.w	r3, r3, #2
 801042a:	b29a      	uxth	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2208      	movs	r2, #8
 8010434:	751a      	strb	r2, [r3, #20]
      break;
 8010436:	e0c7      	b.n	80105c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010438:	4b6b      	ldr	r3, [pc, #428]	; (80105e8 <tcp_process+0x7d0>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	f003 0310 	and.w	r3, r3, #16
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 80c1 	beq.w	80105c8 <tcp_process+0x7b0>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801044a:	4b68      	ldr	r3, [pc, #416]	; (80105ec <tcp_process+0x7d4>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	f040 80ba 	bne.w	80105c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010458:	2b00      	cmp	r3, #0
 801045a:	f040 80b5 	bne.w	80105c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2206      	movs	r2, #6
 8010462:	751a      	strb	r2, [r3, #20]
      break;
 8010464:	e0b0      	b.n	80105c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f9ca 	bl	8010800 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801046c:	4b60      	ldr	r3, [pc, #384]	; (80105f0 <tcp_process+0x7d8>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	f003 0320 	and.w	r3, r3, #32
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 80a9 	beq.w	80105cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	8b5b      	ldrh	r3, [r3, #26]
 801047e:	f043 0302 	orr.w	r3, r3, #2
 8010482:	b29a      	uxth	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7fe fd39 	bl	800ef00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801048e:	4b59      	ldr	r3, [pc, #356]	; (80105f4 <tcp_process+0x7dc>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	429a      	cmp	r2, r3
 8010496:	d105      	bne.n	80104a4 <tcp_process+0x68c>
 8010498:	4b56      	ldr	r3, [pc, #344]	; (80105f4 <tcp_process+0x7dc>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	4a55      	ldr	r2, [pc, #340]	; (80105f4 <tcp_process+0x7dc>)
 80104a0:	6013      	str	r3, [r2, #0]
 80104a2:	e013      	b.n	80104cc <tcp_process+0x6b4>
 80104a4:	4b53      	ldr	r3, [pc, #332]	; (80105f4 <tcp_process+0x7dc>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	613b      	str	r3, [r7, #16]
 80104aa:	e00c      	b.n	80104c6 <tcp_process+0x6ae>
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d104      	bne.n	80104c0 <tcp_process+0x6a8>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68da      	ldr	r2, [r3, #12]
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	60da      	str	r2, [r3, #12]
 80104be:	e005      	b.n	80104cc <tcp_process+0x6b4>
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	613b      	str	r3, [r7, #16]
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d1ef      	bne.n	80104ac <tcp_process+0x694>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	60da      	str	r2, [r3, #12]
 80104d2:	4b43      	ldr	r3, [pc, #268]	; (80105e0 <tcp_process+0x7c8>)
 80104d4:	2201      	movs	r2, #1
 80104d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	220a      	movs	r2, #10
 80104dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104de:	4b41      	ldr	r3, [pc, #260]	; (80105e4 <tcp_process+0x7cc>)
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	60da      	str	r2, [r3, #12]
 80104e6:	4a3f      	ldr	r2, [pc, #252]	; (80105e4 <tcp_process+0x7cc>)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	f003 f8ea 	bl	80136c4 <tcp_timer_needed>
      }
      break;
 80104f0:	e06c      	b.n	80105cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 f984 	bl	8010800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104f8:	4b3b      	ldr	r3, [pc, #236]	; (80105e8 <tcp_process+0x7d0>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 0310 	and.w	r3, r3, #16
 8010500:	2b00      	cmp	r3, #0
 8010502:	d065      	beq.n	80105d0 <tcp_process+0x7b8>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010508:	4b38      	ldr	r3, [pc, #224]	; (80105ec <tcp_process+0x7d4>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	429a      	cmp	r2, r3
 801050e:	d15f      	bne.n	80105d0 <tcp_process+0x7b8>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d15b      	bne.n	80105d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7fe fcf1 	bl	800ef00 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801051e:	4b35      	ldr	r3, [pc, #212]	; (80105f4 <tcp_process+0x7dc>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	429a      	cmp	r2, r3
 8010526:	d105      	bne.n	8010534 <tcp_process+0x71c>
 8010528:	4b32      	ldr	r3, [pc, #200]	; (80105f4 <tcp_process+0x7dc>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	4a31      	ldr	r2, [pc, #196]	; (80105f4 <tcp_process+0x7dc>)
 8010530:	6013      	str	r3, [r2, #0]
 8010532:	e013      	b.n	801055c <tcp_process+0x744>
 8010534:	4b2f      	ldr	r3, [pc, #188]	; (80105f4 <tcp_process+0x7dc>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60fb      	str	r3, [r7, #12]
 801053a:	e00c      	b.n	8010556 <tcp_process+0x73e>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	429a      	cmp	r2, r3
 8010544:	d104      	bne.n	8010550 <tcp_process+0x738>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	68da      	ldr	r2, [r3, #12]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	60da      	str	r2, [r3, #12]
 801054e:	e005      	b.n	801055c <tcp_process+0x744>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	60fb      	str	r3, [r7, #12]
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1ef      	bne.n	801053c <tcp_process+0x724>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	60da      	str	r2, [r3, #12]
 8010562:	4b1f      	ldr	r3, [pc, #124]	; (80105e0 <tcp_process+0x7c8>)
 8010564:	2201      	movs	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	220a      	movs	r2, #10
 801056c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801056e:	4b1d      	ldr	r3, [pc, #116]	; (80105e4 <tcp_process+0x7cc>)
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	60da      	str	r2, [r3, #12]
 8010576:	4a1b      	ldr	r2, [pc, #108]	; (80105e4 <tcp_process+0x7cc>)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6013      	str	r3, [r2, #0]
 801057c:	f003 f8a2 	bl	80136c4 <tcp_timer_needed>
      }
      break;
 8010580:	e026      	b.n	80105d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f93c 	bl	8010800 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010588:	4b17      	ldr	r3, [pc, #92]	; (80105e8 <tcp_process+0x7d0>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	f003 0310 	and.w	r3, r3, #16
 8010590:	2b00      	cmp	r3, #0
 8010592:	d01f      	beq.n	80105d4 <tcp_process+0x7bc>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010598:	4b14      	ldr	r3, [pc, #80]	; (80105ec <tcp_process+0x7d4>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	d119      	bne.n	80105d4 <tcp_process+0x7bc>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d115      	bne.n	80105d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80105a8:	4b11      	ldr	r3, [pc, #68]	; (80105f0 <tcp_process+0x7d8>)
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	f043 0310 	orr.w	r3, r3, #16
 80105b0:	b2da      	uxtb	r2, r3
 80105b2:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <tcp_process+0x7d8>)
 80105b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80105b6:	e00d      	b.n	80105d4 <tcp_process+0x7bc>
    default:
      break;
 80105b8:	bf00      	nop
 80105ba:	e00c      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105bc:	bf00      	nop
 80105be:	e00a      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105c0:	bf00      	nop
 80105c2:	e008      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105c4:	bf00      	nop
 80105c6:	e006      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105c8:	bf00      	nop
 80105ca:	e004      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105cc:	bf00      	nop
 80105ce:	e002      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105d0:	bf00      	nop
 80105d2:	e000      	b.n	80105d6 <tcp_process+0x7be>
      break;
 80105d4:	bf00      	nop
  }
  return ERR_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3724      	adds	r7, #36	; 0x24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd90      	pop	{r4, r7, pc}
 80105e0:	200111c4 	.word	0x200111c4
 80105e4:	200111c0 	.word	0x200111c0
 80105e8:	200111f4 	.word	0x200111f4
 80105ec:	200111ec 	.word	0x200111ec
 80105f0:	200111f5 	.word	0x200111f5
 80105f4:	200111bc 	.word	0x200111bc

080105f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d106      	bne.n	8010616 <tcp_oos_insert_segment+0x1e>
 8010608:	4b3b      	ldr	r3, [pc, #236]	; (80106f8 <tcp_oos_insert_segment+0x100>)
 801060a:	f240 421f 	movw	r2, #1055	; 0x41f
 801060e:	493b      	ldr	r1, [pc, #236]	; (80106fc <tcp_oos_insert_segment+0x104>)
 8010610:	483b      	ldr	r0, [pc, #236]	; (8010700 <tcp_oos_insert_segment+0x108>)
 8010612:	f008 fb11 	bl	8018c38 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	899b      	ldrh	r3, [r3, #12]
 801061c:	b29b      	uxth	r3, r3
 801061e:	4618      	mov	r0, r3
 8010620:	f7fa ffa4 	bl	800b56c <lwip_htons>
 8010624:	4603      	mov	r3, r0
 8010626:	b2db      	uxtb	r3, r3
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d028      	beq.n	8010682 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010630:	6838      	ldr	r0, [r7, #0]
 8010632:	f7fe f977 	bl	800e924 <tcp_segs_free>
    next = NULL;
 8010636:	2300      	movs	r3, #0
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	e056      	b.n	80106ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	899b      	ldrh	r3, [r3, #12]
 8010642:	b29b      	uxth	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7fa ff91 	bl	800b56c <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	b2db      	uxtb	r3, r3
 801064e:	f003 0301 	and.w	r3, r3, #1
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00d      	beq.n	8010672 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	899b      	ldrh	r3, [r3, #12]
 801065c:	b29c      	uxth	r4, r3
 801065e:	2001      	movs	r0, #1
 8010660:	f7fa ff84 	bl	800b56c <lwip_htons>
 8010664:	4603      	mov	r3, r0
 8010666:	461a      	mov	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	4322      	orrs	r2, r4
 801066e:	b292      	uxth	r2, r2
 8010670:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f7fe f966 	bl	800e94e <tcp_seg_free>
    while (next &&
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00e      	beq.n	80106a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	891b      	ldrh	r3, [r3, #8]
 801068c:	461a      	mov	r2, r3
 801068e:	4b1d      	ldr	r3, [pc, #116]	; (8010704 <tcp_oos_insert_segment+0x10c>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	441a      	add	r2, r3
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	8909      	ldrh	r1, [r1, #8]
 801069e:	440b      	add	r3, r1
 80106a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	daca      	bge.n	801063c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d01e      	beq.n	80106ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	891b      	ldrh	r3, [r3, #8]
 80106b0:	461a      	mov	r2, r3
 80106b2:	4b14      	ldr	r3, [pc, #80]	; (8010704 <tcp_oos_insert_segment+0x10c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	441a      	add	r2, r3
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	dd12      	ble.n	80106ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	68db      	ldr	r3, [r3, #12]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <tcp_oos_insert_segment+0x10c>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	685a      	ldr	r2, [r3, #4]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	891b      	ldrh	r3, [r3, #8]
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7fc f9ef 	bl	800cac8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	601a      	str	r2, [r3, #0]
}
 80106f0:	bf00      	nop
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd90      	pop	{r4, r7, pc}
 80106f8:	0801c160 	.word	0x0801c160
 80106fc:	0801c420 	.word	0x0801c420
 8010700:	0801c1ac 	.word	0x0801c1ac
 8010704:	200111e8 	.word	0x200111e8

08010708 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010708:	b5b0      	push	{r4, r5, r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010716:	e03e      	b.n	8010796 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7fc fbe2 	bl	800cef0 <pbuf_clen>
 801072c:	4603      	mov	r3, r0
 801072e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010736:	8a7a      	ldrh	r2, [r7, #18]
 8010738:	429a      	cmp	r2, r3
 801073a:	d906      	bls.n	801074a <tcp_free_acked_segments+0x42>
 801073c:	4b2a      	ldr	r3, [pc, #168]	; (80107e8 <tcp_free_acked_segments+0xe0>)
 801073e:	f240 4257 	movw	r2, #1111	; 0x457
 8010742:	492a      	ldr	r1, [pc, #168]	; (80107ec <tcp_free_acked_segments+0xe4>)
 8010744:	482a      	ldr	r0, [pc, #168]	; (80107f0 <tcp_free_acked_segments+0xe8>)
 8010746:	f008 fa77 	bl	8018c38 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010750:	8a7b      	ldrh	r3, [r7, #18]
 8010752:	1ad3      	subs	r3, r2, r3
 8010754:	b29a      	uxth	r2, r3
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	891a      	ldrh	r2, [r3, #8]
 8010760:	4b24      	ldr	r3, [pc, #144]	; (80107f4 <tcp_free_acked_segments+0xec>)
 8010762:	881b      	ldrh	r3, [r3, #0]
 8010764:	4413      	add	r3, r2
 8010766:	b29a      	uxth	r2, r3
 8010768:	4b22      	ldr	r3, [pc, #136]	; (80107f4 <tcp_free_acked_segments+0xec>)
 801076a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801076c:	6978      	ldr	r0, [r7, #20]
 801076e:	f7fe f8ee 	bl	800e94e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010778:	2b00      	cmp	r3, #0
 801077a:	d00c      	beq.n	8010796 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d109      	bne.n	8010796 <tcp_free_acked_segments+0x8e>
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <tcp_free_acked_segments+0x8e>
 8010788:	4b17      	ldr	r3, [pc, #92]	; (80107e8 <tcp_free_acked_segments+0xe0>)
 801078a:	f240 4261 	movw	r2, #1121	; 0x461
 801078e:	491a      	ldr	r1, [pc, #104]	; (80107f8 <tcp_free_acked_segments+0xf0>)
 8010790:	4817      	ldr	r0, [pc, #92]	; (80107f0 <tcp_free_acked_segments+0xe8>)
 8010792:	f008 fa51 	bl	8018c38 <iprintf>
  while (seg_list != NULL &&
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d020      	beq.n	80107de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fa fef7 	bl	800b596 <lwip_htonl>
 80107a8:	4604      	mov	r4, r0
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	891b      	ldrh	r3, [r3, #8]
 80107ae:	461d      	mov	r5, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	899b      	ldrh	r3, [r3, #12]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fa fed7 	bl	800b56c <lwip_htons>
 80107be:	4603      	mov	r3, r0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	f003 0303 	and.w	r3, r3, #3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <tcp_free_acked_segments+0xc6>
 80107ca:	2301      	movs	r3, #1
 80107cc:	e000      	b.n	80107d0 <tcp_free_acked_segments+0xc8>
 80107ce:	2300      	movs	r3, #0
 80107d0:	442b      	add	r3, r5
 80107d2:	18e2      	adds	r2, r4, r3
 80107d4:	4b09      	ldr	r3, [pc, #36]	; (80107fc <tcp_free_acked_segments+0xf4>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dd9c      	ble.n	8010718 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80107de:	68bb      	ldr	r3, [r7, #8]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3718      	adds	r7, #24
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bdb0      	pop	{r4, r5, r7, pc}
 80107e8:	0801c160 	.word	0x0801c160
 80107ec:	0801c448 	.word	0x0801c448
 80107f0:	0801c1ac 	.word	0x0801c1ac
 80107f4:	200111f0 	.word	0x200111f0
 80107f8:	0801c470 	.word	0x0801c470
 80107fc:	200111ec 	.word	0x200111ec

08010800 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010800:	b5b0      	push	{r4, r5, r7, lr}
 8010802:	b094      	sub	sp, #80	; 0x50
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010808:	2300      	movs	r3, #0
 801080a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d106      	bne.n	8010820 <tcp_receive+0x20>
 8010812:	4b91      	ldr	r3, [pc, #580]	; (8010a58 <tcp_receive+0x258>)
 8010814:	f240 427b 	movw	r2, #1147	; 0x47b
 8010818:	4990      	ldr	r1, [pc, #576]	; (8010a5c <tcp_receive+0x25c>)
 801081a:	4891      	ldr	r0, [pc, #580]	; (8010a60 <tcp_receive+0x260>)
 801081c:	f008 fa0c 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7d1b      	ldrb	r3, [r3, #20]
 8010824:	2b03      	cmp	r3, #3
 8010826:	d806      	bhi.n	8010836 <tcp_receive+0x36>
 8010828:	4b8b      	ldr	r3, [pc, #556]	; (8010a58 <tcp_receive+0x258>)
 801082a:	f240 427c 	movw	r2, #1148	; 0x47c
 801082e:	498d      	ldr	r1, [pc, #564]	; (8010a64 <tcp_receive+0x264>)
 8010830:	488b      	ldr	r0, [pc, #556]	; (8010a60 <tcp_receive+0x260>)
 8010832:	f008 fa01 	bl	8018c38 <iprintf>

  if (flags & TCP_ACK) {
 8010836:	4b8c      	ldr	r3, [pc, #560]	; (8010a68 <tcp_receive+0x268>)
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 0310 	and.w	r3, r3, #16
 801083e:	2b00      	cmp	r3, #0
 8010840:	f000 8264 	beq.w	8010d0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801084a:	461a      	mov	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010850:	4413      	add	r3, r2
 8010852:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010858:	4b84      	ldr	r3, [pc, #528]	; (8010a6c <tcp_receive+0x26c>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	db1b      	blt.n	801089a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010866:	4b81      	ldr	r3, [pc, #516]	; (8010a6c <tcp_receive+0x26c>)
 8010868:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801086a:	429a      	cmp	r2, r3
 801086c:	d106      	bne.n	801087c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010872:	4b7f      	ldr	r3, [pc, #508]	; (8010a70 <tcp_receive+0x270>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	2b00      	cmp	r3, #0
 801087a:	db0e      	blt.n	801089a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010880:	4b7b      	ldr	r3, [pc, #492]	; (8010a70 <tcp_receive+0x270>)
 8010882:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010884:	429a      	cmp	r2, r3
 8010886:	d125      	bne.n	80108d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010888:	4b7a      	ldr	r3, [pc, #488]	; (8010a74 <tcp_receive+0x274>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	89db      	ldrh	r3, [r3, #14]
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010896:	429a      	cmp	r2, r3
 8010898:	d91c      	bls.n	80108d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801089a:	4b76      	ldr	r3, [pc, #472]	; (8010a74 <tcp_receive+0x274>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	89db      	ldrh	r3, [r3, #14]
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d205      	bcs.n	80108c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80108c4:	4b69      	ldr	r3, [pc, #420]	; (8010a6c <tcp_receive+0x26c>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80108cc:	4b68      	ldr	r3, [pc, #416]	; (8010a70 <tcp_receive+0x270>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108d4:	4b66      	ldr	r3, [pc, #408]	; (8010a70 <tcp_receive+0x270>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	dc58      	bgt.n	8010994 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80108e2:	4b65      	ldr	r3, [pc, #404]	; (8010a78 <tcp_receive+0x278>)
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d14b      	bne.n	8010982 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80108f4:	4413      	add	r3, r2
 80108f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d142      	bne.n	8010982 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010902:	2b00      	cmp	r3, #0
 8010904:	db3d      	blt.n	8010982 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801090a:	4b59      	ldr	r3, [pc, #356]	; (8010a70 <tcp_receive+0x270>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	429a      	cmp	r2, r3
 8010910:	d137      	bne.n	8010982 <tcp_receive+0x182>
              found_dupack = 1;
 8010912:	2301      	movs	r3, #1
 8010914:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801091c:	2bff      	cmp	r3, #255	; 0xff
 801091e:	d007      	beq.n	8010930 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010926:	3301      	adds	r3, #1
 8010928:	b2da      	uxtb	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010936:	2b03      	cmp	r3, #3
 8010938:	d91b      	bls.n	8010972 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010944:	4413      	add	r3, r2
 8010946:	b29a      	uxth	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801094e:	429a      	cmp	r2, r3
 8010950:	d30a      	bcc.n	8010968 <tcp_receive+0x168>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801095c:	4413      	add	r3, r2
 801095e:	b29a      	uxth	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010966:	e004      	b.n	8010972 <tcp_receive+0x172>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801096e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010978:	2b02      	cmp	r3, #2
 801097a:	d902      	bls.n	8010982 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f002 fb45 	bl	801300c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010984:	2b00      	cmp	r3, #0
 8010986:	f040 8161 	bne.w	8010c4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010992:	e15b      	b.n	8010c4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010994:	4b36      	ldr	r3, [pc, #216]	; (8010a70 <tcp_receive+0x270>)
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801099c:	1ad3      	subs	r3, r2, r3
 801099e:	3b01      	subs	r3, #1
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f2c0 814e 	blt.w	8010c42 <tcp_receive+0x442>
 80109a6:	4b32      	ldr	r3, [pc, #200]	; (8010a70 <tcp_receive+0x270>)
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f300 8146 	bgt.w	8010c42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8b5b      	ldrh	r3, [r3, #26]
 80109ba:	f003 0304 	and.w	r3, r3, #4
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d010      	beq.n	80109e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8b5b      	ldrh	r3, [r3, #26]
 80109c6:	f023 0304 	bic.w	r3, r3, #4
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109f2:	10db      	asrs	r3, r3, #3
 80109f4:	b21b      	sxth	r3, r3
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	4413      	add	r3, r2
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	b21a      	sxth	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010a0c:	4b18      	ldr	r3, [pc, #96]	; (8010a70 <tcp_receive+0x270>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	1ad3      	subs	r3, r2, r3
 8010a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a24:	4b12      	ldr	r3, [pc, #72]	; (8010a70 <tcp_receive+0x270>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	7d1b      	ldrb	r3, [r3, #20]
 8010a30:	2b03      	cmp	r3, #3
 8010a32:	f240 8097 	bls.w	8010b64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d245      	bcs.n	8010ad2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8b5b      	ldrh	r3, [r3, #26]
 8010a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d014      	beq.n	8010a7c <tcp_receive+0x27c>
 8010a52:	2301      	movs	r3, #1
 8010a54:	e013      	b.n	8010a7e <tcp_receive+0x27e>
 8010a56:	bf00      	nop
 8010a58:	0801c160 	.word	0x0801c160
 8010a5c:	0801c490 	.word	0x0801c490
 8010a60:	0801c1ac 	.word	0x0801c1ac
 8010a64:	0801c4ac 	.word	0x0801c4ac
 8010a68:	200111f4 	.word	0x200111f4
 8010a6c:	200111e8 	.word	0x200111e8
 8010a70:	200111ec 	.word	0x200111ec
 8010a74:	200111d8 	.word	0x200111d8
 8010a78:	200111f2 	.word	0x200111f2
 8010a7c:	2302      	movs	r3, #2
 8010a7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a8c:	fb12 f303 	smulbb	r3, r2, r3
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a94:	4293      	cmp	r3, r2
 8010a96:	bf28      	it	cs
 8010a98:	4613      	movcs	r3, r2
 8010a9a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010aa4:	4413      	add	r3, r2
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d309      	bcc.n	8010ac6 <tcp_receive+0x2c6>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ab8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010aba:	4413      	add	r3, r2
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ac4:	e04e      	b.n	8010b64 <tcp_receive+0x364>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010acc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ad0:	e048      	b.n	8010b64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ada:	4413      	add	r3, r2
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d309      	bcc.n	8010afc <tcp_receive+0x2fc>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010af0:	4413      	add	r3, r2
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010afa:	e004      	b.n	8010b06 <tcp_receive+0x306>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d326      	bcc.n	8010b64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b36:	4413      	add	r3, r2
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d30a      	bcc.n	8010b5a <tcp_receive+0x35a>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b4e:	4413      	add	r3, r2
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b58:	e004      	b.n	8010b64 <tcp_receive+0x364>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b6c:	4a98      	ldr	r2, [pc, #608]	; (8010dd0 <tcp_receive+0x5d0>)
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7ff fdca 	bl	8010708 <tcp_free_acked_segments>
 8010b74:	4602      	mov	r2, r0
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b82:	4a94      	ldr	r2, [pc, #592]	; (8010dd4 <tcp_receive+0x5d4>)
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff fdbf 	bl	8010708 <tcp_free_acked_segments>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d104      	bne.n	8010ba2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b9e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010ba0:	e002      	b.n	8010ba8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d103      	bne.n	8010bbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010bc4:	4b84      	ldr	r3, [pc, #528]	; (8010dd8 <tcp_receive+0x5d8>)
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	4413      	add	r3, r2
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8b5b      	ldrh	r3, [r3, #26]
 8010bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d035      	beq.n	8010c4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d118      	bne.n	8010c18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00c      	beq.n	8010c08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fa fccb 	bl	800b596 <lwip_htonl>
 8010c00:	4603      	mov	r3, r0
 8010c02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dc20      	bgt.n	8010c4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	8b5b      	ldrh	r3, [r3, #26]
 8010c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c16:	e018      	b.n	8010c4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fa fcb6 	bl	800b596 <lwip_htonl>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	1ae3      	subs	r3, r4, r3
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	dc0b      	bgt.n	8010c4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8b5b      	ldrh	r3, [r3, #26]
 8010c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c40:	e003      	b.n	8010c4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f002 fbce 	bl	80133e4 <tcp_send_empty_ack>
 8010c48:	e000      	b.n	8010c4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d05b      	beq.n	8010d0c <tcp_receive+0x50c>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c58:	4b60      	ldr	r3, [pc, #384]	; (8010ddc <tcp_receive+0x5dc>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	da54      	bge.n	8010d0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c62:	4b5f      	ldr	r3, [pc, #380]	; (8010de0 <tcp_receive+0x5e0>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c80:	10db      	asrs	r3, r3, #3
 8010c82:	b21b      	sxth	r3, r3
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c9a:	4413      	add	r3, r2
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	b21a      	sxth	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010ca4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	da05      	bge.n	8010cb8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cb0:	425b      	negs	r3, r3
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010cb8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cc2:	109b      	asrs	r3, r3, #2
 8010cc4:	b21b      	sxth	r3, r3
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cdc:	4413      	add	r3, r2
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	b21a      	sxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cec:	10db      	asrs	r3, r3, #3
 8010cee:	b21b      	sxth	r3, r3
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	4413      	add	r3, r2
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	b21a      	sxth	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010d0c:	4b35      	ldr	r3, [pc, #212]	; (8010de4 <tcp_receive+0x5e4>)
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f000 84e2 	beq.w	80116da <tcp_receive+0xeda>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7d1b      	ldrb	r3, [r3, #20]
 8010d1a:	2b06      	cmp	r3, #6
 8010d1c:	f200 84dd 	bhi.w	80116da <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d24:	4b30      	ldr	r3, [pc, #192]	; (8010de8 <tcp_receive+0x5e8>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	1ad3      	subs	r3, r2, r3
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f2c0 808f 	blt.w	8010e50 <tcp_receive+0x650>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d36:	4b2b      	ldr	r3, [pc, #172]	; (8010de4 <tcp_receive+0x5e4>)
 8010d38:	881b      	ldrh	r3, [r3, #0]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	4b2a      	ldr	r3, [pc, #168]	; (8010de8 <tcp_receive+0x5e8>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	440b      	add	r3, r1
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	3301      	adds	r3, #1
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f300 8082 	bgt.w	8010e50 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d4c:	4b27      	ldr	r3, [pc, #156]	; (8010dec <tcp_receive+0x5ec>)
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d56:	4b24      	ldr	r3, [pc, #144]	; (8010de8 <tcp_receive+0x5e8>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d5e:	4b23      	ldr	r3, [pc, #140]	; (8010dec <tcp_receive+0x5ec>)
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <tcp_receive+0x574>
 8010d66:	4b22      	ldr	r3, [pc, #136]	; (8010df0 <tcp_receive+0x5f0>)
 8010d68:	f240 5294 	movw	r2, #1428	; 0x594
 8010d6c:	4921      	ldr	r1, [pc, #132]	; (8010df4 <tcp_receive+0x5f4>)
 8010d6e:	4822      	ldr	r0, [pc, #136]	; (8010df8 <tcp_receive+0x5f8>)
 8010d70:	f007 ff62 	bl	8018c38 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d906      	bls.n	8010d8c <tcp_receive+0x58c>
 8010d7e:	4b1c      	ldr	r3, [pc, #112]	; (8010df0 <tcp_receive+0x5f0>)
 8010d80:	f240 5295 	movw	r2, #1429	; 0x595
 8010d84:	491d      	ldr	r1, [pc, #116]	; (8010dfc <tcp_receive+0x5fc>)
 8010d86:	481c      	ldr	r0, [pc, #112]	; (8010df8 <tcp_receive+0x5f8>)
 8010d88:	f007 ff56 	bl	8018c38 <iprintf>
      off = (u16_t)off32;
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d92:	4b16      	ldr	r3, [pc, #88]	; (8010dec <tcp_receive+0x5ec>)
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	891b      	ldrh	r3, [r3, #8]
 8010d98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d906      	bls.n	8010dae <tcp_receive+0x5ae>
 8010da0:	4b13      	ldr	r3, [pc, #76]	; (8010df0 <tcp_receive+0x5f0>)
 8010da2:	f240 5297 	movw	r2, #1431	; 0x597
 8010da6:	4916      	ldr	r1, [pc, #88]	; (8010e00 <tcp_receive+0x600>)
 8010da8:	4813      	ldr	r0, [pc, #76]	; (8010df8 <tcp_receive+0x5f8>)
 8010daa:	f007 ff45 	bl	8018c38 <iprintf>
      inseg.len -= off;
 8010dae:	4b0f      	ldr	r3, [pc, #60]	; (8010dec <tcp_receive+0x5ec>)
 8010db0:	891a      	ldrh	r2, [r3, #8]
 8010db2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	4b0c      	ldr	r3, [pc, #48]	; (8010dec <tcp_receive+0x5ec>)
 8010dbc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010dbe:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <tcp_receive+0x5ec>)
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	891a      	ldrh	r2, [r3, #8]
 8010dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010dcc:	e02a      	b.n	8010e24 <tcp_receive+0x624>
 8010dce:	bf00      	nop
 8010dd0:	0801c4c8 	.word	0x0801c4c8
 8010dd4:	0801c4d0 	.word	0x0801c4d0
 8010dd8:	200111f0 	.word	0x200111f0
 8010ddc:	200111ec 	.word	0x200111ec
 8010de0:	200111b0 	.word	0x200111b0
 8010de4:	200111f2 	.word	0x200111f2
 8010de8:	200111e8 	.word	0x200111e8
 8010dec:	200111c8 	.word	0x200111c8
 8010df0:	0801c160 	.word	0x0801c160
 8010df4:	0801c4d8 	.word	0x0801c4d8
 8010df8:	0801c1ac 	.word	0x0801c1ac
 8010dfc:	0801c4e8 	.word	0x0801c4e8
 8010e00:	0801c4f8 	.word	0x0801c4f8
        off -= p->len;
 8010e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e06:	895b      	ldrh	r3, [r3, #10]
 8010e08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e16:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e26:	895b      	ldrh	r3, [r3, #10]
 8010e28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d8e9      	bhi.n	8010e04 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e34:	4619      	mov	r1, r3
 8010e36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e38:	f7fb ff46 	bl	800ccc8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e40:	4a91      	ldr	r2, [pc, #580]	; (8011088 <tcp_receive+0x888>)
 8010e42:	6013      	str	r3, [r2, #0]
 8010e44:	4b91      	ldr	r3, [pc, #580]	; (801108c <tcp_receive+0x88c>)
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	4a8f      	ldr	r2, [pc, #572]	; (8011088 <tcp_receive+0x888>)
 8010e4a:	6812      	ldr	r2, [r2, #0]
 8010e4c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e4e:	e00d      	b.n	8010e6c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e50:	4b8d      	ldr	r3, [pc, #564]	; (8011088 <tcp_receive+0x888>)
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	da06      	bge.n	8010e6c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	8b5b      	ldrh	r3, [r3, #26]
 8010e62:	f043 0302 	orr.w	r3, r3, #2
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e6c:	4b86      	ldr	r3, [pc, #536]	; (8011088 <tcp_receive+0x888>)
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f2c0 842a 	blt.w	80116d0 <tcp_receive+0xed0>
 8010e7c:	4b82      	ldr	r3, [pc, #520]	; (8011088 <tcp_receive+0x888>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e84:	6879      	ldr	r1, [r7, #4]
 8010e86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e88:	440b      	add	r3, r1
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f300 841e 	bgt.w	80116d0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e98:	4b7b      	ldr	r3, [pc, #492]	; (8011088 <tcp_receive+0x888>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	f040 829a 	bne.w	80113d6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ea2:	4b7a      	ldr	r3, [pc, #488]	; (801108c <tcp_receive+0x88c>)
 8010ea4:	891c      	ldrh	r4, [r3, #8]
 8010ea6:	4b79      	ldr	r3, [pc, #484]	; (801108c <tcp_receive+0x88c>)
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	899b      	ldrh	r3, [r3, #12]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fa fb5c 	bl	800b56c <lwip_htons>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f003 0303 	and.w	r3, r3, #3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <tcp_receive+0x6c4>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e000      	b.n	8010ec6 <tcp_receive+0x6c6>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	4423      	add	r3, r4
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	4b71      	ldr	r3, [pc, #452]	; (8011090 <tcp_receive+0x890>)
 8010ecc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ed2:	4b6f      	ldr	r3, [pc, #444]	; (8011090 <tcp_receive+0x890>)
 8010ed4:	881b      	ldrh	r3, [r3, #0]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d275      	bcs.n	8010fc6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010eda:	4b6c      	ldr	r3, [pc, #432]	; (801108c <tcp_receive+0x88c>)
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	899b      	ldrh	r3, [r3, #12]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fa fb42 	bl	800b56c <lwip_htons>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	f003 0301 	and.w	r3, r3, #1
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d01f      	beq.n	8010f34 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ef4:	4b65      	ldr	r3, [pc, #404]	; (801108c <tcp_receive+0x88c>)
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	899b      	ldrh	r3, [r3, #12]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	b21b      	sxth	r3, r3
 8010efe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f02:	b21c      	sxth	r4, r3
 8010f04:	4b61      	ldr	r3, [pc, #388]	; (801108c <tcp_receive+0x88c>)
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	899b      	ldrh	r3, [r3, #12]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fa fb2d 	bl	800b56c <lwip_htons>
 8010f12:	4603      	mov	r3, r0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fa fb24 	bl	800b56c <lwip_htons>
 8010f24:	4603      	mov	r3, r0
 8010f26:	b21b      	sxth	r3, r3
 8010f28:	4323      	orrs	r3, r4
 8010f2a:	b21a      	sxth	r2, r3
 8010f2c:	4b57      	ldr	r3, [pc, #348]	; (801108c <tcp_receive+0x88c>)
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	b292      	uxth	r2, r2
 8010f32:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f38:	4b54      	ldr	r3, [pc, #336]	; (801108c <tcp_receive+0x88c>)
 8010f3a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f3c:	4b53      	ldr	r3, [pc, #332]	; (801108c <tcp_receive+0x88c>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fa fb11 	bl	800b56c <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0302 	and.w	r3, r3, #2
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d005      	beq.n	8010f62 <tcp_receive+0x762>
            inseg.len -= 1;
 8010f56:	4b4d      	ldr	r3, [pc, #308]	; (801108c <tcp_receive+0x88c>)
 8010f58:	891b      	ldrh	r3, [r3, #8]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	4b4b      	ldr	r3, [pc, #300]	; (801108c <tcp_receive+0x88c>)
 8010f60:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f62:	4b4a      	ldr	r3, [pc, #296]	; (801108c <tcp_receive+0x88c>)
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	4a49      	ldr	r2, [pc, #292]	; (801108c <tcp_receive+0x88c>)
 8010f68:	8912      	ldrh	r2, [r2, #8]
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fb fdab 	bl	800cac8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f72:	4b46      	ldr	r3, [pc, #280]	; (801108c <tcp_receive+0x88c>)
 8010f74:	891c      	ldrh	r4, [r3, #8]
 8010f76:	4b45      	ldr	r3, [pc, #276]	; (801108c <tcp_receive+0x88c>)
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	899b      	ldrh	r3, [r3, #12]
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fa faf4 	bl	800b56c <lwip_htons>
 8010f84:	4603      	mov	r3, r0
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	f003 0303 	and.w	r3, r3, #3
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d001      	beq.n	8010f94 <tcp_receive+0x794>
 8010f90:	2301      	movs	r3, #1
 8010f92:	e000      	b.n	8010f96 <tcp_receive+0x796>
 8010f94:	2300      	movs	r3, #0
 8010f96:	4423      	add	r3, r4
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	4b3d      	ldr	r3, [pc, #244]	; (8011090 <tcp_receive+0x890>)
 8010f9c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f9e:	4b3c      	ldr	r3, [pc, #240]	; (8011090 <tcp_receive+0x890>)
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	4b38      	ldr	r3, [pc, #224]	; (8011088 <tcp_receive+0x888>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	441a      	add	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fae:	6879      	ldr	r1, [r7, #4]
 8010fb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fb2:	440b      	add	r3, r1
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d006      	beq.n	8010fc6 <tcp_receive+0x7c6>
 8010fb8:	4b36      	ldr	r3, [pc, #216]	; (8011094 <tcp_receive+0x894>)
 8010fba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010fbe:	4936      	ldr	r1, [pc, #216]	; (8011098 <tcp_receive+0x898>)
 8010fc0:	4836      	ldr	r0, [pc, #216]	; (801109c <tcp_receive+0x89c>)
 8010fc2:	f007 fe39 	bl	8018c38 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f000 80e7 	beq.w	801119e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fd0:	4b2e      	ldr	r3, [pc, #184]	; (801108c <tcp_receive+0x88c>)
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	899b      	ldrh	r3, [r3, #12]
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fa fac7 	bl	800b56c <lwip_htons>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	f003 0301 	and.w	r3, r3, #1
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d010      	beq.n	801100c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010fea:	e00a      	b.n	8011002 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ff0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ff6:	681a      	ldr	r2, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010ffc:	68f8      	ldr	r0, [r7, #12]
 8010ffe:	f7fd fca6 	bl	800e94e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011006:	2b00      	cmp	r3, #0
 8011008:	d1f0      	bne.n	8010fec <tcp_receive+0x7ec>
 801100a:	e0c8      	b.n	801119e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011010:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011012:	e052      	b.n	80110ba <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	899b      	ldrh	r3, [r3, #12]
 801101a:	b29b      	uxth	r3, r3
 801101c:	4618      	mov	r0, r3
 801101e:	f7fa faa5 	bl	800b56c <lwip_htons>
 8011022:	4603      	mov	r3, r0
 8011024:	b2db      	uxtb	r3, r3
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	d03d      	beq.n	80110aa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801102e:	4b17      	ldr	r3, [pc, #92]	; (801108c <tcp_receive+0x88c>)
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	899b      	ldrh	r3, [r3, #12]
 8011034:	b29b      	uxth	r3, r3
 8011036:	4618      	mov	r0, r3
 8011038:	f7fa fa98 	bl	800b56c <lwip_htons>
 801103c:	4603      	mov	r3, r0
 801103e:	b2db      	uxtb	r3, r3
 8011040:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011044:	2b00      	cmp	r3, #0
 8011046:	d130      	bne.n	80110aa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011048:	4b10      	ldr	r3, [pc, #64]	; (801108c <tcp_receive+0x88c>)
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	899b      	ldrh	r3, [r3, #12]
 801104e:	b29c      	uxth	r4, r3
 8011050:	2001      	movs	r0, #1
 8011052:	f7fa fa8b 	bl	800b56c <lwip_htons>
 8011056:	4603      	mov	r3, r0
 8011058:	461a      	mov	r2, r3
 801105a:	4b0c      	ldr	r3, [pc, #48]	; (801108c <tcp_receive+0x88c>)
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	4322      	orrs	r2, r4
 8011060:	b292      	uxth	r2, r2
 8011062:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011064:	4b09      	ldr	r3, [pc, #36]	; (801108c <tcp_receive+0x88c>)
 8011066:	891c      	ldrh	r4, [r3, #8]
 8011068:	4b08      	ldr	r3, [pc, #32]	; (801108c <tcp_receive+0x88c>)
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	899b      	ldrh	r3, [r3, #12]
 801106e:	b29b      	uxth	r3, r3
 8011070:	4618      	mov	r0, r3
 8011072:	f7fa fa7b 	bl	800b56c <lwip_htons>
 8011076:	4603      	mov	r3, r0
 8011078:	b2db      	uxtb	r3, r3
 801107a:	f003 0303 	and.w	r3, r3, #3
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00e      	beq.n	80110a0 <tcp_receive+0x8a0>
 8011082:	2301      	movs	r3, #1
 8011084:	e00d      	b.n	80110a2 <tcp_receive+0x8a2>
 8011086:	bf00      	nop
 8011088:	200111e8 	.word	0x200111e8
 801108c:	200111c8 	.word	0x200111c8
 8011090:	200111f2 	.word	0x200111f2
 8011094:	0801c160 	.word	0x0801c160
 8011098:	0801c508 	.word	0x0801c508
 801109c:	0801c1ac 	.word	0x0801c1ac
 80110a0:	2300      	movs	r3, #0
 80110a2:	4423      	add	r3, r4
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	4b98      	ldr	r3, [pc, #608]	; (8011308 <tcp_receive+0xb08>)
 80110a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80110aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 80110ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80110b4:	6938      	ldr	r0, [r7, #16]
 80110b6:	f7fd fc4a 	bl	800e94e <tcp_seg_free>
            while (next &&
 80110ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d00e      	beq.n	80110de <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80110c0:	4b91      	ldr	r3, [pc, #580]	; (8011308 <tcp_receive+0xb08>)
 80110c2:	881b      	ldrh	r3, [r3, #0]
 80110c4:	461a      	mov	r2, r3
 80110c6:	4b91      	ldr	r3, [pc, #580]	; (801130c <tcp_receive+0xb0c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	441a      	add	r2, r3
 80110cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110d4:	8909      	ldrh	r1, [r1, #8]
 80110d6:	440b      	add	r3, r1
 80110d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80110da:	2b00      	cmp	r3, #0
 80110dc:	da9a      	bge.n	8011014 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80110de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d059      	beq.n	8011198 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80110e4:	4b88      	ldr	r3, [pc, #544]	; (8011308 <tcp_receive+0xb08>)
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	461a      	mov	r2, r3
 80110ea:	4b88      	ldr	r3, [pc, #544]	; (801130c <tcp_receive+0xb0c>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	441a      	add	r2, r3
 80110f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	dd4d      	ble.n	8011198 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80110fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	b29a      	uxth	r2, r3
 8011104:	4b81      	ldr	r3, [pc, #516]	; (801130c <tcp_receive+0xb0c>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	b29b      	uxth	r3, r3
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	b29a      	uxth	r2, r3
 801110e:	4b80      	ldr	r3, [pc, #512]	; (8011310 <tcp_receive+0xb10>)
 8011110:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011112:	4b7f      	ldr	r3, [pc, #508]	; (8011310 <tcp_receive+0xb10>)
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	899b      	ldrh	r3, [r3, #12]
 8011118:	b29b      	uxth	r3, r3
 801111a:	4618      	mov	r0, r3
 801111c:	f7fa fa26 	bl	800b56c <lwip_htons>
 8011120:	4603      	mov	r3, r0
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 0302 	and.w	r3, r3, #2
 8011128:	2b00      	cmp	r3, #0
 801112a:	d005      	beq.n	8011138 <tcp_receive+0x938>
                inseg.len -= 1;
 801112c:	4b78      	ldr	r3, [pc, #480]	; (8011310 <tcp_receive+0xb10>)
 801112e:	891b      	ldrh	r3, [r3, #8]
 8011130:	3b01      	subs	r3, #1
 8011132:	b29a      	uxth	r2, r3
 8011134:	4b76      	ldr	r3, [pc, #472]	; (8011310 <tcp_receive+0xb10>)
 8011136:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011138:	4b75      	ldr	r3, [pc, #468]	; (8011310 <tcp_receive+0xb10>)
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	4a74      	ldr	r2, [pc, #464]	; (8011310 <tcp_receive+0xb10>)
 801113e:	8912      	ldrh	r2, [r2, #8]
 8011140:	4611      	mov	r1, r2
 8011142:	4618      	mov	r0, r3
 8011144:	f7fb fcc0 	bl	800cac8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011148:	4b71      	ldr	r3, [pc, #452]	; (8011310 <tcp_receive+0xb10>)
 801114a:	891c      	ldrh	r4, [r3, #8]
 801114c:	4b70      	ldr	r3, [pc, #448]	; (8011310 <tcp_receive+0xb10>)
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	899b      	ldrh	r3, [r3, #12]
 8011152:	b29b      	uxth	r3, r3
 8011154:	4618      	mov	r0, r3
 8011156:	f7fa fa09 	bl	800b56c <lwip_htons>
 801115a:	4603      	mov	r3, r0
 801115c:	b2db      	uxtb	r3, r3
 801115e:	f003 0303 	and.w	r3, r3, #3
 8011162:	2b00      	cmp	r3, #0
 8011164:	d001      	beq.n	801116a <tcp_receive+0x96a>
 8011166:	2301      	movs	r3, #1
 8011168:	e000      	b.n	801116c <tcp_receive+0x96c>
 801116a:	2300      	movs	r3, #0
 801116c:	4423      	add	r3, r4
 801116e:	b29a      	uxth	r2, r3
 8011170:	4b65      	ldr	r3, [pc, #404]	; (8011308 <tcp_receive+0xb08>)
 8011172:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011174:	4b64      	ldr	r3, [pc, #400]	; (8011308 <tcp_receive+0xb08>)
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	461a      	mov	r2, r3
 801117a:	4b64      	ldr	r3, [pc, #400]	; (801130c <tcp_receive+0xb0c>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	441a      	add	r2, r3
 8011180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d006      	beq.n	8011198 <tcp_receive+0x998>
 801118a:	4b62      	ldr	r3, [pc, #392]	; (8011314 <tcp_receive+0xb14>)
 801118c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011190:	4961      	ldr	r1, [pc, #388]	; (8011318 <tcp_receive+0xb18>)
 8011192:	4862      	ldr	r0, [pc, #392]	; (801131c <tcp_receive+0xb1c>)
 8011194:	f007 fd50 	bl	8018c38 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801119c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801119e:	4b5a      	ldr	r3, [pc, #360]	; (8011308 <tcp_receive+0xb08>)
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	4b59      	ldr	r3, [pc, #356]	; (801130c <tcp_receive+0xb0c>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	441a      	add	r2, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111b2:	4b55      	ldr	r3, [pc, #340]	; (8011308 <tcp_receive+0xb08>)
 80111b4:	881b      	ldrh	r3, [r3, #0]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d206      	bcs.n	80111c8 <tcp_receive+0x9c8>
 80111ba:	4b56      	ldr	r3, [pc, #344]	; (8011314 <tcp_receive+0xb14>)
 80111bc:	f240 6207 	movw	r2, #1543	; 0x607
 80111c0:	4957      	ldr	r1, [pc, #348]	; (8011320 <tcp_receive+0xb20>)
 80111c2:	4856      	ldr	r0, [pc, #344]	; (801131c <tcp_receive+0xb1c>)
 80111c4:	f007 fd38 	bl	8018c38 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111cc:	4b4e      	ldr	r3, [pc, #312]	; (8011308 <tcp_receive+0xb08>)
 80111ce:	881b      	ldrh	r3, [r3, #0]
 80111d0:	1ad3      	subs	r3, r2, r3
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7fc fd7b 	bl	800dcd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80111de:	4b4c      	ldr	r3, [pc, #304]	; (8011310 <tcp_receive+0xb10>)
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	891b      	ldrh	r3, [r3, #8]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d006      	beq.n	80111f6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80111e8:	4b49      	ldr	r3, [pc, #292]	; (8011310 <tcp_receive+0xb10>)
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	4a4d      	ldr	r2, [pc, #308]	; (8011324 <tcp_receive+0xb24>)
 80111ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80111f0:	4b47      	ldr	r3, [pc, #284]	; (8011310 <tcp_receive+0xb10>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111f6:	4b46      	ldr	r3, [pc, #280]	; (8011310 <tcp_receive+0xb10>)
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	899b      	ldrh	r3, [r3, #12]
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fa f9b4 	bl	800b56c <lwip_htons>
 8011204:	4603      	mov	r3, r0
 8011206:	b2db      	uxtb	r3, r3
 8011208:	f003 0301 	and.w	r3, r3, #1
 801120c:	2b00      	cmp	r3, #0
 801120e:	f000 80b8 	beq.w	8011382 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011212:	4b45      	ldr	r3, [pc, #276]	; (8011328 <tcp_receive+0xb28>)
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	f043 0320 	orr.w	r3, r3, #32
 801121a:	b2da      	uxtb	r2, r3
 801121c:	4b42      	ldr	r3, [pc, #264]	; (8011328 <tcp_receive+0xb28>)
 801121e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011220:	e0af      	b.n	8011382 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011226:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4a36      	ldr	r2, [pc, #216]	; (801130c <tcp_receive+0xb0c>)
 8011232:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	891b      	ldrh	r3, [r3, #8]
 8011238:	461c      	mov	r4, r3
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	899b      	ldrh	r3, [r3, #12]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4618      	mov	r0, r3
 8011244:	f7fa f992 	bl	800b56c <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f003 0303 	and.w	r3, r3, #3
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <tcp_receive+0xa58>
 8011254:	2301      	movs	r3, #1
 8011256:	e000      	b.n	801125a <tcp_receive+0xa5a>
 8011258:	2300      	movs	r3, #0
 801125a:	191a      	adds	r2, r3, r4
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011260:	441a      	add	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801126a:	461c      	mov	r4, r3
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	891b      	ldrh	r3, [r3, #8]
 8011270:	461d      	mov	r5, r3
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	899b      	ldrh	r3, [r3, #12]
 8011278:	b29b      	uxth	r3, r3
 801127a:	4618      	mov	r0, r3
 801127c:	f7fa f976 	bl	800b56c <lwip_htons>
 8011280:	4603      	mov	r3, r0
 8011282:	b2db      	uxtb	r3, r3
 8011284:	f003 0303 	and.w	r3, r3, #3
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <tcp_receive+0xa90>
 801128c:	2301      	movs	r3, #1
 801128e:	e000      	b.n	8011292 <tcp_receive+0xa92>
 8011290:	2300      	movs	r3, #0
 8011292:	442b      	add	r3, r5
 8011294:	429c      	cmp	r4, r3
 8011296:	d206      	bcs.n	80112a6 <tcp_receive+0xaa6>
 8011298:	4b1e      	ldr	r3, [pc, #120]	; (8011314 <tcp_receive+0xb14>)
 801129a:	f240 622b 	movw	r2, #1579	; 0x62b
 801129e:	4923      	ldr	r1, [pc, #140]	; (801132c <tcp_receive+0xb2c>)
 80112a0:	481e      	ldr	r0, [pc, #120]	; (801131c <tcp_receive+0xb1c>)
 80112a2:	f007 fcc9 	bl	8018c38 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	891b      	ldrh	r3, [r3, #8]
 80112aa:	461c      	mov	r4, r3
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	899b      	ldrh	r3, [r3, #12]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fa f959 	bl	800b56c <lwip_htons>
 80112ba:	4603      	mov	r3, r0
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	f003 0303 	and.w	r3, r3, #3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d001      	beq.n	80112ca <tcp_receive+0xaca>
 80112c6:	2301      	movs	r3, #1
 80112c8:	e000      	b.n	80112cc <tcp_receive+0xacc>
 80112ca:	2300      	movs	r3, #0
 80112cc:	1919      	adds	r1, r3, r4
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112d2:	b28b      	uxth	r3, r1
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7fc fcf9 	bl	800dcd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	891b      	ldrh	r3, [r3, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d028      	beq.n	801133e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80112ec:	4b0d      	ldr	r3, [pc, #52]	; (8011324 <tcp_receive+0xb24>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d01d      	beq.n	8011330 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80112f4:	4b0b      	ldr	r3, [pc, #44]	; (8011324 <tcp_receive+0xb24>)
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	4619      	mov	r1, r3
 80112fe:	4610      	mov	r0, r2
 8011300:	f7fb fe36 	bl	800cf70 <pbuf_cat>
 8011304:	e018      	b.n	8011338 <tcp_receive+0xb38>
 8011306:	bf00      	nop
 8011308:	200111f2 	.word	0x200111f2
 801130c:	200111e8 	.word	0x200111e8
 8011310:	200111c8 	.word	0x200111c8
 8011314:	0801c160 	.word	0x0801c160
 8011318:	0801c540 	.word	0x0801c540
 801131c:	0801c1ac 	.word	0x0801c1ac
 8011320:	0801c57c 	.word	0x0801c57c
 8011324:	200111f8 	.word	0x200111f8
 8011328:	200111f5 	.word	0x200111f5
 801132c:	0801c59c 	.word	0x0801c59c
            } else {
              recv_data = cseg->p;
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	4a70      	ldr	r2, [pc, #448]	; (80114f8 <tcp_receive+0xcf8>)
 8011336:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	2200      	movs	r2, #0
 801133c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	899b      	ldrh	r3, [r3, #12]
 8011344:	b29b      	uxth	r3, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7fa f910 	bl	800b56c <lwip_htons>
 801134c:	4603      	mov	r3, r0
 801134e:	b2db      	uxtb	r3, r3
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00d      	beq.n	8011374 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011358:	4b68      	ldr	r3, [pc, #416]	; (80114fc <tcp_receive+0xcfc>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	f043 0320 	orr.w	r3, r3, #32
 8011360:	b2da      	uxtb	r2, r3
 8011362:	4b66      	ldr	r3, [pc, #408]	; (80114fc <tcp_receive+0xcfc>)
 8011364:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	7d1b      	ldrb	r3, [r3, #20]
 801136a:	2b04      	cmp	r3, #4
 801136c:	d102      	bne.n	8011374 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2207      	movs	r2, #7
 8011372:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801137c:	68b8      	ldr	r0, [r7, #8]
 801137e:	f7fd fae6 	bl	800e94e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011386:	2b00      	cmp	r3, #0
 8011388:	d008      	beq.n	801139c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011396:	429a      	cmp	r2, r3
 8011398:	f43f af43 	beq.w	8011222 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8b5b      	ldrh	r3, [r3, #26]
 80113a0:	f003 0301 	and.w	r3, r3, #1
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00e      	beq.n	80113c6 <tcp_receive+0xbc6>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	8b5b      	ldrh	r3, [r3, #26]
 80113ac:	f023 0301 	bic.w	r3, r3, #1
 80113b0:	b29a      	uxth	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	835a      	strh	r2, [r3, #26]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	8b5b      	ldrh	r3, [r3, #26]
 80113ba:	f043 0302 	orr.w	r3, r3, #2
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113c4:	e188      	b.n	80116d8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8b5b      	ldrh	r3, [r3, #26]
 80113ca:	f043 0301 	orr.w	r3, r3, #1
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113d4:	e180      	b.n	80116d8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d106      	bne.n	80113ec <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80113de:	4848      	ldr	r0, [pc, #288]	; (8011500 <tcp_receive+0xd00>)
 80113e0:	f7fd faec 	bl	800e9bc <tcp_seg_copy>
 80113e4:	4602      	mov	r2, r0
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	675a      	str	r2, [r3, #116]	; 0x74
 80113ea:	e16d      	b.n	80116c8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80113ec:	2300      	movs	r3, #0
 80113ee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80113f6:	e157      	b.n	80116a8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80113f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	685a      	ldr	r2, [r3, #4]
 80113fe:	4b41      	ldr	r3, [pc, #260]	; (8011504 <tcp_receive+0xd04>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	429a      	cmp	r2, r3
 8011404:	d11d      	bne.n	8011442 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011406:	4b3e      	ldr	r3, [pc, #248]	; (8011500 <tcp_receive+0xd00>)
 8011408:	891a      	ldrh	r2, [r3, #8]
 801140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140c:	891b      	ldrh	r3, [r3, #8]
 801140e:	429a      	cmp	r2, r3
 8011410:	f240 814f 	bls.w	80116b2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011414:	483a      	ldr	r0, [pc, #232]	; (8011500 <tcp_receive+0xd00>)
 8011416:	f7fd fad1 	bl	800e9bc <tcp_seg_copy>
 801141a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 8149 	beq.w	80116b6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011426:	2b00      	cmp	r3, #0
 8011428:	d003      	beq.n	8011432 <tcp_receive+0xc32>
                    prev->next = cseg;
 801142a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142c:	697a      	ldr	r2, [r7, #20]
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	e002      	b.n	8011438 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801143a:	6978      	ldr	r0, [r7, #20]
 801143c:	f7ff f8dc 	bl	80105f8 <tcp_oos_insert_segment>
                }
                break;
 8011440:	e139      	b.n	80116b6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011444:	2b00      	cmp	r3, #0
 8011446:	d117      	bne.n	8011478 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011448:	4b2e      	ldr	r3, [pc, #184]	; (8011504 <tcp_receive+0xd04>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	2b00      	cmp	r3, #0
 8011456:	da57      	bge.n	8011508 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011458:	4829      	ldr	r0, [pc, #164]	; (8011500 <tcp_receive+0xd00>)
 801145a:	f7fd faaf 	bl	800e9bc <tcp_seg_copy>
 801145e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 8129 	beq.w	80116ba <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	69ba      	ldr	r2, [r7, #24]
 801146c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801146e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011470:	69b8      	ldr	r0, [r7, #24]
 8011472:	f7ff f8c1 	bl	80105f8 <tcp_oos_insert_segment>
                  }
                  break;
 8011476:	e120      	b.n	80116ba <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011478:	4b22      	ldr	r3, [pc, #136]	; (8011504 <tcp_receive+0xd04>)
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	3b01      	subs	r3, #1
 8011486:	2b00      	cmp	r3, #0
 8011488:	db3e      	blt.n	8011508 <tcp_receive+0xd08>
 801148a:	4b1e      	ldr	r3, [pc, #120]	; (8011504 <tcp_receive+0xd04>)
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	3301      	adds	r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	dc35      	bgt.n	8011508 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801149c:	4818      	ldr	r0, [pc, #96]	; (8011500 <tcp_receive+0xd00>)
 801149e:	f7fd fa8d 	bl	800e9bc <tcp_seg_copy>
 80114a2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 8109 	beq.w	80116be <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80114ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114b4:	8912      	ldrh	r2, [r2, #8]
 80114b6:	441a      	add	r2, r3
 80114b8:	4b12      	ldr	r3, [pc, #72]	; (8011504 <tcp_receive+0xd04>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	2b00      	cmp	r3, #0
 80114c0:	dd12      	ble.n	80114e8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80114c2:	4b10      	ldr	r3, [pc, #64]	; (8011504 <tcp_receive+0xd04>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80114d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114de:	891b      	ldrh	r3, [r3, #8]
 80114e0:	4619      	mov	r1, r3
 80114e2:	4610      	mov	r0, r2
 80114e4:	f7fb faf0 	bl	800cac8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80114e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ea:	69fa      	ldr	r2, [r7, #28]
 80114ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80114ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114f0:	69f8      	ldr	r0, [r7, #28]
 80114f2:	f7ff f881 	bl	80105f8 <tcp_oos_insert_segment>
                  }
                  break;
 80114f6:	e0e2      	b.n	80116be <tcp_receive+0xebe>
 80114f8:	200111f8 	.word	0x200111f8
 80114fc:	200111f5 	.word	0x200111f5
 8011500:	200111c8 	.word	0x200111c8
 8011504:	200111e8 	.word	0x200111e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	f040 80c6 	bne.w	80116a2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011516:	4b80      	ldr	r3, [pc, #512]	; (8011718 <tcp_receive+0xf18>)
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011522:	2b00      	cmp	r3, #0
 8011524:	f340 80bd 	ble.w	80116a2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	899b      	ldrh	r3, [r3, #12]
 801152e:	b29b      	uxth	r3, r3
 8011530:	4618      	mov	r0, r3
 8011532:	f7fa f81b 	bl	800b56c <lwip_htons>
 8011536:	4603      	mov	r3, r0
 8011538:	b2db      	uxtb	r3, r3
 801153a:	f003 0301 	and.w	r3, r3, #1
 801153e:	2b00      	cmp	r3, #0
 8011540:	f040 80bf 	bne.w	80116c2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011544:	4875      	ldr	r0, [pc, #468]	; (801171c <tcp_receive+0xf1c>)
 8011546:	f7fd fa39 	bl	800e9bc <tcp_seg_copy>
 801154a:	4602      	mov	r2, r0
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	f000 80b6 	beq.w	80116c6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011562:	8912      	ldrh	r2, [r2, #8]
 8011564:	441a      	add	r2, r3
 8011566:	4b6c      	ldr	r3, [pc, #432]	; (8011718 <tcp_receive+0xf18>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	2b00      	cmp	r3, #0
 801156e:	dd12      	ble.n	8011596 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011570:	4b69      	ldr	r3, [pc, #420]	; (8011718 <tcp_receive+0xf18>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	b29a      	uxth	r2, r3
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	b29b      	uxth	r3, r3
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	b29a      	uxth	r2, r3
 8011582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011584:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	4619      	mov	r1, r3
 8011590:	4610      	mov	r0, r2
 8011592:	f7fb fa99 	bl	800cac8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011596:	4b62      	ldr	r3, [pc, #392]	; (8011720 <tcp_receive+0xf20>)
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	461a      	mov	r2, r3
 801159c:	4b5e      	ldr	r3, [pc, #376]	; (8011718 <tcp_receive+0xf18>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	441a      	add	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a6:	6879      	ldr	r1, [r7, #4]
 80115a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115aa:	440b      	add	r3, r1
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f340 8089 	ble.w	80116c6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80115b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	899b      	ldrh	r3, [r3, #12]
 80115bc:	b29b      	uxth	r3, r3
 80115be:	4618      	mov	r0, r3
 80115c0:	f7f9 ffd4 	bl	800b56c <lwip_htons>
 80115c4:	4603      	mov	r3, r0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d022      	beq.n	8011616 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	899b      	ldrh	r3, [r3, #12]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	b21b      	sxth	r3, r3
 80115dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115e0:	b21c      	sxth	r4, r3
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	899b      	ldrh	r3, [r3, #12]
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7f9 ffbd 	bl	800b56c <lwip_htons>
 80115f2:	4603      	mov	r3, r0
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f9 ffb4 	bl	800b56c <lwip_htons>
 8011604:	4603      	mov	r3, r0
 8011606:	b21b      	sxth	r3, r3
 8011608:	4323      	orrs	r3, r4
 801160a:	b21a      	sxth	r2, r3
 801160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	b292      	uxth	r2, r2
 8011614:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801161a:	b29a      	uxth	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011620:	4413      	add	r3, r2
 8011622:	b299      	uxth	r1, r3
 8011624:	4b3c      	ldr	r3, [pc, #240]	; (8011718 <tcp_receive+0xf18>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	b29a      	uxth	r2, r3
 801162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	1a8a      	subs	r2, r1, r2
 8011630:	b292      	uxth	r2, r2
 8011632:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	891b      	ldrh	r3, [r3, #8]
 8011640:	4619      	mov	r1, r3
 8011642:	4610      	mov	r0, r2
 8011644:	f7fb fa40 	bl	800cac8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	891c      	ldrh	r4, [r3, #8]
 801164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	4618      	mov	r0, r3
 801165a:	f7f9 ff87 	bl	800b56c <lwip_htons>
 801165e:	4603      	mov	r3, r0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 0303 	and.w	r3, r3, #3
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <tcp_receive+0xe6e>
 801166a:	2301      	movs	r3, #1
 801166c:	e000      	b.n	8011670 <tcp_receive+0xe70>
 801166e:	2300      	movs	r3, #0
 8011670:	4423      	add	r3, r4
 8011672:	b29a      	uxth	r2, r3
 8011674:	4b2a      	ldr	r3, [pc, #168]	; (8011720 <tcp_receive+0xf20>)
 8011676:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011678:	4b29      	ldr	r3, [pc, #164]	; (8011720 <tcp_receive+0xf20>)
 801167a:	881b      	ldrh	r3, [r3, #0]
 801167c:	461a      	mov	r2, r3
 801167e:	4b26      	ldr	r3, [pc, #152]	; (8011718 <tcp_receive+0xf18>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	441a      	add	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801168c:	440b      	add	r3, r1
 801168e:	429a      	cmp	r2, r3
 8011690:	d019      	beq.n	80116c6 <tcp_receive+0xec6>
 8011692:	4b24      	ldr	r3, [pc, #144]	; (8011724 <tcp_receive+0xf24>)
 8011694:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011698:	4923      	ldr	r1, [pc, #140]	; (8011728 <tcp_receive+0xf28>)
 801169a:	4824      	ldr	r0, [pc, #144]	; (801172c <tcp_receive+0xf2c>)
 801169c:	f007 facc 	bl	8018c38 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80116a0:	e011      	b.n	80116c6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f47f aea4 	bne.w	80113f8 <tcp_receive+0xbf8>
 80116b0:	e00a      	b.n	80116c8 <tcp_receive+0xec8>
                break;
 80116b2:	bf00      	nop
 80116b4:	e008      	b.n	80116c8 <tcp_receive+0xec8>
                break;
 80116b6:	bf00      	nop
 80116b8:	e006      	b.n	80116c8 <tcp_receive+0xec8>
                  break;
 80116ba:	bf00      	nop
 80116bc:	e004      	b.n	80116c8 <tcp_receive+0xec8>
                  break;
 80116be:	bf00      	nop
 80116c0:	e002      	b.n	80116c8 <tcp_receive+0xec8>
                  break;
 80116c2:	bf00      	nop
 80116c4:	e000      	b.n	80116c8 <tcp_receive+0xec8>
                break;
 80116c6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f001 fe8b 	bl	80133e4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80116ce:	e003      	b.n	80116d8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f001 fe87 	bl	80133e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116d6:	e01a      	b.n	801170e <tcp_receive+0xf0e>
 80116d8:	e019      	b.n	801170e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116da:	4b0f      	ldr	r3, [pc, #60]	; (8011718 <tcp_receive+0xf18>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	db0a      	blt.n	80116fe <tcp_receive+0xefe>
 80116e8:	4b0b      	ldr	r3, [pc, #44]	; (8011718 <tcp_receive+0xf18>)
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116f4:	440b      	add	r3, r1
 80116f6:	1ad3      	subs	r3, r2, r3
 80116f8:	3301      	adds	r3, #1
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	dd07      	ble.n	801170e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8b5b      	ldrh	r3, [r3, #26]
 8011702:	f043 0302 	orr.w	r3, r3, #2
 8011706:	b29a      	uxth	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801170c:	e7ff      	b.n	801170e <tcp_receive+0xf0e>
 801170e:	bf00      	nop
 8011710:	3750      	adds	r7, #80	; 0x50
 8011712:	46bd      	mov	sp, r7
 8011714:	bdb0      	pop	{r4, r5, r7, pc}
 8011716:	bf00      	nop
 8011718:	200111e8 	.word	0x200111e8
 801171c:	200111c8 	.word	0x200111c8
 8011720:	200111f2 	.word	0x200111f2
 8011724:	0801c160 	.word	0x0801c160
 8011728:	0801c508 	.word	0x0801c508
 801172c:	0801c1ac 	.word	0x0801c1ac

08011730 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011736:	4b15      	ldr	r3, [pc, #84]	; (801178c <tcp_get_next_optbyte+0x5c>)
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	1c5a      	adds	r2, r3, #1
 801173c:	b291      	uxth	r1, r2
 801173e:	4a13      	ldr	r2, [pc, #76]	; (801178c <tcp_get_next_optbyte+0x5c>)
 8011740:	8011      	strh	r1, [r2, #0]
 8011742:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011744:	4b12      	ldr	r3, [pc, #72]	; (8011790 <tcp_get_next_optbyte+0x60>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d004      	beq.n	8011756 <tcp_get_next_optbyte+0x26>
 801174c:	4b11      	ldr	r3, [pc, #68]	; (8011794 <tcp_get_next_optbyte+0x64>)
 801174e:	881b      	ldrh	r3, [r3, #0]
 8011750:	88fa      	ldrh	r2, [r7, #6]
 8011752:	429a      	cmp	r2, r3
 8011754:	d208      	bcs.n	8011768 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011756:	4b10      	ldr	r3, [pc, #64]	; (8011798 <tcp_get_next_optbyte+0x68>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3314      	adds	r3, #20
 801175c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801175e:	88fb      	ldrh	r3, [r7, #6]
 8011760:	683a      	ldr	r2, [r7, #0]
 8011762:	4413      	add	r3, r2
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	e00b      	b.n	8011780 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011768:	88fb      	ldrh	r3, [r7, #6]
 801176a:	b2da      	uxtb	r2, r3
 801176c:	4b09      	ldr	r3, [pc, #36]	; (8011794 <tcp_get_next_optbyte+0x64>)
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	b2db      	uxtb	r3, r3
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011776:	4b06      	ldr	r3, [pc, #24]	; (8011790 <tcp_get_next_optbyte+0x60>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	797b      	ldrb	r3, [r7, #5]
 801177c:	4413      	add	r3, r2
 801177e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011780:	4618      	mov	r0, r3
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	200111e4 	.word	0x200111e4
 8011790:	200111e0 	.word	0x200111e0
 8011794:	200111de 	.word	0x200111de
 8011798:	200111d8 	.word	0x200111d8

0801179c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_parseopt+0x1c>
 80117aa:	4b32      	ldr	r3, [pc, #200]	; (8011874 <tcp_parseopt+0xd8>)
 80117ac:	f240 727d 	movw	r2, #1917	; 0x77d
 80117b0:	4931      	ldr	r1, [pc, #196]	; (8011878 <tcp_parseopt+0xdc>)
 80117b2:	4832      	ldr	r0, [pc, #200]	; (801187c <tcp_parseopt+0xe0>)
 80117b4:	f007 fa40 	bl	8018c38 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80117b8:	4b31      	ldr	r3, [pc, #196]	; (8011880 <tcp_parseopt+0xe4>)
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d055      	beq.n	801186c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117c0:	4b30      	ldr	r3, [pc, #192]	; (8011884 <tcp_parseopt+0xe8>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	801a      	strh	r2, [r3, #0]
 80117c6:	e045      	b.n	8011854 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80117c8:	f7ff ffb2 	bl	8011730 <tcp_get_next_optbyte>
 80117cc:	4603      	mov	r3, r0
 80117ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
 80117d2:	2b02      	cmp	r3, #2
 80117d4:	d006      	beq.n	80117e4 <tcp_parseopt+0x48>
 80117d6:	2b02      	cmp	r3, #2
 80117d8:	dc2b      	bgt.n	8011832 <tcp_parseopt+0x96>
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d041      	beq.n	8011862 <tcp_parseopt+0xc6>
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d127      	bne.n	8011832 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80117e2:	e037      	b.n	8011854 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80117e4:	f7ff ffa4 	bl	8011730 <tcp_get_next_optbyte>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b04      	cmp	r3, #4
 80117ec:	d13b      	bne.n	8011866 <tcp_parseopt+0xca>
 80117ee:	4b25      	ldr	r3, [pc, #148]	; (8011884 <tcp_parseopt+0xe8>)
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	3301      	adds	r3, #1
 80117f4:	4a22      	ldr	r2, [pc, #136]	; (8011880 <tcp_parseopt+0xe4>)
 80117f6:	8812      	ldrh	r2, [r2, #0]
 80117f8:	4293      	cmp	r3, r2
 80117fa:	da34      	bge.n	8011866 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80117fc:	f7ff ff98 	bl	8011730 <tcp_get_next_optbyte>
 8011800:	4603      	mov	r3, r0
 8011802:	b29b      	uxth	r3, r3
 8011804:	021b      	lsls	r3, r3, #8
 8011806:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011808:	f7ff ff92 	bl	8011730 <tcp_get_next_optbyte>
 801180c:	4603      	mov	r3, r0
 801180e:	b29a      	uxth	r2, r3
 8011810:	89bb      	ldrh	r3, [r7, #12]
 8011812:	4313      	orrs	r3, r2
 8011814:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011816:	89bb      	ldrh	r3, [r7, #12]
 8011818:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801181c:	d804      	bhi.n	8011828 <tcp_parseopt+0x8c>
 801181e:	89bb      	ldrh	r3, [r7, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d001      	beq.n	8011828 <tcp_parseopt+0x8c>
 8011824:	89ba      	ldrh	r2, [r7, #12]
 8011826:	e001      	b.n	801182c <tcp_parseopt+0x90>
 8011828:	f44f 7206 	mov.w	r2, #536	; 0x218
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011830:	e010      	b.n	8011854 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011832:	f7ff ff7d 	bl	8011730 <tcp_get_next_optbyte>
 8011836:	4603      	mov	r3, r0
 8011838:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801183a:	7afb      	ldrb	r3, [r7, #11]
 801183c:	2b01      	cmp	r3, #1
 801183e:	d914      	bls.n	801186a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011840:	7afb      	ldrb	r3, [r7, #11]
 8011842:	b29a      	uxth	r2, r3
 8011844:	4b0f      	ldr	r3, [pc, #60]	; (8011884 <tcp_parseopt+0xe8>)
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	4413      	add	r3, r2
 801184a:	b29b      	uxth	r3, r3
 801184c:	3b02      	subs	r3, #2
 801184e:	b29a      	uxth	r2, r3
 8011850:	4b0c      	ldr	r3, [pc, #48]	; (8011884 <tcp_parseopt+0xe8>)
 8011852:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011854:	4b0b      	ldr	r3, [pc, #44]	; (8011884 <tcp_parseopt+0xe8>)
 8011856:	881a      	ldrh	r2, [r3, #0]
 8011858:	4b09      	ldr	r3, [pc, #36]	; (8011880 <tcp_parseopt+0xe4>)
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	429a      	cmp	r2, r3
 801185e:	d3b3      	bcc.n	80117c8 <tcp_parseopt+0x2c>
 8011860:	e004      	b.n	801186c <tcp_parseopt+0xd0>
          return;
 8011862:	bf00      	nop
 8011864:	e002      	b.n	801186c <tcp_parseopt+0xd0>
            return;
 8011866:	bf00      	nop
 8011868:	e000      	b.n	801186c <tcp_parseopt+0xd0>
            return;
 801186a:	bf00      	nop
      }
    }
  }
}
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	0801c160 	.word	0x0801c160
 8011878:	0801c5c4 	.word	0x0801c5c4
 801187c:	0801c1ac 	.word	0x0801c1ac
 8011880:	200111dc 	.word	0x200111dc
 8011884:	200111e4 	.word	0x200111e4

08011888 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011888:	b480      	push	{r7}
 801188a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801188c:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <tcp_trigger_input_pcb_close+0x1c>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	f043 0310 	orr.w	r3, r3, #16
 8011894:	b2da      	uxtb	r2, r3
 8011896:	4b03      	ldr	r3, [pc, #12]	; (80118a4 <tcp_trigger_input_pcb_close+0x1c>)
 8011898:	701a      	strb	r2, [r3, #0]
}
 801189a:	bf00      	nop
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr
 80118a4:	200111f5 	.word	0x200111f5

080118a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00a      	beq.n	80118d0 <tcp_route+0x28>
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	7a1b      	ldrb	r3, [r3, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d006      	beq.n	80118d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	7a1b      	ldrb	r3, [r3, #8]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fa fef6 	bl	800c6b8 <netif_get_by_index>
 80118cc:	4603      	mov	r3, r0
 80118ce:	e003      	b.n	80118d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f005 fca9 	bl	8017228 <ip4_route>
 80118d6:	4603      	mov	r3, r0
  }
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b087      	sub	sp, #28
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	603b      	str	r3, [r7, #0]
 80118ec:	4613      	mov	r3, r2
 80118ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d105      	bne.n	8011902 <tcp_create_segment+0x22>
 80118f6:	4b44      	ldr	r3, [pc, #272]	; (8011a08 <tcp_create_segment+0x128>)
 80118f8:	22a3      	movs	r2, #163	; 0xa3
 80118fa:	4944      	ldr	r1, [pc, #272]	; (8011a0c <tcp_create_segment+0x12c>)
 80118fc:	4844      	ldr	r0, [pc, #272]	; (8011a10 <tcp_create_segment+0x130>)
 80118fe:	f007 f99b 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d105      	bne.n	8011914 <tcp_create_segment+0x34>
 8011908:	4b3f      	ldr	r3, [pc, #252]	; (8011a08 <tcp_create_segment+0x128>)
 801190a:	22a4      	movs	r2, #164	; 0xa4
 801190c:	4941      	ldr	r1, [pc, #260]	; (8011a14 <tcp_create_segment+0x134>)
 801190e:	4840      	ldr	r0, [pc, #256]	; (8011a10 <tcp_create_segment+0x130>)
 8011910:	f007 f992 	bl	8018c38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011918:	009b      	lsls	r3, r3, #2
 801191a:	b2db      	uxtb	r3, r3
 801191c:	f003 0304 	and.w	r3, r3, #4
 8011920:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011922:	2003      	movs	r0, #3
 8011924:	f7fa fb30 	bl	800bf88 <memp_malloc>
 8011928:	6138      	str	r0, [r7, #16]
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d104      	bne.n	801193a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011930:	68b8      	ldr	r0, [r7, #8]
 8011932:	f7fb fa4f 	bl	800cdd4 <pbuf_free>
    return NULL;
 8011936:	2300      	movs	r3, #0
 8011938:	e061      	b.n	80119fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011940:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	2200      	movs	r2, #0
 8011946:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	68ba      	ldr	r2, [r7, #8]
 801194c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	891a      	ldrh	r2, [r3, #8]
 8011952:	7dfb      	ldrb	r3, [r7, #23]
 8011954:	b29b      	uxth	r3, r3
 8011956:	429a      	cmp	r2, r3
 8011958:	d205      	bcs.n	8011966 <tcp_create_segment+0x86>
 801195a:	4b2b      	ldr	r3, [pc, #172]	; (8011a08 <tcp_create_segment+0x128>)
 801195c:	22b0      	movs	r2, #176	; 0xb0
 801195e:	492e      	ldr	r1, [pc, #184]	; (8011a18 <tcp_create_segment+0x138>)
 8011960:	482b      	ldr	r0, [pc, #172]	; (8011a10 <tcp_create_segment+0x130>)
 8011962:	f007 f969 	bl	8018c38 <iprintf>
  seg->len = p->tot_len - optlen;
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	891a      	ldrh	r2, [r3, #8]
 801196a:	7dfb      	ldrb	r3, [r7, #23]
 801196c:	b29b      	uxth	r3, r3
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	b29a      	uxth	r2, r3
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011976:	2114      	movs	r1, #20
 8011978:	68b8      	ldr	r0, [r7, #8]
 801197a:	f7fb f995 	bl	800cca8 <pbuf_add_header>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d004      	beq.n	801198e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011984:	6938      	ldr	r0, [r7, #16]
 8011986:	f7fc ffe2 	bl	800e94e <tcp_seg_free>
    return NULL;
 801198a:	2300      	movs	r3, #0
 801198c:	e037      	b.n	80119fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	685a      	ldr	r2, [r3, #4]
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	8ada      	ldrh	r2, [r3, #22]
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	68dc      	ldr	r4, [r3, #12]
 80119a0:	4610      	mov	r0, r2
 80119a2:	f7f9 fde3 	bl	800b56c <lwip_htons>
 80119a6:	4603      	mov	r3, r0
 80119a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	8b1a      	ldrh	r2, [r3, #24]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	68dc      	ldr	r4, [r3, #12]
 80119b2:	4610      	mov	r0, r2
 80119b4:	f7f9 fdda 	bl	800b56c <lwip_htons>
 80119b8:	4603      	mov	r3, r0
 80119ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	68dc      	ldr	r4, [r3, #12]
 80119c0:	6838      	ldr	r0, [r7, #0]
 80119c2:	f7f9 fde8 	bl	800b596 <lwip_htonl>
 80119c6:	4603      	mov	r3, r0
 80119c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80119ca:	7dfb      	ldrb	r3, [r7, #23]
 80119cc:	089b      	lsrs	r3, r3, #2
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	3305      	adds	r3, #5
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	031b      	lsls	r3, r3, #12
 80119d8:	b29a      	uxth	r2, r3
 80119da:	79fb      	ldrb	r3, [r7, #7]
 80119dc:	b29b      	uxth	r3, r3
 80119de:	4313      	orrs	r3, r2
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	68dc      	ldr	r4, [r3, #12]
 80119e6:	4610      	mov	r0, r2
 80119e8:	f7f9 fdc0 	bl	800b56c <lwip_htons>
 80119ec:	4603      	mov	r3, r0
 80119ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	2200      	movs	r2, #0
 80119f6:	749a      	strb	r2, [r3, #18]
 80119f8:	2200      	movs	r2, #0
 80119fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80119fc:	693b      	ldr	r3, [r7, #16]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	371c      	adds	r7, #28
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd90      	pop	{r4, r7, pc}
 8011a06:	bf00      	nop
 8011a08:	0801c5e0 	.word	0x0801c5e0
 8011a0c:	0801c614 	.word	0x0801c614
 8011a10:	0801c634 	.word	0x0801c634
 8011a14:	0801c65c 	.word	0x0801c65c
 8011a18:	0801c680 	.word	0x0801c680

08011a1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b086      	sub	sp, #24
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	607b      	str	r3, [r7, #4]
 8011a24:	4603      	mov	r3, r0
 8011a26:	73fb      	strb	r3, [r7, #15]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	81bb      	strh	r3, [r7, #12]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a30:	89bb      	ldrh	r3, [r7, #12]
 8011a32:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d105      	bne.n	8011a46 <tcp_pbuf_prealloc+0x2a>
 8011a3a:	4b30      	ldr	r3, [pc, #192]	; (8011afc <tcp_pbuf_prealloc+0xe0>)
 8011a3c:	22e8      	movs	r2, #232	; 0xe8
 8011a3e:	4930      	ldr	r1, [pc, #192]	; (8011b00 <tcp_pbuf_prealloc+0xe4>)
 8011a40:	4830      	ldr	r0, [pc, #192]	; (8011b04 <tcp_pbuf_prealloc+0xe8>)
 8011a42:	f007 f8f9 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d105      	bne.n	8011a58 <tcp_pbuf_prealloc+0x3c>
 8011a4c:	4b2b      	ldr	r3, [pc, #172]	; (8011afc <tcp_pbuf_prealloc+0xe0>)
 8011a4e:	22e9      	movs	r2, #233	; 0xe9
 8011a50:	492d      	ldr	r1, [pc, #180]	; (8011b08 <tcp_pbuf_prealloc+0xec>)
 8011a52:	482c      	ldr	r0, [pc, #176]	; (8011b04 <tcp_pbuf_prealloc+0xe8>)
 8011a54:	f007 f8f0 	bl	8018c38 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a58:	89ba      	ldrh	r2, [r7, #12]
 8011a5a:	897b      	ldrh	r3, [r7, #10]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d221      	bcs.n	8011aa4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a64:	f003 0302 	and.w	r3, r3, #2
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d111      	bne.n	8011a90 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011a6c:	6a3b      	ldr	r3, [r7, #32]
 8011a6e:	8b5b      	ldrh	r3, [r3, #26]
 8011a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d115      	bne.n	8011aa4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011a78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d007      	beq.n	8011a90 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011a80:	6a3b      	ldr	r3, [r7, #32]
 8011a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d103      	bne.n	8011a90 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011a88:	6a3b      	ldr	r3, [r7, #32]
 8011a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d009      	beq.n	8011aa4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011a90:	89bb      	ldrh	r3, [r7, #12]
 8011a92:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011a96:	f023 0203 	bic.w	r2, r3, #3
 8011a9a:	897b      	ldrh	r3, [r7, #10]
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	bf28      	it	cs
 8011aa0:	4613      	movcs	r3, r2
 8011aa2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011aa4:	8af9      	ldrh	r1, [r7, #22]
 8011aa6:	7bfb      	ldrb	r3, [r7, #15]
 8011aa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fa fead 	bl	800c80c <pbuf_alloc>
 8011ab2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	e019      	b.n	8011af2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d006      	beq.n	8011ad4 <tcp_pbuf_prealloc+0xb8>
 8011ac6:	4b0d      	ldr	r3, [pc, #52]	; (8011afc <tcp_pbuf_prealloc+0xe0>)
 8011ac8:	f240 120b 	movw	r2, #267	; 0x10b
 8011acc:	490f      	ldr	r1, [pc, #60]	; (8011b0c <tcp_pbuf_prealloc+0xf0>)
 8011ace:	480d      	ldr	r0, [pc, #52]	; (8011b04 <tcp_pbuf_prealloc+0xe8>)
 8011ad0:	f007 f8b2 	bl	8018c38 <iprintf>
  *oversize = p->len - length;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	895a      	ldrh	r2, [r3, #10]
 8011ad8:	89bb      	ldrh	r3, [r7, #12]
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	89ba      	ldrh	r2, [r7, #12]
 8011ae6:	811a      	strh	r2, [r3, #8]
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	891a      	ldrh	r2, [r3, #8]
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	815a      	strh	r2, [r3, #10]
  return p;
 8011af0:	693b      	ldr	r3, [r7, #16]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3718      	adds	r7, #24
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	0801c5e0 	.word	0x0801c5e0
 8011b00:	0801c698 	.word	0x0801c698
 8011b04:	0801c634 	.word	0x0801c634
 8011b08:	0801c6bc 	.word	0x0801c6bc
 8011b0c:	0801c6dc 	.word	0x0801c6dc

08011b10 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	460b      	mov	r3, r1
 8011b1a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d106      	bne.n	8011b30 <tcp_write_checks+0x20>
 8011b22:	4b33      	ldr	r3, [pc, #204]	; (8011bf0 <tcp_write_checks+0xe0>)
 8011b24:	f240 1233 	movw	r2, #307	; 0x133
 8011b28:	4932      	ldr	r1, [pc, #200]	; (8011bf4 <tcp_write_checks+0xe4>)
 8011b2a:	4833      	ldr	r0, [pc, #204]	; (8011bf8 <tcp_write_checks+0xe8>)
 8011b2c:	f007 f884 	bl	8018c38 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7d1b      	ldrb	r3, [r3, #20]
 8011b34:	2b04      	cmp	r3, #4
 8011b36:	d00e      	beq.n	8011b56 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011b3c:	2b07      	cmp	r3, #7
 8011b3e:	d00a      	beq.n	8011b56 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b44:	2b02      	cmp	r3, #2
 8011b46:	d006      	beq.n	8011b56 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b4c:	2b03      	cmp	r3, #3
 8011b4e:	d002      	beq.n	8011b56 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b50:	f06f 030a 	mvn.w	r3, #10
 8011b54:	e048      	b.n	8011be8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011b56:	887b      	ldrh	r3, [r7, #2]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <tcp_write_checks+0x50>
    return ERR_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e043      	b.n	8011be8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b66:	887a      	ldrh	r2, [r7, #2]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d909      	bls.n	8011b80 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	8b5b      	ldrh	r3, [r3, #26]
 8011b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7e:	e033      	b.n	8011be8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b86:	2b08      	cmp	r3, #8
 8011b88:	d909      	bls.n	8011b9e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8b5b      	ldrh	r3, [r3, #26]
 8011b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b98:	f04f 33ff 	mov.w	r3, #4294967295
 8011b9c:	e024      	b.n	8011be8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00f      	beq.n	8011bc8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d11a      	bne.n	8011be6 <tcp_write_checks+0xd6>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d116      	bne.n	8011be6 <tcp_write_checks+0xd6>
 8011bb8:	4b0d      	ldr	r3, [pc, #52]	; (8011bf0 <tcp_write_checks+0xe0>)
 8011bba:	f240 1255 	movw	r2, #341	; 0x155
 8011bbe:	490f      	ldr	r1, [pc, #60]	; (8011bfc <tcp_write_checks+0xec>)
 8011bc0:	480d      	ldr	r0, [pc, #52]	; (8011bf8 <tcp_write_checks+0xe8>)
 8011bc2:	f007 f839 	bl	8018c38 <iprintf>
 8011bc6:	e00e      	b.n	8011be6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d103      	bne.n	8011bd8 <tcp_write_checks+0xc8>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d006      	beq.n	8011be6 <tcp_write_checks+0xd6>
 8011bd8:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <tcp_write_checks+0xe0>)
 8011bda:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011bde:	4908      	ldr	r1, [pc, #32]	; (8011c00 <tcp_write_checks+0xf0>)
 8011be0:	4805      	ldr	r0, [pc, #20]	; (8011bf8 <tcp_write_checks+0xe8>)
 8011be2:	f007 f829 	bl	8018c38 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	0801c5e0 	.word	0x0801c5e0
 8011bf4:	0801c6f0 	.word	0x0801c6f0
 8011bf8:	0801c634 	.word	0x0801c634
 8011bfc:	0801c710 	.word	0x0801c710
 8011c00:	0801c74c 	.word	0x0801c74c

08011c04 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b09b      	sub	sp, #108	; 0x6c
 8011c08:	af04      	add	r7, sp, #16
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	461a      	mov	r2, r3
 8011c12:	460b      	mov	r3, r1
 8011c14:	80fb      	strh	r3, [r7, #6]
 8011c16:	4613      	mov	r3, r2
 8011c18:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	653b      	str	r3, [r7, #80]	; 0x50
 8011c22:	2300      	movs	r3, #0
 8011c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c26:	2300      	movs	r3, #0
 8011c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011c34:	2300      	movs	r3, #0
 8011c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c42:	2300      	movs	r3, #0
 8011c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <tcp_write+0x5c>
 8011c4c:	4ba4      	ldr	r3, [pc, #656]	; (8011ee0 <tcp_write+0x2dc>)
 8011c4e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011c52:	49a4      	ldr	r1, [pc, #656]	; (8011ee4 <tcp_write+0x2e0>)
 8011c54:	48a4      	ldr	r0, [pc, #656]	; (8011ee8 <tcp_write+0x2e4>)
 8011c56:	f006 ffef 	bl	8018c38 <iprintf>
 8011c5a:	f06f 030f 	mvn.w	r3, #15
 8011c5e:	e32a      	b.n	80122b6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c66:	085b      	lsrs	r3, r3, #1
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	bf28      	it	cs
 8011c72:	4613      	movcs	r3, r2
 8011c74:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d102      	bne.n	8011c82 <tcp_write+0x7e>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c80:	e000      	b.n	8011c84 <tcp_write+0x80>
 8011c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c84:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d109      	bne.n	8011ca0 <tcp_write+0x9c>
 8011c8c:	4b94      	ldr	r3, [pc, #592]	; (8011ee0 <tcp_write+0x2dc>)
 8011c8e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011c92:	4996      	ldr	r1, [pc, #600]	; (8011eec <tcp_write+0x2e8>)
 8011c94:	4894      	ldr	r0, [pc, #592]	; (8011ee8 <tcp_write+0x2e4>)
 8011c96:	f006 ffcf 	bl	8018c38 <iprintf>
 8011c9a:	f06f 030f 	mvn.w	r3, #15
 8011c9e:	e30a      	b.n	80122b6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011ca0:	88fb      	ldrh	r3, [r7, #6]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f7ff ff33 	bl	8011b10 <tcp_write_checks>
 8011caa:	4603      	mov	r3, r0
 8011cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011cb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d002      	beq.n	8011cbe <tcp_write+0xba>
    return err;
 8011cb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011cbc:	e2fb      	b.n	80122b6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cc8:	2300      	movs	r3, #0
 8011cca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f000 80f6 	beq.w	8011ec4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8011cde:	e002      	b.n	8011ce6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d1f8      	bne.n	8011ce0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cf0:	7a9b      	ldrb	r3, [r3, #10]
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	f003 0304 	and.w	r3, r3, #4
 8011cfa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d00:	891b      	ldrh	r3, [r3, #8]
 8011d02:	4619      	mov	r1, r3
 8011d04:	8c3b      	ldrh	r3, [r7, #32]
 8011d06:	440b      	add	r3, r1
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	da06      	bge.n	8011d1a <tcp_write+0x116>
 8011d0c:	4b74      	ldr	r3, [pc, #464]	; (8011ee0 <tcp_write+0x2dc>)
 8011d0e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011d12:	4977      	ldr	r1, [pc, #476]	; (8011ef0 <tcp_write+0x2ec>)
 8011d14:	4874      	ldr	r0, [pc, #464]	; (8011ee8 <tcp_write+0x2e4>)
 8011d16:	f006 ff8f 	bl	8018c38 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d1c:	891a      	ldrh	r2, [r3, #8]
 8011d1e:	8c3b      	ldrh	r3, [r7, #32]
 8011d20:	4413      	add	r3, r2
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d30:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011d32:	8a7b      	ldrh	r3, [r7, #18]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d026      	beq.n	8011d86 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011d38:	8a7b      	ldrh	r3, [r7, #18]
 8011d3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d206      	bcs.n	8011d4e <tcp_write+0x14a>
 8011d40:	4b67      	ldr	r3, [pc, #412]	; (8011ee0 <tcp_write+0x2dc>)
 8011d42:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011d46:	496b      	ldr	r1, [pc, #428]	; (8011ef4 <tcp_write+0x2f0>)
 8011d48:	4867      	ldr	r0, [pc, #412]	; (8011ee8 <tcp_write+0x2e4>)
 8011d4a:	f006 ff75 	bl	8018c38 <iprintf>
      seg = last_unsent;
 8011d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d50:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d52:	8a7b      	ldrh	r3, [r7, #18]
 8011d54:	88fa      	ldrh	r2, [r7, #6]
 8011d56:	4293      	cmp	r3, r2
 8011d58:	bf28      	it	cs
 8011d5a:	4613      	movcs	r3, r2
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d60:	4293      	cmp	r3, r2
 8011d62:	bf28      	it	cs
 8011d64:	4613      	movcs	r3, r2
 8011d66:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d6e:	4413      	add	r3, r2
 8011d70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011d74:	8a7a      	ldrh	r2, [r7, #18]
 8011d76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011d7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011d86:	8a7b      	ldrh	r3, [r7, #18]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00b      	beq.n	8011da4 <tcp_write+0x1a0>
 8011d8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d90:	88fb      	ldrh	r3, [r7, #6]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d006      	beq.n	8011da4 <tcp_write+0x1a0>
 8011d96:	4b52      	ldr	r3, [pc, #328]	; (8011ee0 <tcp_write+0x2dc>)
 8011d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d9c:	4956      	ldr	r1, [pc, #344]	; (8011ef8 <tcp_write+0x2f4>)
 8011d9e:	4852      	ldr	r0, [pc, #328]	; (8011ee8 <tcp_write+0x2e4>)
 8011da0:	f006 ff4a 	bl	8018c38 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011da4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011da8:	88fb      	ldrh	r3, [r7, #6]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	f080 8167 	bcs.w	801207e <tcp_write+0x47a>
 8011db0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f000 8163 	beq.w	801207e <tcp_write+0x47a>
 8011db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dba:	891b      	ldrh	r3, [r3, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	f000 815e 	beq.w	801207e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011dc2:	88fa      	ldrh	r2, [r7, #6]
 8011dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dc8:	1ad2      	subs	r2, r2, r3
 8011dca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	bfa8      	it	ge
 8011dd0:	4613      	movge	r3, r2
 8011dd2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011dd8:	797b      	ldrb	r3, [r7, #5]
 8011dda:	f003 0301 	and.w	r3, r3, #1
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d027      	beq.n	8011e32 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011de2:	f107 0012 	add.w	r0, r7, #18
 8011de6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011de8:	8bf9      	ldrh	r1, [r7, #30]
 8011dea:	2301      	movs	r3, #1
 8011dec:	9302      	str	r3, [sp, #8]
 8011dee:	797b      	ldrb	r3, [r7, #5]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	4603      	mov	r3, r0
 8011df8:	2000      	movs	r0, #0
 8011dfa:	f7ff fe0f 	bl	8011a1c <tcp_pbuf_prealloc>
 8011dfe:	6578      	str	r0, [r7, #84]	; 0x54
 8011e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f000 8225 	beq.w	8012252 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e0a:	6858      	ldr	r0, [r3, #4]
 8011e0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	4413      	add	r3, r2
 8011e14:	8bfa      	ldrh	r2, [r7, #30]
 8011e16:	4619      	mov	r1, r3
 8011e18:	f007 f9fe 	bl	8019218 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011e1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e1e:	f7fb f867 	bl	800cef0 <pbuf_clen>
 8011e22:	4603      	mov	r3, r0
 8011e24:	461a      	mov	r2, r3
 8011e26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011e30:	e041      	b.n	8011eb6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	637b      	str	r3, [r7, #52]	; 0x34
 8011e38:	e002      	b.n	8011e40 <tcp_write+0x23c>
 8011e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1f8      	bne.n	8011e3a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e4a:	7b1b      	ldrb	r3, [r3, #12]
 8011e4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d115      	bne.n	8011e80 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e5a:	8952      	ldrh	r2, [r2, #10]
 8011e5c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d10d      	bne.n	8011e80 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d006      	beq.n	8011e7a <tcp_write+0x276>
 8011e6c:	4b1c      	ldr	r3, [pc, #112]	; (8011ee0 <tcp_write+0x2dc>)
 8011e6e:	f240 2231 	movw	r2, #561	; 0x231
 8011e72:	4922      	ldr	r1, [pc, #136]	; (8011efc <tcp_write+0x2f8>)
 8011e74:	481c      	ldr	r0, [pc, #112]	; (8011ee8 <tcp_write+0x2e4>)
 8011e76:	f006 fedf 	bl	8018c38 <iprintf>
          extendlen = seglen;
 8011e7a:	8bfb      	ldrh	r3, [r7, #30]
 8011e7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e7e:	e01a      	b.n	8011eb6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011e80:	8bfb      	ldrh	r3, [r7, #30]
 8011e82:	2201      	movs	r2, #1
 8011e84:	4619      	mov	r1, r3
 8011e86:	2000      	movs	r0, #0
 8011e88:	f7fa fcc0 	bl	800c80c <pbuf_alloc>
 8011e8c:	6578      	str	r0, [r7, #84]	; 0x54
 8011e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f000 81e0 	beq.w	8012256 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	441a      	add	r2, r3
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011ea2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ea4:	f7fb f824 	bl	800cef0 <pbuf_clen>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011eb0:	4413      	add	r3, r2
 8011eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011eb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011eba:	8bfb      	ldrh	r3, [r7, #30]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011ec2:	e0dc      	b.n	801207e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	f000 80d7 	beq.w	801207e <tcp_write+0x47a>
 8011ed0:	4b03      	ldr	r3, [pc, #12]	; (8011ee0 <tcp_write+0x2dc>)
 8011ed2:	f240 224a 	movw	r2, #586	; 0x24a
 8011ed6:	490a      	ldr	r1, [pc, #40]	; (8011f00 <tcp_write+0x2fc>)
 8011ed8:	4803      	ldr	r0, [pc, #12]	; (8011ee8 <tcp_write+0x2e4>)
 8011eda:	f006 fead 	bl	8018c38 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011ede:	e0ce      	b.n	801207e <tcp_write+0x47a>
 8011ee0:	0801c5e0 	.word	0x0801c5e0
 8011ee4:	0801c780 	.word	0x0801c780
 8011ee8:	0801c634 	.word	0x0801c634
 8011eec:	0801c798 	.word	0x0801c798
 8011ef0:	0801c7cc 	.word	0x0801c7cc
 8011ef4:	0801c7e4 	.word	0x0801c7e4
 8011ef8:	0801c804 	.word	0x0801c804
 8011efc:	0801c824 	.word	0x0801c824
 8011f00:	0801c850 	.word	0x0801c850
    struct pbuf *p;
    u16_t left = len - pos;
 8011f04:	88fa      	ldrh	r2, [r7, #6]
 8011f06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011f0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f16:	1ad3      	subs	r3, r2, r3
 8011f18:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011f1a:	8b7a      	ldrh	r2, [r7, #26]
 8011f1c:	8bbb      	ldrh	r3, [r7, #28]
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	bf28      	it	cs
 8011f22:	4613      	movcs	r3, r2
 8011f24:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f26:	797b      	ldrb	r3, [r7, #5]
 8011f28:	f003 0301 	and.w	r3, r3, #1
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d036      	beq.n	8011f9e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011f30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	8b3b      	ldrh	r3, [r7, #24]
 8011f38:	4413      	add	r3, r2
 8011f3a:	b299      	uxth	r1, r3
 8011f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	bf0c      	ite	eq
 8011f42:	2301      	moveq	r3, #1
 8011f44:	2300      	movne	r3, #0
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	f107 0012 	add.w	r0, r7, #18
 8011f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f4e:	9302      	str	r3, [sp, #8]
 8011f50:	797b      	ldrb	r3, [r7, #5]
 8011f52:	9301      	str	r3, [sp, #4]
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2036      	movs	r0, #54	; 0x36
 8011f5c:	f7ff fd5e 	bl	8011a1c <tcp_pbuf_prealloc>
 8011f60:	6338      	str	r0, [r7, #48]	; 0x30
 8011f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f000 8178 	beq.w	801225a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6c:	895b      	ldrh	r3, [r3, #10]
 8011f6e:	8b3a      	ldrh	r2, [r7, #24]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d906      	bls.n	8011f82 <tcp_write+0x37e>
 8011f74:	4b8c      	ldr	r3, [pc, #560]	; (80121a8 <tcp_write+0x5a4>)
 8011f76:	f240 2266 	movw	r2, #614	; 0x266
 8011f7a:	498c      	ldr	r1, [pc, #560]	; (80121ac <tcp_write+0x5a8>)
 8011f7c:	488c      	ldr	r0, [pc, #560]	; (80121b0 <tcp_write+0x5ac>)
 8011f7e:	f006 fe5b 	bl	8018c38 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f84:	685a      	ldr	r2, [r3, #4]
 8011f86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f8a:	18d0      	adds	r0, r2, r3
 8011f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	4413      	add	r3, r2
 8011f94:	8b3a      	ldrh	r2, [r7, #24]
 8011f96:	4619      	mov	r1, r3
 8011f98:	f007 f93e 	bl	8019218 <memcpy>
 8011f9c:	e02f      	b.n	8011ffe <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011f9e:	8a7b      	ldrh	r3, [r7, #18]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d006      	beq.n	8011fb2 <tcp_write+0x3ae>
 8011fa4:	4b80      	ldr	r3, [pc, #512]	; (80121a8 <tcp_write+0x5a4>)
 8011fa6:	f240 2271 	movw	r2, #625	; 0x271
 8011faa:	4982      	ldr	r1, [pc, #520]	; (80121b4 <tcp_write+0x5b0>)
 8011fac:	4880      	ldr	r0, [pc, #512]	; (80121b0 <tcp_write+0x5ac>)
 8011fae:	f006 fe43 	bl	8018c38 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011fb2:	8b3b      	ldrh	r3, [r7, #24]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	2036      	movs	r0, #54	; 0x36
 8011fba:	f7fa fc27 	bl	800c80c <pbuf_alloc>
 8011fbe:	6178      	str	r0, [r7, #20]
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f000 814b 	beq.w	801225e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	441a      	add	r2, r3
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011fd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fde:	4619      	mov	r1, r3
 8011fe0:	2036      	movs	r0, #54	; 0x36
 8011fe2:	f7fa fc13 	bl	800c80c <pbuf_alloc>
 8011fe6:	6338      	str	r0, [r7, #48]	; 0x30
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d103      	bne.n	8011ff6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011fee:	6978      	ldr	r0, [r7, #20]
 8011ff0:	f7fa fef0 	bl	800cdd4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011ff4:	e136      	b.n	8012264 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011ff6:	6979      	ldr	r1, [r7, #20]
 8011ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ffa:	f7fa ffb9 	bl	800cf70 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012000:	f7fa ff76 	bl	800cef0 <pbuf_clen>
 8012004:	4603      	mov	r3, r0
 8012006:	461a      	mov	r2, r3
 8012008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801200c:	4413      	add	r3, r2
 801200e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012016:	2b09      	cmp	r3, #9
 8012018:	d903      	bls.n	8012022 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801201a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201c:	f7fa feda 	bl	800cdd4 <pbuf_free>
      goto memerr;
 8012020:	e120      	b.n	8012264 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801202a:	441a      	add	r2, r3
 801202c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	4613      	mov	r3, r2
 8012034:	2200      	movs	r2, #0
 8012036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7ff fc51 	bl	80118e0 <tcp_create_segment>
 801203e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012042:	2b00      	cmp	r3, #0
 8012044:	f000 810d 	beq.w	8012262 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801204a:	2b00      	cmp	r3, #0
 801204c:	d102      	bne.n	8012054 <tcp_write+0x450>
      queue = seg;
 801204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012050:	647b      	str	r3, [r7, #68]	; 0x44
 8012052:	e00c      	b.n	801206e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012056:	2b00      	cmp	r3, #0
 8012058:	d106      	bne.n	8012068 <tcp_write+0x464>
 801205a:	4b53      	ldr	r3, [pc, #332]	; (80121a8 <tcp_write+0x5a4>)
 801205c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012060:	4955      	ldr	r1, [pc, #340]	; (80121b8 <tcp_write+0x5b4>)
 8012062:	4853      	ldr	r0, [pc, #332]	; (80121b0 <tcp_write+0x5ac>)
 8012064:	f006 fde8 	bl	8018c38 <iprintf>
      prev_seg->next = seg;
 8012068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801206a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801206c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012070:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012072:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012076:	8b3b      	ldrh	r3, [r7, #24]
 8012078:	4413      	add	r3, r2
 801207a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801207e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012082:	88fb      	ldrh	r3, [r7, #6]
 8012084:	429a      	cmp	r2, r3
 8012086:	f4ff af3d 	bcc.w	8011f04 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801208a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801208c:	2b00      	cmp	r3, #0
 801208e:	d02c      	beq.n	80120ea <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012096:	e01e      	b.n	80120d6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209a:	891a      	ldrh	r2, [r3, #8]
 801209c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801209e:	4413      	add	r3, r2
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80120a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d110      	bne.n	80120d0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80120ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120b4:	8952      	ldrh	r2, [r2, #10]
 80120b6:	4413      	add	r3, r2
 80120b8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80120ba:	68b9      	ldr	r1, [r7, #8]
 80120bc:	4618      	mov	r0, r3
 80120be:	f007 f8ab 	bl	8019218 <memcpy>
        p->len += oversize_used;
 80120c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c4:	895a      	ldrh	r2, [r3, #10]
 80120c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120c8:	4413      	add	r3, r2
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1dd      	bne.n	8012098 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80120dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120de:	891a      	ldrh	r2, [r3, #8]
 80120e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120e2:	4413      	add	r3, r2
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120e8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80120ea:	8a7a      	ldrh	r2, [r7, #18]
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80120f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d018      	beq.n	801212a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80120f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <tcp_write+0x508>
 80120fe:	4b2a      	ldr	r3, [pc, #168]	; (80121a8 <tcp_write+0x5a4>)
 8012100:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012104:	492d      	ldr	r1, [pc, #180]	; (80121bc <tcp_write+0x5b8>)
 8012106:	482a      	ldr	r0, [pc, #168]	; (80121b0 <tcp_write+0x5ac>)
 8012108:	f006 fd96 	bl	8018c38 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801210c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012112:	4618      	mov	r0, r3
 8012114:	f7fa ff2c 	bl	800cf70 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211a:	891a      	ldrh	r2, [r3, #8]
 801211c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801211e:	891b      	ldrh	r3, [r3, #8]
 8012120:	4413      	add	r3, r2
 8012122:	b29a      	uxth	r2, r3
 8012124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012126:	811a      	strh	r2, [r3, #8]
 8012128:	e037      	b.n	801219a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801212a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d034      	beq.n	801219a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012132:	2b00      	cmp	r3, #0
 8012134:	d003      	beq.n	801213e <tcp_write+0x53a>
 8012136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <tcp_write+0x548>
 801213e:	4b1a      	ldr	r3, [pc, #104]	; (80121a8 <tcp_write+0x5a4>)
 8012140:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012144:	491e      	ldr	r1, [pc, #120]	; (80121c0 <tcp_write+0x5bc>)
 8012146:	481a      	ldr	r0, [pc, #104]	; (80121b0 <tcp_write+0x5ac>)
 8012148:	f006 fd76 	bl	8018c38 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	62bb      	str	r3, [r7, #40]	; 0x28
 8012152:	e009      	b.n	8012168 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	891a      	ldrh	r2, [r3, #8]
 8012158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801215a:	4413      	add	r3, r2
 801215c:	b29a      	uxth	r2, r3
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	62bb      	str	r3, [r7, #40]	; 0x28
 8012168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d1f1      	bne.n	8012154 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012172:	891a      	ldrh	r2, [r3, #8]
 8012174:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012176:	4413      	add	r3, r2
 8012178:	b29a      	uxth	r2, r3
 801217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012180:	895a      	ldrh	r2, [r3, #10]
 8012182:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012184:	4413      	add	r3, r2
 8012186:	b29a      	uxth	r2, r3
 8012188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801218c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801218e:	891a      	ldrh	r2, [r3, #8]
 8012190:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012192:	4413      	add	r3, r2
 8012194:	b29a      	uxth	r2, r3
 8012196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012198:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801219a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801219c:	2b00      	cmp	r3, #0
 801219e:	d111      	bne.n	80121c4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80121a6:	e010      	b.n	80121ca <tcp_write+0x5c6>
 80121a8:	0801c5e0 	.word	0x0801c5e0
 80121ac:	0801c880 	.word	0x0801c880
 80121b0:	0801c634 	.word	0x0801c634
 80121b4:	0801c8c0 	.word	0x0801c8c0
 80121b8:	0801c8d0 	.word	0x0801c8d0
 80121bc:	0801c8e4 	.word	0x0801c8e4
 80121c0:	0801c91c 	.word	0x0801c91c
  } else {
    last_unsent->next = queue;
 80121c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121c8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121ce:	88fb      	ldrh	r3, [r7, #6]
 80121d0:	441a      	add	r2, r3
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80121dc:	88fb      	ldrh	r3, [r7, #6]
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80121ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00e      	beq.n	801221a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012200:	2b00      	cmp	r3, #0
 8012202:	d10a      	bne.n	801221a <tcp_write+0x616>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012208:	2b00      	cmp	r3, #0
 801220a:	d106      	bne.n	801221a <tcp_write+0x616>
 801220c:	4b2c      	ldr	r3, [pc, #176]	; (80122c0 <tcp_write+0x6bc>)
 801220e:	f240 3212 	movw	r2, #786	; 0x312
 8012212:	492c      	ldr	r1, [pc, #176]	; (80122c4 <tcp_write+0x6c0>)
 8012214:	482c      	ldr	r0, [pc, #176]	; (80122c8 <tcp_write+0x6c4>)
 8012216:	f006 fd0f 	bl	8018c38 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801221c:	2b00      	cmp	r3, #0
 801221e:	d016      	beq.n	801224e <tcp_write+0x64a>
 8012220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d012      	beq.n	801224e <tcp_write+0x64a>
 8012228:	797b      	ldrb	r3, [r7, #5]
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	2b00      	cmp	r3, #0
 8012230:	d10d      	bne.n	801224e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	899b      	ldrh	r3, [r3, #12]
 8012238:	b29c      	uxth	r4, r3
 801223a:	2008      	movs	r0, #8
 801223c:	f7f9 f996 	bl	800b56c <lwip_htons>
 8012240:	4603      	mov	r3, r0
 8012242:	461a      	mov	r2, r3
 8012244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	4322      	orrs	r2, r4
 801224a:	b292      	uxth	r2, r2
 801224c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	e031      	b.n	80122b6 <tcp_write+0x6b2>
          goto memerr;
 8012252:	bf00      	nop
 8012254:	e006      	b.n	8012264 <tcp_write+0x660>
            goto memerr;
 8012256:	bf00      	nop
 8012258:	e004      	b.n	8012264 <tcp_write+0x660>
        goto memerr;
 801225a:	bf00      	nop
 801225c:	e002      	b.n	8012264 <tcp_write+0x660>
        goto memerr;
 801225e:	bf00      	nop
 8012260:	e000      	b.n	8012264 <tcp_write+0x660>
      goto memerr;
 8012262:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	8b5b      	ldrh	r3, [r3, #26]
 8012268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801226c:	b29a      	uxth	r2, r3
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012274:	2b00      	cmp	r3, #0
 8012276:	d002      	beq.n	801227e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012278:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801227a:	f7fa fdab 	bl	800cdd4 <pbuf_free>
  }
  if (queue != NULL) {
 801227e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012284:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012286:	f7fc fb4d 	bl	800e924 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00e      	beq.n	80122b2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012298:	2b00      	cmp	r3, #0
 801229a:	d10a      	bne.n	80122b2 <tcp_write+0x6ae>
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d106      	bne.n	80122b2 <tcp_write+0x6ae>
 80122a4:	4b06      	ldr	r3, [pc, #24]	; (80122c0 <tcp_write+0x6bc>)
 80122a6:	f240 3227 	movw	r2, #807	; 0x327
 80122aa:	4906      	ldr	r1, [pc, #24]	; (80122c4 <tcp_write+0x6c0>)
 80122ac:	4806      	ldr	r0, [pc, #24]	; (80122c8 <tcp_write+0x6c4>)
 80122ae:	f006 fcc3 	bl	8018c38 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80122b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	375c      	adds	r7, #92	; 0x5c
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd90      	pop	{r4, r7, pc}
 80122be:	bf00      	nop
 80122c0:	0801c5e0 	.word	0x0801c5e0
 80122c4:	0801c954 	.word	0x0801c954
 80122c8:	0801c634 	.word	0x0801c634

080122cc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80122cc:	b590      	push	{r4, r7, lr}
 80122ce:	b08b      	sub	sp, #44	; 0x2c
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80122d8:	2300      	movs	r3, #0
 80122da:	61fb      	str	r3, [r7, #28]
 80122dc:	2300      	movs	r3, #0
 80122de:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80122e0:	2300      	movs	r3, #0
 80122e2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d106      	bne.n	80122f8 <tcp_split_unsent_seg+0x2c>
 80122ea:	4b95      	ldr	r3, [pc, #596]	; (8012540 <tcp_split_unsent_seg+0x274>)
 80122ec:	f240 324b 	movw	r2, #843	; 0x34b
 80122f0:	4994      	ldr	r1, [pc, #592]	; (8012544 <tcp_split_unsent_seg+0x278>)
 80122f2:	4895      	ldr	r0, [pc, #596]	; (8012548 <tcp_split_unsent_seg+0x27c>)
 80122f4:	f006 fca0 	bl	8018c38 <iprintf>

  useg = pcb->unsent;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122fc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d102      	bne.n	801230a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012304:	f04f 33ff 	mov.w	r3, #4294967295
 8012308:	e116      	b.n	8012538 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801230a:	887b      	ldrh	r3, [r7, #2]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d109      	bne.n	8012324 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012310:	4b8b      	ldr	r3, [pc, #556]	; (8012540 <tcp_split_unsent_seg+0x274>)
 8012312:	f240 3253 	movw	r2, #851	; 0x353
 8012316:	498d      	ldr	r1, [pc, #564]	; (801254c <tcp_split_unsent_seg+0x280>)
 8012318:	488b      	ldr	r0, [pc, #556]	; (8012548 <tcp_split_unsent_seg+0x27c>)
 801231a:	f006 fc8d 	bl	8018c38 <iprintf>
    return ERR_VAL;
 801231e:	f06f 0305 	mvn.w	r3, #5
 8012322:	e109      	b.n	8012538 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	891b      	ldrh	r3, [r3, #8]
 8012328:	887a      	ldrh	r2, [r7, #2]
 801232a:	429a      	cmp	r2, r3
 801232c:	d301      	bcc.n	8012332 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801232e:	2300      	movs	r3, #0
 8012330:	e102      	b.n	8012538 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012336:	887a      	ldrh	r2, [r7, #2]
 8012338:	429a      	cmp	r2, r3
 801233a:	d906      	bls.n	801234a <tcp_split_unsent_seg+0x7e>
 801233c:	4b80      	ldr	r3, [pc, #512]	; (8012540 <tcp_split_unsent_seg+0x274>)
 801233e:	f240 325b 	movw	r2, #859	; 0x35b
 8012342:	4983      	ldr	r1, [pc, #524]	; (8012550 <tcp_split_unsent_seg+0x284>)
 8012344:	4880      	ldr	r0, [pc, #512]	; (8012548 <tcp_split_unsent_seg+0x27c>)
 8012346:	f006 fc77 	bl	8018c38 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	891b      	ldrh	r3, [r3, #8]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_split_unsent_seg+0x94>
 8012352:	4b7b      	ldr	r3, [pc, #492]	; (8012540 <tcp_split_unsent_seg+0x274>)
 8012354:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012358:	497e      	ldr	r1, [pc, #504]	; (8012554 <tcp_split_unsent_seg+0x288>)
 801235a:	487b      	ldr	r0, [pc, #492]	; (8012548 <tcp_split_unsent_seg+0x27c>)
 801235c:	f006 fc6c 	bl	8018c38 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	7a9b      	ldrb	r3, [r3, #10]
 8012364:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012366:	7bfb      	ldrb	r3, [r7, #15]
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	b2db      	uxtb	r3, r3
 801236c:	f003 0304 	and.w	r3, r3, #4
 8012370:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	891a      	ldrh	r2, [r3, #8]
 8012376:	887b      	ldrh	r3, [r7, #2]
 8012378:	1ad3      	subs	r3, r2, r3
 801237a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801237c:	7bbb      	ldrb	r3, [r7, #14]
 801237e:	b29a      	uxth	r2, r3
 8012380:	89bb      	ldrh	r3, [r7, #12]
 8012382:	4413      	add	r3, r2
 8012384:	b29b      	uxth	r3, r3
 8012386:	f44f 7220 	mov.w	r2, #640	; 0x280
 801238a:	4619      	mov	r1, r3
 801238c:	2036      	movs	r0, #54	; 0x36
 801238e:	f7fa fa3d 	bl	800c80c <pbuf_alloc>
 8012392:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f000 80b7 	beq.w	801250a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	891a      	ldrh	r2, [r3, #8]
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	891b      	ldrh	r3, [r3, #8]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	887b      	ldrh	r3, [r7, #2]
 80123ac:	4413      	add	r3, r2
 80123ae:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	6858      	ldr	r0, [r3, #4]
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	685a      	ldr	r2, [r3, #4]
 80123b8:	7bbb      	ldrb	r3, [r7, #14]
 80123ba:	18d1      	adds	r1, r2, r3
 80123bc:	897b      	ldrh	r3, [r7, #10]
 80123be:	89ba      	ldrh	r2, [r7, #12]
 80123c0:	f7fa ff0e 	bl	800d1e0 <pbuf_copy_partial>
 80123c4:	4603      	mov	r3, r0
 80123c6:	461a      	mov	r2, r3
 80123c8:	89bb      	ldrh	r3, [r7, #12]
 80123ca:	4293      	cmp	r3, r2
 80123cc:	f040 809f 	bne.w	801250e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f9 f8c7 	bl	800b56c <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123e6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80123e8:	2300      	movs	r3, #0
 80123ea:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80123ec:	7efb      	ldrb	r3, [r7, #27]
 80123ee:	f003 0308 	and.w	r3, r3, #8
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d007      	beq.n	8012406 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80123f6:	7efb      	ldrb	r3, [r7, #27]
 80123f8:	f023 0308 	bic.w	r3, r3, #8
 80123fc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80123fe:	7ebb      	ldrb	r3, [r7, #26]
 8012400:	f043 0308 	orr.w	r3, r3, #8
 8012404:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012406:	7efb      	ldrb	r3, [r7, #27]
 8012408:	f003 0301 	and.w	r3, r3, #1
 801240c:	2b00      	cmp	r3, #0
 801240e:	d007      	beq.n	8012420 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012410:	7efb      	ldrb	r3, [r7, #27]
 8012412:	f023 0301 	bic.w	r3, r3, #1
 8012416:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012418:	7ebb      	ldrb	r3, [r7, #26]
 801241a:	f043 0301 	orr.w	r3, r3, #1
 801241e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	f7f9 f8b5 	bl	800b596 <lwip_htonl>
 801242c:	4602      	mov	r2, r0
 801242e:	887b      	ldrh	r3, [r7, #2]
 8012430:	18d1      	adds	r1, r2, r3
 8012432:	7eba      	ldrb	r2, [r7, #26]
 8012434:	7bfb      	ldrb	r3, [r7, #15]
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	460b      	mov	r3, r1
 801243a:	6939      	ldr	r1, [r7, #16]
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7ff fa4f 	bl	80118e0 <tcp_create_segment>
 8012442:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d063      	beq.n	8012512 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f7fa fd4e 	bl	800cef0 <pbuf_clen>
 8012454:	4603      	mov	r3, r0
 8012456:	461a      	mov	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801245e:	1a9b      	subs	r3, r3, r2
 8012460:	b29a      	uxth	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	6858      	ldr	r0, [r3, #4]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	891a      	ldrh	r2, [r3, #8]
 8012472:	89bb      	ldrh	r3, [r7, #12]
 8012474:	1ad3      	subs	r3, r2, r3
 8012476:	b29b      	uxth	r3, r3
 8012478:	4619      	mov	r1, r3
 801247a:	f7fa fb25 	bl	800cac8 <pbuf_realloc>
  useg->len -= remainder;
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	891a      	ldrh	r2, [r3, #8]
 8012482:	89bb      	ldrh	r3, [r7, #12]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	b29a      	uxth	r2, r3
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	899b      	ldrh	r3, [r3, #12]
 8012492:	b29c      	uxth	r4, r3
 8012494:	7efb      	ldrb	r3, [r7, #27]
 8012496:	b29b      	uxth	r3, r3
 8012498:	4618      	mov	r0, r3
 801249a:	f7f9 f867 	bl	800b56c <lwip_htons>
 801249e:	4603      	mov	r3, r0
 80124a0:	461a      	mov	r2, r3
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	4322      	orrs	r2, r4
 80124a8:	b292      	uxth	r2, r2
 80124aa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fa fd1d 	bl	800cef0 <pbuf_clen>
 80124b6:	4603      	mov	r3, r0
 80124b8:	461a      	mov	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124c0:	4413      	add	r3, r2
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124ca:	69fb      	ldr	r3, [r7, #28]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fa fd0e 	bl	800cef0 <pbuf_clen>
 80124d4:	4603      	mov	r3, r0
 80124d6:	461a      	mov	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124de:	4413      	add	r3, r2
 80124e0:	b29a      	uxth	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	69fa      	ldr	r2, [r7, #28]
 80124f4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d103      	bne.n	8012506 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2200      	movs	r2, #0
 8012502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	e016      	b.n	8012538 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801250a:	bf00      	nop
 801250c:	e002      	b.n	8012514 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801250e:	bf00      	nop
 8012510:	e000      	b.n	8012514 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012512:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d006      	beq.n	8012528 <tcp_split_unsent_seg+0x25c>
 801251a:	4b09      	ldr	r3, [pc, #36]	; (8012540 <tcp_split_unsent_seg+0x274>)
 801251c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012520:	490d      	ldr	r1, [pc, #52]	; (8012558 <tcp_split_unsent_seg+0x28c>)
 8012522:	4809      	ldr	r0, [pc, #36]	; (8012548 <tcp_split_unsent_seg+0x27c>)
 8012524:	f006 fb88 	bl	8018c38 <iprintf>
  if (p != NULL) {
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d002      	beq.n	8012534 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801252e:	6938      	ldr	r0, [r7, #16]
 8012530:	f7fa fc50 	bl	800cdd4 <pbuf_free>
  }

  return ERR_MEM;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012538:	4618      	mov	r0, r3
 801253a:	3724      	adds	r7, #36	; 0x24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd90      	pop	{r4, r7, pc}
 8012540:	0801c5e0 	.word	0x0801c5e0
 8012544:	0801c974 	.word	0x0801c974
 8012548:	0801c634 	.word	0x0801c634
 801254c:	0801c998 	.word	0x0801c998
 8012550:	0801c9bc 	.word	0x0801c9bc
 8012554:	0801c9cc 	.word	0x0801c9cc
 8012558:	0801c9dc 	.word	0x0801c9dc

0801255c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801255c:	b590      	push	{r4, r7, lr}
 801255e:	b085      	sub	sp, #20
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <tcp_send_fin+0x1c>
 801256a:	4b21      	ldr	r3, [pc, #132]	; (80125f0 <tcp_send_fin+0x94>)
 801256c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012570:	4920      	ldr	r1, [pc, #128]	; (80125f4 <tcp_send_fin+0x98>)
 8012572:	4821      	ldr	r0, [pc, #132]	; (80125f8 <tcp_send_fin+0x9c>)
 8012574:	f006 fb60 	bl	8018c38 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801257c:	2b00      	cmp	r3, #0
 801257e:	d02e      	beq.n	80125de <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	e002      	b.n	801258e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1f8      	bne.n	8012588 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29b      	uxth	r3, r3
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f8 ffe4 	bl	800b56c <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	f003 0307 	and.w	r3, r3, #7
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d116      	bne.n	80125de <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	899b      	ldrh	r3, [r3, #12]
 80125b6:	b29c      	uxth	r4, r3
 80125b8:	2001      	movs	r0, #1
 80125ba:	f7f8 ffd7 	bl	800b56c <lwip_htons>
 80125be:	4603      	mov	r3, r0
 80125c0:	461a      	mov	r2, r3
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	4322      	orrs	r2, r4
 80125c8:	b292      	uxth	r2, r2
 80125ca:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	8b5b      	ldrh	r3, [r3, #26]
 80125d0:	f043 0320 	orr.w	r3, r3, #32
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	e004      	b.n	80125e8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80125de:	2101      	movs	r1, #1
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f80b 	bl	80125fc <tcp_enqueue_flags>
 80125e6:	4603      	mov	r3, r0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd90      	pop	{r4, r7, pc}
 80125f0:	0801c5e0 	.word	0x0801c5e0
 80125f4:	0801c9e8 	.word	0x0801c9e8
 80125f8:	0801c634 	.word	0x0801c634

080125fc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b08a      	sub	sp, #40	; 0x28
 8012600:	af02      	add	r7, sp, #8
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012608:	2300      	movs	r3, #0
 801260a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801260c:	2300      	movs	r3, #0
 801260e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012610:	78fb      	ldrb	r3, [r7, #3]
 8012612:	f003 0303 	and.w	r3, r3, #3
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_enqueue_flags+0x2c>
 801261a:	4b67      	ldr	r3, [pc, #412]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 801261c:	f240 4211 	movw	r2, #1041	; 0x411
 8012620:	4966      	ldr	r1, [pc, #408]	; (80127bc <tcp_enqueue_flags+0x1c0>)
 8012622:	4867      	ldr	r0, [pc, #412]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 8012624:	f006 fb08 	bl	8018c38 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d106      	bne.n	801263c <tcp_enqueue_flags+0x40>
 801262e:	4b62      	ldr	r3, [pc, #392]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 8012630:	f240 4213 	movw	r2, #1043	; 0x413
 8012634:	4963      	ldr	r1, [pc, #396]	; (80127c4 <tcp_enqueue_flags+0x1c8>)
 8012636:	4862      	ldr	r0, [pc, #392]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 8012638:	f006 fafe 	bl	8018c38 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	f003 0302 	and.w	r3, r3, #2
 8012642:	2b00      	cmp	r3, #0
 8012644:	d001      	beq.n	801264a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012646:	2301      	movs	r3, #1
 8012648:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801264a:	7ffb      	ldrb	r3, [r7, #31]
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	b2db      	uxtb	r3, r3
 8012650:	f003 0304 	and.w	r3, r3, #4
 8012654:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012656:	7dfb      	ldrb	r3, [r7, #23]
 8012658:	b29b      	uxth	r3, r3
 801265a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801265e:	4619      	mov	r1, r3
 8012660:	2036      	movs	r0, #54	; 0x36
 8012662:	f7fa f8d3 	bl	800c80c <pbuf_alloc>
 8012666:	6138      	str	r0, [r7, #16]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d109      	bne.n	8012682 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	8b5b      	ldrh	r3, [r3, #26]
 8012672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012676:	b29a      	uxth	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801267c:	f04f 33ff 	mov.w	r3, #4294967295
 8012680:	e095      	b.n	80127ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	895a      	ldrh	r2, [r3, #10]
 8012686:	7dfb      	ldrb	r3, [r7, #23]
 8012688:	b29b      	uxth	r3, r3
 801268a:	429a      	cmp	r2, r3
 801268c:	d206      	bcs.n	801269c <tcp_enqueue_flags+0xa0>
 801268e:	4b4a      	ldr	r3, [pc, #296]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 8012690:	f240 4239 	movw	r2, #1081	; 0x439
 8012694:	494c      	ldr	r1, [pc, #304]	; (80127c8 <tcp_enqueue_flags+0x1cc>)
 8012696:	484a      	ldr	r0, [pc, #296]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 8012698:	f006 face 	bl	8018c38 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80126a0:	78fa      	ldrb	r2, [r7, #3]
 80126a2:	7ffb      	ldrb	r3, [r7, #31]
 80126a4:	9300      	str	r3, [sp, #0]
 80126a6:	460b      	mov	r3, r1
 80126a8:	6939      	ldr	r1, [r7, #16]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f7ff f918 	bl	80118e0 <tcp_create_segment>
 80126b0:	60f8      	str	r0, [r7, #12]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d109      	bne.n	80126cc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	8b5b      	ldrh	r3, [r3, #26]
 80126bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126c6:	f04f 33ff 	mov.w	r3, #4294967295
 80126ca:	e070      	b.n	80127ae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	f003 0303 	and.w	r3, r3, #3
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d006      	beq.n	80126e6 <tcp_enqueue_flags+0xea>
 80126d8:	4b37      	ldr	r3, [pc, #220]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 80126da:	f240 4242 	movw	r2, #1090	; 0x442
 80126de:	493b      	ldr	r1, [pc, #236]	; (80127cc <tcp_enqueue_flags+0x1d0>)
 80126e0:	4837      	ldr	r0, [pc, #220]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 80126e2:	f006 faa9 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	891b      	ldrh	r3, [r3, #8]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d006      	beq.n	80126fc <tcp_enqueue_flags+0x100>
 80126ee:	4b32      	ldr	r3, [pc, #200]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 80126f0:	f240 4243 	movw	r2, #1091	; 0x443
 80126f4:	4936      	ldr	r1, [pc, #216]	; (80127d0 <tcp_enqueue_flags+0x1d4>)
 80126f6:	4832      	ldr	r0, [pc, #200]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 80126f8:	f006 fa9e 	bl	8018c38 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012700:	2b00      	cmp	r3, #0
 8012702:	d103      	bne.n	801270c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	66da      	str	r2, [r3, #108]	; 0x6c
 801270a:	e00d      	b.n	8012728 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012710:	61bb      	str	r3, [r7, #24]
 8012712:	e002      	b.n	801271a <tcp_enqueue_flags+0x11e>
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1f8      	bne.n	8012714 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2200      	movs	r2, #0
 801272c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012730:	78fb      	ldrb	r3, [r7, #3]
 8012732:	f003 0302 	and.w	r3, r3, #2
 8012736:	2b00      	cmp	r3, #0
 8012738:	d104      	bne.n	8012744 <tcp_enqueue_flags+0x148>
 801273a:	78fb      	ldrb	r3, [r7, #3]
 801273c:	f003 0301 	and.w	r3, r3, #1
 8012740:	2b00      	cmp	r3, #0
 8012742:	d004      	beq.n	801274e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012748:	1c5a      	adds	r2, r3, #1
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801274e:	78fb      	ldrb	r3, [r7, #3]
 8012750:	f003 0301 	and.w	r3, r3, #1
 8012754:	2b00      	cmp	r3, #0
 8012756:	d006      	beq.n	8012766 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	8b5b      	ldrh	r3, [r3, #26]
 801275c:	f043 0320 	orr.w	r3, r3, #32
 8012760:	b29a      	uxth	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	4618      	mov	r0, r3
 801276c:	f7fa fbc0 	bl	800cef0 <pbuf_clen>
 8012770:	4603      	mov	r3, r0
 8012772:	461a      	mov	r2, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801277a:	4413      	add	r3, r2
 801277c:	b29a      	uxth	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801278a:	2b00      	cmp	r3, #0
 801278c:	d00e      	beq.n	80127ac <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012792:	2b00      	cmp	r3, #0
 8012794:	d10a      	bne.n	80127ac <tcp_enqueue_flags+0x1b0>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801279a:	2b00      	cmp	r3, #0
 801279c:	d106      	bne.n	80127ac <tcp_enqueue_flags+0x1b0>
 801279e:	4b06      	ldr	r3, [pc, #24]	; (80127b8 <tcp_enqueue_flags+0x1bc>)
 80127a0:	f240 4265 	movw	r2, #1125	; 0x465
 80127a4:	490b      	ldr	r1, [pc, #44]	; (80127d4 <tcp_enqueue_flags+0x1d8>)
 80127a6:	4806      	ldr	r0, [pc, #24]	; (80127c0 <tcp_enqueue_flags+0x1c4>)
 80127a8:	f006 fa46 	bl	8018c38 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3720      	adds	r7, #32
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	0801c5e0 	.word	0x0801c5e0
 80127bc:	0801ca04 	.word	0x0801ca04
 80127c0:	0801c634 	.word	0x0801c634
 80127c4:	0801ca5c 	.word	0x0801ca5c
 80127c8:	0801ca7c 	.word	0x0801ca7c
 80127cc:	0801cab8 	.word	0x0801cab8
 80127d0:	0801cad0 	.word	0x0801cad0
 80127d4:	0801cafc 	.word	0x0801cafc

080127d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80127d8:	b5b0      	push	{r4, r5, r7, lr}
 80127da:	b08a      	sub	sp, #40	; 0x28
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d106      	bne.n	80127f4 <tcp_output+0x1c>
 80127e6:	4b8a      	ldr	r3, [pc, #552]	; (8012a10 <tcp_output+0x238>)
 80127e8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80127ec:	4989      	ldr	r1, [pc, #548]	; (8012a14 <tcp_output+0x23c>)
 80127ee:	488a      	ldr	r0, [pc, #552]	; (8012a18 <tcp_output+0x240>)
 80127f0:	f006 fa22 	bl	8018c38 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7d1b      	ldrb	r3, [r3, #20]
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d106      	bne.n	801280a <tcp_output+0x32>
 80127fc:	4b84      	ldr	r3, [pc, #528]	; (8012a10 <tcp_output+0x238>)
 80127fe:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012802:	4986      	ldr	r1, [pc, #536]	; (8012a1c <tcp_output+0x244>)
 8012804:	4884      	ldr	r0, [pc, #528]	; (8012a18 <tcp_output+0x240>)
 8012806:	f006 fa17 	bl	8018c38 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801280a:	4b85      	ldr	r3, [pc, #532]	; (8012a20 <tcp_output+0x248>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	429a      	cmp	r2, r3
 8012812:	d101      	bne.n	8012818 <tcp_output+0x40>
    return ERR_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	e1ce      	b.n	8012bb6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012824:	4293      	cmp	r3, r2
 8012826:	bf28      	it	cs
 8012828:	4613      	movcs	r3, r2
 801282a:	b29b      	uxth	r3, r3
 801282c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012832:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10b      	bne.n	8012852 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8b5b      	ldrh	r3, [r3, #26]
 801283e:	f003 0302 	and.w	r3, r3, #2
 8012842:	2b00      	cmp	r3, #0
 8012844:	f000 81aa 	beq.w	8012b9c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f000 fdcb 	bl	80133e4 <tcp_send_empty_ack>
 801284e:	4603      	mov	r3, r0
 8012850:	e1b1      	b.n	8012bb6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012852:	6879      	ldr	r1, [r7, #4]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	3304      	adds	r3, #4
 8012858:	461a      	mov	r2, r3
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7ff f824 	bl	80118a8 <tcp_route>
 8012860:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d102      	bne.n	801286e <tcp_output+0x96>
    return ERR_RTE;
 8012868:	f06f 0303 	mvn.w	r3, #3
 801286c:	e1a3      	b.n	8012bb6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d003      	beq.n	801287c <tcp_output+0xa4>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d111      	bne.n	80128a0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d002      	beq.n	8012888 <tcp_output+0xb0>
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	3304      	adds	r3, #4
 8012886:	e000      	b.n	801288a <tcp_output+0xb2>
 8012888:	2300      	movs	r3, #0
 801288a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d102      	bne.n	8012898 <tcp_output+0xc0>
      return ERR_RTE;
 8012892:	f06f 0303 	mvn.w	r3, #3
 8012896:	e18e      	b.n	8012bb6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	681a      	ldr	r2, [r3, #0]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f8 fe75 	bl	800b596 <lwip_htonl>
 80128ac:	4602      	mov	r2, r0
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128b6:	8912      	ldrh	r2, [r2, #8]
 80128b8:	4413      	add	r3, r2
 80128ba:	69ba      	ldr	r2, [r7, #24]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d227      	bcs.n	8012910 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128c6:	461a      	mov	r2, r3
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d114      	bne.n	80128f8 <tcp_output+0x120>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d110      	bne.n	80128f8 <tcp_output+0x120>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d10b      	bne.n	80128f8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2201      	movs	r2, #1
 80128ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	8b5b      	ldrh	r3, [r3, #26]
 80128fc:	f003 0302 	and.w	r3, r3, #2
 8012900:	2b00      	cmp	r3, #0
 8012902:	f000 814d 	beq.w	8012ba0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 fd6c 	bl	80133e4 <tcp_send_empty_ack>
 801290c:	4603      	mov	r3, r0
 801290e:	e152      	b.n	8012bb6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801291c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801291e:	6a3b      	ldr	r3, [r7, #32]
 8012920:	2b00      	cmp	r3, #0
 8012922:	f000 811c 	beq.w	8012b5e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012926:	e002      	b.n	801292e <tcp_output+0x156>
 8012928:	6a3b      	ldr	r3, [r7, #32]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	623b      	str	r3, [r7, #32]
 801292e:	6a3b      	ldr	r3, [r7, #32]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1f8      	bne.n	8012928 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012936:	e112      	b.n	8012b5e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	b29b      	uxth	r3, r3
 8012940:	4618      	mov	r0, r3
 8012942:	f7f8 fe13 	bl	800b56c <lwip_htons>
 8012946:	4603      	mov	r3, r0
 8012948:	b2db      	uxtb	r3, r3
 801294a:	f003 0304 	and.w	r3, r3, #4
 801294e:	2b00      	cmp	r3, #0
 8012950:	d006      	beq.n	8012960 <tcp_output+0x188>
 8012952:	4b2f      	ldr	r3, [pc, #188]	; (8012a10 <tcp_output+0x238>)
 8012954:	f240 5236 	movw	r2, #1334	; 0x536
 8012958:	4932      	ldr	r1, [pc, #200]	; (8012a24 <tcp_output+0x24c>)
 801295a:	482f      	ldr	r0, [pc, #188]	; (8012a18 <tcp_output+0x240>)
 801295c:	f006 f96c 	bl	8018c38 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012964:	2b00      	cmp	r3, #0
 8012966:	d01f      	beq.n	80129a8 <tcp_output+0x1d0>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	8b5b      	ldrh	r3, [r3, #26]
 801296c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012970:	2b00      	cmp	r3, #0
 8012972:	d119      	bne.n	80129a8 <tcp_output+0x1d0>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00b      	beq.n	8012994 <tcp_output+0x1bc>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d110      	bne.n	80129a8 <tcp_output+0x1d0>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801298a:	891a      	ldrh	r2, [r3, #8]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012990:	429a      	cmp	r2, r3
 8012992:	d209      	bcs.n	80129a8 <tcp_output+0x1d0>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801299a:	2b00      	cmp	r3, #0
 801299c:	d004      	beq.n	80129a8 <tcp_output+0x1d0>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129a4:	2b08      	cmp	r3, #8
 80129a6:	d901      	bls.n	80129ac <tcp_output+0x1d4>
 80129a8:	2301      	movs	r3, #1
 80129aa:	e000      	b.n	80129ae <tcp_output+0x1d6>
 80129ac:	2300      	movs	r3, #0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	8b5b      	ldrh	r3, [r3, #26]
 80129b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f000 80e4 	beq.w	8012b88 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	7d1b      	ldrb	r3, [r3, #20]
 80129c4:	2b02      	cmp	r3, #2
 80129c6:	d00d      	beq.n	80129e4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	899b      	ldrh	r3, [r3, #12]
 80129ce:	b29c      	uxth	r4, r3
 80129d0:	2010      	movs	r0, #16
 80129d2:	f7f8 fdcb 	bl	800b56c <lwip_htons>
 80129d6:	4603      	mov	r3, r0
 80129d8:	461a      	mov	r2, r3
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	4322      	orrs	r2, r4
 80129e0:	b292      	uxth	r2, r2
 80129e2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80129e4:	697a      	ldr	r2, [r7, #20]
 80129e6:	6879      	ldr	r1, [r7, #4]
 80129e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129ea:	f000 f909 	bl	8012c00 <tcp_output_segment>
 80129ee:	4603      	mov	r3, r0
 80129f0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80129f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d016      	beq.n	8012a28 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	8b5b      	ldrh	r3, [r3, #26]
 80129fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	835a      	strh	r2, [r3, #26]
      return err;
 8012a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a0c:	e0d3      	b.n	8012bb6 <tcp_output+0x3de>
 8012a0e:	bf00      	nop
 8012a10:	0801c5e0 	.word	0x0801c5e0
 8012a14:	0801cb24 	.word	0x0801cb24
 8012a18:	0801c634 	.word	0x0801c634
 8012a1c:	0801cb3c 	.word	0x0801cb3c
 8012a20:	200111fc 	.word	0x200111fc
 8012a24:	0801cb64 	.word	0x0801cb64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	7d1b      	ldrb	r3, [r3, #20]
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	d006      	beq.n	8012a46 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	8b5b      	ldrh	r3, [r3, #26]
 8012a3c:	f023 0303 	bic.w	r3, r3, #3
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f8 fda2 	bl	800b596 <lwip_htonl>
 8012a52:	4604      	mov	r4, r0
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	891b      	ldrh	r3, [r3, #8]
 8012a58:	461d      	mov	r5, r3
 8012a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	899b      	ldrh	r3, [r3, #12]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f8 fd82 	bl	800b56c <lwip_htons>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	f003 0303 	and.w	r3, r3, #3
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <tcp_output+0x2a0>
 8012a74:	2301      	movs	r3, #1
 8012a76:	e000      	b.n	8012a7a <tcp_output+0x2a2>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	442b      	add	r3, r5
 8012a7c:	4423      	add	r3, r4
 8012a7e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	da02      	bge.n	8012a92 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	68ba      	ldr	r2, [r7, #8]
 8012a90:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a94:	891b      	ldrh	r3, [r3, #8]
 8012a96:	461c      	mov	r4, r3
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	899b      	ldrh	r3, [r3, #12]
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f8 fd63 	bl	800b56c <lwip_htons>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	f003 0303 	and.w	r3, r3, #3
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <tcp_output+0x2de>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e000      	b.n	8012ab8 <tcp_output+0x2e0>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	4423      	add	r3, r4
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d049      	beq.n	8012b52 <tcp_output+0x37a>
      seg->next = NULL;
 8012abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d105      	bne.n	8012ad8 <tcp_output+0x300>
        pcb->unacked = seg;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ad0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad4:	623b      	str	r3, [r7, #32]
 8012ad6:	e03f      	b.n	8012b58 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f8 fd59 	bl	800b596 <lwip_htonl>
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	68db      	ldr	r3, [r3, #12]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f8 fd52 	bl	800b596 <lwip_htonl>
 8012af2:	4603      	mov	r3, r0
 8012af4:	1ae3      	subs	r3, r4, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	da24      	bge.n	8012b44 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	3370      	adds	r3, #112	; 0x70
 8012afe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b00:	e002      	b.n	8012b08 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d011      	beq.n	8012b34 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f8 fd3c 	bl	800b596 <lwip_htonl>
 8012b1e:	4604      	mov	r4, r0
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	68db      	ldr	r3, [r3, #12]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7f8 fd35 	bl	800b596 <lwip_htonl>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	dbe6      	blt.n	8012b02 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b40:	601a      	str	r2, [r3, #0]
 8012b42:	e009      	b.n	8012b58 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b48:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012b4a:	6a3b      	ldr	r3, [r7, #32]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	623b      	str	r3, [r7, #32]
 8012b50:	e002      	b.n	8012b58 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b54:	f7fb fefb 	bl	800e94e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d012      	beq.n	8012b8a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	68db      	ldr	r3, [r3, #12]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7f8 fd13 	bl	800b596 <lwip_htonl>
 8012b70:	4602      	mov	r2, r0
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b7a:	8912      	ldrh	r2, [r2, #8]
 8012b7c:	4413      	add	r3, r2
  while (seg != NULL &&
 8012b7e:	69ba      	ldr	r2, [r7, #24]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	f4bf aed9 	bcs.w	8012938 <tcp_output+0x160>
 8012b86:	e000      	b.n	8012b8a <tcp_output+0x3b2>
      break;
 8012b88:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d108      	bne.n	8012ba4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012b9a:	e004      	b.n	8012ba6 <tcp_output+0x3ce>
    goto output_done;
 8012b9c:	bf00      	nop
 8012b9e:	e002      	b.n	8012ba6 <tcp_output+0x3ce>
    goto output_done;
 8012ba0:	bf00      	nop
 8012ba2:	e000      	b.n	8012ba6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ba4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	8b5b      	ldrh	r3, [r3, #26]
 8012baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012bb4:	2300      	movs	r3, #0
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3728      	adds	r7, #40	; 0x28
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8012bbe:	bf00      	nop

08012bc0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <tcp_output_segment_busy+0x1c>
 8012bce:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <tcp_output_segment_busy+0x34>)
 8012bd0:	f240 529a 	movw	r2, #1434	; 0x59a
 8012bd4:	4908      	ldr	r1, [pc, #32]	; (8012bf8 <tcp_output_segment_busy+0x38>)
 8012bd6:	4809      	ldr	r0, [pc, #36]	; (8012bfc <tcp_output_segment_busy+0x3c>)
 8012bd8:	f006 f82e 	bl	8018c38 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	7b9b      	ldrb	r3, [r3, #14]
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d001      	beq.n	8012bea <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012be6:	2301      	movs	r3, #1
 8012be8:	e000      	b.n	8012bec <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012bea:	2300      	movs	r3, #0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	0801c5e0 	.word	0x0801c5e0
 8012bf8:	0801cb7c 	.word	0x0801cb7c
 8012bfc:	0801c634 	.word	0x0801c634

08012c00 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012c00:	b5b0      	push	{r4, r5, r7, lr}
 8012c02:	b08c      	sub	sp, #48	; 0x30
 8012c04:	af04      	add	r7, sp, #16
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	60b9      	str	r1, [r7, #8]
 8012c0a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d106      	bne.n	8012c20 <tcp_output_segment+0x20>
 8012c12:	4b64      	ldr	r3, [pc, #400]	; (8012da4 <tcp_output_segment+0x1a4>)
 8012c14:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012c18:	4963      	ldr	r1, [pc, #396]	; (8012da8 <tcp_output_segment+0x1a8>)
 8012c1a:	4864      	ldr	r0, [pc, #400]	; (8012dac <tcp_output_segment+0x1ac>)
 8012c1c:	f006 f80c 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d106      	bne.n	8012c34 <tcp_output_segment+0x34>
 8012c26:	4b5f      	ldr	r3, [pc, #380]	; (8012da4 <tcp_output_segment+0x1a4>)
 8012c28:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012c2c:	4960      	ldr	r1, [pc, #384]	; (8012db0 <tcp_output_segment+0x1b0>)
 8012c2e:	485f      	ldr	r0, [pc, #380]	; (8012dac <tcp_output_segment+0x1ac>)
 8012c30:	f006 f802 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d106      	bne.n	8012c48 <tcp_output_segment+0x48>
 8012c3a:	4b5a      	ldr	r3, [pc, #360]	; (8012da4 <tcp_output_segment+0x1a4>)
 8012c3c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012c40:	495c      	ldr	r1, [pc, #368]	; (8012db4 <tcp_output_segment+0x1b4>)
 8012c42:	485a      	ldr	r0, [pc, #360]	; (8012dac <tcp_output_segment+0x1ac>)
 8012c44:	f005 fff8 	bl	8018c38 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f7ff ffb9 	bl	8012bc0 <tcp_output_segment_busy>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012c54:	2300      	movs	r3, #0
 8012c56:	e0a1      	b.n	8012d9c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68dc      	ldr	r4, [r3, #12]
 8012c60:	4610      	mov	r0, r2
 8012c62:	f7f8 fc98 	bl	800b596 <lwip_htonl>
 8012c66:	4603      	mov	r3, r0
 8012c68:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	68dc      	ldr	r4, [r3, #12]
 8012c72:	4610      	mov	r0, r2
 8012c74:	f7f8 fc7a 	bl	800b56c <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012c84:	441a      	add	r2, r3
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	3314      	adds	r3, #20
 8012c90:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	7a9b      	ldrb	r3, [r3, #10]
 8012c96:	f003 0301 	and.w	r3, r3, #1
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d015      	beq.n	8012cca <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	6879      	ldr	r1, [r7, #4]
 8012ca6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012caa:	f7fc fa33 	bl	800f114 <tcp_eff_send_mss_netif>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012cb2:	8b7b      	ldrh	r3, [r7, #26]
 8012cb4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f8 fc6c 	bl	800b596 <lwip_htonl>
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	69fb      	ldr	r3, [r7, #28]
 8012cc2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	da02      	bge.n	8012cda <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d10c      	bne.n	8012cfc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012ce2:	4b35      	ldr	r3, [pc, #212]	; (8012db8 <tcp_output_segment+0x1b8>)
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7f8 fc50 	bl	800b596 <lwip_htonl>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	68da      	ldr	r2, [r3, #12]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	1ad3      	subs	r3, r2, r3
 8012d08:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	8959      	ldrh	r1, [r3, #10]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	8b3a      	ldrh	r2, [r7, #24]
 8012d16:	1a8a      	subs	r2, r1, r2
 8012d18:	b292      	uxth	r2, r2
 8012d1a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	8919      	ldrh	r1, [r3, #8]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	8b3a      	ldrh	r2, [r7, #24]
 8012d28:	1a8a      	subs	r2, r1, r2
 8012d2a:	b292      	uxth	r2, r2
 8012d2c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	68d2      	ldr	r2, [r2, #12]
 8012d36:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	741a      	strb	r2, [r3, #16]
 8012d40:	2200      	movs	r2, #0
 8012d42:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	68da      	ldr	r2, [r3, #12]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	7a9b      	ldrb	r3, [r3, #10]
 8012d4c:	f003 0301 	and.w	r3, r3, #1
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <tcp_output_segment+0x158>
 8012d54:	2318      	movs	r3, #24
 8012d56:	e000      	b.n	8012d5a <tcp_output_segment+0x15a>
 8012d58:	2314      	movs	r3, #20
 8012d5a:	4413      	add	r3, r2
 8012d5c:	69fa      	ldr	r2, [r7, #28]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d006      	beq.n	8012d70 <tcp_output_segment+0x170>
 8012d62:	4b10      	ldr	r3, [pc, #64]	; (8012da4 <tcp_output_segment+0x1a4>)
 8012d64:	f240 621c 	movw	r2, #1564	; 0x61c
 8012d68:	4914      	ldr	r1, [pc, #80]	; (8012dbc <tcp_output_segment+0x1bc>)
 8012d6a:	4810      	ldr	r0, [pc, #64]	; (8012dac <tcp_output_segment+0x1ac>)
 8012d6c:	f005 ff64 	bl	8018c38 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	6858      	ldr	r0, [r3, #4]
 8012d74:	68b9      	ldr	r1, [r7, #8]
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	1d1c      	adds	r4, r3, #4
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	7add      	ldrb	r5, [r3, #11]
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	7a9b      	ldrb	r3, [r3, #10]
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	9202      	str	r2, [sp, #8]
 8012d86:	2206      	movs	r2, #6
 8012d88:	9201      	str	r2, [sp, #4]
 8012d8a:	9300      	str	r3, [sp, #0]
 8012d8c:	462b      	mov	r3, r5
 8012d8e:	4622      	mov	r2, r4
 8012d90:	f004 fc26 	bl	80175e0 <ip4_output_if>
 8012d94:	4603      	mov	r3, r0
 8012d96:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3720      	adds	r7, #32
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bdb0      	pop	{r4, r5, r7, pc}
 8012da4:	0801c5e0 	.word	0x0801c5e0
 8012da8:	0801cba4 	.word	0x0801cba4
 8012dac:	0801c634 	.word	0x0801c634
 8012db0:	0801cbc4 	.word	0x0801cbc4
 8012db4:	0801cbe4 	.word	0x0801cbe4
 8012db8:	200111b0 	.word	0x200111b0
 8012dbc:	0801cc08 	.word	0x0801cc08

08012dc0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012dc0:	b5b0      	push	{r4, r5, r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <tcp_rexmit_rto_prepare+0x1c>
 8012dce:	4b31      	ldr	r3, [pc, #196]	; (8012e94 <tcp_rexmit_rto_prepare+0xd4>)
 8012dd0:	f240 6263 	movw	r2, #1635	; 0x663
 8012dd4:	4930      	ldr	r1, [pc, #192]	; (8012e98 <tcp_rexmit_rto_prepare+0xd8>)
 8012dd6:	4831      	ldr	r0, [pc, #196]	; (8012e9c <tcp_rexmit_rto_prepare+0xdc>)
 8012dd8:	f005 ff2e 	bl	8018c38 <iprintf>

  if (pcb->unacked == NULL) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d102      	bne.n	8012dea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012de4:	f06f 0305 	mvn.w	r3, #5
 8012de8:	e050      	b.n	8012e8c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	e00b      	b.n	8012e0a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7ff fee4 	bl	8012bc0 <tcp_output_segment_busy>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d002      	beq.n	8012e04 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012dfe:	f06f 0305 	mvn.w	r3, #5
 8012e02:	e043      	b.n	8012e8c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	60fb      	str	r3, [r7, #12]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1ef      	bne.n	8012df2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f7ff fed4 	bl	8012bc0 <tcp_output_segment_busy>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012e1e:	f06f 0305 	mvn.w	r3, #5
 8012e22:	e033      	b.n	8012e8c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	8b5b      	ldrh	r3, [r3, #26]
 8012e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f8 fba1 	bl	800b596 <lwip_htonl>
 8012e54:	4604      	mov	r4, r0
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	891b      	ldrh	r3, [r3, #8]
 8012e5a:	461d      	mov	r5, r3
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	68db      	ldr	r3, [r3, #12]
 8012e60:	899b      	ldrh	r3, [r3, #12]
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7f8 fb81 	bl	800b56c <lwip_htons>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	f003 0303 	and.w	r3, r3, #3
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d001      	beq.n	8012e7a <tcp_rexmit_rto_prepare+0xba>
 8012e76:	2301      	movs	r3, #1
 8012e78:	e000      	b.n	8012e7c <tcp_rexmit_rto_prepare+0xbc>
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	442b      	add	r3, r5
 8012e7e:	18e2      	adds	r2, r4, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2200      	movs	r2, #0
 8012e88:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012e8a:	2300      	movs	r3, #0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3710      	adds	r7, #16
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bdb0      	pop	{r4, r5, r7, pc}
 8012e94:	0801c5e0 	.word	0x0801c5e0
 8012e98:	0801cc1c 	.word	0x0801cc1c
 8012e9c:	0801c634 	.word	0x0801c634

08012ea0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <tcp_rexmit_rto_commit+0x1c>
 8012eae:	4b0d      	ldr	r3, [pc, #52]	; (8012ee4 <tcp_rexmit_rto_commit+0x44>)
 8012eb0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012eb4:	490c      	ldr	r1, [pc, #48]	; (8012ee8 <tcp_rexmit_rto_commit+0x48>)
 8012eb6:	480d      	ldr	r0, [pc, #52]	; (8012eec <tcp_rexmit_rto_commit+0x4c>)
 8012eb8:	f005 febe 	bl	8018c38 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ec2:	2bff      	cmp	r3, #255	; 0xff
 8012ec4:	d007      	beq.n	8012ed6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ecc:	3301      	adds	r3, #1
 8012ece:	b2da      	uxtb	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ff fc7e 	bl	80127d8 <tcp_output>
}
 8012edc:	bf00      	nop
 8012ede:	3708      	adds	r7, #8
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	0801c5e0 	.word	0x0801c5e0
 8012ee8:	0801cc40 	.word	0x0801cc40
 8012eec:	0801c634 	.word	0x0801c634

08012ef0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <tcp_rexmit_rto+0x1c>
 8012efe:	4b0a      	ldr	r3, [pc, #40]	; (8012f28 <tcp_rexmit_rto+0x38>)
 8012f00:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012f04:	4909      	ldr	r1, [pc, #36]	; (8012f2c <tcp_rexmit_rto+0x3c>)
 8012f06:	480a      	ldr	r0, [pc, #40]	; (8012f30 <tcp_rexmit_rto+0x40>)
 8012f08:	f005 fe96 	bl	8018c38 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f7ff ff57 	bl	8012dc0 <tcp_rexmit_rto_prepare>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d102      	bne.n	8012f1e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ffc1 	bl	8012ea0 <tcp_rexmit_rto_commit>
  }
}
 8012f1e:	bf00      	nop
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	0801c5e0 	.word	0x0801c5e0
 8012f2c:	0801cc64 	.word	0x0801cc64
 8012f30:	0801c634 	.word	0x0801c634

08012f34 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012f34:	b590      	push	{r4, r7, lr}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d106      	bne.n	8012f50 <tcp_rexmit+0x1c>
 8012f42:	4b2f      	ldr	r3, [pc, #188]	; (8013000 <tcp_rexmit+0xcc>)
 8012f44:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012f48:	492e      	ldr	r1, [pc, #184]	; (8013004 <tcp_rexmit+0xd0>)
 8012f4a:	482f      	ldr	r0, [pc, #188]	; (8013008 <tcp_rexmit+0xd4>)
 8012f4c:	f005 fe74 	bl	8018c38 <iprintf>

  if (pcb->unacked == NULL) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d102      	bne.n	8012f5e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012f58:	f06f 0305 	mvn.w	r3, #5
 8012f5c:	e04c      	b.n	8012ff8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f62:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f7ff fe2b 	bl	8012bc0 <tcp_output_segment_busy>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d002      	beq.n	8012f76 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012f70:	f06f 0305 	mvn.w	r3, #5
 8012f74:	e040      	b.n	8012ff8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	336c      	adds	r3, #108	; 0x6c
 8012f82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f84:	e002      	b.n	8012f8c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d011      	beq.n	8012fb8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7f8 fafa 	bl	800b596 <lwip_htonl>
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7f8 faf3 	bl	800b596 <lwip_htonl>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	dbe6      	blt.n	8012f86 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d103      	bne.n	8012fd6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fdc:	2bff      	cmp	r3, #255	; 0xff
 8012fde:	d007      	beq.n	8012ff0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	b2da      	uxtb	r2, r3
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012ff6:	2300      	movs	r3, #0
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3714      	adds	r7, #20
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd90      	pop	{r4, r7, pc}
 8013000:	0801c5e0 	.word	0x0801c5e0
 8013004:	0801cc80 	.word	0x0801cc80
 8013008:	0801c634 	.word	0x0801c634

0801300c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_rexmit_fast+0x1c>
 801301a:	4b2a      	ldr	r3, [pc, #168]	; (80130c4 <tcp_rexmit_fast+0xb8>)
 801301c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013020:	4929      	ldr	r1, [pc, #164]	; (80130c8 <tcp_rexmit_fast+0xbc>)
 8013022:	482a      	ldr	r0, [pc, #168]	; (80130cc <tcp_rexmit_fast+0xc0>)
 8013024:	f005 fe08 	bl	8018c38 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801302c:	2b00      	cmp	r3, #0
 801302e:	d044      	beq.n	80130ba <tcp_rexmit_fast+0xae>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8b5b      	ldrh	r3, [r3, #26]
 8013034:	f003 0304 	and.w	r3, r3, #4
 8013038:	2b00      	cmp	r3, #0
 801303a:	d13e      	bne.n	80130ba <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff ff79 	bl	8012f34 <tcp_rexmit>
 8013042:	4603      	mov	r3, r0
 8013044:	2b00      	cmp	r3, #0
 8013046:	d138      	bne.n	80130ba <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013054:	4293      	cmp	r3, r2
 8013056:	bf28      	it	cs
 8013058:	4613      	movcs	r3, r2
 801305a:	b29b      	uxth	r3, r3
 801305c:	0fda      	lsrs	r2, r3, #31
 801305e:	4413      	add	r3, r2
 8013060:	105b      	asrs	r3, r3, #1
 8013062:	b29a      	uxth	r2, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013070:	461a      	mov	r2, r3
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013076:	005b      	lsls	r3, r3, #1
 8013078:	429a      	cmp	r2, r3
 801307a:	d206      	bcs.n	801308a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013094:	4619      	mov	r1, r3
 8013096:	0049      	lsls	r1, r1, #1
 8013098:	440b      	add	r3, r1
 801309a:	b29b      	uxth	r3, r3
 801309c:	4413      	add	r3, r2
 801309e:	b29a      	uxth	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	8b5b      	ldrh	r3, [r3, #26]
 80130aa:	f043 0304 	orr.w	r3, r3, #4
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80130ba:	bf00      	nop
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	0801c5e0 	.word	0x0801c5e0
 80130c8:	0801cc98 	.word	0x0801cc98
 80130cc:	0801c634 	.word	0x0801c634

080130d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b086      	sub	sp, #24
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	607b      	str	r3, [r7, #4]
 80130da:	460b      	mov	r3, r1
 80130dc:	817b      	strh	r3, [r7, #10]
 80130de:	4613      	mov	r3, r2
 80130e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80130e2:	897a      	ldrh	r2, [r7, #10]
 80130e4:	893b      	ldrh	r3, [r7, #8]
 80130e6:	4413      	add	r3, r2
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	3314      	adds	r3, #20
 80130ec:	b29b      	uxth	r3, r3
 80130ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130f2:	4619      	mov	r1, r3
 80130f4:	2022      	movs	r0, #34	; 0x22
 80130f6:	f7f9 fb89 	bl	800c80c <pbuf_alloc>
 80130fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d04d      	beq.n	801319e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013102:	897b      	ldrh	r3, [r7, #10]
 8013104:	3313      	adds	r3, #19
 8013106:	697a      	ldr	r2, [r7, #20]
 8013108:	8952      	ldrh	r2, [r2, #10]
 801310a:	4293      	cmp	r3, r2
 801310c:	db06      	blt.n	801311c <tcp_output_alloc_header_common+0x4c>
 801310e:	4b26      	ldr	r3, [pc, #152]	; (80131a8 <tcp_output_alloc_header_common+0xd8>)
 8013110:	f240 7223 	movw	r2, #1827	; 0x723
 8013114:	4925      	ldr	r1, [pc, #148]	; (80131ac <tcp_output_alloc_header_common+0xdc>)
 8013116:	4826      	ldr	r0, [pc, #152]	; (80131b0 <tcp_output_alloc_header_common+0xe0>)
 8013118:	f005 fd8e 	bl	8018c38 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013122:	8c3b      	ldrh	r3, [r7, #32]
 8013124:	4618      	mov	r0, r3
 8013126:	f7f8 fa21 	bl	800b56c <lwip_htons>
 801312a:	4603      	mov	r3, r0
 801312c:	461a      	mov	r2, r3
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013134:	4618      	mov	r0, r3
 8013136:	f7f8 fa19 	bl	800b56c <lwip_htons>
 801313a:	4603      	mov	r3, r0
 801313c:	461a      	mov	r2, r3
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013148:	68f8      	ldr	r0, [r7, #12]
 801314a:	f7f8 fa24 	bl	800b596 <lwip_htonl>
 801314e:	4602      	mov	r2, r0
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013154:	897b      	ldrh	r3, [r7, #10]
 8013156:	089b      	lsrs	r3, r3, #2
 8013158:	b29b      	uxth	r3, r3
 801315a:	3305      	adds	r3, #5
 801315c:	b29b      	uxth	r3, r3
 801315e:	031b      	lsls	r3, r3, #12
 8013160:	b29a      	uxth	r2, r3
 8013162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013166:	b29b      	uxth	r3, r3
 8013168:	4313      	orrs	r3, r2
 801316a:	b29b      	uxth	r3, r3
 801316c:	4618      	mov	r0, r3
 801316e:	f7f8 f9fd 	bl	800b56c <lwip_htons>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801317a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801317c:	4618      	mov	r0, r3
 801317e:	f7f8 f9f5 	bl	800b56c <lwip_htons>
 8013182:	4603      	mov	r3, r0
 8013184:	461a      	mov	r2, r3
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	2200      	movs	r2, #0
 801318e:	741a      	strb	r2, [r3, #16]
 8013190:	2200      	movs	r2, #0
 8013192:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	2200      	movs	r2, #0
 8013198:	749a      	strb	r2, [r3, #18]
 801319a:	2200      	movs	r2, #0
 801319c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801319e:	697b      	ldr	r3, [r7, #20]
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3718      	adds	r7, #24
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	0801c5e0 	.word	0x0801c5e0
 80131ac:	0801ccb8 	.word	0x0801ccb8
 80131b0:	0801c634 	.word	0x0801c634

080131b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80131b4:	b5b0      	push	{r4, r5, r7, lr}
 80131b6:	b08a      	sub	sp, #40	; 0x28
 80131b8:	af04      	add	r7, sp, #16
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	607b      	str	r3, [r7, #4]
 80131be:	460b      	mov	r3, r1
 80131c0:	817b      	strh	r3, [r7, #10]
 80131c2:	4613      	mov	r3, r2
 80131c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d106      	bne.n	80131da <tcp_output_alloc_header+0x26>
 80131cc:	4b15      	ldr	r3, [pc, #84]	; (8013224 <tcp_output_alloc_header+0x70>)
 80131ce:	f240 7242 	movw	r2, #1858	; 0x742
 80131d2:	4915      	ldr	r1, [pc, #84]	; (8013228 <tcp_output_alloc_header+0x74>)
 80131d4:	4815      	ldr	r0, [pc, #84]	; (801322c <tcp_output_alloc_header+0x78>)
 80131d6:	f005 fd2f 	bl	8018c38 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	8adb      	ldrh	r3, [r3, #22]
 80131e2:	68fa      	ldr	r2, [r7, #12]
 80131e4:	8b12      	ldrh	r2, [r2, #24]
 80131e6:	68f9      	ldr	r1, [r7, #12]
 80131e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80131ea:	893d      	ldrh	r5, [r7, #8]
 80131ec:	897c      	ldrh	r4, [r7, #10]
 80131ee:	9103      	str	r1, [sp, #12]
 80131f0:	2110      	movs	r1, #16
 80131f2:	9102      	str	r1, [sp, #8]
 80131f4:	9201      	str	r2, [sp, #4]
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	462a      	mov	r2, r5
 80131fc:	4621      	mov	r1, r4
 80131fe:	f7ff ff67 	bl	80130d0 <tcp_output_alloc_header_common>
 8013202:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d006      	beq.n	8013218 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013212:	441a      	add	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013218:	697b      	ldr	r3, [r7, #20]
}
 801321a:	4618      	mov	r0, r3
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bdb0      	pop	{r4, r5, r7, pc}
 8013222:	bf00      	nop
 8013224:	0801c5e0 	.word	0x0801c5e0
 8013228:	0801cce8 	.word	0x0801cce8
 801322c:	0801c634 	.word	0x0801c634

08013230 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b088      	sub	sp, #32
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	4611      	mov	r1, r2
 801323c:	461a      	mov	r2, r3
 801323e:	460b      	mov	r3, r1
 8013240:	71fb      	strb	r3, [r7, #7]
 8013242:	4613      	mov	r3, r2
 8013244:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013246:	2300      	movs	r3, #0
 8013248:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d106      	bne.n	801325e <tcp_output_fill_options+0x2e>
 8013250:	4b12      	ldr	r3, [pc, #72]	; (801329c <tcp_output_fill_options+0x6c>)
 8013252:	f240 7256 	movw	r2, #1878	; 0x756
 8013256:	4912      	ldr	r1, [pc, #72]	; (80132a0 <tcp_output_fill_options+0x70>)
 8013258:	4812      	ldr	r0, [pc, #72]	; (80132a4 <tcp_output_fill_options+0x74>)
 801325a:	f005 fced 	bl	8018c38 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	3314      	adds	r3, #20
 8013268:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801326a:	8bfb      	ldrh	r3, [r7, #30]
 801326c:	009b      	lsls	r3, r3, #2
 801326e:	461a      	mov	r2, r3
 8013270:	79fb      	ldrb	r3, [r7, #7]
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	f003 0304 	and.w	r3, r3, #4
 8013278:	4413      	add	r3, r2
 801327a:	3314      	adds	r3, #20
 801327c:	69ba      	ldr	r2, [r7, #24]
 801327e:	4413      	add	r3, r2
 8013280:	697a      	ldr	r2, [r7, #20]
 8013282:	429a      	cmp	r2, r3
 8013284:	d006      	beq.n	8013294 <tcp_output_fill_options+0x64>
 8013286:	4b05      	ldr	r3, [pc, #20]	; (801329c <tcp_output_fill_options+0x6c>)
 8013288:	f240 7275 	movw	r2, #1909	; 0x775
 801328c:	4906      	ldr	r1, [pc, #24]	; (80132a8 <tcp_output_fill_options+0x78>)
 801328e:	4805      	ldr	r0, [pc, #20]	; (80132a4 <tcp_output_fill_options+0x74>)
 8013290:	f005 fcd2 	bl	8018c38 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013294:	bf00      	nop
 8013296:	3720      	adds	r7, #32
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0801c5e0 	.word	0x0801c5e0
 80132a0:	0801cd10 	.word	0x0801cd10
 80132a4:	0801c634 	.word	0x0801c634
 80132a8:	0801cc08 	.word	0x0801cc08

080132ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b08a      	sub	sp, #40	; 0x28
 80132b0:	af04      	add	r7, sp, #16
 80132b2:	60f8      	str	r0, [r7, #12]
 80132b4:	60b9      	str	r1, [r7, #8]
 80132b6:	607a      	str	r2, [r7, #4]
 80132b8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <tcp_output_control_segment+0x22>
 80132c0:	4b1c      	ldr	r3, [pc, #112]	; (8013334 <tcp_output_control_segment+0x88>)
 80132c2:	f240 7287 	movw	r2, #1927	; 0x787
 80132c6:	491c      	ldr	r1, [pc, #112]	; (8013338 <tcp_output_control_segment+0x8c>)
 80132c8:	481c      	ldr	r0, [pc, #112]	; (801333c <tcp_output_control_segment+0x90>)
 80132ca:	f005 fcb5 	bl	8018c38 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80132ce:	683a      	ldr	r2, [r7, #0]
 80132d0:	6879      	ldr	r1, [r7, #4]
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f7fe fae8 	bl	80118a8 <tcp_route>
 80132d8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d102      	bne.n	80132e6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80132e0:	23fc      	movs	r3, #252	; 0xfc
 80132e2:	75fb      	strb	r3, [r7, #23]
 80132e4:	e01c      	b.n	8013320 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d006      	beq.n	80132fa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	7adb      	ldrb	r3, [r3, #11]
 80132f0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	7a9b      	ldrb	r3, [r3, #10]
 80132f6:	757b      	strb	r3, [r7, #21]
 80132f8:	e003      	b.n	8013302 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80132fa:	23ff      	movs	r3, #255	; 0xff
 80132fc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80132fe:	2300      	movs	r3, #0
 8013300:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013302:	7dba      	ldrb	r2, [r7, #22]
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	9302      	str	r3, [sp, #8]
 8013308:	2306      	movs	r3, #6
 801330a:	9301      	str	r3, [sp, #4]
 801330c:	7d7b      	ldrb	r3, [r7, #21]
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	4613      	mov	r3, r2
 8013312:	683a      	ldr	r2, [r7, #0]
 8013314:	6879      	ldr	r1, [r7, #4]
 8013316:	68b8      	ldr	r0, [r7, #8]
 8013318:	f004 f962 	bl	80175e0 <ip4_output_if>
 801331c:	4603      	mov	r3, r0
 801331e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013320:	68b8      	ldr	r0, [r7, #8]
 8013322:	f7f9 fd57 	bl	800cdd4 <pbuf_free>
  return err;
 8013326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801332a:	4618      	mov	r0, r3
 801332c:	3718      	adds	r7, #24
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	0801c5e0 	.word	0x0801c5e0
 8013338:	0801cd38 	.word	0x0801cd38
 801333c:	0801c634 	.word	0x0801c634

08013340 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013340:	b590      	push	{r4, r7, lr}
 8013342:	b08b      	sub	sp, #44	; 0x2c
 8013344:	af04      	add	r7, sp, #16
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
 801334c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d106      	bne.n	8013362 <tcp_rst+0x22>
 8013354:	4b1f      	ldr	r3, [pc, #124]	; (80133d4 <tcp_rst+0x94>)
 8013356:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801335a:	491f      	ldr	r1, [pc, #124]	; (80133d8 <tcp_rst+0x98>)
 801335c:	481f      	ldr	r0, [pc, #124]	; (80133dc <tcp_rst+0x9c>)
 801335e:	f005 fc6b 	bl	8018c38 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013364:	2b00      	cmp	r3, #0
 8013366:	d106      	bne.n	8013376 <tcp_rst+0x36>
 8013368:	4b1a      	ldr	r3, [pc, #104]	; (80133d4 <tcp_rst+0x94>)
 801336a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801336e:	491c      	ldr	r1, [pc, #112]	; (80133e0 <tcp_rst+0xa0>)
 8013370:	481a      	ldr	r0, [pc, #104]	; (80133dc <tcp_rst+0x9c>)
 8013372:	f005 fc61 	bl	8018c38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013376:	2300      	movs	r3, #0
 8013378:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801337a:	f246 0308 	movw	r3, #24584	; 0x6008
 801337e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013380:	7dfb      	ldrb	r3, [r7, #23]
 8013382:	b29c      	uxth	r4, r3
 8013384:	68b8      	ldr	r0, [r7, #8]
 8013386:	f7f8 f906 	bl	800b596 <lwip_htonl>
 801338a:	4602      	mov	r2, r0
 801338c:	8abb      	ldrh	r3, [r7, #20]
 801338e:	9303      	str	r3, [sp, #12]
 8013390:	2314      	movs	r3, #20
 8013392:	9302      	str	r3, [sp, #8]
 8013394:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	4613      	mov	r3, r2
 801339e:	2200      	movs	r2, #0
 80133a0:	4621      	mov	r1, r4
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7ff fe94 	bl	80130d0 <tcp_output_alloc_header_common>
 80133a8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d00c      	beq.n	80133ca <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
 80133b2:	2200      	movs	r2, #0
 80133b4:	6939      	ldr	r1, [r7, #16]
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f7ff ff3a 	bl	8013230 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80133bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133be:	683a      	ldr	r2, [r7, #0]
 80133c0:	6939      	ldr	r1, [r7, #16]
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f7ff ff72 	bl	80132ac <tcp_output_control_segment>
 80133c8:	e000      	b.n	80133cc <tcp_rst+0x8c>
    return;
 80133ca:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80133cc:	371c      	adds	r7, #28
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd90      	pop	{r4, r7, pc}
 80133d2:	bf00      	nop
 80133d4:	0801c5e0 	.word	0x0801c5e0
 80133d8:	0801cd64 	.word	0x0801cd64
 80133dc:	0801c634 	.word	0x0801c634
 80133e0:	0801cd80 	.word	0x0801cd80

080133e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80133e4:	b590      	push	{r4, r7, lr}
 80133e6:	b087      	sub	sp, #28
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80133f0:	2300      	movs	r3, #0
 80133f2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <tcp_send_empty_ack+0x24>
 80133fa:	4b28      	ldr	r3, [pc, #160]	; (801349c <tcp_send_empty_ack+0xb8>)
 80133fc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013400:	4927      	ldr	r1, [pc, #156]	; (80134a0 <tcp_send_empty_ack+0xbc>)
 8013402:	4828      	ldr	r0, [pc, #160]	; (80134a4 <tcp_send_empty_ack+0xc0>)
 8013404:	f005 fc18 	bl	8018c38 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	b2db      	uxtb	r3, r3
 801340e:	f003 0304 	and.w	r3, r3, #4
 8013412:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013414:	7d7b      	ldrb	r3, [r7, #21]
 8013416:	b29c      	uxth	r4, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801341c:	4618      	mov	r0, r3
 801341e:	f7f8 f8ba 	bl	800b596 <lwip_htonl>
 8013422:	4603      	mov	r3, r0
 8013424:	2200      	movs	r2, #0
 8013426:	4621      	mov	r1, r4
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f7ff fec3 	bl	80131b4 <tcp_output_alloc_header>
 801342e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d109      	bne.n	801344a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	8b5b      	ldrh	r3, [r3, #26]
 801343a:	f043 0303 	orr.w	r3, r3, #3
 801343e:	b29a      	uxth	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013444:	f06f 0301 	mvn.w	r3, #1
 8013448:	e023      	b.n	8013492 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801344a:	7dbb      	ldrb	r3, [r7, #22]
 801344c:	7dfa      	ldrb	r2, [r7, #23]
 801344e:	6939      	ldr	r1, [r7, #16]
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f7ff feed 	bl	8013230 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	3304      	adds	r3, #4
 801345c:	6939      	ldr	r1, [r7, #16]
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7ff ff24 	bl	80132ac <tcp_output_control_segment>
 8013464:	4603      	mov	r3, r0
 8013466:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d007      	beq.n	8013480 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	8b5b      	ldrh	r3, [r3, #26]
 8013474:	f043 0303 	orr.w	r3, r3, #3
 8013478:	b29a      	uxth	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	835a      	strh	r2, [r3, #26]
 801347e:	e006      	b.n	801348e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	8b5b      	ldrh	r3, [r3, #26]
 8013484:	f023 0303 	bic.w	r3, r3, #3
 8013488:	b29a      	uxth	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013492:	4618      	mov	r0, r3
 8013494:	371c      	adds	r7, #28
 8013496:	46bd      	mov	sp, r7
 8013498:	bd90      	pop	{r4, r7, pc}
 801349a:	bf00      	nop
 801349c:	0801c5e0 	.word	0x0801c5e0
 80134a0:	0801cd9c 	.word	0x0801cd9c
 80134a4:	0801c634 	.word	0x0801c634

080134a8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80134a8:	b590      	push	{r4, r7, lr}
 80134aa:	b087      	sub	sp, #28
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134b0:	2300      	movs	r3, #0
 80134b2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d106      	bne.n	80134c8 <tcp_keepalive+0x20>
 80134ba:	4b18      	ldr	r3, [pc, #96]	; (801351c <tcp_keepalive+0x74>)
 80134bc:	f640 0224 	movw	r2, #2084	; 0x824
 80134c0:	4917      	ldr	r1, [pc, #92]	; (8013520 <tcp_keepalive+0x78>)
 80134c2:	4818      	ldr	r0, [pc, #96]	; (8013524 <tcp_keepalive+0x7c>)
 80134c4:	f005 fbb8 	bl	8018c38 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134c8:	7dfb      	ldrb	r3, [r7, #23]
 80134ca:	b29c      	uxth	r4, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d0:	3b01      	subs	r3, #1
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f8 f85f 	bl	800b596 <lwip_htonl>
 80134d8:	4603      	mov	r3, r0
 80134da:	2200      	movs	r2, #0
 80134dc:	4621      	mov	r1, r4
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f7ff fe68 	bl	80131b4 <tcp_output_alloc_header>
 80134e4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d102      	bne.n	80134f2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80134ec:	f04f 33ff 	mov.w	r3, #4294967295
 80134f0:	e010      	b.n	8013514 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134f2:	7dfb      	ldrb	r3, [r7, #23]
 80134f4:	2200      	movs	r2, #0
 80134f6:	6939      	ldr	r1, [r7, #16]
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff fe99 	bl	8013230 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	3304      	adds	r3, #4
 8013504:	6939      	ldr	r1, [r7, #16]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff fed0 	bl	80132ac <tcp_output_control_segment>
 801350c:	4603      	mov	r3, r0
 801350e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013514:	4618      	mov	r0, r3
 8013516:	371c      	adds	r7, #28
 8013518:	46bd      	mov	sp, r7
 801351a:	bd90      	pop	{r4, r7, pc}
 801351c:	0801c5e0 	.word	0x0801c5e0
 8013520:	0801cdbc 	.word	0x0801cdbc
 8013524:	0801c634 	.word	0x0801c634

08013528 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b08b      	sub	sp, #44	; 0x2c
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013530:	2300      	movs	r3, #0
 8013532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d106      	bne.n	801354a <tcp_zero_window_probe+0x22>
 801353c:	4b4c      	ldr	r3, [pc, #304]	; (8013670 <tcp_zero_window_probe+0x148>)
 801353e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013542:	494c      	ldr	r1, [pc, #304]	; (8013674 <tcp_zero_window_probe+0x14c>)
 8013544:	484c      	ldr	r0, [pc, #304]	; (8013678 <tcp_zero_window_probe+0x150>)
 8013546:	f005 fb77 	bl	8018c38 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801354e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013550:	6a3b      	ldr	r3, [r7, #32]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013556:	2300      	movs	r3, #0
 8013558:	e086      	b.n	8013668 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013560:	2bff      	cmp	r3, #255	; 0xff
 8013562:	d007      	beq.n	8013574 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801356a:	3301      	adds	r3, #1
 801356c:	b2da      	uxtb	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013574:	6a3b      	ldr	r3, [r7, #32]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	899b      	ldrh	r3, [r3, #12]
 801357a:	b29b      	uxth	r3, r3
 801357c:	4618      	mov	r0, r3
 801357e:	f7f7 fff5 	bl	800b56c <lwip_htons>
 8013582:	4603      	mov	r3, r0
 8013584:	b2db      	uxtb	r3, r3
 8013586:	f003 0301 	and.w	r3, r3, #1
 801358a:	2b00      	cmp	r3, #0
 801358c:	d005      	beq.n	801359a <tcp_zero_window_probe+0x72>
 801358e:	6a3b      	ldr	r3, [r7, #32]
 8013590:	891b      	ldrh	r3, [r3, #8]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d101      	bne.n	801359a <tcp_zero_window_probe+0x72>
 8013596:	2301      	movs	r3, #1
 8013598:	e000      	b.n	801359c <tcp_zero_window_probe+0x74>
 801359a:	2300      	movs	r3, #0
 801359c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801359e:	7ffb      	ldrb	r3, [r7, #31]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	bf0c      	ite	eq
 80135a4:	2301      	moveq	r3, #1
 80135a6:	2300      	movne	r3, #0
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80135ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135b0:	b299      	uxth	r1, r3
 80135b2:	6a3b      	ldr	r3, [r7, #32]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	8bba      	ldrh	r2, [r7, #28]
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff fdfa 	bl	80131b4 <tcp_output_alloc_header>
 80135c0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135c8:	f04f 33ff 	mov.w	r3, #4294967295
 80135cc:	e04c      	b.n	8013668 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80135d4:	7ffb      	ldrb	r3, [r7, #31]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d011      	beq.n	80135fe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	899b      	ldrh	r3, [r3, #12]
 80135de:	b29b      	uxth	r3, r3
 80135e0:	b21b      	sxth	r3, r3
 80135e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80135e6:	b21c      	sxth	r4, r3
 80135e8:	2011      	movs	r0, #17
 80135ea:	f7f7 ffbf 	bl	800b56c <lwip_htons>
 80135ee:	4603      	mov	r3, r0
 80135f0:	b21b      	sxth	r3, r3
 80135f2:	4323      	orrs	r3, r4
 80135f4:	b21b      	sxth	r3, r3
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	819a      	strh	r2, [r3, #12]
 80135fc:	e010      	b.n	8013620 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	3314      	adds	r3, #20
 8013604:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013606:	6a3b      	ldr	r3, [r7, #32]
 8013608:	6858      	ldr	r0, [r3, #4]
 801360a:	6a3b      	ldr	r3, [r7, #32]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	891a      	ldrh	r2, [r3, #8]
 8013610:	6a3b      	ldr	r3, [r7, #32]
 8013612:	891b      	ldrh	r3, [r3, #8]
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	b29b      	uxth	r3, r3
 8013618:	2201      	movs	r2, #1
 801361a:	6939      	ldr	r1, [r7, #16]
 801361c:	f7f9 fde0 	bl	800d1e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013620:	6a3b      	ldr	r3, [r7, #32]
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	4618      	mov	r0, r3
 8013628:	f7f7 ffb5 	bl	800b596 <lwip_htonl>
 801362c:	4603      	mov	r3, r0
 801362e:	3301      	adds	r3, #1
 8013630:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	da02      	bge.n	8013644 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013648:	2200      	movs	r2, #0
 801364a:	69b9      	ldr	r1, [r7, #24]
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff fdef 	bl	8013230 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	3304      	adds	r3, #4
 8013658:	69b9      	ldr	r1, [r7, #24]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7ff fe26 	bl	80132ac <tcp_output_control_segment>
 8013660:	4603      	mov	r3, r0
 8013662:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013664:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013668:	4618      	mov	r0, r3
 801366a:	372c      	adds	r7, #44	; 0x2c
 801366c:	46bd      	mov	sp, r7
 801366e:	bd90      	pop	{r4, r7, pc}
 8013670:	0801c5e0 	.word	0x0801c5e0
 8013674:	0801cdd8 	.word	0x0801cdd8
 8013678:	0801c634 	.word	0x0801c634

0801367c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013684:	f7f9 fe9a 	bl	800d3bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013688:	4b0a      	ldr	r3, [pc, #40]	; (80136b4 <tcpip_tcp_timer+0x38>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d103      	bne.n	8013698 <tcpip_tcp_timer+0x1c>
 8013690:	4b09      	ldr	r3, [pc, #36]	; (80136b8 <tcpip_tcp_timer+0x3c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d005      	beq.n	80136a4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013698:	2200      	movs	r2, #0
 801369a:	4908      	ldr	r1, [pc, #32]	; (80136bc <tcpip_tcp_timer+0x40>)
 801369c:	20fa      	movs	r0, #250	; 0xfa
 801369e:	f000 f8f3 	bl	8013888 <sys_timeout>
 80136a2:	e003      	b.n	80136ac <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80136a4:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <tcpip_tcp_timer+0x44>)
 80136a6:	2200      	movs	r2, #0
 80136a8:	601a      	str	r2, [r3, #0]
  }
}
 80136aa:	bf00      	nop
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	200111bc 	.word	0x200111bc
 80136b8:	200111c0 	.word	0x200111c0
 80136bc:	0801367d 	.word	0x0801367d
 80136c0:	20011208 	.word	0x20011208

080136c4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136c8:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <tcp_timer_needed+0x30>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d10f      	bne.n	80136f0 <tcp_timer_needed+0x2c>
 80136d0:	4b09      	ldr	r3, [pc, #36]	; (80136f8 <tcp_timer_needed+0x34>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d103      	bne.n	80136e0 <tcp_timer_needed+0x1c>
 80136d8:	4b08      	ldr	r3, [pc, #32]	; (80136fc <tcp_timer_needed+0x38>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d007      	beq.n	80136f0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80136e0:	4b04      	ldr	r3, [pc, #16]	; (80136f4 <tcp_timer_needed+0x30>)
 80136e2:	2201      	movs	r2, #1
 80136e4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136e6:	2200      	movs	r2, #0
 80136e8:	4905      	ldr	r1, [pc, #20]	; (8013700 <tcp_timer_needed+0x3c>)
 80136ea:	20fa      	movs	r0, #250	; 0xfa
 80136ec:	f000 f8cc 	bl	8013888 <sys_timeout>
  }
}
 80136f0:	bf00      	nop
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	20011208 	.word	0x20011208
 80136f8:	200111bc 	.word	0x200111bc
 80136fc:	200111c0 	.word	0x200111c0
 8013700:	0801367d 	.word	0x0801367d

08013704 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013710:	200a      	movs	r0, #10
 8013712:	f7f8 fc39 	bl	800bf88 <memp_malloc>
 8013716:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d109      	bne.n	8013732 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d151      	bne.n	80137c8 <sys_timeout_abs+0xc4>
 8013724:	4b2a      	ldr	r3, [pc, #168]	; (80137d0 <sys_timeout_abs+0xcc>)
 8013726:	22be      	movs	r2, #190	; 0xbe
 8013728:	492a      	ldr	r1, [pc, #168]	; (80137d4 <sys_timeout_abs+0xd0>)
 801372a:	482b      	ldr	r0, [pc, #172]	; (80137d8 <sys_timeout_abs+0xd4>)
 801372c:	f005 fa84 	bl	8018c38 <iprintf>
    return;
 8013730:	e04a      	b.n	80137c8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	2200      	movs	r2, #0
 8013736:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801374a:	4b24      	ldr	r3, [pc, #144]	; (80137dc <sys_timeout_abs+0xd8>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d103      	bne.n	801375a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013752:	4a22      	ldr	r2, [pc, #136]	; (80137dc <sys_timeout_abs+0xd8>)
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	6013      	str	r3, [r2, #0]
    return;
 8013758:	e037      	b.n	80137ca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	685a      	ldr	r2, [r3, #4]
 801375e:	4b1f      	ldr	r3, [pc, #124]	; (80137dc <sys_timeout_abs+0xd8>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	1ad3      	subs	r3, r2, r3
 8013766:	0fdb      	lsrs	r3, r3, #31
 8013768:	f003 0301 	and.w	r3, r3, #1
 801376c:	b2db      	uxtb	r3, r3
 801376e:	2b00      	cmp	r3, #0
 8013770:	d007      	beq.n	8013782 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013772:	4b1a      	ldr	r3, [pc, #104]	; (80137dc <sys_timeout_abs+0xd8>)
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801377a:	4a18      	ldr	r2, [pc, #96]	; (80137dc <sys_timeout_abs+0xd8>)
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	6013      	str	r3, [r2, #0]
 8013780:	e023      	b.n	80137ca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013782:	4b16      	ldr	r3, [pc, #88]	; (80137dc <sys_timeout_abs+0xd8>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	e01a      	b.n	80137c0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d00b      	beq.n	80137aa <sys_timeout_abs+0xa6>
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	685a      	ldr	r2, [r3, #4]
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	0fdb      	lsrs	r3, r3, #31
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d007      	beq.n	80137ba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80137aa:	697b      	ldr	r3, [r7, #20]
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	693a      	ldr	r2, [r7, #16]
 80137b6:	601a      	str	r2, [r3, #0]
        break;
 80137b8:	e007      	b.n	80137ca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	617b      	str	r3, [r7, #20]
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d1e1      	bne.n	801378a <sys_timeout_abs+0x86>
 80137c6:	e000      	b.n	80137ca <sys_timeout_abs+0xc6>
    return;
 80137c8:	bf00      	nop
      }
    }
  }
}
 80137ca:	3718      	adds	r7, #24
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	0801cdfc 	.word	0x0801cdfc
 80137d4:	0801ce30 	.word	0x0801ce30
 80137d8:	0801ce70 	.word	0x0801ce70
 80137dc:	20011200 	.word	0x20011200

080137e0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b086      	sub	sp, #24
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	4798      	blx	r3

  now = sys_now();
 80137f2:	f7f1 f9e5 	bl	8004bc0 <sys_now>
 80137f6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	4b0f      	ldr	r3, [pc, #60]	; (801383c <lwip_cyclic_timer+0x5c>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4413      	add	r3, r2
 8013802:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013804:	68fa      	ldr	r2, [r7, #12]
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	1ad3      	subs	r3, r2, r3
 801380a:	0fdb      	lsrs	r3, r3, #31
 801380c:	f003 0301 	and.w	r3, r3, #1
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d009      	beq.n	801382a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	4413      	add	r3, r2
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	4907      	ldr	r1, [pc, #28]	; (8013840 <lwip_cyclic_timer+0x60>)
 8013822:	4618      	mov	r0, r3
 8013824:	f7ff ff6e 	bl	8013704 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013828:	e004      	b.n	8013834 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	4904      	ldr	r1, [pc, #16]	; (8013840 <lwip_cyclic_timer+0x60>)
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f7ff ff68 	bl	8013704 <sys_timeout_abs>
}
 8013834:	bf00      	nop
 8013836:	3718      	adds	r7, #24
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	20011204 	.word	0x20011204
 8013840:	080137e1 	.word	0x080137e1

08013844 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801384a:	2301      	movs	r3, #1
 801384c:	607b      	str	r3, [r7, #4]
 801384e:	e00e      	b.n	801386e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013850:	4a0b      	ldr	r2, [pc, #44]	; (8013880 <sys_timeouts_init+0x3c>)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	00db      	lsls	r3, r3, #3
 801385c:	4a08      	ldr	r2, [pc, #32]	; (8013880 <sys_timeouts_init+0x3c>)
 801385e:	4413      	add	r3, r2
 8013860:	461a      	mov	r2, r3
 8013862:	4908      	ldr	r1, [pc, #32]	; (8013884 <sys_timeouts_init+0x40>)
 8013864:	f000 f810 	bl	8013888 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	3301      	adds	r3, #1
 801386c:	607b      	str	r3, [r7, #4]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2b04      	cmp	r3, #4
 8013872:	d9ed      	bls.n	8013850 <sys_timeouts_init+0xc>
  }
}
 8013874:	bf00      	nop
 8013876:	bf00      	nop
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	08027f04 	.word	0x08027f04
 8013884:	080137e1 	.word	0x080137e1

08013888 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801389a:	d306      	bcc.n	80138aa <sys_timeout+0x22>
 801389c:	4b0a      	ldr	r3, [pc, #40]	; (80138c8 <sys_timeout+0x40>)
 801389e:	f240 1229 	movw	r2, #297	; 0x129
 80138a2:	490a      	ldr	r1, [pc, #40]	; (80138cc <sys_timeout+0x44>)
 80138a4:	480a      	ldr	r0, [pc, #40]	; (80138d0 <sys_timeout+0x48>)
 80138a6:	f005 f9c7 	bl	8018c38 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80138aa:	f7f1 f989 	bl	8004bc0 <sys_now>
 80138ae:	4602      	mov	r2, r0
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	4413      	add	r3, r2
 80138b4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	68b9      	ldr	r1, [r7, #8]
 80138ba:	6978      	ldr	r0, [r7, #20]
 80138bc:	f7ff ff22 	bl	8013704 <sys_timeout_abs>
#endif
}
 80138c0:	bf00      	nop
 80138c2:	3718      	adds	r7, #24
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	0801cdfc 	.word	0x0801cdfc
 80138cc:	0801ce98 	.word	0x0801ce98
 80138d0:	0801ce70 	.word	0x0801ce70

080138d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80138da:	f7f1 f971 	bl	8004bc0 <sys_now>
 80138de:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80138e0:	4b17      	ldr	r3, [pc, #92]	; (8013940 <sys_check_timeouts+0x6c>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d022      	beq.n	8013932 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	0fdb      	lsrs	r3, r3, #31
 80138f6:	f003 0301 	and.w	r3, r3, #1
 80138fa:	b2db      	uxtb	r3, r3
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d11a      	bne.n	8013936 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	4a0e      	ldr	r2, [pc, #56]	; (8013940 <sys_check_timeouts+0x6c>)
 8013906:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	4a0a      	ldr	r2, [pc, #40]	; (8013944 <sys_check_timeouts+0x70>)
 801391a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801391c:	68b9      	ldr	r1, [r7, #8]
 801391e:	200a      	movs	r0, #10
 8013920:	f7f8 fba8 	bl	800c074 <memp_free>
    if (handler != NULL) {
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d0da      	beq.n	80138e0 <sys_check_timeouts+0xc>
      handler(arg);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6838      	ldr	r0, [r7, #0]
 801392e:	4798      	blx	r3
  do {
 8013930:	e7d6      	b.n	80138e0 <sys_check_timeouts+0xc>
      return;
 8013932:	bf00      	nop
 8013934:	e000      	b.n	8013938 <sys_check_timeouts+0x64>
      return;
 8013936:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	20011200 	.word	0x20011200
 8013944:	20011204 	.word	0x20011204

08013948 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801394e:	4b16      	ldr	r3, [pc, #88]	; (80139a8 <sys_timeouts_sleeptime+0x60>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d102      	bne.n	801395c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013956:	f04f 33ff 	mov.w	r3, #4294967295
 801395a:	e020      	b.n	801399e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801395c:	f7f1 f930 	bl	8004bc0 <sys_now>
 8013960:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013962:	4b11      	ldr	r3, [pc, #68]	; (80139a8 <sys_timeouts_sleeptime+0x60>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	685a      	ldr	r2, [r3, #4]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	0fdb      	lsrs	r3, r3, #31
 801396e:	f003 0301 	and.w	r3, r3, #1
 8013972:	b2db      	uxtb	r3, r3
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013978:	2300      	movs	r3, #0
 801397a:	e010      	b.n	801399e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801397c:	4b0a      	ldr	r3, [pc, #40]	; (80139a8 <sys_timeouts_sleeptime+0x60>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	da06      	bge.n	801399c <sys_timeouts_sleeptime+0x54>
 801398e:	4b07      	ldr	r3, [pc, #28]	; (80139ac <sys_timeouts_sleeptime+0x64>)
 8013990:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013994:	4906      	ldr	r1, [pc, #24]	; (80139b0 <sys_timeouts_sleeptime+0x68>)
 8013996:	4807      	ldr	r0, [pc, #28]	; (80139b4 <sys_timeouts_sleeptime+0x6c>)
 8013998:	f005 f94e 	bl	8018c38 <iprintf>
    return ret;
 801399c:	683b      	ldr	r3, [r7, #0]
  }
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20011200 	.word	0x20011200
 80139ac:	0801cdfc 	.word	0x0801cdfc
 80139b0:	0801ced0 	.word	0x0801ced0
 80139b4:	0801ce70 	.word	0x0801ce70

080139b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80139bc:	f005 f84e 	bl	8018a5c <rand>
 80139c0:	4603      	mov	r3, r0
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	4b01      	ldr	r3, [pc, #4]	; (80139d8 <udp_init+0x20>)
 80139d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80139d4:	bf00      	nop
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	2000002c 	.word	0x2000002c

080139dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80139e2:	2300      	movs	r3, #0
 80139e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80139e6:	4b17      	ldr	r3, [pc, #92]	; (8013a44 <udp_new_port+0x68>)
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	1c5a      	adds	r2, r3, #1
 80139ec:	b291      	uxth	r1, r2
 80139ee:	4a15      	ldr	r2, [pc, #84]	; (8013a44 <udp_new_port+0x68>)
 80139f0:	8011      	strh	r1, [r2, #0]
 80139f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d103      	bne.n	8013a02 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80139fa:	4b12      	ldr	r3, [pc, #72]	; (8013a44 <udp_new_port+0x68>)
 80139fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013a00:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a02:	4b11      	ldr	r3, [pc, #68]	; (8013a48 <udp_new_port+0x6c>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	603b      	str	r3, [r7, #0]
 8013a08:	e011      	b.n	8013a2e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	8a5a      	ldrh	r2, [r3, #18]
 8013a0e:	4b0d      	ldr	r3, [pc, #52]	; (8013a44 <udp_new_port+0x68>)
 8013a10:	881b      	ldrh	r3, [r3, #0]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d108      	bne.n	8013a28 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013a16:	88fb      	ldrh	r3, [r7, #6]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	80fb      	strh	r3, [r7, #6]
 8013a1c:	88fb      	ldrh	r3, [r7, #6]
 8013a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a22:	d3e0      	bcc.n	80139e6 <udp_new_port+0xa>
        return 0;
 8013a24:	2300      	movs	r3, #0
 8013a26:	e007      	b.n	8013a38 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	603b      	str	r3, [r7, #0]
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d1ea      	bne.n	8013a0a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013a34:	4b03      	ldr	r3, [pc, #12]	; (8013a44 <udp_new_port+0x68>)
 8013a36:	881b      	ldrh	r3, [r3, #0]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	370c      	adds	r7, #12
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a42:	4770      	bx	lr
 8013a44:	2000002c 	.word	0x2000002c
 8013a48:	2001120c 	.word	0x2001120c

08013a4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	4613      	mov	r3, r2
 8013a58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d105      	bne.n	8013a6c <udp_input_local_match+0x20>
 8013a60:	4b27      	ldr	r3, [pc, #156]	; (8013b00 <udp_input_local_match+0xb4>)
 8013a62:	2287      	movs	r2, #135	; 0x87
 8013a64:	4927      	ldr	r1, [pc, #156]	; (8013b04 <udp_input_local_match+0xb8>)
 8013a66:	4828      	ldr	r0, [pc, #160]	; (8013b08 <udp_input_local_match+0xbc>)
 8013a68:	f005 f8e6 	bl	8018c38 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d105      	bne.n	8013a7e <udp_input_local_match+0x32>
 8013a72:	4b23      	ldr	r3, [pc, #140]	; (8013b00 <udp_input_local_match+0xb4>)
 8013a74:	2288      	movs	r2, #136	; 0x88
 8013a76:	4925      	ldr	r1, [pc, #148]	; (8013b0c <udp_input_local_match+0xc0>)
 8013a78:	4823      	ldr	r0, [pc, #140]	; (8013b08 <udp_input_local_match+0xbc>)
 8013a7a:	f005 f8dd 	bl	8018c38 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	7a1b      	ldrb	r3, [r3, #8]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d00b      	beq.n	8013a9e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	7a1a      	ldrb	r2, [r3, #8]
 8013a8a:	4b21      	ldr	r3, [pc, #132]	; (8013b10 <udp_input_local_match+0xc4>)
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a92:	3301      	adds	r3, #1
 8013a94:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d001      	beq.n	8013a9e <udp_input_local_match+0x52>
    return 0;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	e02b      	b.n	8013af6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013a9e:	79fb      	ldrb	r3, [r7, #7]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d018      	beq.n	8013ad6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d013      	beq.n	8013ad2 <udp_input_local_match+0x86>
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00f      	beq.n	8013ad2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ab2:	4b17      	ldr	r3, [pc, #92]	; (8013b10 <udp_input_local_match+0xc4>)
 8013ab4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aba:	d00a      	beq.n	8013ad2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	4b13      	ldr	r3, [pc, #76]	; (8013b10 <udp_input_local_match+0xc4>)
 8013ac2:	695b      	ldr	r3, [r3, #20]
 8013ac4:	405a      	eors	r2, r3
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	3308      	adds	r3, #8
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d110      	bne.n	8013af4 <udp_input_local_match+0xa8>
          return 1;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e00f      	b.n	8013af6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d009      	beq.n	8013af0 <udp_input_local_match+0xa4>
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d005      	beq.n	8013af0 <udp_input_local_match+0xa4>
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	4b09      	ldr	r3, [pc, #36]	; (8013b10 <udp_input_local_match+0xc4>)
 8013aea:	695b      	ldr	r3, [r3, #20]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d101      	bne.n	8013af4 <udp_input_local_match+0xa8>
        return 1;
 8013af0:	2301      	movs	r3, #1
 8013af2:	e000      	b.n	8013af6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	0801cee4 	.word	0x0801cee4
 8013b04:	0801cf14 	.word	0x0801cf14
 8013b08:	0801cf38 	.word	0x0801cf38
 8013b0c:	0801cf60 	.word	0x0801cf60
 8013b10:	2000da3c 	.word	0x2000da3c

08013b14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013b14:	b590      	push	{r4, r7, lr}
 8013b16:	b08d      	sub	sp, #52	; 0x34
 8013b18:	af02      	add	r7, sp, #8
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d105      	bne.n	8013b34 <udp_input+0x20>
 8013b28:	4b7c      	ldr	r3, [pc, #496]	; (8013d1c <udp_input+0x208>)
 8013b2a:	22cf      	movs	r2, #207	; 0xcf
 8013b2c:	497c      	ldr	r1, [pc, #496]	; (8013d20 <udp_input+0x20c>)
 8013b2e:	487d      	ldr	r0, [pc, #500]	; (8013d24 <udp_input+0x210>)
 8013b30:	f005 f882 	bl	8018c38 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d105      	bne.n	8013b46 <udp_input+0x32>
 8013b3a:	4b78      	ldr	r3, [pc, #480]	; (8013d1c <udp_input+0x208>)
 8013b3c:	22d0      	movs	r2, #208	; 0xd0
 8013b3e:	497a      	ldr	r1, [pc, #488]	; (8013d28 <udp_input+0x214>)
 8013b40:	4878      	ldr	r0, [pc, #480]	; (8013d24 <udp_input+0x210>)
 8013b42:	f005 f879 	bl	8018c38 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	895b      	ldrh	r3, [r3, #10]
 8013b4a:	2b07      	cmp	r3, #7
 8013b4c:	d803      	bhi.n	8013b56 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7f9 f940 	bl	800cdd4 <pbuf_free>
    goto end;
 8013b54:	e0de      	b.n	8013d14 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013b5c:	4b73      	ldr	r3, [pc, #460]	; (8013d2c <udp_input+0x218>)
 8013b5e:	695b      	ldr	r3, [r3, #20]
 8013b60:	4a72      	ldr	r2, [pc, #456]	; (8013d2c <udp_input+0x218>)
 8013b62:	6812      	ldr	r2, [r2, #0]
 8013b64:	4611      	mov	r1, r2
 8013b66:	4618      	mov	r0, r3
 8013b68:	f003 fe12 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	881b      	ldrh	r3, [r3, #0]
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7f7 fcf8 	bl	800b56c <lwip_htons>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	885b      	ldrh	r3, [r3, #2]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f7 fcf0 	bl	800b56c <lwip_htons>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013b90:	2300      	movs	r3, #0
 8013b92:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013b94:	2300      	movs	r3, #0
 8013b96:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b9c:	4b64      	ldr	r3, [pc, #400]	; (8013d30 <udp_input+0x21c>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ba2:	e054      	b.n	8013c4e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba6:	8a5b      	ldrh	r3, [r3, #18]
 8013ba8:	89fa      	ldrh	r2, [r7, #14]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d14a      	bne.n	8013c44 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013bae:	7cfb      	ldrb	r3, [r7, #19]
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	6839      	ldr	r1, [r7, #0]
 8013bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bb6:	f7ff ff49 	bl	8013a4c <udp_input_local_match>
 8013bba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d041      	beq.n	8013c44 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc2:	7c1b      	ldrb	r3, [r3, #16]
 8013bc4:	f003 0304 	and.w	r3, r3, #4
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d11d      	bne.n	8013c08 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d102      	bne.n	8013bd8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd4:	61fb      	str	r3, [r7, #28]
 8013bd6:	e017      	b.n	8013c08 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013bd8:	7cfb      	ldrb	r3, [r7, #19]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d014      	beq.n	8013c08 <udp_input+0xf4>
 8013bde:	4b53      	ldr	r3, [pc, #332]	; (8013d2c <udp_input+0x218>)
 8013be0:	695b      	ldr	r3, [r3, #20]
 8013be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013be6:	d10f      	bne.n	8013c08 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	3304      	adds	r3, #4
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d008      	beq.n	8013c08 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	3304      	adds	r3, #4
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d101      	bne.n	8013c08 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	8a9b      	ldrh	r3, [r3, #20]
 8013c0c:	8a3a      	ldrh	r2, [r7, #16]
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d118      	bne.n	8013c44 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c14:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d005      	beq.n	8013c26 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	685a      	ldr	r2, [r3, #4]
 8013c1e:	4b43      	ldr	r3, [pc, #268]	; (8013d2c <udp_input+0x218>)
 8013c20:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d10e      	bne.n	8013c44 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013c26:	6a3b      	ldr	r3, [r7, #32]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d014      	beq.n	8013c56 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2e:	68da      	ldr	r2, [r3, #12]
 8013c30:	6a3b      	ldr	r3, [r7, #32]
 8013c32:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013c34:	4b3e      	ldr	r3, [pc, #248]	; (8013d30 <udp_input+0x21c>)
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013c3c:	4a3c      	ldr	r2, [pc, #240]	; (8013d30 <udp_input+0x21c>)
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013c42:	e008      	b.n	8013c56 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1a7      	bne.n	8013ba4 <udp_input+0x90>
 8013c54:	e000      	b.n	8013c58 <udp_input+0x144>
        break;
 8013c56:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d101      	bne.n	8013c62 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d002      	beq.n	8013c6e <udp_input+0x15a>
    for_us = 1;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	76fb      	strb	r3, [r7, #27]
 8013c6c:	e00a      	b.n	8013c84 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	3304      	adds	r3, #4
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	4b2d      	ldr	r3, [pc, #180]	; (8013d2c <udp_input+0x218>)
 8013c76:	695b      	ldr	r3, [r3, #20]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	bf0c      	ite	eq
 8013c7c:	2301      	moveq	r3, #1
 8013c7e:	2300      	movne	r3, #0
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013c84:	7efb      	ldrb	r3, [r7, #27]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d041      	beq.n	8013d0e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013c8a:	2108      	movs	r1, #8
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7f9 f81b 	bl	800ccc8 <pbuf_remove_header>
 8013c92:	4603      	mov	r3, r0
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00a      	beq.n	8013cae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013c98:	4b20      	ldr	r3, [pc, #128]	; (8013d1c <udp_input+0x208>)
 8013c9a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013c9e:	4925      	ldr	r1, [pc, #148]	; (8013d34 <udp_input+0x220>)
 8013ca0:	4820      	ldr	r0, [pc, #128]	; (8013d24 <udp_input+0x210>)
 8013ca2:	f004 ffc9 	bl	8018c38 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7f9 f894 	bl	800cdd4 <pbuf_free>
      goto end;
 8013cac:	e032      	b.n	8013d14 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d012      	beq.n	8013cda <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb6:	699b      	ldr	r3, [r3, #24]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00a      	beq.n	8013cd2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbe:	699c      	ldr	r4, [r3, #24]
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	69d8      	ldr	r0, [r3, #28]
 8013cc4:	8a3b      	ldrh	r3, [r7, #16]
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	4b1b      	ldr	r3, [pc, #108]	; (8013d38 <udp_input+0x224>)
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013cd0:	e021      	b.n	8013d16 <udp_input+0x202>
        pbuf_free(p);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7f9 f87e 	bl	800cdd4 <pbuf_free>
        goto end;
 8013cd8:	e01c      	b.n	8013d14 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013cda:	7cfb      	ldrb	r3, [r7, #19]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d112      	bne.n	8013d06 <udp_input+0x1f2>
 8013ce0:	4b12      	ldr	r3, [pc, #72]	; (8013d2c <udp_input+0x218>)
 8013ce2:	695b      	ldr	r3, [r3, #20]
 8013ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ce8:	2be0      	cmp	r3, #224	; 0xe0
 8013cea:	d00c      	beq.n	8013d06 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013cec:	4b0f      	ldr	r3, [pc, #60]	; (8013d2c <udp_input+0x218>)
 8013cee:	899b      	ldrh	r3, [r3, #12]
 8013cf0:	3308      	adds	r3, #8
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	b21b      	sxth	r3, r3
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7f9 f858 	bl	800cdae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013cfe:	2103      	movs	r1, #3
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f003 fa07 	bl	8017114 <icmp_dest_unreach>
      pbuf_free(p);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7f9 f864 	bl	800cdd4 <pbuf_free>
  return;
 8013d0c:	e003      	b.n	8013d16 <udp_input+0x202>
    pbuf_free(p);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7f9 f860 	bl	800cdd4 <pbuf_free>
  return;
 8013d14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013d16:	372c      	adds	r7, #44	; 0x2c
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd90      	pop	{r4, r7, pc}
 8013d1c:	0801cee4 	.word	0x0801cee4
 8013d20:	0801cf88 	.word	0x0801cf88
 8013d24:	0801cf38 	.word	0x0801cf38
 8013d28:	0801cfa0 	.word	0x0801cfa0
 8013d2c:	2000da3c 	.word	0x2000da3c
 8013d30:	2001120c 	.word	0x2001120c
 8013d34:	0801cfbc 	.word	0x0801cfbc
 8013d38:	2000da4c 	.word	0x2000da4c

08013d3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b088      	sub	sp, #32
 8013d40:	af02      	add	r7, sp, #8
 8013d42:	60f8      	str	r0, [r7, #12]
 8013d44:	60b9      	str	r1, [r7, #8]
 8013d46:	607a      	str	r2, [r7, #4]
 8013d48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d109      	bne.n	8013d64 <udp_sendto_if+0x28>
 8013d50:	4b2e      	ldr	r3, [pc, #184]	; (8013e0c <udp_sendto_if+0xd0>)
 8013d52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d56:	492e      	ldr	r1, [pc, #184]	; (8013e10 <udp_sendto_if+0xd4>)
 8013d58:	482e      	ldr	r0, [pc, #184]	; (8013e14 <udp_sendto_if+0xd8>)
 8013d5a:	f004 ff6d 	bl	8018c38 <iprintf>
 8013d5e:	f06f 030f 	mvn.w	r3, #15
 8013d62:	e04f      	b.n	8013e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <udp_sendto_if+0x42>
 8013d6a:	4b28      	ldr	r3, [pc, #160]	; (8013e0c <udp_sendto_if+0xd0>)
 8013d6c:	f240 2281 	movw	r2, #641	; 0x281
 8013d70:	4929      	ldr	r1, [pc, #164]	; (8013e18 <udp_sendto_if+0xdc>)
 8013d72:	4828      	ldr	r0, [pc, #160]	; (8013e14 <udp_sendto_if+0xd8>)
 8013d74:	f004 ff60 	bl	8018c38 <iprintf>
 8013d78:	f06f 030f 	mvn.w	r3, #15
 8013d7c:	e042      	b.n	8013e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d109      	bne.n	8013d98 <udp_sendto_if+0x5c>
 8013d84:	4b21      	ldr	r3, [pc, #132]	; (8013e0c <udp_sendto_if+0xd0>)
 8013d86:	f240 2282 	movw	r2, #642	; 0x282
 8013d8a:	4924      	ldr	r1, [pc, #144]	; (8013e1c <udp_sendto_if+0xe0>)
 8013d8c:	4821      	ldr	r0, [pc, #132]	; (8013e14 <udp_sendto_if+0xd8>)
 8013d8e:	f004 ff53 	bl	8018c38 <iprintf>
 8013d92:	f06f 030f 	mvn.w	r3, #15
 8013d96:	e035      	b.n	8013e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013d98:	6a3b      	ldr	r3, [r7, #32]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d109      	bne.n	8013db2 <udp_sendto_if+0x76>
 8013d9e:	4b1b      	ldr	r3, [pc, #108]	; (8013e0c <udp_sendto_if+0xd0>)
 8013da0:	f240 2283 	movw	r2, #643	; 0x283
 8013da4:	491e      	ldr	r1, [pc, #120]	; (8013e20 <udp_sendto_if+0xe4>)
 8013da6:	481b      	ldr	r0, [pc, #108]	; (8013e14 <udp_sendto_if+0xd8>)
 8013da8:	f004 ff46 	bl	8018c38 <iprintf>
 8013dac:	f06f 030f 	mvn.w	r3, #15
 8013db0:	e028      	b.n	8013e04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d009      	beq.n	8013dcc <udp_sendto_if+0x90>
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d005      	beq.n	8013dcc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013dc8:	2be0      	cmp	r3, #224	; 0xe0
 8013dca:	d103      	bne.n	8013dd4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013dcc:	6a3b      	ldr	r3, [r7, #32]
 8013dce:	3304      	adds	r3, #4
 8013dd0:	617b      	str	r3, [r7, #20]
 8013dd2:	e00b      	b.n	8013dec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	6a3b      	ldr	r3, [r7, #32]
 8013dda:	3304      	adds	r3, #4
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d002      	beq.n	8013de8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013de2:	f06f 0303 	mvn.w	r3, #3
 8013de6:	e00d      	b.n	8013e04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013dec:	887a      	ldrh	r2, [r7, #2]
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	9301      	str	r3, [sp, #4]
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	4613      	mov	r3, r2
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	68b9      	ldr	r1, [r7, #8]
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f000 f811 	bl	8013e24 <udp_sendto_if_src>
 8013e02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3718      	adds	r7, #24
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	0801cee4 	.word	0x0801cee4
 8013e10:	0801d058 	.word	0x0801d058
 8013e14:	0801cf38 	.word	0x0801cf38
 8013e18:	0801d074 	.word	0x0801d074
 8013e1c:	0801d090 	.word	0x0801d090
 8013e20:	0801d0b0 	.word	0x0801d0b0

08013e24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b08c      	sub	sp, #48	; 0x30
 8013e28:	af04      	add	r7, sp, #16
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
 8013e30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d109      	bne.n	8013e4c <udp_sendto_if_src+0x28>
 8013e38:	4b65      	ldr	r3, [pc, #404]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013e3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013e3e:	4965      	ldr	r1, [pc, #404]	; (8013fd4 <udp_sendto_if_src+0x1b0>)
 8013e40:	4865      	ldr	r0, [pc, #404]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013e42:	f004 fef9 	bl	8018c38 <iprintf>
 8013e46:	f06f 030f 	mvn.w	r3, #15
 8013e4a:	e0bc      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d109      	bne.n	8013e66 <udp_sendto_if_src+0x42>
 8013e52:	4b5f      	ldr	r3, [pc, #380]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013e54:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013e58:	4960      	ldr	r1, [pc, #384]	; (8013fdc <udp_sendto_if_src+0x1b8>)
 8013e5a:	485f      	ldr	r0, [pc, #380]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013e5c:	f004 feec 	bl	8018c38 <iprintf>
 8013e60:	f06f 030f 	mvn.w	r3, #15
 8013e64:	e0af      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d109      	bne.n	8013e80 <udp_sendto_if_src+0x5c>
 8013e6c:	4b58      	ldr	r3, [pc, #352]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013e6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013e72:	495b      	ldr	r1, [pc, #364]	; (8013fe0 <udp_sendto_if_src+0x1bc>)
 8013e74:	4858      	ldr	r0, [pc, #352]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013e76:	f004 fedf 	bl	8018c38 <iprintf>
 8013e7a:	f06f 030f 	mvn.w	r3, #15
 8013e7e:	e0a2      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d109      	bne.n	8013e9a <udp_sendto_if_src+0x76>
 8013e86:	4b52      	ldr	r3, [pc, #328]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013e88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013e8c:	4955      	ldr	r1, [pc, #340]	; (8013fe4 <udp_sendto_if_src+0x1c0>)
 8013e8e:	4852      	ldr	r0, [pc, #328]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013e90:	f004 fed2 	bl	8018c38 <iprintf>
 8013e94:	f06f 030f 	mvn.w	r3, #15
 8013e98:	e095      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d109      	bne.n	8013eb4 <udp_sendto_if_src+0x90>
 8013ea0:	4b4b      	ldr	r3, [pc, #300]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013ea2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013ea6:	4950      	ldr	r1, [pc, #320]	; (8013fe8 <udp_sendto_if_src+0x1c4>)
 8013ea8:	484b      	ldr	r0, [pc, #300]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013eaa:	f004 fec5 	bl	8018c38 <iprintf>
 8013eae:	f06f 030f 	mvn.w	r3, #15
 8013eb2:	e088      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	8a5b      	ldrh	r3, [r3, #18]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d10f      	bne.n	8013edc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013ebc:	68f9      	ldr	r1, [r7, #12]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	8a5b      	ldrh	r3, [r3, #18]
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f000 f893 	bl	8013ff0 <udp_bind>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013ece:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d002      	beq.n	8013edc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013ed6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013eda:	e074      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	891b      	ldrh	r3, [r3, #8]
 8013ee0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d902      	bls.n	8013eee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eec:	e06b      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013eee:	2108      	movs	r1, #8
 8013ef0:	68b8      	ldr	r0, [r7, #8]
 8013ef2:	f7f8 fed9 	bl	800cca8 <pbuf_add_header>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d015      	beq.n	8013f28 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f00:	2108      	movs	r1, #8
 8013f02:	2022      	movs	r0, #34	; 0x22
 8013f04:	f7f8 fc82 	bl	800c80c <pbuf_alloc>
 8013f08:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d102      	bne.n	8013f16 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013f10:	f04f 33ff 	mov.w	r3, #4294967295
 8013f14:	e057      	b.n	8013fc6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	891b      	ldrh	r3, [r3, #8]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d006      	beq.n	8013f2c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013f1e:	68b9      	ldr	r1, [r7, #8]
 8013f20:	69f8      	ldr	r0, [r7, #28]
 8013f22:	f7f9 f87b 	bl	800d01c <pbuf_chain>
 8013f26:	e001      	b.n	8013f2c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	895b      	ldrh	r3, [r3, #10]
 8013f30:	2b07      	cmp	r3, #7
 8013f32:	d806      	bhi.n	8013f42 <udp_sendto_if_src+0x11e>
 8013f34:	4b26      	ldr	r3, [pc, #152]	; (8013fd0 <udp_sendto_if_src+0x1ac>)
 8013f36:	f240 320d 	movw	r2, #781	; 0x30d
 8013f3a:	492c      	ldr	r1, [pc, #176]	; (8013fec <udp_sendto_if_src+0x1c8>)
 8013f3c:	4826      	ldr	r0, [pc, #152]	; (8013fd8 <udp_sendto_if_src+0x1b4>)
 8013f3e:	f004 fe7b 	bl	8018c38 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013f42:	69fb      	ldr	r3, [r7, #28]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	8a5b      	ldrh	r3, [r3, #18]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7f7 fb0d 	bl	800b56c <lwip_htons>
 8013f52:	4603      	mov	r3, r0
 8013f54:	461a      	mov	r2, r3
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013f5a:	887b      	ldrh	r3, [r7, #2]
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7f7 fb05 	bl	800b56c <lwip_htons>
 8013f62:	4603      	mov	r3, r0
 8013f64:	461a      	mov	r2, r3
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	719a      	strb	r2, [r3, #6]
 8013f70:	2200      	movs	r2, #0
 8013f72:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013f74:	69fb      	ldr	r3, [r7, #28]
 8013f76:	891b      	ldrh	r3, [r3, #8]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7f7 faf7 	bl	800b56c <lwip_htons>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	461a      	mov	r2, r3
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013f86:	2311      	movs	r3, #17
 8013f88:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	7adb      	ldrb	r3, [r3, #11]
 8013f8e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	7a9b      	ldrb	r3, [r3, #10]
 8013f94:	7cb9      	ldrb	r1, [r7, #18]
 8013f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f98:	9202      	str	r2, [sp, #8]
 8013f9a:	7cfa      	ldrb	r2, [r7, #19]
 8013f9c:	9201      	str	r2, [sp, #4]
 8013f9e:	9300      	str	r3, [sp, #0]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fa6:	69f8      	ldr	r0, [r7, #28]
 8013fa8:	f003 fb44 	bl	8017634 <ip4_output_if_src>
 8013fac:	4603      	mov	r3, r0
 8013fae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013fb0:	69fa      	ldr	r2, [r7, #28]
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d004      	beq.n	8013fc2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013fb8:	69f8      	ldr	r0, [r7, #28]
 8013fba:	f7f8 ff0b 	bl	800cdd4 <pbuf_free>
    q = NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013fc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3720      	adds	r7, #32
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	0801cee4 	.word	0x0801cee4
 8013fd4:	0801d0d0 	.word	0x0801d0d0
 8013fd8:	0801cf38 	.word	0x0801cf38
 8013fdc:	0801d0f0 	.word	0x0801d0f0
 8013fe0:	0801d110 	.word	0x0801d110
 8013fe4:	0801d134 	.word	0x0801d134
 8013fe8:	0801d158 	.word	0x0801d158
 8013fec:	0801d17c 	.word	0x0801d17c

08013ff0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014004:	4b39      	ldr	r3, [pc, #228]	; (80140ec <udp_bind+0xfc>)
 8014006:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d109      	bne.n	8014022 <udp_bind+0x32>
 801400e:	4b38      	ldr	r3, [pc, #224]	; (80140f0 <udp_bind+0x100>)
 8014010:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014014:	4937      	ldr	r1, [pc, #220]	; (80140f4 <udp_bind+0x104>)
 8014016:	4838      	ldr	r0, [pc, #224]	; (80140f8 <udp_bind+0x108>)
 8014018:	f004 fe0e 	bl	8018c38 <iprintf>
 801401c:	f06f 030f 	mvn.w	r3, #15
 8014020:	e060      	b.n	80140e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014026:	4b35      	ldr	r3, [pc, #212]	; (80140fc <udp_bind+0x10c>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	617b      	str	r3, [r7, #20]
 801402c:	e009      	b.n	8014042 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	429a      	cmp	r2, r3
 8014034:	d102      	bne.n	801403c <udp_bind+0x4c>
      rebind = 1;
 8014036:	2301      	movs	r3, #1
 8014038:	74fb      	strb	r3, [r7, #19]
      break;
 801403a:	e005      	b.n	8014048 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	617b      	str	r3, [r7, #20]
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1f2      	bne.n	801402e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014048:	88fb      	ldrh	r3, [r7, #6]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d109      	bne.n	8014062 <udp_bind+0x72>
    port = udp_new_port();
 801404e:	f7ff fcc5 	bl	80139dc <udp_new_port>
 8014052:	4603      	mov	r3, r0
 8014054:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014056:	88fb      	ldrh	r3, [r7, #6]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d12c      	bne.n	80140b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801405c:	f06f 0307 	mvn.w	r3, #7
 8014060:	e040      	b.n	80140e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014062:	4b26      	ldr	r3, [pc, #152]	; (80140fc <udp_bind+0x10c>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	617b      	str	r3, [r7, #20]
 8014068:	e022      	b.n	80140b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	429a      	cmp	r2, r3
 8014070:	d01b      	beq.n	80140aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	8a5b      	ldrh	r3, [r3, #18]
 8014076:	88fa      	ldrh	r2, [r7, #6]
 8014078:	429a      	cmp	r2, r3
 801407a:	d116      	bne.n	80140aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014084:	429a      	cmp	r2, r3
 8014086:	d00d      	beq.n	80140a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00a      	beq.n	80140a4 <udp_bind+0xb4>
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d006      	beq.n	80140a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014096:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014098:	2b00      	cmp	r3, #0
 801409a:	d003      	beq.n	80140a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d102      	bne.n	80140aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80140a4:	f06f 0307 	mvn.w	r3, #7
 80140a8:	e01c      	b.n	80140e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	617b      	str	r3, [r7, #20]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1d9      	bne.n	801406a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d002      	beq.n	80140c2 <udp_bind+0xd2>
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	e000      	b.n	80140c4 <udp_bind+0xd4>
 80140c2:	2300      	movs	r3, #0
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	88fa      	ldrh	r2, [r7, #6]
 80140cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80140ce:	7cfb      	ldrb	r3, [r7, #19]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d106      	bne.n	80140e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80140d4:	4b09      	ldr	r3, [pc, #36]	; (80140fc <udp_bind+0x10c>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80140dc:	4a07      	ldr	r2, [pc, #28]	; (80140fc <udp_bind+0x10c>)
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80140e2:	2300      	movs	r3, #0
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3718      	adds	r7, #24
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	08027f2c 	.word	0x08027f2c
 80140f0:	0801cee4 	.word	0x0801cee4
 80140f4:	0801d1ac 	.word	0x0801d1ac
 80140f8:	0801cf38 	.word	0x0801cf38
 80140fc:	2001120c 	.word	0x2001120c

08014100 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	4613      	mov	r3, r2
 801410c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d109      	bne.n	8014128 <udp_connect+0x28>
 8014114:	4b2c      	ldr	r3, [pc, #176]	; (80141c8 <udp_connect+0xc8>)
 8014116:	f240 4235 	movw	r2, #1077	; 0x435
 801411a:	492c      	ldr	r1, [pc, #176]	; (80141cc <udp_connect+0xcc>)
 801411c:	482c      	ldr	r0, [pc, #176]	; (80141d0 <udp_connect+0xd0>)
 801411e:	f004 fd8b 	bl	8018c38 <iprintf>
 8014122:	f06f 030f 	mvn.w	r3, #15
 8014126:	e04b      	b.n	80141c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d109      	bne.n	8014142 <udp_connect+0x42>
 801412e:	4b26      	ldr	r3, [pc, #152]	; (80141c8 <udp_connect+0xc8>)
 8014130:	f240 4236 	movw	r2, #1078	; 0x436
 8014134:	4927      	ldr	r1, [pc, #156]	; (80141d4 <udp_connect+0xd4>)
 8014136:	4826      	ldr	r0, [pc, #152]	; (80141d0 <udp_connect+0xd0>)
 8014138:	f004 fd7e 	bl	8018c38 <iprintf>
 801413c:	f06f 030f 	mvn.w	r3, #15
 8014140:	e03e      	b.n	80141c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	8a5b      	ldrh	r3, [r3, #18]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10f      	bne.n	801416a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801414a:	68f9      	ldr	r1, [r7, #12]
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	8a5b      	ldrh	r3, [r3, #18]
 8014150:	461a      	mov	r2, r3
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f7ff ff4c 	bl	8013ff0 <udp_bind>
 8014158:	4603      	mov	r3, r0
 801415a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801415c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d002      	beq.n	801416a <udp_connect+0x6a>
      return err;
 8014164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014168:	e02a      	b.n	80141c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d002      	beq.n	8014176 <udp_connect+0x76>
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	e000      	b.n	8014178 <udp_connect+0x78>
 8014176:	2300      	movs	r3, #0
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	88fa      	ldrh	r2, [r7, #6]
 8014180:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	7c1b      	ldrb	r3, [r3, #16]
 8014186:	f043 0304 	orr.w	r3, r3, #4
 801418a:	b2da      	uxtb	r2, r3
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014190:	4b11      	ldr	r3, [pc, #68]	; (80141d8 <udp_connect+0xd8>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	617b      	str	r3, [r7, #20]
 8014196:	e008      	b.n	80141aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	429a      	cmp	r2, r3
 801419e:	d101      	bne.n	80141a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80141a0:	2300      	movs	r3, #0
 80141a2:	e00d      	b.n	80141c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	68db      	ldr	r3, [r3, #12]
 80141a8:	617b      	str	r3, [r7, #20]
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1f3      	bne.n	8014198 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80141b0:	4b09      	ldr	r3, [pc, #36]	; (80141d8 <udp_connect+0xd8>)
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80141b8:	4a07      	ldr	r2, [pc, #28]	; (80141d8 <udp_connect+0xd8>)
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3718      	adds	r7, #24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	0801cee4 	.word	0x0801cee4
 80141cc:	0801d1c4 	.word	0x0801d1c4
 80141d0:	0801cf38 	.word	0x0801cf38
 80141d4:	0801d1e0 	.word	0x0801d1e0
 80141d8:	2001120c 	.word	0x2001120c

080141dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d107      	bne.n	80141fe <udp_recv+0x22>
 80141ee:	4b08      	ldr	r3, [pc, #32]	; (8014210 <udp_recv+0x34>)
 80141f0:	f240 428a 	movw	r2, #1162	; 0x48a
 80141f4:	4907      	ldr	r1, [pc, #28]	; (8014214 <udp_recv+0x38>)
 80141f6:	4808      	ldr	r0, [pc, #32]	; (8014218 <udp_recv+0x3c>)
 80141f8:	f004 fd1e 	bl	8018c38 <iprintf>
 80141fc:	e005      	b.n	801420a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	687a      	ldr	r2, [r7, #4]
 8014208:	61da      	str	r2, [r3, #28]
}
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	0801cee4 	.word	0x0801cee4
 8014214:	0801d218 	.word	0x0801d218
 8014218:	0801cf38 	.word	0x0801cf38

0801421c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d107      	bne.n	801423a <udp_remove+0x1e>
 801422a:	4b19      	ldr	r3, [pc, #100]	; (8014290 <udp_remove+0x74>)
 801422c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014230:	4918      	ldr	r1, [pc, #96]	; (8014294 <udp_remove+0x78>)
 8014232:	4819      	ldr	r0, [pc, #100]	; (8014298 <udp_remove+0x7c>)
 8014234:	f004 fd00 	bl	8018c38 <iprintf>
 8014238:	e026      	b.n	8014288 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801423a:	4b18      	ldr	r3, [pc, #96]	; (801429c <udp_remove+0x80>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	429a      	cmp	r2, r3
 8014242:	d105      	bne.n	8014250 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014244:	4b15      	ldr	r3, [pc, #84]	; (801429c <udp_remove+0x80>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	4a14      	ldr	r2, [pc, #80]	; (801429c <udp_remove+0x80>)
 801424c:	6013      	str	r3, [r2, #0]
 801424e:	e017      	b.n	8014280 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014250:	4b12      	ldr	r3, [pc, #72]	; (801429c <udp_remove+0x80>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	60fb      	str	r3, [r7, #12]
 8014256:	e010      	b.n	801427a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d009      	beq.n	8014274 <udp_remove+0x58>
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	429a      	cmp	r2, r3
 8014268:	d104      	bne.n	8014274 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	68da      	ldr	r2, [r3, #12]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	60da      	str	r2, [r3, #12]
        break;
 8014272:	e005      	b.n	8014280 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	60fb      	str	r3, [r7, #12]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d1eb      	bne.n	8014258 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014280:	6879      	ldr	r1, [r7, #4]
 8014282:	2000      	movs	r0, #0
 8014284:	f7f7 fef6 	bl	800c074 <memp_free>
}
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	0801cee4 	.word	0x0801cee4
 8014294:	0801d230 	.word	0x0801d230
 8014298:	0801cf38 	.word	0x0801cf38
 801429c:	2001120c 	.word	0x2001120c

080142a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80142a6:	2000      	movs	r0, #0
 80142a8:	f7f7 fe6e 	bl	800bf88 <memp_malloc>
 80142ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d007      	beq.n	80142c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80142b4:	2220      	movs	r2, #32
 80142b6:	2100      	movs	r1, #0
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f004 fe4d 	bl	8018f58 <memset>
    pcb->ttl = UDP_TTL;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	22ff      	movs	r2, #255	; 0xff
 80142c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80142c4:	687b      	ldr	r3, [r7, #4]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b084      	sub	sp, #16
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	4603      	mov	r3, r0
 80142d6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80142d8:	f7ff ffe2 	bl	80142a0 <udp_new>
 80142dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80142de:	68fb      	ldr	r3, [r7, #12]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b085      	sub	sp, #20
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d01e      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d01a      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d017      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d013      	beq.n	8014336 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801430e:	4b0d      	ldr	r3, [pc, #52]	; (8014344 <udp_netif_ip_addr_changed+0x5c>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	60fb      	str	r3, [r7, #12]
 8014314:	e00c      	b.n	8014330 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	429a      	cmp	r2, r3
 8014320:	d103      	bne.n	801432a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	60fb      	str	r3, [r7, #12]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1ef      	bne.n	8014316 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014336:	bf00      	nop
 8014338:	3714      	adds	r7, #20
 801433a:	46bd      	mov	sp, r7
 801433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014340:	4770      	bx	lr
 8014342:	bf00      	nop
 8014344:	2001120c 	.word	0x2001120c

08014348 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801434c:	4b20      	ldr	r3, [pc, #128]	; (80143d0 <dhcp_inc_pcb_refcount+0x88>)
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d133      	bne.n	80143bc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014354:	4b1f      	ldr	r3, [pc, #124]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d005      	beq.n	8014368 <dhcp_inc_pcb_refcount+0x20>
 801435c:	4b1e      	ldr	r3, [pc, #120]	; (80143d8 <dhcp_inc_pcb_refcount+0x90>)
 801435e:	22e5      	movs	r2, #229	; 0xe5
 8014360:	491e      	ldr	r1, [pc, #120]	; (80143dc <dhcp_inc_pcb_refcount+0x94>)
 8014362:	481f      	ldr	r0, [pc, #124]	; (80143e0 <dhcp_inc_pcb_refcount+0x98>)
 8014364:	f004 fc68 	bl	8018c38 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014368:	f7ff ff9a 	bl	80142a0 <udp_new>
 801436c:	4603      	mov	r3, r0
 801436e:	4a19      	ldr	r2, [pc, #100]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014370:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014372:	4b18      	ldr	r3, [pc, #96]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d102      	bne.n	8014380 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801437a:	f04f 33ff 	mov.w	r3, #4294967295
 801437e:	e024      	b.n	80143ca <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014380:	4b14      	ldr	r3, [pc, #80]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	7a5a      	ldrb	r2, [r3, #9]
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f042 0220 	orr.w	r2, r2, #32
 801438e:	b2d2      	uxtb	r2, r2
 8014390:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014392:	4b10      	ldr	r3, [pc, #64]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2244      	movs	r2, #68	; 0x44
 8014398:	4912      	ldr	r1, [pc, #72]	; (80143e4 <dhcp_inc_pcb_refcount+0x9c>)
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff fe28 	bl	8013ff0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80143a0:	4b0c      	ldr	r3, [pc, #48]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2243      	movs	r2, #67	; 0x43
 80143a6:	490f      	ldr	r1, [pc, #60]	; (80143e4 <dhcp_inc_pcb_refcount+0x9c>)
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7ff fea9 	bl	8014100 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80143ae:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <dhcp_inc_pcb_refcount+0x8c>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2200      	movs	r2, #0
 80143b4:	490c      	ldr	r1, [pc, #48]	; (80143e8 <dhcp_inc_pcb_refcount+0xa0>)
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7ff ff10 	bl	80141dc <udp_recv>
  }

  dhcp_pcb_refcount++;
 80143bc:	4b04      	ldr	r3, [pc, #16]	; (80143d0 <dhcp_inc_pcb_refcount+0x88>)
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	3301      	adds	r3, #1
 80143c2:	b2da      	uxtb	r2, r3
 80143c4:	4b02      	ldr	r3, [pc, #8]	; (80143d0 <dhcp_inc_pcb_refcount+0x88>)
 80143c6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	2001123c 	.word	0x2001123c
 80143d4:	20011238 	.word	0x20011238
 80143d8:	0801d248 	.word	0x0801d248
 80143dc:	0801d280 	.word	0x0801d280
 80143e0:	0801d2a8 	.word	0x0801d2a8
 80143e4:	08027f2c 	.word	0x08027f2c
 80143e8:	08015c7d 	.word	0x08015c7d

080143ec <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80143f0:	4b0e      	ldr	r3, [pc, #56]	; (801442c <dhcp_dec_pcb_refcount+0x40>)
 80143f2:	781b      	ldrb	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d105      	bne.n	8014404 <dhcp_dec_pcb_refcount+0x18>
 80143f8:	4b0d      	ldr	r3, [pc, #52]	; (8014430 <dhcp_dec_pcb_refcount+0x44>)
 80143fa:	22ff      	movs	r2, #255	; 0xff
 80143fc:	490d      	ldr	r1, [pc, #52]	; (8014434 <dhcp_dec_pcb_refcount+0x48>)
 80143fe:	480e      	ldr	r0, [pc, #56]	; (8014438 <dhcp_dec_pcb_refcount+0x4c>)
 8014400:	f004 fc1a 	bl	8018c38 <iprintf>
  dhcp_pcb_refcount--;
 8014404:	4b09      	ldr	r3, [pc, #36]	; (801442c <dhcp_dec_pcb_refcount+0x40>)
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	3b01      	subs	r3, #1
 801440a:	b2da      	uxtb	r2, r3
 801440c:	4b07      	ldr	r3, [pc, #28]	; (801442c <dhcp_dec_pcb_refcount+0x40>)
 801440e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014410:	4b06      	ldr	r3, [pc, #24]	; (801442c <dhcp_dec_pcb_refcount+0x40>)
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d107      	bne.n	8014428 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014418:	4b08      	ldr	r3, [pc, #32]	; (801443c <dhcp_dec_pcb_refcount+0x50>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff fefd 	bl	801421c <udp_remove>
    dhcp_pcb = NULL;
 8014422:	4b06      	ldr	r3, [pc, #24]	; (801443c <dhcp_dec_pcb_refcount+0x50>)
 8014424:	2200      	movs	r2, #0
 8014426:	601a      	str	r2, [r3, #0]
  }
}
 8014428:	bf00      	nop
 801442a:	bd80      	pop	{r7, pc}
 801442c:	2001123c 	.word	0x2001123c
 8014430:	0801d248 	.word	0x0801d248
 8014434:	0801d2d0 	.word	0x0801d2d0
 8014438:	0801d2a8 	.word	0x0801d2a8
 801443c:	20011238 	.word	0x20011238

08014440 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801444e:	210c      	movs	r1, #12
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f001 f855 	bl	8015500 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014456:	4b06      	ldr	r3, [pc, #24]	; (8014470 <dhcp_handle_nak+0x30>)
 8014458:	4a05      	ldr	r2, [pc, #20]	; (8014470 <dhcp_handle_nak+0x30>)
 801445a:	4905      	ldr	r1, [pc, #20]	; (8014470 <dhcp_handle_nak+0x30>)
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7f7 ffab 	bl	800c3b8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 fc48 	bl	8014cf8 <dhcp_discover>
}
 8014468:	bf00      	nop
 801446a:	3710      	adds	r7, #16
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	08027f2c 	.word	0x08027f2c

08014474 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014480:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014482:	2108      	movs	r1, #8
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f001 f83b 	bl	8015500 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	331c      	adds	r3, #28
 801448e:	2200      	movs	r2, #0
 8014490:	4619      	mov	r1, r3
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f002 fb3c 	bl	8016b10 <etharp_query>
 8014498:	4603      	mov	r3, r0
 801449a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	799b      	ldrb	r3, [r3, #6]
 80144a0:	2bff      	cmp	r3, #255	; 0xff
 80144a2:	d005      	beq.n	80144b0 <dhcp_check+0x3c>
    dhcp->tries++;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	799b      	ldrb	r3, [r3, #6]
 80144a8:	3301      	adds	r3, #1
 80144aa:	b2da      	uxtb	r2, r3
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80144b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80144b4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144b6:	893b      	ldrh	r3, [r7, #8]
 80144b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144bc:	4a06      	ldr	r2, [pc, #24]	; (80144d8 <dhcp_check+0x64>)
 80144be:	fb82 1203 	smull	r1, r2, r2, r3
 80144c2:	1152      	asrs	r2, r2, #5
 80144c4:	17db      	asrs	r3, r3, #31
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80144ce:	bf00      	nop
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	10624dd3 	.word	0x10624dd3

080144dc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80144ec:	4b0c      	ldr	r3, [pc, #48]	; (8014520 <dhcp_handle_offer+0x44>)
 80144ee:	789b      	ldrb	r3, [r3, #2]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d011      	beq.n	8014518 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2200      	movs	r2, #0
 80144f8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80144fa:	4b0a      	ldr	r3, [pc, #40]	; (8014524 <dhcp_handle_offer+0x48>)
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7f7 f849 	bl	800b596 <lwip_htonl>
 8014504:	4602      	mov	r2, r0
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	691a      	ldr	r2, [r3, #16]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f808 	bl	8014528 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014518:	bf00      	nop
 801451a:	3710      	adds	r7, #16
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	20011230 	.word	0x20011230
 8014524:	20011210 	.word	0x20011210

08014528 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014528:	b5b0      	push	{r4, r5, r7, lr}
 801452a:	b08a      	sub	sp, #40	; 0x28
 801452c:	af02      	add	r7, sp, #8
 801452e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d109      	bne.n	801454a <dhcp_select+0x22>
 8014536:	4b71      	ldr	r3, [pc, #452]	; (80146fc <dhcp_select+0x1d4>)
 8014538:	f240 1277 	movw	r2, #375	; 0x177
 801453c:	4970      	ldr	r1, [pc, #448]	; (8014700 <dhcp_select+0x1d8>)
 801453e:	4871      	ldr	r0, [pc, #452]	; (8014704 <dhcp_select+0x1dc>)
 8014540:	f004 fb7a 	bl	8018c38 <iprintf>
 8014544:	f06f 030f 	mvn.w	r3, #15
 8014548:	e0d3      	b.n	80146f2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801454e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014550:	69bb      	ldr	r3, [r7, #24]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d109      	bne.n	801456a <dhcp_select+0x42>
 8014556:	4b69      	ldr	r3, [pc, #420]	; (80146fc <dhcp_select+0x1d4>)
 8014558:	f240 1279 	movw	r2, #377	; 0x179
 801455c:	496a      	ldr	r1, [pc, #424]	; (8014708 <dhcp_select+0x1e0>)
 801455e:	4869      	ldr	r0, [pc, #420]	; (8014704 <dhcp_select+0x1dc>)
 8014560:	f004 fb6a 	bl	8018c38 <iprintf>
 8014564:	f06f 0305 	mvn.w	r3, #5
 8014568:	e0c3      	b.n	80146f2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801456a:	2101      	movs	r1, #1
 801456c:	69b8      	ldr	r0, [r7, #24]
 801456e:	f000 ffc7 	bl	8015500 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014572:	f107 030c 	add.w	r3, r7, #12
 8014576:	2203      	movs	r2, #3
 8014578:	69b9      	ldr	r1, [r7, #24]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f001 fc4c 	bl	8015e18 <dhcp_create_msg>
 8014580:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	2b00      	cmp	r3, #0
 8014586:	f000 8085 	beq.w	8014694 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014590:	89b8      	ldrh	r0, [r7, #12]
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014598:	2302      	movs	r3, #2
 801459a:	2239      	movs	r2, #57	; 0x39
 801459c:	f000 ffca 	bl	8015534 <dhcp_option>
 80145a0:	4603      	mov	r3, r0
 80145a2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80145a4:	89b8      	ldrh	r0, [r7, #12]
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145b0:	461a      	mov	r2, r3
 80145b2:	f001 f819 	bl	80155e8 <dhcp_option_short>
 80145b6:	4603      	mov	r3, r0
 80145b8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80145ba:	89b8      	ldrh	r0, [r7, #12]
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145c2:	2304      	movs	r3, #4
 80145c4:	2232      	movs	r2, #50	; 0x32
 80145c6:	f000 ffb5 	bl	8015534 <dhcp_option>
 80145ca:	4603      	mov	r3, r0
 80145cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80145ce:	89bc      	ldrh	r4, [r7, #12]
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	69db      	ldr	r3, [r3, #28]
 80145da:	4618      	mov	r0, r3
 80145dc:	f7f6 ffdb 	bl	800b596 <lwip_htonl>
 80145e0:	4603      	mov	r3, r0
 80145e2:	461a      	mov	r2, r3
 80145e4:	4629      	mov	r1, r5
 80145e6:	4620      	mov	r0, r4
 80145e8:	f001 f830 	bl	801564c <dhcp_option_long>
 80145ec:	4603      	mov	r3, r0
 80145ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80145f0:	89b8      	ldrh	r0, [r7, #12]
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145f8:	2304      	movs	r3, #4
 80145fa:	2236      	movs	r2, #54	; 0x36
 80145fc:	f000 ff9a 	bl	8015534 <dhcp_option>
 8014600:	4603      	mov	r3, r0
 8014602:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014604:	89bc      	ldrh	r4, [r7, #12]
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	699b      	ldr	r3, [r3, #24]
 8014610:	4618      	mov	r0, r3
 8014612:	f7f6 ffc0 	bl	800b596 <lwip_htonl>
 8014616:	4603      	mov	r3, r0
 8014618:	461a      	mov	r2, r3
 801461a:	4629      	mov	r1, r5
 801461c:	4620      	mov	r0, r4
 801461e:	f001 f815 	bl	801564c <dhcp_option_long>
 8014622:	4603      	mov	r3, r0
 8014624:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014626:	89b8      	ldrh	r0, [r7, #12]
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801462e:	2303      	movs	r3, #3
 8014630:	2237      	movs	r2, #55	; 0x37
 8014632:	f000 ff7f 	bl	8015534 <dhcp_option>
 8014636:	4603      	mov	r3, r0
 8014638:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801463a:	2300      	movs	r3, #0
 801463c:	77bb      	strb	r3, [r7, #30]
 801463e:	e00e      	b.n	801465e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014640:	89b8      	ldrh	r0, [r7, #12]
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014648:	7fbb      	ldrb	r3, [r7, #30]
 801464a:	4a30      	ldr	r2, [pc, #192]	; (801470c <dhcp_select+0x1e4>)
 801464c:	5cd3      	ldrb	r3, [r2, r3]
 801464e:	461a      	mov	r2, r3
 8014650:	f000 ffa4 	bl	801559c <dhcp_option_byte>
 8014654:	4603      	mov	r3, r0
 8014656:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014658:	7fbb      	ldrb	r3, [r7, #30]
 801465a:	3301      	adds	r3, #1
 801465c:	77bb      	strb	r3, [r7, #30]
 801465e:	7fbb      	ldrb	r3, [r7, #30]
 8014660:	2b02      	cmp	r3, #2
 8014662:	d9ed      	bls.n	8014640 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014664:	89b8      	ldrh	r0, [r7, #12]
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	33f0      	adds	r3, #240	; 0xf0
 801466a:	697a      	ldr	r2, [r7, #20]
 801466c:	4619      	mov	r1, r3
 801466e:	f001 fca9 	bl	8015fc4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014672:	4b27      	ldr	r3, [pc, #156]	; (8014710 <dhcp_select+0x1e8>)
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	4b27      	ldr	r3, [pc, #156]	; (8014714 <dhcp_select+0x1ec>)
 8014678:	9301      	str	r3, [sp, #4]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	9300      	str	r3, [sp, #0]
 801467e:	2343      	movs	r3, #67	; 0x43
 8014680:	4a25      	ldr	r2, [pc, #148]	; (8014718 <dhcp_select+0x1f0>)
 8014682:	6979      	ldr	r1, [r7, #20]
 8014684:	f7ff fbce 	bl	8013e24 <udp_sendto_if_src>
 8014688:	4603      	mov	r3, r0
 801468a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801468c:	6978      	ldr	r0, [r7, #20]
 801468e:	f7f8 fba1 	bl	800cdd4 <pbuf_free>
 8014692:	e001      	b.n	8014698 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014694:	23ff      	movs	r3, #255	; 0xff
 8014696:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	799b      	ldrb	r3, [r3, #6]
 801469c:	2bff      	cmp	r3, #255	; 0xff
 801469e:	d005      	beq.n	80146ac <dhcp_select+0x184>
    dhcp->tries++;
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	799b      	ldrb	r3, [r3, #6]
 80146a4:	3301      	adds	r3, #1
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	799b      	ldrb	r3, [r3, #6]
 80146b0:	2b05      	cmp	r3, #5
 80146b2:	d80d      	bhi.n	80146d0 <dhcp_select+0x1a8>
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	799b      	ldrb	r3, [r3, #6]
 80146b8:	461a      	mov	r2, r3
 80146ba:	2301      	movs	r3, #1
 80146bc:	4093      	lsls	r3, r2
 80146be:	b29b      	uxth	r3, r3
 80146c0:	461a      	mov	r2, r3
 80146c2:	0152      	lsls	r2, r2, #5
 80146c4:	1ad2      	subs	r2, r2, r3
 80146c6:	0092      	lsls	r2, r2, #2
 80146c8:	4413      	add	r3, r2
 80146ca:	00db      	lsls	r3, r3, #3
 80146cc:	b29b      	uxth	r3, r3
 80146ce:	e001      	b.n	80146d4 <dhcp_select+0x1ac>
 80146d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80146d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80146d6:	89fb      	ldrh	r3, [r7, #14]
 80146d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80146dc:	4a0f      	ldr	r2, [pc, #60]	; (801471c <dhcp_select+0x1f4>)
 80146de:	fb82 1203 	smull	r1, r2, r2, r3
 80146e2:	1152      	asrs	r2, r2, #5
 80146e4:	17db      	asrs	r3, r3, #31
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80146ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3720      	adds	r7, #32
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bdb0      	pop	{r4, r5, r7, pc}
 80146fa:	bf00      	nop
 80146fc:	0801d248 	.word	0x0801d248
 8014700:	0801d2f4 	.word	0x0801d2f4
 8014704:	0801d2a8 	.word	0x0801d2a8
 8014708:	0801d310 	.word	0x0801d310
 801470c:	20000030 	.word	0x20000030
 8014710:	20011238 	.word	0x20011238
 8014714:	08027f2c 	.word	0x08027f2c
 8014718:	08027f30 	.word	0x08027f30
 801471c:	10624dd3 	.word	0x10624dd3

08014720 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014726:	4b27      	ldr	r3, [pc, #156]	; (80147c4 <dhcp_coarse_tmr+0xa4>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	607b      	str	r3, [r7, #4]
 801472c:	e042      	b.n	80147b4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014732:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d039      	beq.n	80147ae <dhcp_coarse_tmr+0x8e>
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	795b      	ldrb	r3, [r3, #5]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d035      	beq.n	80147ae <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	8a9b      	ldrh	r3, [r3, #20]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d012      	beq.n	8014770 <dhcp_coarse_tmr+0x50>
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	8a5b      	ldrh	r3, [r3, #18]
 801474e:	3301      	adds	r3, #1
 8014750:	b29a      	uxth	r2, r3
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	825a      	strh	r2, [r3, #18]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	8a5a      	ldrh	r2, [r3, #18]
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	8a9b      	ldrh	r3, [r3, #20]
 801475e:	429a      	cmp	r2, r3
 8014760:	d106      	bne.n	8014770 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f000 fe32 	bl	80153cc <dhcp_release_and_stop>
        dhcp_start(netif);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f000 f969 	bl	8014a40 <dhcp_start>
 801476e:	e01e      	b.n	80147ae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	8a1b      	ldrh	r3, [r3, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00b      	beq.n	8014790 <dhcp_coarse_tmr+0x70>
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	8a1b      	ldrh	r3, [r3, #16]
 801477c:	1e5a      	subs	r2, r3, #1
 801477e:	b291      	uxth	r1, r2
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	8211      	strh	r1, [r2, #16]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d103      	bne.n	8014790 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f000 f8c6 	bl	801491a <dhcp_t2_timeout>
 801478e:	e00e      	b.n	80147ae <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	89db      	ldrh	r3, [r3, #14]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d00a      	beq.n	80147ae <dhcp_coarse_tmr+0x8e>
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	89db      	ldrh	r3, [r3, #14]
 801479c:	1e5a      	subs	r2, r3, #1
 801479e:	b291      	uxth	r1, r2
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	81d1      	strh	r1, [r2, #14]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d102      	bne.n	80147ae <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 f888 	bl	80148be <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	607b      	str	r3, [r7, #4]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1b9      	bne.n	801472e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80147ba:	bf00      	nop
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	200111a4 	.word	0x200111a4

080147c8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80147ce:	4b16      	ldr	r3, [pc, #88]	; (8014828 <dhcp_fine_tmr+0x60>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	607b      	str	r3, [r7, #4]
 80147d4:	e020      	b.n	8014818 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147da:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d017      	beq.n	8014812 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	891b      	ldrh	r3, [r3, #8]
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d906      	bls.n	80147f8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	891b      	ldrh	r3, [r3, #8]
 80147ee:	3b01      	subs	r3, #1
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	811a      	strh	r2, [r3, #8]
 80147f6:	e00c      	b.n	8014812 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	891b      	ldrh	r3, [r3, #8]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d108      	bne.n	8014812 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	891b      	ldrh	r3, [r3, #8]
 8014804:	3b01      	subs	r3, #1
 8014806:	b29a      	uxth	r2, r3
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 f80d 	bl	801482c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	607b      	str	r3, [r7, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1db      	bne.n	80147d6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801481e:	bf00      	nop
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	200111a4 	.word	0x200111a4

0801482c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014838:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	795b      	ldrb	r3, [r3, #5]
 801483e:	2b0c      	cmp	r3, #12
 8014840:	d003      	beq.n	801484a <dhcp_timeout+0x1e>
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	795b      	ldrb	r3, [r3, #5]
 8014846:	2b06      	cmp	r3, #6
 8014848:	d103      	bne.n	8014852 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 fa54 	bl	8014cf8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014850:	e031      	b.n	80148b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	795b      	ldrb	r3, [r3, #5]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d10e      	bne.n	8014878 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	799b      	ldrb	r3, [r3, #6]
 801485e:	2b05      	cmp	r3, #5
 8014860:	d803      	bhi.n	801486a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7ff fe60 	bl	8014528 <dhcp_select>
}
 8014868:	e025      	b.n	80148b6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fdae 	bl	80153cc <dhcp_release_and_stop>
      dhcp_start(netif);
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 f8e5 	bl	8014a40 <dhcp_start>
}
 8014876:	e01e      	b.n	80148b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	795b      	ldrb	r3, [r3, #5]
 801487c:	2b08      	cmp	r3, #8
 801487e:	d10b      	bne.n	8014898 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	799b      	ldrb	r3, [r3, #6]
 8014884:	2b01      	cmp	r3, #1
 8014886:	d803      	bhi.n	8014890 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7ff fdf3 	bl	8014474 <dhcp_check>
}
 801488e:	e012      	b.n	80148b6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f000 fad3 	bl	8014e3c <dhcp_bind>
}
 8014896:	e00e      	b.n	80148b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	795b      	ldrb	r3, [r3, #5]
 801489c:	2b03      	cmp	r3, #3
 801489e:	d10a      	bne.n	80148b6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	799b      	ldrb	r3, [r3, #6]
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d803      	bhi.n	80148b0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fcd9 	bl	8015260 <dhcp_reboot>
}
 80148ae:	e002      	b.n	80148b6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 fa21 	bl	8014cf8 <dhcp_discover>
}
 80148b6:	bf00      	nop
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}

080148be <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80148be:	b580      	push	{r7, lr}
 80148c0:	b084      	sub	sp, #16
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	795b      	ldrb	r3, [r3, #5]
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d007      	beq.n	80148e4 <dhcp_t1_timeout+0x26>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	795b      	ldrb	r3, [r3, #5]
 80148d8:	2b0a      	cmp	r3, #10
 80148da:	d003      	beq.n	80148e4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80148e0:	2b05      	cmp	r3, #5
 80148e2:	d116      	bne.n	8014912 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 fb83 	bl	8014ff0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	899b      	ldrh	r3, [r3, #12]
 80148ee:	461a      	mov	r2, r3
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	8a5b      	ldrh	r3, [r3, #18]
 80148f4:	1ad3      	subs	r3, r2, r3
 80148f6:	2b01      	cmp	r3, #1
 80148f8:	dd0b      	ble.n	8014912 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	899b      	ldrh	r3, [r3, #12]
 80148fe:	461a      	mov	r2, r3
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	8a5b      	ldrh	r3, [r3, #18]
 8014904:	1ad3      	subs	r3, r2, r3
 8014906:	0fda      	lsrs	r2, r3, #31
 8014908:	4413      	add	r3, r2
 801490a:	105b      	asrs	r3, r3, #1
 801490c:	b29a      	uxth	r2, r3
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014912:	bf00      	nop
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801491a:	b580      	push	{r7, lr}
 801491c:	b084      	sub	sp, #16
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014926:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	795b      	ldrb	r3, [r3, #5]
 801492c:	2b01      	cmp	r3, #1
 801492e:	d00b      	beq.n	8014948 <dhcp_t2_timeout+0x2e>
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	795b      	ldrb	r3, [r3, #5]
 8014934:	2b0a      	cmp	r3, #10
 8014936:	d007      	beq.n	8014948 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801493c:	2b05      	cmp	r3, #5
 801493e:	d003      	beq.n	8014948 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	795b      	ldrb	r3, [r3, #5]
 8014944:	2b04      	cmp	r3, #4
 8014946:	d116      	bne.n	8014976 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 fbed 	bl	8015128 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	8a9b      	ldrh	r3, [r3, #20]
 8014952:	461a      	mov	r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	8a5b      	ldrh	r3, [r3, #18]
 8014958:	1ad3      	subs	r3, r2, r3
 801495a:	2b01      	cmp	r3, #1
 801495c:	dd0b      	ble.n	8014976 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	8a9b      	ldrh	r3, [r3, #20]
 8014962:	461a      	mov	r2, r3
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	8a5b      	ldrh	r3, [r3, #18]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	0fda      	lsrs	r2, r3, #31
 801496c:	4413      	add	r3, r2
 801496e:	105b      	asrs	r3, r3, #1
 8014970:	b29a      	uxth	r2, r3
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014976:	bf00      	nop
 8014978:	3710      	adds	r7, #16
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
	...

08014980 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b084      	sub	sp, #16
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801498e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2200      	movs	r2, #0
 8014994:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	2200      	movs	r2, #0
 801499a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801499c:	4b26      	ldr	r3, [pc, #152]	; (8014a38 <dhcp_handle_ack+0xb8>)
 801499e:	78db      	ldrb	r3, [r3, #3]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d003      	beq.n	80149ac <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80149a4:	4b25      	ldr	r3, [pc, #148]	; (8014a3c <dhcp_handle_ack+0xbc>)
 80149a6:	68da      	ldr	r2, [r3, #12]
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80149ac:	4b22      	ldr	r3, [pc, #136]	; (8014a38 <dhcp_handle_ack+0xb8>)
 80149ae:	791b      	ldrb	r3, [r3, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d004      	beq.n	80149be <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80149b4:	4b21      	ldr	r3, [pc, #132]	; (8014a3c <dhcp_handle_ack+0xbc>)
 80149b6:	691a      	ldr	r2, [r3, #16]
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80149bc:	e004      	b.n	80149c8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149c2:	085a      	lsrs	r2, r3, #1
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80149c8:	4b1b      	ldr	r3, [pc, #108]	; (8014a38 <dhcp_handle_ack+0xb8>)
 80149ca:	795b      	ldrb	r3, [r3, #5]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d004      	beq.n	80149da <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80149d0:	4b1a      	ldr	r3, [pc, #104]	; (8014a3c <dhcp_handle_ack+0xbc>)
 80149d2:	695a      	ldr	r2, [r3, #20]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	631a      	str	r2, [r3, #48]	; 0x30
 80149d8:	e007      	b.n	80149ea <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80149de:	4613      	mov	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	1a9b      	subs	r3, r3, r2
 80149e4:	08da      	lsrs	r2, r3, #3
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	691a      	ldr	r2, [r3, #16]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80149f2:	4b11      	ldr	r3, [pc, #68]	; (8014a38 <dhcp_handle_ack+0xb8>)
 80149f4:	799b      	ldrb	r3, [r3, #6]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00b      	beq.n	8014a12 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80149fa:	4b10      	ldr	r3, [pc, #64]	; (8014a3c <dhcp_handle_ack+0xbc>)
 80149fc:	699b      	ldr	r3, [r3, #24]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7f6 fdc9 	bl	800b596 <lwip_htonl>
 8014a04:	4602      	mov	r2, r0
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	71da      	strb	r2, [r3, #7]
 8014a10:	e002      	b.n	8014a18 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2200      	movs	r2, #0
 8014a16:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014a18:	4b07      	ldr	r3, [pc, #28]	; (8014a38 <dhcp_handle_ack+0xb8>)
 8014a1a:	79db      	ldrb	r3, [r3, #7]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d007      	beq.n	8014a30 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014a20:	4b06      	ldr	r3, [pc, #24]	; (8014a3c <dhcp_handle_ack+0xbc>)
 8014a22:	69db      	ldr	r3, [r3, #28]
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7f6 fdb6 	bl	800b596 <lwip_htonl>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014a30:	bf00      	nop
 8014a32:	3710      	adds	r7, #16
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	20011230 	.word	0x20011230
 8014a3c:	20011210 	.word	0x20011210

08014a40 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d109      	bne.n	8014a62 <dhcp_start+0x22>
 8014a4e:	4b37      	ldr	r3, [pc, #220]	; (8014b2c <dhcp_start+0xec>)
 8014a50:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014a54:	4936      	ldr	r1, [pc, #216]	; (8014b30 <dhcp_start+0xf0>)
 8014a56:	4837      	ldr	r0, [pc, #220]	; (8014b34 <dhcp_start+0xf4>)
 8014a58:	f004 f8ee 	bl	8018c38 <iprintf>
 8014a5c:	f06f 030f 	mvn.w	r3, #15
 8014a60:	e060      	b.n	8014b24 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014a68:	f003 0301 	and.w	r3, r3, #1
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d109      	bne.n	8014a84 <dhcp_start+0x44>
 8014a70:	4b2e      	ldr	r3, [pc, #184]	; (8014b2c <dhcp_start+0xec>)
 8014a72:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014a76:	4930      	ldr	r1, [pc, #192]	; (8014b38 <dhcp_start+0xf8>)
 8014a78:	482e      	ldr	r0, [pc, #184]	; (8014b34 <dhcp_start+0xf4>)
 8014a7a:	f004 f8dd 	bl	8018c38 <iprintf>
 8014a7e:	f06f 030f 	mvn.w	r3, #15
 8014a82:	e04f      	b.n	8014b24 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a88:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a8e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014a92:	d202      	bcs.n	8014a9a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014a94:	f04f 33ff 	mov.w	r3, #4294967295
 8014a98:	e044      	b.n	8014b24 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d10d      	bne.n	8014abc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014aa0:	2034      	movs	r0, #52	; 0x34
 8014aa2:	f7f7 f8cd 	bl	800bc40 <mem_malloc>
 8014aa6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d102      	bne.n	8014ab4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014aae:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab2:	e037      	b.n	8014b24 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	68fa      	ldr	r2, [r7, #12]
 8014ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8014aba:	e005      	b.n	8014ac8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	791b      	ldrb	r3, [r3, #4]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014ac4:	f7ff fc92 	bl	80143ec <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014ac8:	2234      	movs	r2, #52	; 0x34
 8014aca:	2100      	movs	r1, #0
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f004 fa43 	bl	8018f58 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014ad2:	f7ff fc39 	bl	8014348 <dhcp_inc_pcb_refcount>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <dhcp_start+0xa2>
    return ERR_MEM;
 8014adc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae0:	e020      	b.n	8014b24 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014aee:	f003 0304 	and.w	r3, r3, #4
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d105      	bne.n	8014b02 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014af6:	2102      	movs	r1, #2
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f000 fd01 	bl	8015500 <dhcp_set_state>
    return ERR_OK;
 8014afe:	2300      	movs	r3, #0
 8014b00:	e010      	b.n	8014b24 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 f8f8 	bl	8014cf8 <dhcp_discover>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014b0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d005      	beq.n	8014b20 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fc59 	bl	80153cc <dhcp_release_and_stop>
    return ERR_MEM;
 8014b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b1e:	e001      	b.n	8014b24 <dhcp_start+0xe4>
  }
  return result;
 8014b20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	0801d248 	.word	0x0801d248
 8014b30:	0801d32c 	.word	0x0801d32c
 8014b34:	0801d2a8 	.word	0x0801d2a8
 8014b38:	0801d370 	.word	0x0801d370

08014b3c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b48:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d025      	beq.n	8014b9c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	795b      	ldrb	r3, [r3, #5]
 8014b54:	2b0a      	cmp	r3, #10
 8014b56:	d008      	beq.n	8014b6a <dhcp_network_changed+0x2e>
 8014b58:	2b0a      	cmp	r3, #10
 8014b5a:	dc0d      	bgt.n	8014b78 <dhcp_network_changed+0x3c>
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01f      	beq.n	8014ba0 <dhcp_network_changed+0x64>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	db09      	blt.n	8014b78 <dhcp_network_changed+0x3c>
 8014b64:	3b03      	subs	r3, #3
 8014b66:	2b02      	cmp	r3, #2
 8014b68:	d806      	bhi.n	8014b78 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f000 fb75 	bl	8015260 <dhcp_reboot>
      break;
 8014b76:	e014      	b.n	8014ba2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	795b      	ldrb	r3, [r3, #5]
 8014b7c:	2b0c      	cmp	r3, #12
 8014b7e:	d906      	bls.n	8014b8e <dhcp_network_changed+0x52>
 8014b80:	4b09      	ldr	r3, [pc, #36]	; (8014ba8 <dhcp_network_changed+0x6c>)
 8014b82:	f240 326d 	movw	r2, #877	; 0x36d
 8014b86:	4909      	ldr	r1, [pc, #36]	; (8014bac <dhcp_network_changed+0x70>)
 8014b88:	4809      	ldr	r0, [pc, #36]	; (8014bb0 <dhcp_network_changed+0x74>)
 8014b8a:	f004 f855 	bl	8018c38 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f000 f8af 	bl	8014cf8 <dhcp_discover>
      break;
 8014b9a:	e002      	b.n	8014ba2 <dhcp_network_changed+0x66>
    return;
 8014b9c:	bf00      	nop
 8014b9e:	e000      	b.n	8014ba2 <dhcp_network_changed+0x66>
      break;
 8014ba0:	bf00      	nop
  }
}
 8014ba2:	3710      	adds	r7, #16
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	0801d248 	.word	0x0801d248
 8014bac:	0801d394 	.word	0x0801d394
 8014bb0:	0801d2a8 	.word	0x0801d2a8

08014bb4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d107      	bne.n	8014bd4 <dhcp_arp_reply+0x20>
 8014bc4:	4b0e      	ldr	r3, [pc, #56]	; (8014c00 <dhcp_arp_reply+0x4c>)
 8014bc6:	f240 328b 	movw	r2, #907	; 0x38b
 8014bca:	490e      	ldr	r1, [pc, #56]	; (8014c04 <dhcp_arp_reply+0x50>)
 8014bcc:	480e      	ldr	r0, [pc, #56]	; (8014c08 <dhcp_arp_reply+0x54>)
 8014bce:	f004 f833 	bl	8018c38 <iprintf>
 8014bd2:	e012      	b.n	8014bfa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00c      	beq.n	8014bfa <dhcp_arp_reply+0x46>
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	795b      	ldrb	r3, [r3, #5]
 8014be4:	2b08      	cmp	r3, #8
 8014be6:	d108      	bne.n	8014bfa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	681a      	ldr	r2, [r3, #0]
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	69db      	ldr	r3, [r3, #28]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d102      	bne.n	8014bfa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 f809 	bl	8014c0c <dhcp_decline>
    }
  }
}
 8014bfa:	3710      	adds	r7, #16
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}
 8014c00:	0801d248 	.word	0x0801d248
 8014c04:	0801d32c 	.word	0x0801d32c
 8014c08:	0801d2a8 	.word	0x0801d2a8

08014c0c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014c0c:	b5b0      	push	{r4, r5, r7, lr}
 8014c0e:	b08a      	sub	sp, #40	; 0x28
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c18:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014c1a:	210c      	movs	r1, #12
 8014c1c:	69b8      	ldr	r0, [r7, #24]
 8014c1e:	f000 fc6f 	bl	8015500 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014c22:	f107 030c 	add.w	r3, r7, #12
 8014c26:	2204      	movs	r2, #4
 8014c28:	69b9      	ldr	r1, [r7, #24]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f001 f8f4 	bl	8015e18 <dhcp_create_msg>
 8014c30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d035      	beq.n	8014ca4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014c3e:	89b8      	ldrh	r0, [r7, #12]
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c46:	2304      	movs	r3, #4
 8014c48:	2232      	movs	r2, #50	; 0x32
 8014c4a:	f000 fc73 	bl	8015534 <dhcp_option>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014c52:	89bc      	ldrh	r4, [r7, #12]
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	69db      	ldr	r3, [r3, #28]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7f6 fc99 	bl	800b596 <lwip_htonl>
 8014c64:	4603      	mov	r3, r0
 8014c66:	461a      	mov	r2, r3
 8014c68:	4629      	mov	r1, r5
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	f000 fcee 	bl	801564c <dhcp_option_long>
 8014c70:	4603      	mov	r3, r0
 8014c72:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c74:	89b8      	ldrh	r0, [r7, #12]
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	33f0      	adds	r3, #240	; 0xf0
 8014c7a:	697a      	ldr	r2, [r7, #20]
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	f001 f9a1 	bl	8015fc4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014c82:	4b19      	ldr	r3, [pc, #100]	; (8014ce8 <dhcp_decline+0xdc>)
 8014c84:	6818      	ldr	r0, [r3, #0]
 8014c86:	4b19      	ldr	r3, [pc, #100]	; (8014cec <dhcp_decline+0xe0>)
 8014c88:	9301      	str	r3, [sp, #4]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	2343      	movs	r3, #67	; 0x43
 8014c90:	4a17      	ldr	r2, [pc, #92]	; (8014cf0 <dhcp_decline+0xe4>)
 8014c92:	6979      	ldr	r1, [r7, #20]
 8014c94:	f7ff f8c6 	bl	8013e24 <udp_sendto_if_src>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014c9c:	6978      	ldr	r0, [r7, #20]
 8014c9e:	f7f8 f899 	bl	800cdd4 <pbuf_free>
 8014ca2:	e001      	b.n	8014ca8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014ca4:	23ff      	movs	r3, #255	; 0xff
 8014ca6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014ca8:	69bb      	ldr	r3, [r7, #24]
 8014caa:	799b      	ldrb	r3, [r3, #6]
 8014cac:	2bff      	cmp	r3, #255	; 0xff
 8014cae:	d005      	beq.n	8014cbc <dhcp_decline+0xb0>
    dhcp->tries++;
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	799b      	ldrb	r3, [r3, #6]
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	b2da      	uxtb	r2, r3
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014cbc:	f242 7310 	movw	r3, #10000	; 0x2710
 8014cc0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014cc2:	89fb      	ldrh	r3, [r7, #14]
 8014cc4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014cc8:	4a0a      	ldr	r2, [pc, #40]	; (8014cf4 <dhcp_decline+0xe8>)
 8014cca:	fb82 1203 	smull	r1, r2, r2, r3
 8014cce:	1152      	asrs	r2, r2, #5
 8014cd0:	17db      	asrs	r3, r3, #31
 8014cd2:	1ad3      	subs	r3, r2, r3
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	69bb      	ldr	r3, [r7, #24]
 8014cd8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3720      	adds	r7, #32
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	20011238 	.word	0x20011238
 8014cec:	08027f2c 	.word	0x08027f2c
 8014cf0:	08027f30 	.word	0x08027f30
 8014cf4:	10624dd3 	.word	0x10624dd3

08014cf8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b08a      	sub	sp, #40	; 0x28
 8014cfc:	af02      	add	r7, sp, #8
 8014cfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d04:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014d06:	2300      	movs	r3, #0
 8014d08:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014d10:	2106      	movs	r1, #6
 8014d12:	69b8      	ldr	r0, [r7, #24]
 8014d14:	f000 fbf4 	bl	8015500 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014d18:	f107 0308 	add.w	r3, r7, #8
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	69b9      	ldr	r1, [r7, #24]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f001 f879 	bl	8015e18 <dhcp_create_msg>
 8014d26:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d04b      	beq.n	8014dc6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014d34:	8938      	ldrh	r0, [r7, #8]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d3c:	2302      	movs	r3, #2
 8014d3e:	2239      	movs	r2, #57	; 0x39
 8014d40:	f000 fbf8 	bl	8015534 <dhcp_option>
 8014d44:	4603      	mov	r3, r0
 8014d46:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014d48:	8938      	ldrh	r0, [r7, #8]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d54:	461a      	mov	r2, r3
 8014d56:	f000 fc47 	bl	80155e8 <dhcp_option_short>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d5e:	8938      	ldrh	r0, [r7, #8]
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d66:	2303      	movs	r3, #3
 8014d68:	2237      	movs	r2, #55	; 0x37
 8014d6a:	f000 fbe3 	bl	8015534 <dhcp_option>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d72:	2300      	movs	r3, #0
 8014d74:	77fb      	strb	r3, [r7, #31]
 8014d76:	e00e      	b.n	8014d96 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d78:	8938      	ldrh	r0, [r7, #8]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d80:	7ffb      	ldrb	r3, [r7, #31]
 8014d82:	4a29      	ldr	r2, [pc, #164]	; (8014e28 <dhcp_discover+0x130>)
 8014d84:	5cd3      	ldrb	r3, [r2, r3]
 8014d86:	461a      	mov	r2, r3
 8014d88:	f000 fc08 	bl	801559c <dhcp_option_byte>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d90:	7ffb      	ldrb	r3, [r7, #31]
 8014d92:	3301      	adds	r3, #1
 8014d94:	77fb      	strb	r3, [r7, #31]
 8014d96:	7ffb      	ldrb	r3, [r7, #31]
 8014d98:	2b02      	cmp	r3, #2
 8014d9a:	d9ed      	bls.n	8014d78 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d9c:	8938      	ldrh	r0, [r7, #8]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	33f0      	adds	r3, #240	; 0xf0
 8014da2:	693a      	ldr	r2, [r7, #16]
 8014da4:	4619      	mov	r1, r3
 8014da6:	f001 f90d 	bl	8015fc4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014daa:	4b20      	ldr	r3, [pc, #128]	; (8014e2c <dhcp_discover+0x134>)
 8014dac:	6818      	ldr	r0, [r3, #0]
 8014dae:	4b20      	ldr	r3, [pc, #128]	; (8014e30 <dhcp_discover+0x138>)
 8014db0:	9301      	str	r3, [sp, #4]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	2343      	movs	r3, #67	; 0x43
 8014db8:	4a1e      	ldr	r2, [pc, #120]	; (8014e34 <dhcp_discover+0x13c>)
 8014dba:	6939      	ldr	r1, [r7, #16]
 8014dbc:	f7ff f832 	bl	8013e24 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014dc0:	6938      	ldr	r0, [r7, #16]
 8014dc2:	f7f8 f807 	bl	800cdd4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	799b      	ldrb	r3, [r3, #6]
 8014dca:	2bff      	cmp	r3, #255	; 0xff
 8014dcc:	d005      	beq.n	8014dda <dhcp_discover+0xe2>
    dhcp->tries++;
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	799b      	ldrb	r3, [r3, #6]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	b2da      	uxtb	r2, r3
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	799b      	ldrb	r3, [r3, #6]
 8014dde:	2b05      	cmp	r3, #5
 8014de0:	d80d      	bhi.n	8014dfe <dhcp_discover+0x106>
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	799b      	ldrb	r3, [r3, #6]
 8014de6:	461a      	mov	r2, r3
 8014de8:	2301      	movs	r3, #1
 8014dea:	4093      	lsls	r3, r2
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	461a      	mov	r2, r3
 8014df0:	0152      	lsls	r2, r2, #5
 8014df2:	1ad2      	subs	r2, r2, r3
 8014df4:	0092      	lsls	r2, r2, #2
 8014df6:	4413      	add	r3, r2
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	e001      	b.n	8014e02 <dhcp_discover+0x10a>
 8014dfe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014e02:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e04:	897b      	ldrh	r3, [r7, #10]
 8014e06:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e0a:	4a0b      	ldr	r2, [pc, #44]	; (8014e38 <dhcp_discover+0x140>)
 8014e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8014e10:	1152      	asrs	r2, r2, #5
 8014e12:	17db      	asrs	r3, r3, #31
 8014e14:	1ad3      	subs	r3, r2, r3
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	69bb      	ldr	r3, [r7, #24]
 8014e1a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3720      	adds	r7, #32
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	20000030 	.word	0x20000030
 8014e2c:	20011238 	.word	0x20011238
 8014e30:	08027f2c 	.word	0x08027f2c
 8014e34:	08027f30 	.word	0x08027f30
 8014e38:	10624dd3 	.word	0x10624dd3

08014e3c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b088      	sub	sp, #32
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d107      	bne.n	8014e5a <dhcp_bind+0x1e>
 8014e4a:	4b64      	ldr	r3, [pc, #400]	; (8014fdc <dhcp_bind+0x1a0>)
 8014e4c:	f240 4215 	movw	r2, #1045	; 0x415
 8014e50:	4963      	ldr	r1, [pc, #396]	; (8014fe0 <dhcp_bind+0x1a4>)
 8014e52:	4864      	ldr	r0, [pc, #400]	; (8014fe4 <dhcp_bind+0x1a8>)
 8014e54:	f003 fef0 	bl	8018c38 <iprintf>
 8014e58:	e0bc      	b.n	8014fd4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e5e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d107      	bne.n	8014e76 <dhcp_bind+0x3a>
 8014e66:	4b5d      	ldr	r3, [pc, #372]	; (8014fdc <dhcp_bind+0x1a0>)
 8014e68:	f240 4217 	movw	r2, #1047	; 0x417
 8014e6c:	495e      	ldr	r1, [pc, #376]	; (8014fe8 <dhcp_bind+0x1ac>)
 8014e6e:	485d      	ldr	r0, [pc, #372]	; (8014fe4 <dhcp_bind+0x1a8>)
 8014e70:	f003 fee2 	bl	8018c38 <iprintf>
 8014e74:	e0ae      	b.n	8014fd4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e84:	d019      	beq.n	8014eba <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e8a:	331e      	adds	r3, #30
 8014e8c:	4a57      	ldr	r2, [pc, #348]	; (8014fec <dhcp_bind+0x1b0>)
 8014e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8014e92:	095b      	lsrs	r3, r3, #5
 8014e94:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e9c:	d302      	bcc.n	8014ea4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ea2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	b29a      	uxth	r2, r3
 8014ea8:	69bb      	ldr	r3, [r7, #24]
 8014eaa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014eac:	69bb      	ldr	r3, [r7, #24]
 8014eae:	8a9b      	ldrh	r3, [r3, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d102      	bne.n	8014eba <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014eb4:	69bb      	ldr	r3, [r7, #24]
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec2:	d01d      	beq.n	8014f00 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014ec4:	69bb      	ldr	r3, [r7, #24]
 8014ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec8:	331e      	adds	r3, #30
 8014eca:	4a48      	ldr	r2, [pc, #288]	; (8014fec <dhcp_bind+0x1b0>)
 8014ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8014ed0:	095b      	lsrs	r3, r3, #5
 8014ed2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014eda:	d302      	bcc.n	8014ee2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ee0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014ee2:	69fb      	ldr	r3, [r7, #28]
 8014ee4:	b29a      	uxth	r2, r3
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	895b      	ldrh	r3, [r3, #10]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d102      	bne.n	8014ef8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014ef2:	69bb      	ldr	r3, [r7, #24]
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	895a      	ldrh	r2, [r3, #10]
 8014efc:	69bb      	ldr	r3, [r7, #24]
 8014efe:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f08:	d01d      	beq.n	8014f46 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f0e:	331e      	adds	r3, #30
 8014f10:	4a36      	ldr	r2, [pc, #216]	; (8014fec <dhcp_bind+0x1b0>)
 8014f12:	fba2 2303 	umull	r2, r3, r2, r3
 8014f16:	095b      	lsrs	r3, r3, #5
 8014f18:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f1a:	69fb      	ldr	r3, [r7, #28]
 8014f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f20:	d302      	bcc.n	8014f28 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f26:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014f28:	69fb      	ldr	r3, [r7, #28]
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	69bb      	ldr	r3, [r7, #24]
 8014f2e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	899b      	ldrh	r3, [r3, #12]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d102      	bne.n	8014f3e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	899a      	ldrh	r2, [r3, #12]
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	895a      	ldrh	r2, [r3, #10]
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	899b      	ldrh	r3, [r3, #12]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d306      	bcc.n	8014f60 <dhcp_bind+0x124>
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	899b      	ldrh	r3, [r3, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d002      	beq.n	8014f60 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014f60:	69bb      	ldr	r3, [r7, #24]
 8014f62:	79db      	ldrb	r3, [r3, #7]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d003      	beq.n	8014f70 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	6a1b      	ldr	r3, [r3, #32]
 8014f6c:	613b      	str	r3, [r7, #16]
 8014f6e:	e014      	b.n	8014f9a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014f70:	69bb      	ldr	r3, [r7, #24]
 8014f72:	331c      	adds	r3, #28
 8014f74:	781b      	ldrb	r3, [r3, #0]
 8014f76:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	db02      	blt.n	8014f86 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014f80:	23ff      	movs	r3, #255	; 0xff
 8014f82:	613b      	str	r3, [r7, #16]
 8014f84:	e009      	b.n	8014f9a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014f86:	7dfb      	ldrb	r3, [r7, #23]
 8014f88:	2bbf      	cmp	r3, #191	; 0xbf
 8014f8a:	d903      	bls.n	8014f94 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014f8c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014f90:	613b      	str	r3, [r7, #16]
 8014f92:	e002      	b.n	8014f9a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f98:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d108      	bne.n	8014fb8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	69da      	ldr	r2, [r3, #28]
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	4013      	ands	r3, r2
 8014fae:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014fb6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014fb8:	210a      	movs	r1, #10
 8014fba:	69b8      	ldr	r0, [r7, #24]
 8014fbc:	f000 faa0 	bl	8015500 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	f103 011c 	add.w	r1, r3, #28
 8014fc6:	f107 030c 	add.w	r3, r7, #12
 8014fca:	f107 0210 	add.w	r2, r7, #16
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f7f7 f9f2 	bl	800c3b8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014fd4:	3720      	adds	r7, #32
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	0801d248 	.word	0x0801d248
 8014fe0:	0801d3a8 	.word	0x0801d3a8
 8014fe4:	0801d2a8 	.word	0x0801d2a8
 8014fe8:	0801d3c4 	.word	0x0801d3c4
 8014fec:	88888889 	.word	0x88888889

08014ff0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b08a      	sub	sp, #40	; 0x28
 8014ff4:	af02      	add	r7, sp, #8
 8014ff6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ffc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014ffe:	2105      	movs	r1, #5
 8015000:	69b8      	ldr	r0, [r7, #24]
 8015002:	f000 fa7d 	bl	8015500 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015006:	f107 030c 	add.w	r3, r7, #12
 801500a:	2203      	movs	r2, #3
 801500c:	69b9      	ldr	r1, [r7, #24]
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f000 ff02 	bl	8015e18 <dhcp_create_msg>
 8015014:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d04e      	beq.n	80150ba <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015022:	89b8      	ldrh	r0, [r7, #12]
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801502a:	2302      	movs	r3, #2
 801502c:	2239      	movs	r2, #57	; 0x39
 801502e:	f000 fa81 	bl	8015534 <dhcp_option>
 8015032:	4603      	mov	r3, r0
 8015034:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015036:	89b8      	ldrh	r0, [r7, #12]
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015042:	461a      	mov	r2, r3
 8015044:	f000 fad0 	bl	80155e8 <dhcp_option_short>
 8015048:	4603      	mov	r3, r0
 801504a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801504c:	89b8      	ldrh	r0, [r7, #12]
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015054:	2303      	movs	r3, #3
 8015056:	2237      	movs	r2, #55	; 0x37
 8015058:	f000 fa6c 	bl	8015534 <dhcp_option>
 801505c:	4603      	mov	r3, r0
 801505e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015060:	2300      	movs	r3, #0
 8015062:	77bb      	strb	r3, [r7, #30]
 8015064:	e00e      	b.n	8015084 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015066:	89b8      	ldrh	r0, [r7, #12]
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801506e:	7fbb      	ldrb	r3, [r7, #30]
 8015070:	4a2a      	ldr	r2, [pc, #168]	; (801511c <dhcp_renew+0x12c>)
 8015072:	5cd3      	ldrb	r3, [r2, r3]
 8015074:	461a      	mov	r2, r3
 8015076:	f000 fa91 	bl	801559c <dhcp_option_byte>
 801507a:	4603      	mov	r3, r0
 801507c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801507e:	7fbb      	ldrb	r3, [r7, #30]
 8015080:	3301      	adds	r3, #1
 8015082:	77bb      	strb	r3, [r7, #30]
 8015084:	7fbb      	ldrb	r3, [r7, #30]
 8015086:	2b02      	cmp	r3, #2
 8015088:	d9ed      	bls.n	8015066 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801508a:	89b8      	ldrh	r0, [r7, #12]
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	33f0      	adds	r3, #240	; 0xf0
 8015090:	697a      	ldr	r2, [r7, #20]
 8015092:	4619      	mov	r1, r3
 8015094:	f000 ff96 	bl	8015fc4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015098:	4b21      	ldr	r3, [pc, #132]	; (8015120 <dhcp_renew+0x130>)
 801509a:	6818      	ldr	r0, [r3, #0]
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	f103 0218 	add.w	r2, r3, #24
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	2343      	movs	r3, #67	; 0x43
 80150a8:	6979      	ldr	r1, [r7, #20]
 80150aa:	f7fe fe47 	bl	8013d3c <udp_sendto_if>
 80150ae:	4603      	mov	r3, r0
 80150b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80150b2:	6978      	ldr	r0, [r7, #20]
 80150b4:	f7f7 fe8e 	bl	800cdd4 <pbuf_free>
 80150b8:	e001      	b.n	80150be <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80150ba:	23ff      	movs	r3, #255	; 0xff
 80150bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	799b      	ldrb	r3, [r3, #6]
 80150c2:	2bff      	cmp	r3, #255	; 0xff
 80150c4:	d005      	beq.n	80150d2 <dhcp_renew+0xe2>
    dhcp->tries++;
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	799b      	ldrb	r3, [r3, #6]
 80150ca:	3301      	adds	r3, #1
 80150cc:	b2da      	uxtb	r2, r3
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	799b      	ldrb	r3, [r3, #6]
 80150d6:	2b09      	cmp	r3, #9
 80150d8:	d80a      	bhi.n	80150f0 <dhcp_renew+0x100>
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	799b      	ldrb	r3, [r3, #6]
 80150de:	b29b      	uxth	r3, r3
 80150e0:	461a      	mov	r2, r3
 80150e2:	0152      	lsls	r2, r2, #5
 80150e4:	1ad2      	subs	r2, r2, r3
 80150e6:	0092      	lsls	r2, r2, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	011b      	lsls	r3, r3, #4
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	e001      	b.n	80150f4 <dhcp_renew+0x104>
 80150f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80150f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80150f6:	89fb      	ldrh	r3, [r7, #14]
 80150f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80150fc:	4a09      	ldr	r2, [pc, #36]	; (8015124 <dhcp_renew+0x134>)
 80150fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015102:	1152      	asrs	r2, r2, #5
 8015104:	17db      	asrs	r3, r3, #31
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	b29a      	uxth	r2, r3
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801510e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015112:	4618      	mov	r0, r3
 8015114:	3720      	adds	r7, #32
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	20000030 	.word	0x20000030
 8015120:	20011238 	.word	0x20011238
 8015124:	10624dd3 	.word	0x10624dd3

08015128 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b08a      	sub	sp, #40	; 0x28
 801512c:	af02      	add	r7, sp, #8
 801512e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015134:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015136:	2104      	movs	r1, #4
 8015138:	69b8      	ldr	r0, [r7, #24]
 801513a:	f000 f9e1 	bl	8015500 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801513e:	f107 030c 	add.w	r3, r7, #12
 8015142:	2203      	movs	r2, #3
 8015144:	69b9      	ldr	r1, [r7, #24]
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f000 fe66 	bl	8015e18 <dhcp_create_msg>
 801514c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d04c      	beq.n	80151ee <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801515a:	89b8      	ldrh	r0, [r7, #12]
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015162:	2302      	movs	r3, #2
 8015164:	2239      	movs	r2, #57	; 0x39
 8015166:	f000 f9e5 	bl	8015534 <dhcp_option>
 801516a:	4603      	mov	r3, r0
 801516c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801516e:	89b8      	ldrh	r0, [r7, #12]
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801517a:	461a      	mov	r2, r3
 801517c:	f000 fa34 	bl	80155e8 <dhcp_option_short>
 8015180:	4603      	mov	r3, r0
 8015182:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015184:	89b8      	ldrh	r0, [r7, #12]
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801518c:	2303      	movs	r3, #3
 801518e:	2237      	movs	r2, #55	; 0x37
 8015190:	f000 f9d0 	bl	8015534 <dhcp_option>
 8015194:	4603      	mov	r3, r0
 8015196:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015198:	2300      	movs	r3, #0
 801519a:	77bb      	strb	r3, [r7, #30]
 801519c:	e00e      	b.n	80151bc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801519e:	89b8      	ldrh	r0, [r7, #12]
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151a6:	7fbb      	ldrb	r3, [r7, #30]
 80151a8:	4a29      	ldr	r2, [pc, #164]	; (8015250 <dhcp_rebind+0x128>)
 80151aa:	5cd3      	ldrb	r3, [r2, r3]
 80151ac:	461a      	mov	r2, r3
 80151ae:	f000 f9f5 	bl	801559c <dhcp_option_byte>
 80151b2:	4603      	mov	r3, r0
 80151b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151b6:	7fbb      	ldrb	r3, [r7, #30]
 80151b8:	3301      	adds	r3, #1
 80151ba:	77bb      	strb	r3, [r7, #30]
 80151bc:	7fbb      	ldrb	r3, [r7, #30]
 80151be:	2b02      	cmp	r3, #2
 80151c0:	d9ed      	bls.n	801519e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80151c2:	89b8      	ldrh	r0, [r7, #12]
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	33f0      	adds	r3, #240	; 0xf0
 80151c8:	697a      	ldr	r2, [r7, #20]
 80151ca:	4619      	mov	r1, r3
 80151cc:	f000 fefa 	bl	8015fc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80151d0:	4b20      	ldr	r3, [pc, #128]	; (8015254 <dhcp_rebind+0x12c>)
 80151d2:	6818      	ldr	r0, [r3, #0]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	2343      	movs	r3, #67	; 0x43
 80151da:	4a1f      	ldr	r2, [pc, #124]	; (8015258 <dhcp_rebind+0x130>)
 80151dc:	6979      	ldr	r1, [r7, #20]
 80151de:	f7fe fdad 	bl	8013d3c <udp_sendto_if>
 80151e2:	4603      	mov	r3, r0
 80151e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80151e6:	6978      	ldr	r0, [r7, #20]
 80151e8:	f7f7 fdf4 	bl	800cdd4 <pbuf_free>
 80151ec:	e001      	b.n	80151f2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80151ee:	23ff      	movs	r3, #255	; 0xff
 80151f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	799b      	ldrb	r3, [r3, #6]
 80151f6:	2bff      	cmp	r3, #255	; 0xff
 80151f8:	d005      	beq.n	8015206 <dhcp_rebind+0xde>
    dhcp->tries++;
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	799b      	ldrb	r3, [r3, #6]
 80151fe:	3301      	adds	r3, #1
 8015200:	b2da      	uxtb	r2, r3
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	799b      	ldrb	r3, [r3, #6]
 801520a:	2b09      	cmp	r3, #9
 801520c:	d80a      	bhi.n	8015224 <dhcp_rebind+0xfc>
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	799b      	ldrb	r3, [r3, #6]
 8015212:	b29b      	uxth	r3, r3
 8015214:	461a      	mov	r2, r3
 8015216:	0152      	lsls	r2, r2, #5
 8015218:	1ad2      	subs	r2, r2, r3
 801521a:	0092      	lsls	r2, r2, #2
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	b29b      	uxth	r3, r3
 8015222:	e001      	b.n	8015228 <dhcp_rebind+0x100>
 8015224:	f242 7310 	movw	r3, #10000	; 0x2710
 8015228:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801522a:	89fb      	ldrh	r3, [r7, #14]
 801522c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015230:	4a0a      	ldr	r2, [pc, #40]	; (801525c <dhcp_rebind+0x134>)
 8015232:	fb82 1203 	smull	r1, r2, r2, r3
 8015236:	1152      	asrs	r2, r2, #5
 8015238:	17db      	asrs	r3, r3, #31
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	b29a      	uxth	r2, r3
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015242:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015246:	4618      	mov	r0, r3
 8015248:	3720      	adds	r7, #32
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20000030 	.word	0x20000030
 8015254:	20011238 	.word	0x20011238
 8015258:	08027f30 	.word	0x08027f30
 801525c:	10624dd3 	.word	0x10624dd3

08015260 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015260:	b5b0      	push	{r4, r5, r7, lr}
 8015262:	b08a      	sub	sp, #40	; 0x28
 8015264:	af02      	add	r7, sp, #8
 8015266:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801526e:	2103      	movs	r1, #3
 8015270:	69b8      	ldr	r0, [r7, #24]
 8015272:	f000 f945 	bl	8015500 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015276:	f107 030c 	add.w	r3, r7, #12
 801527a:	2203      	movs	r2, #3
 801527c:	69b9      	ldr	r1, [r7, #24]
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f000 fdca 	bl	8015e18 <dhcp_create_msg>
 8015284:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d066      	beq.n	801535a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015292:	89b8      	ldrh	r0, [r7, #12]
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801529a:	2302      	movs	r3, #2
 801529c:	2239      	movs	r2, #57	; 0x39
 801529e:	f000 f949 	bl	8015534 <dhcp_option>
 80152a2:	4603      	mov	r3, r0
 80152a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80152a6:	89b8      	ldrh	r0, [r7, #12]
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	33f0      	adds	r3, #240	; 0xf0
 80152ac:	f44f 7210 	mov.w	r2, #576	; 0x240
 80152b0:	4619      	mov	r1, r3
 80152b2:	f000 f999 	bl	80155e8 <dhcp_option_short>
 80152b6:	4603      	mov	r3, r0
 80152b8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80152ba:	89b8      	ldrh	r0, [r7, #12]
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152c2:	2304      	movs	r3, #4
 80152c4:	2232      	movs	r2, #50	; 0x32
 80152c6:	f000 f935 	bl	8015534 <dhcp_option>
 80152ca:	4603      	mov	r3, r0
 80152cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80152ce:	89bc      	ldrh	r4, [r7, #12]
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80152d6:	69bb      	ldr	r3, [r7, #24]
 80152d8:	69db      	ldr	r3, [r3, #28]
 80152da:	4618      	mov	r0, r3
 80152dc:	f7f6 f95b 	bl	800b596 <lwip_htonl>
 80152e0:	4603      	mov	r3, r0
 80152e2:	461a      	mov	r2, r3
 80152e4:	4629      	mov	r1, r5
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 f9b0 	bl	801564c <dhcp_option_long>
 80152ec:	4603      	mov	r3, r0
 80152ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80152f0:	89b8      	ldrh	r0, [r7, #12]
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152f8:	2303      	movs	r3, #3
 80152fa:	2237      	movs	r2, #55	; 0x37
 80152fc:	f000 f91a 	bl	8015534 <dhcp_option>
 8015300:	4603      	mov	r3, r0
 8015302:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015304:	2300      	movs	r3, #0
 8015306:	77bb      	strb	r3, [r7, #30]
 8015308:	e00e      	b.n	8015328 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801530a:	89b8      	ldrh	r0, [r7, #12]
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015312:	7fbb      	ldrb	r3, [r7, #30]
 8015314:	4a29      	ldr	r2, [pc, #164]	; (80153bc <dhcp_reboot+0x15c>)
 8015316:	5cd3      	ldrb	r3, [r2, r3]
 8015318:	461a      	mov	r2, r3
 801531a:	f000 f93f 	bl	801559c <dhcp_option_byte>
 801531e:	4603      	mov	r3, r0
 8015320:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015322:	7fbb      	ldrb	r3, [r7, #30]
 8015324:	3301      	adds	r3, #1
 8015326:	77bb      	strb	r3, [r7, #30]
 8015328:	7fbb      	ldrb	r3, [r7, #30]
 801532a:	2b02      	cmp	r3, #2
 801532c:	d9ed      	bls.n	801530a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801532e:	89b8      	ldrh	r0, [r7, #12]
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	33f0      	adds	r3, #240	; 0xf0
 8015334:	697a      	ldr	r2, [r7, #20]
 8015336:	4619      	mov	r1, r3
 8015338:	f000 fe44 	bl	8015fc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801533c:	4b20      	ldr	r3, [pc, #128]	; (80153c0 <dhcp_reboot+0x160>)
 801533e:	6818      	ldr	r0, [r3, #0]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	2343      	movs	r3, #67	; 0x43
 8015346:	4a1f      	ldr	r2, [pc, #124]	; (80153c4 <dhcp_reboot+0x164>)
 8015348:	6979      	ldr	r1, [r7, #20]
 801534a:	f7fe fcf7 	bl	8013d3c <udp_sendto_if>
 801534e:	4603      	mov	r3, r0
 8015350:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015352:	6978      	ldr	r0, [r7, #20]
 8015354:	f7f7 fd3e 	bl	800cdd4 <pbuf_free>
 8015358:	e001      	b.n	801535e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801535a:	23ff      	movs	r3, #255	; 0xff
 801535c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	799b      	ldrb	r3, [r3, #6]
 8015362:	2bff      	cmp	r3, #255	; 0xff
 8015364:	d005      	beq.n	8015372 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	799b      	ldrb	r3, [r3, #6]
 801536a:	3301      	adds	r3, #1
 801536c:	b2da      	uxtb	r2, r3
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	799b      	ldrb	r3, [r3, #6]
 8015376:	2b09      	cmp	r3, #9
 8015378:	d80a      	bhi.n	8015390 <dhcp_reboot+0x130>
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	799b      	ldrb	r3, [r3, #6]
 801537e:	b29b      	uxth	r3, r3
 8015380:	461a      	mov	r2, r3
 8015382:	0152      	lsls	r2, r2, #5
 8015384:	1ad2      	subs	r2, r2, r3
 8015386:	0092      	lsls	r2, r2, #2
 8015388:	4413      	add	r3, r2
 801538a:	00db      	lsls	r3, r3, #3
 801538c:	b29b      	uxth	r3, r3
 801538e:	e001      	b.n	8015394 <dhcp_reboot+0x134>
 8015390:	f242 7310 	movw	r3, #10000	; 0x2710
 8015394:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015396:	89fb      	ldrh	r3, [r7, #14]
 8015398:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801539c:	4a0a      	ldr	r2, [pc, #40]	; (80153c8 <dhcp_reboot+0x168>)
 801539e:	fb82 1203 	smull	r1, r2, r2, r3
 80153a2:	1152      	asrs	r2, r2, #5
 80153a4:	17db      	asrs	r3, r3, #31
 80153a6:	1ad3      	subs	r3, r2, r3
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80153ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3720      	adds	r7, #32
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bdb0      	pop	{r4, r5, r7, pc}
 80153ba:	bf00      	nop
 80153bc:	20000030 	.word	0x20000030
 80153c0:	20011238 	.word	0x20011238
 80153c4:	08027f30 	.word	0x08027f30
 80153c8:	10624dd3 	.word	0x10624dd3

080153cc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80153cc:	b5b0      	push	{r4, r5, r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af02      	add	r7, sp, #8
 80153d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80153da:	69fb      	ldr	r3, [r7, #28]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f000 8084 	beq.w	80154ea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80153e2:	69fb      	ldr	r3, [r7, #28]
 80153e4:	795b      	ldrb	r3, [r3, #5]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f000 8081 	beq.w	80154ee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	699b      	ldr	r3, [r3, #24]
 80153f0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	2200      	movs	r2, #0
 80153f6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	2200      	movs	r2, #0
 80153fc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	2200      	movs	r2, #0
 8015402:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	2200      	movs	r2, #0
 8015408:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	2200      	movs	r2, #0
 801540e:	631a      	str	r2, [r3, #48]	; 0x30
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	62da      	str	r2, [r3, #44]	; 0x2c
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	2200      	movs	r2, #0
 8015424:	829a      	strh	r2, [r3, #20]
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	8a9a      	ldrh	r2, [r3, #20]
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	825a      	strh	r2, [r3, #18]
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	8a5a      	ldrh	r2, [r3, #18]
 8015432:	69fb      	ldr	r3, [r7, #28]
 8015434:	821a      	strh	r2, [r3, #16]
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	8a1a      	ldrh	r2, [r3, #16]
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 fdee 	bl	8016020 <dhcp_supplied_address>
 8015444:	4603      	mov	r3, r0
 8015446:	2b00      	cmp	r3, #0
 8015448:	d03b      	beq.n	80154c2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801544a:	f107 030e 	add.w	r3, r7, #14
 801544e:	2207      	movs	r2, #7
 8015450:	69f9      	ldr	r1, [r7, #28]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f000 fce0 	bl	8015e18 <dhcp_create_msg>
 8015458:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d030      	beq.n	80154c2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015466:	89f8      	ldrh	r0, [r7, #14]
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801546e:	2304      	movs	r3, #4
 8015470:	2236      	movs	r2, #54	; 0x36
 8015472:	f000 f85f 	bl	8015534 <dhcp_option>
 8015476:	4603      	mov	r3, r0
 8015478:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801547a:	89fc      	ldrh	r4, [r7, #14]
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	4618      	mov	r0, r3
 8015486:	f7f6 f886 	bl	800b596 <lwip_htonl>
 801548a:	4603      	mov	r3, r0
 801548c:	461a      	mov	r2, r3
 801548e:	4629      	mov	r1, r5
 8015490:	4620      	mov	r0, r4
 8015492:	f000 f8db 	bl	801564c <dhcp_option_long>
 8015496:	4603      	mov	r3, r0
 8015498:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801549a:	89f8      	ldrh	r0, [r7, #14]
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	33f0      	adds	r3, #240	; 0xf0
 80154a0:	69ba      	ldr	r2, [r7, #24]
 80154a2:	4619      	mov	r1, r3
 80154a4:	f000 fd8e 	bl	8015fc4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80154a8:	4b13      	ldr	r3, [pc, #76]	; (80154f8 <dhcp_release_and_stop+0x12c>)
 80154aa:	6818      	ldr	r0, [r3, #0]
 80154ac:	f107 0210 	add.w	r2, r7, #16
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	2343      	movs	r3, #67	; 0x43
 80154b6:	69b9      	ldr	r1, [r7, #24]
 80154b8:	f7fe fc40 	bl	8013d3c <udp_sendto_if>
      pbuf_free(p_out);
 80154bc:	69b8      	ldr	r0, [r7, #24]
 80154be:	f7f7 fc89 	bl	800cdd4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80154c2:	4b0e      	ldr	r3, [pc, #56]	; (80154fc <dhcp_release_and_stop+0x130>)
 80154c4:	4a0d      	ldr	r2, [pc, #52]	; (80154fc <dhcp_release_and_stop+0x130>)
 80154c6:	490d      	ldr	r1, [pc, #52]	; (80154fc <dhcp_release_and_stop+0x130>)
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f7f6 ff75 	bl	800c3b8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80154ce:	2100      	movs	r1, #0
 80154d0:	69f8      	ldr	r0, [r7, #28]
 80154d2:	f000 f815 	bl	8015500 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	791b      	ldrb	r3, [r3, #4]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d008      	beq.n	80154f0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80154de:	f7fe ff85 	bl	80143ec <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80154e2:	69fb      	ldr	r3, [r7, #28]
 80154e4:	2200      	movs	r2, #0
 80154e6:	711a      	strb	r2, [r3, #4]
 80154e8:	e002      	b.n	80154f0 <dhcp_release_and_stop+0x124>
    return;
 80154ea:	bf00      	nop
 80154ec:	e000      	b.n	80154f0 <dhcp_release_and_stop+0x124>
    return;
 80154ee:	bf00      	nop
  }
}
 80154f0:	3720      	adds	r7, #32
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bdb0      	pop	{r4, r5, r7, pc}
 80154f6:	bf00      	nop
 80154f8:	20011238 	.word	0x20011238
 80154fc:	08027f2c 	.word	0x08027f2c

08015500 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	460b      	mov	r3, r1
 801550a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	795b      	ldrb	r3, [r3, #5]
 8015510:	78fa      	ldrb	r2, [r7, #3]
 8015512:	429a      	cmp	r2, r3
 8015514:	d008      	beq.n	8015528 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	78fa      	ldrb	r2, [r7, #3]
 801551a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	811a      	strh	r2, [r3, #8]
  }
}
 8015528:	bf00      	nop
 801552a:	370c      	adds	r7, #12
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	6039      	str	r1, [r7, #0]
 801553c:	4611      	mov	r1, r2
 801553e:	461a      	mov	r2, r3
 8015540:	4603      	mov	r3, r0
 8015542:	80fb      	strh	r3, [r7, #6]
 8015544:	460b      	mov	r3, r1
 8015546:	717b      	strb	r3, [r7, #5]
 8015548:	4613      	mov	r3, r2
 801554a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801554c:	88fa      	ldrh	r2, [r7, #6]
 801554e:	793b      	ldrb	r3, [r7, #4]
 8015550:	4413      	add	r3, r2
 8015552:	3302      	adds	r3, #2
 8015554:	2b44      	cmp	r3, #68	; 0x44
 8015556:	d906      	bls.n	8015566 <dhcp_option+0x32>
 8015558:	4b0d      	ldr	r3, [pc, #52]	; (8015590 <dhcp_option+0x5c>)
 801555a:	f240 529a 	movw	r2, #1434	; 0x59a
 801555e:	490d      	ldr	r1, [pc, #52]	; (8015594 <dhcp_option+0x60>)
 8015560:	480d      	ldr	r0, [pc, #52]	; (8015598 <dhcp_option+0x64>)
 8015562:	f003 fb69 	bl	8018c38 <iprintf>
  options[options_out_len++] = option_type;
 8015566:	88fb      	ldrh	r3, [r7, #6]
 8015568:	1c5a      	adds	r2, r3, #1
 801556a:	80fa      	strh	r2, [r7, #6]
 801556c:	461a      	mov	r2, r3
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	4413      	add	r3, r2
 8015572:	797a      	ldrb	r2, [r7, #5]
 8015574:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015576:	88fb      	ldrh	r3, [r7, #6]
 8015578:	1c5a      	adds	r2, r3, #1
 801557a:	80fa      	strh	r2, [r7, #6]
 801557c:	461a      	mov	r2, r3
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	4413      	add	r3, r2
 8015582:	793a      	ldrb	r2, [r7, #4]
 8015584:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015586:	88fb      	ldrh	r3, [r7, #6]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0801d248 	.word	0x0801d248
 8015594:	0801d3dc 	.word	0x0801d3dc
 8015598:	0801d2a8 	.word	0x0801d2a8

0801559c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	6039      	str	r1, [r7, #0]
 80155a6:	80fb      	strh	r3, [r7, #6]
 80155a8:	4613      	mov	r3, r2
 80155aa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80155ac:	88fb      	ldrh	r3, [r7, #6]
 80155ae:	2b43      	cmp	r3, #67	; 0x43
 80155b0:	d906      	bls.n	80155c0 <dhcp_option_byte+0x24>
 80155b2:	4b0a      	ldr	r3, [pc, #40]	; (80155dc <dhcp_option_byte+0x40>)
 80155b4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80155b8:	4909      	ldr	r1, [pc, #36]	; (80155e0 <dhcp_option_byte+0x44>)
 80155ba:	480a      	ldr	r0, [pc, #40]	; (80155e4 <dhcp_option_byte+0x48>)
 80155bc:	f003 fb3c 	bl	8018c38 <iprintf>
  options[options_out_len++] = value;
 80155c0:	88fb      	ldrh	r3, [r7, #6]
 80155c2:	1c5a      	adds	r2, r3, #1
 80155c4:	80fa      	strh	r2, [r7, #6]
 80155c6:	461a      	mov	r2, r3
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	4413      	add	r3, r2
 80155cc:	797a      	ldrb	r2, [r7, #5]
 80155ce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80155d0:	88fb      	ldrh	r3, [r7, #6]
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	0801d248 	.word	0x0801d248
 80155e0:	0801d420 	.word	0x0801d420
 80155e4:	0801d2a8 	.word	0x0801d2a8

080155e8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	4603      	mov	r3, r0
 80155f0:	6039      	str	r1, [r7, #0]
 80155f2:	80fb      	strh	r3, [r7, #6]
 80155f4:	4613      	mov	r3, r2
 80155f6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80155f8:	88fb      	ldrh	r3, [r7, #6]
 80155fa:	3302      	adds	r3, #2
 80155fc:	2b44      	cmp	r3, #68	; 0x44
 80155fe:	d906      	bls.n	801560e <dhcp_option_short+0x26>
 8015600:	4b0f      	ldr	r3, [pc, #60]	; (8015640 <dhcp_option_short+0x58>)
 8015602:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015606:	490f      	ldr	r1, [pc, #60]	; (8015644 <dhcp_option_short+0x5c>)
 8015608:	480f      	ldr	r0, [pc, #60]	; (8015648 <dhcp_option_short+0x60>)
 801560a:	f003 fb15 	bl	8018c38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801560e:	88bb      	ldrh	r3, [r7, #4]
 8015610:	0a1b      	lsrs	r3, r3, #8
 8015612:	b29a      	uxth	r2, r3
 8015614:	88fb      	ldrh	r3, [r7, #6]
 8015616:	1c59      	adds	r1, r3, #1
 8015618:	80f9      	strh	r1, [r7, #6]
 801561a:	4619      	mov	r1, r3
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	440b      	add	r3, r1
 8015620:	b2d2      	uxtb	r2, r2
 8015622:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015624:	88fb      	ldrh	r3, [r7, #6]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	80fa      	strh	r2, [r7, #6]
 801562a:	461a      	mov	r2, r3
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	4413      	add	r3, r2
 8015630:	88ba      	ldrh	r2, [r7, #4]
 8015632:	b2d2      	uxtb	r2, r2
 8015634:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015636:	88fb      	ldrh	r3, [r7, #6]
}
 8015638:	4618      	mov	r0, r3
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	0801d248 	.word	0x0801d248
 8015644:	0801d458 	.word	0x0801d458
 8015648:	0801d2a8 	.word	0x0801d2a8

0801564c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b084      	sub	sp, #16
 8015650:	af00      	add	r7, sp, #0
 8015652:	4603      	mov	r3, r0
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801565a:	89fb      	ldrh	r3, [r7, #14]
 801565c:	3304      	adds	r3, #4
 801565e:	2b44      	cmp	r3, #68	; 0x44
 8015660:	d906      	bls.n	8015670 <dhcp_option_long+0x24>
 8015662:	4b19      	ldr	r3, [pc, #100]	; (80156c8 <dhcp_option_long+0x7c>)
 8015664:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015668:	4918      	ldr	r1, [pc, #96]	; (80156cc <dhcp_option_long+0x80>)
 801566a:	4819      	ldr	r0, [pc, #100]	; (80156d0 <dhcp_option_long+0x84>)
 801566c:	f003 fae4 	bl	8018c38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	0e1a      	lsrs	r2, r3, #24
 8015674:	89fb      	ldrh	r3, [r7, #14]
 8015676:	1c59      	adds	r1, r3, #1
 8015678:	81f9      	strh	r1, [r7, #14]
 801567a:	4619      	mov	r1, r3
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	440b      	add	r3, r1
 8015680:	b2d2      	uxtb	r2, r2
 8015682:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	0c1a      	lsrs	r2, r3, #16
 8015688:	89fb      	ldrh	r3, [r7, #14]
 801568a:	1c59      	adds	r1, r3, #1
 801568c:	81f9      	strh	r1, [r7, #14]
 801568e:	4619      	mov	r1, r3
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	440b      	add	r3, r1
 8015694:	b2d2      	uxtb	r2, r2
 8015696:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	0a1a      	lsrs	r2, r3, #8
 801569c:	89fb      	ldrh	r3, [r7, #14]
 801569e:	1c59      	adds	r1, r3, #1
 80156a0:	81f9      	strh	r1, [r7, #14]
 80156a2:	4619      	mov	r1, r3
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	440b      	add	r3, r1
 80156a8:	b2d2      	uxtb	r2, r2
 80156aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80156ac:	89fb      	ldrh	r3, [r7, #14]
 80156ae:	1c5a      	adds	r2, r3, #1
 80156b0:	81fa      	strh	r2, [r7, #14]
 80156b2:	461a      	mov	r2, r3
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	4413      	add	r3, r2
 80156b8:	687a      	ldr	r2, [r7, #4]
 80156ba:	b2d2      	uxtb	r2, r2
 80156bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80156be:	89fb      	ldrh	r3, [r7, #14]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3710      	adds	r7, #16
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	0801d248 	.word	0x0801d248
 80156cc:	0801d494 	.word	0x0801d494
 80156d0:	0801d2a8 	.word	0x0801d2a8

080156d4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b090      	sub	sp, #64	; 0x40
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80156de:	2300      	movs	r3, #0
 80156e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80156e2:	2300      	movs	r3, #0
 80156e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80156e6:	2208      	movs	r2, #8
 80156e8:	2100      	movs	r1, #0
 80156ea:	48b5      	ldr	r0, [pc, #724]	; (80159c0 <dhcp_parse_reply+0x2ec>)
 80156ec:	f003 fc34 	bl	8018f58 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	895b      	ldrh	r3, [r3, #10]
 80156f4:	2b2b      	cmp	r3, #43	; 0x2b
 80156f6:	d802      	bhi.n	80156fe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80156f8:	f06f 0301 	mvn.w	r3, #1
 80156fc:	e2a7      	b.n	8015c4e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015704:	23f0      	movs	r3, #240	; 0xf0
 8015706:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	891b      	ldrh	r3, [r3, #8]
 801570c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015712:	e00c      	b.n	801572e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015716:	895b      	ldrh	r3, [r3, #10]
 8015718:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015720:	895b      	ldrh	r3, [r3, #10]
 8015722:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015724:	1ad3      	subs	r3, r2, r3
 8015726:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015730:	2b00      	cmp	r3, #0
 8015732:	d004      	beq.n	801573e <dhcp_parse_reply+0x6a>
 8015734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015736:	895b      	ldrh	r3, [r3, #10]
 8015738:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801573a:	429a      	cmp	r2, r3
 801573c:	d2ea      	bcs.n	8015714 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015740:	2b00      	cmp	r3, #0
 8015742:	d102      	bne.n	801574a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015744:	f06f 0301 	mvn.w	r3, #1
 8015748:	e281      	b.n	8015c4e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801574a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801574c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801574e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015750:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015758:	e239      	b.n	8015bce <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801575a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801575c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801575e:	4413      	add	r3, r2
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015764:	2300      	movs	r3, #0
 8015766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801576a:	f04f 33ff 	mov.w	r3, #4294967295
 801576e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015770:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015772:	3302      	adds	r3, #2
 8015774:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015776:	8bfa      	ldrh	r2, [r7, #30]
 8015778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801577a:	429a      	cmp	r2, r3
 801577c:	d202      	bcs.n	8015784 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801577e:	f06f 0301 	mvn.w	r3, #1
 8015782:	e264      	b.n	8015c4e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015784:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015786:	3301      	adds	r3, #1
 8015788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801578a:	8952      	ldrh	r2, [r2, #10]
 801578c:	4293      	cmp	r3, r2
 801578e:	da07      	bge.n	80157a0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015792:	3301      	adds	r3, #1
 8015794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015796:	4413      	add	r3, r2
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801579e:	e00b      	b.n	80157b8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80157a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d004      	beq.n	80157b2 <dhcp_parse_reply+0xde>
 80157a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	e000      	b.n	80157b4 <dhcp_parse_reply+0xe0>
 80157b2:	2300      	movs	r3, #0
 80157b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80157b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80157c0:	7dfb      	ldrb	r3, [r7, #23]
 80157c2:	2b3b      	cmp	r3, #59	; 0x3b
 80157c4:	f200 812c 	bhi.w	8015a20 <dhcp_parse_reply+0x34c>
 80157c8:	a201      	add	r2, pc, #4	; (adr r2, 80157d0 <dhcp_parse_reply+0xfc>)
 80157ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ce:	bf00      	nop
 80157d0:	080158c1 	.word	0x080158c1
 80157d4:	080158d1 	.word	0x080158d1
 80157d8:	08015a21 	.word	0x08015a21
 80157dc:	080158f3 	.word	0x080158f3
 80157e0:	08015a21 	.word	0x08015a21
 80157e4:	08015a21 	.word	0x08015a21
 80157e8:	08015a21 	.word	0x08015a21
 80157ec:	08015a21 	.word	0x08015a21
 80157f0:	08015a21 	.word	0x08015a21
 80157f4:	08015a21 	.word	0x08015a21
 80157f8:	08015a21 	.word	0x08015a21
 80157fc:	08015a21 	.word	0x08015a21
 8015800:	08015a21 	.word	0x08015a21
 8015804:	08015a21 	.word	0x08015a21
 8015808:	08015a21 	.word	0x08015a21
 801580c:	08015a21 	.word	0x08015a21
 8015810:	08015a21 	.word	0x08015a21
 8015814:	08015a21 	.word	0x08015a21
 8015818:	08015a21 	.word	0x08015a21
 801581c:	08015a21 	.word	0x08015a21
 8015820:	08015a21 	.word	0x08015a21
 8015824:	08015a21 	.word	0x08015a21
 8015828:	08015a21 	.word	0x08015a21
 801582c:	08015a21 	.word	0x08015a21
 8015830:	08015a21 	.word	0x08015a21
 8015834:	08015a21 	.word	0x08015a21
 8015838:	08015a21 	.word	0x08015a21
 801583c:	08015a21 	.word	0x08015a21
 8015840:	08015a21 	.word	0x08015a21
 8015844:	08015a21 	.word	0x08015a21
 8015848:	08015a21 	.word	0x08015a21
 801584c:	08015a21 	.word	0x08015a21
 8015850:	08015a21 	.word	0x08015a21
 8015854:	08015a21 	.word	0x08015a21
 8015858:	08015a21 	.word	0x08015a21
 801585c:	08015a21 	.word	0x08015a21
 8015860:	08015a21 	.word	0x08015a21
 8015864:	08015a21 	.word	0x08015a21
 8015868:	08015a21 	.word	0x08015a21
 801586c:	08015a21 	.word	0x08015a21
 8015870:	08015a21 	.word	0x08015a21
 8015874:	08015a21 	.word	0x08015a21
 8015878:	08015a21 	.word	0x08015a21
 801587c:	08015a21 	.word	0x08015a21
 8015880:	08015a21 	.word	0x08015a21
 8015884:	08015a21 	.word	0x08015a21
 8015888:	08015a21 	.word	0x08015a21
 801588c:	08015a21 	.word	0x08015a21
 8015890:	08015a21 	.word	0x08015a21
 8015894:	08015a21 	.word	0x08015a21
 8015898:	08015a21 	.word	0x08015a21
 801589c:	0801591f 	.word	0x0801591f
 80158a0:	08015941 	.word	0x08015941
 80158a4:	0801597d 	.word	0x0801597d
 80158a8:	0801599f 	.word	0x0801599f
 80158ac:	08015a21 	.word	0x08015a21
 80158b0:	08015a21 	.word	0x08015a21
 80158b4:	08015a21 	.word	0x08015a21
 80158b8:	080159dd 	.word	0x080159dd
 80158bc:	080159ff 	.word	0x080159ff
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80158c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80158ce:	e0ab      	b.n	8015a28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80158d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158d4:	2b04      	cmp	r3, #4
 80158d6:	d009      	beq.n	80158ec <dhcp_parse_reply+0x218>
 80158d8:	4b3a      	ldr	r3, [pc, #232]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 80158da:	f240 622e 	movw	r2, #1582	; 0x62e
 80158de:	493a      	ldr	r1, [pc, #232]	; (80159c8 <dhcp_parse_reply+0x2f4>)
 80158e0:	483a      	ldr	r0, [pc, #232]	; (80159cc <dhcp_parse_reply+0x2f8>)
 80158e2:	f003 f9a9 	bl	8018c38 <iprintf>
 80158e6:	f06f 0305 	mvn.w	r3, #5
 80158ea:	e1b0      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80158ec:	2306      	movs	r3, #6
 80158ee:	623b      	str	r3, [r7, #32]
        break;
 80158f0:	e09a      	b.n	8015a28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80158f2:	2304      	movs	r3, #4
 80158f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80158f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80158fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015900:	429a      	cmp	r2, r3
 8015902:	d209      	bcs.n	8015918 <dhcp_parse_reply+0x244>
 8015904:	4b2f      	ldr	r3, [pc, #188]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 8015906:	f240 6233 	movw	r2, #1587	; 0x633
 801590a:	4931      	ldr	r1, [pc, #196]	; (80159d0 <dhcp_parse_reply+0x2fc>)
 801590c:	482f      	ldr	r0, [pc, #188]	; (80159cc <dhcp_parse_reply+0x2f8>)
 801590e:	f003 f993 	bl	8018c38 <iprintf>
 8015912:	f06f 0305 	mvn.w	r3, #5
 8015916:	e19a      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015918:	2307      	movs	r3, #7
 801591a:	623b      	str	r3, [r7, #32]
        break;
 801591c:	e084      	b.n	8015a28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801591e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015922:	2b04      	cmp	r3, #4
 8015924:	d009      	beq.n	801593a <dhcp_parse_reply+0x266>
 8015926:	4b27      	ldr	r3, [pc, #156]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 8015928:	f240 6241 	movw	r2, #1601	; 0x641
 801592c:	4926      	ldr	r1, [pc, #152]	; (80159c8 <dhcp_parse_reply+0x2f4>)
 801592e:	4827      	ldr	r0, [pc, #156]	; (80159cc <dhcp_parse_reply+0x2f8>)
 8015930:	f003 f982 	bl	8018c38 <iprintf>
 8015934:	f06f 0305 	mvn.w	r3, #5
 8015938:	e189      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801593a:	2303      	movs	r3, #3
 801593c:	623b      	str	r3, [r7, #32]
        break;
 801593e:	e073      	b.n	8015a28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015944:	2b01      	cmp	r3, #1
 8015946:	d009      	beq.n	801595c <dhcp_parse_reply+0x288>
 8015948:	4b1e      	ldr	r3, [pc, #120]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 801594a:	f240 624f 	movw	r2, #1615	; 0x64f
 801594e:	4921      	ldr	r1, [pc, #132]	; (80159d4 <dhcp_parse_reply+0x300>)
 8015950:	481e      	ldr	r0, [pc, #120]	; (80159cc <dhcp_parse_reply+0x2f8>)
 8015952:	f003 f971 	bl	8018c38 <iprintf>
 8015956:	f06f 0305 	mvn.w	r3, #5
 801595a:	e178      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801595c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801595e:	2bf0      	cmp	r3, #240	; 0xf0
 8015960:	d009      	beq.n	8015976 <dhcp_parse_reply+0x2a2>
 8015962:	4b18      	ldr	r3, [pc, #96]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 8015964:	f240 6251 	movw	r2, #1617	; 0x651
 8015968:	491b      	ldr	r1, [pc, #108]	; (80159d8 <dhcp_parse_reply+0x304>)
 801596a:	4818      	ldr	r0, [pc, #96]	; (80159cc <dhcp_parse_reply+0x2f8>)
 801596c:	f003 f964 	bl	8018c38 <iprintf>
 8015970:	f06f 0305 	mvn.w	r3, #5
 8015974:	e16b      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015976:	2300      	movs	r3, #0
 8015978:	623b      	str	r3, [r7, #32]
        break;
 801597a:	e055      	b.n	8015a28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801597c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015980:	2b01      	cmp	r3, #1
 8015982:	d009      	beq.n	8015998 <dhcp_parse_reply+0x2c4>
 8015984:	4b0f      	ldr	r3, [pc, #60]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 8015986:	f240 6255 	movw	r2, #1621	; 0x655
 801598a:	4912      	ldr	r1, [pc, #72]	; (80159d4 <dhcp_parse_reply+0x300>)
 801598c:	480f      	ldr	r0, [pc, #60]	; (80159cc <dhcp_parse_reply+0x2f8>)
 801598e:	f003 f953 	bl	8018c38 <iprintf>
 8015992:	f06f 0305 	mvn.w	r3, #5
 8015996:	e15a      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015998:	2301      	movs	r3, #1
 801599a:	623b      	str	r3, [r7, #32]
        break;
 801599c:	e044      	b.n	8015a28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801599e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159a2:	2b04      	cmp	r3, #4
 80159a4:	d009      	beq.n	80159ba <dhcp_parse_reply+0x2e6>
 80159a6:	4b07      	ldr	r3, [pc, #28]	; (80159c4 <dhcp_parse_reply+0x2f0>)
 80159a8:	f240 6259 	movw	r2, #1625	; 0x659
 80159ac:	4906      	ldr	r1, [pc, #24]	; (80159c8 <dhcp_parse_reply+0x2f4>)
 80159ae:	4807      	ldr	r0, [pc, #28]	; (80159cc <dhcp_parse_reply+0x2f8>)
 80159b0:	f003 f942 	bl	8018c38 <iprintf>
 80159b4:	f06f 0305 	mvn.w	r3, #5
 80159b8:	e149      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80159ba:	2302      	movs	r3, #2
 80159bc:	623b      	str	r3, [r7, #32]
        break;
 80159be:	e033      	b.n	8015a28 <dhcp_parse_reply+0x354>
 80159c0:	20011230 	.word	0x20011230
 80159c4:	0801d248 	.word	0x0801d248
 80159c8:	0801d4d0 	.word	0x0801d4d0
 80159cc:	0801d2a8 	.word	0x0801d2a8
 80159d0:	0801d4dc 	.word	0x0801d4dc
 80159d4:	0801d4f0 	.word	0x0801d4f0
 80159d8:	0801d4fc 	.word	0x0801d4fc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80159dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159e0:	2b04      	cmp	r3, #4
 80159e2:	d009      	beq.n	80159f8 <dhcp_parse_reply+0x324>
 80159e4:	4b9c      	ldr	r3, [pc, #624]	; (8015c58 <dhcp_parse_reply+0x584>)
 80159e6:	f240 625d 	movw	r2, #1629	; 0x65d
 80159ea:	499c      	ldr	r1, [pc, #624]	; (8015c5c <dhcp_parse_reply+0x588>)
 80159ec:	489c      	ldr	r0, [pc, #624]	; (8015c60 <dhcp_parse_reply+0x58c>)
 80159ee:	f003 f923 	bl	8018c38 <iprintf>
 80159f2:	f06f 0305 	mvn.w	r3, #5
 80159f6:	e12a      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80159f8:	2304      	movs	r3, #4
 80159fa:	623b      	str	r3, [r7, #32]
        break;
 80159fc:	e014      	b.n	8015a28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80159fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a02:	2b04      	cmp	r3, #4
 8015a04:	d009      	beq.n	8015a1a <dhcp_parse_reply+0x346>
 8015a06:	4b94      	ldr	r3, [pc, #592]	; (8015c58 <dhcp_parse_reply+0x584>)
 8015a08:	f240 6261 	movw	r2, #1633	; 0x661
 8015a0c:	4993      	ldr	r1, [pc, #588]	; (8015c5c <dhcp_parse_reply+0x588>)
 8015a0e:	4894      	ldr	r0, [pc, #592]	; (8015c60 <dhcp_parse_reply+0x58c>)
 8015a10:	f003 f912 	bl	8018c38 <iprintf>
 8015a14:	f06f 0305 	mvn.w	r3, #5
 8015a18:	e119      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015a1a:	2305      	movs	r3, #5
 8015a1c:	623b      	str	r3, [r7, #32]
        break;
 8015a1e:	e003      	b.n	8015a28 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015a20:	2300      	movs	r3, #0
 8015a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015a26:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015a28:	7dfb      	ldrb	r3, [r7, #23]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d103      	bne.n	8015a36 <dhcp_parse_reply+0x362>
      offset++;
 8015a2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a30:	3301      	adds	r3, #1
 8015a32:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015a34:	e0a1      	b.n	8015b7a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015a36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a3c:	4413      	add	r3, r2
 8015a3e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015a42:	4293      	cmp	r3, r2
 8015a44:	dd02      	ble.n	8015a4c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015a46:	f06f 0301 	mvn.w	r3, #1
 8015a4a:	e100      	b.n	8015c4e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a50:	b29a      	uxth	r2, r3
 8015a52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a54:	4413      	add	r3, r2
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	3302      	adds	r3, #2
 8015a5a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	f000 808a 	beq.w	8015b7a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015a6a:	6a3b      	ldr	r3, [r7, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	db02      	blt.n	8015a76 <dhcp_parse_reply+0x3a2>
 8015a70:	6a3b      	ldr	r3, [r7, #32]
 8015a72:	2b07      	cmp	r3, #7
 8015a74:	dd06      	ble.n	8015a84 <dhcp_parse_reply+0x3b0>
 8015a76:	4b78      	ldr	r3, [pc, #480]	; (8015c58 <dhcp_parse_reply+0x584>)
 8015a78:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015a7c:	4979      	ldr	r1, [pc, #484]	; (8015c64 <dhcp_parse_reply+0x590>)
 8015a7e:	4878      	ldr	r0, [pc, #480]	; (8015c60 <dhcp_parse_reply+0x58c>)
 8015a80:	f003 f8da 	bl	8018c38 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015a84:	4a78      	ldr	r2, [pc, #480]	; (8015c68 <dhcp_parse_reply+0x594>)
 8015a86:	6a3b      	ldr	r3, [r7, #32]
 8015a88:	4413      	add	r3, r2
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d174      	bne.n	8015b7a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a94:	2b04      	cmp	r3, #4
 8015a96:	bf28      	it	cs
 8015a98:	2304      	movcs	r3, #4
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015a9e:	8bfb      	ldrh	r3, [r7, #30]
 8015aa0:	8aba      	ldrh	r2, [r7, #20]
 8015aa2:	f107 0108 	add.w	r1, r7, #8
 8015aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015aa8:	f7f7 fb9a 	bl	800d1e0 <pbuf_copy_partial>
 8015aac:	4603      	mov	r3, r0
 8015aae:	461a      	mov	r2, r3
 8015ab0:	8abb      	ldrh	r3, [r7, #20]
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d002      	beq.n	8015abc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015ab6:	f06f 0301 	mvn.w	r3, #1
 8015aba:	e0c8      	b.n	8015c4e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ac0:	2b04      	cmp	r3, #4
 8015ac2:	d933      	bls.n	8015b2c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ac8:	f003 0303 	and.w	r3, r3, #3
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d009      	beq.n	8015ae6 <dhcp_parse_reply+0x412>
 8015ad2:	4b61      	ldr	r3, [pc, #388]	; (8015c58 <dhcp_parse_reply+0x584>)
 8015ad4:	f240 6281 	movw	r2, #1665	; 0x681
 8015ad8:	4964      	ldr	r1, [pc, #400]	; (8015c6c <dhcp_parse_reply+0x598>)
 8015ada:	4861      	ldr	r0, [pc, #388]	; (8015c60 <dhcp_parse_reply+0x58c>)
 8015adc:	f003 f8ac 	bl	8018c38 <iprintf>
 8015ae0:	f06f 0305 	mvn.w	r3, #5
 8015ae4:	e0b3      	b.n	8015c4e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015ae6:	4a60      	ldr	r2, [pc, #384]	; (8015c68 <dhcp_parse_reply+0x594>)
 8015ae8:	6a3b      	ldr	r3, [r7, #32]
 8015aea:	4413      	add	r3, r2
 8015aec:	2201      	movs	r2, #1
 8015aee:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f5 fd4f 	bl	800b596 <lwip_htonl>
 8015af8:	4602      	mov	r2, r0
 8015afa:	495d      	ldr	r1, [pc, #372]	; (8015c70 <dhcp_parse_reply+0x59c>)
 8015afc:	6a3b      	ldr	r3, [r7, #32]
 8015afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b06:	3b04      	subs	r3, #4
 8015b08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015b0c:	8bfb      	ldrh	r3, [r7, #30]
 8015b0e:	3304      	adds	r3, #4
 8015b10:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015b12:	8a7a      	ldrh	r2, [r7, #18]
 8015b14:	8bfb      	ldrh	r3, [r7, #30]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d202      	bcs.n	8015b20 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015b1a:	f06f 0301 	mvn.w	r3, #1
 8015b1e:	e096      	b.n	8015c4e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015b20:	8a7b      	ldrh	r3, [r7, #18]
 8015b22:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015b24:	6a3b      	ldr	r3, [r7, #32]
 8015b26:	3301      	adds	r3, #1
 8015b28:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015b2a:	e79e      	b.n	8015a6a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b30:	2b04      	cmp	r3, #4
 8015b32:	d106      	bne.n	8015b42 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7f5 fd2d 	bl	800b596 <lwip_htonl>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	60bb      	str	r3, [r7, #8]
 8015b40:	e011      	b.n	8015b66 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b46:	2b01      	cmp	r3, #1
 8015b48:	d009      	beq.n	8015b5e <dhcp_parse_reply+0x48a>
 8015b4a:	4b43      	ldr	r3, [pc, #268]	; (8015c58 <dhcp_parse_reply+0x584>)
 8015b4c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015b50:	4948      	ldr	r1, [pc, #288]	; (8015c74 <dhcp_parse_reply+0x5a0>)
 8015b52:	4843      	ldr	r0, [pc, #268]	; (8015c60 <dhcp_parse_reply+0x58c>)
 8015b54:	f003 f870 	bl	8018c38 <iprintf>
 8015b58:	f06f 0305 	mvn.w	r3, #5
 8015b5c:	e077      	b.n	8015c4e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015b5e:	f107 0308 	add.w	r3, r7, #8
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015b66:	4a40      	ldr	r2, [pc, #256]	; (8015c68 <dhcp_parse_reply+0x594>)
 8015b68:	6a3b      	ldr	r3, [r7, #32]
 8015b6a:	4413      	add	r3, r2
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015b70:	68ba      	ldr	r2, [r7, #8]
 8015b72:	493f      	ldr	r1, [pc, #252]	; (8015c70 <dhcp_parse_reply+0x59c>)
 8015b74:	6a3b      	ldr	r3, [r7, #32]
 8015b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7c:	895b      	ldrh	r3, [r3, #10]
 8015b7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d324      	bcc.n	8015bce <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b86:	895b      	ldrh	r3, [r3, #10]
 8015b88:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b8a:	1ad3      	subs	r3, r2, r3
 8015b8c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	895b      	ldrh	r3, [r3, #10]
 8015b92:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015b98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d213      	bcs.n	8015bc8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d109      	bne.n	8015bc0 <dhcp_parse_reply+0x4ec>
 8015bac:	4b2a      	ldr	r3, [pc, #168]	; (8015c58 <dhcp_parse_reply+0x584>)
 8015bae:	f240 629d 	movw	r2, #1693	; 0x69d
 8015bb2:	4931      	ldr	r1, [pc, #196]	; (8015c78 <dhcp_parse_reply+0x5a4>)
 8015bb4:	482a      	ldr	r0, [pc, #168]	; (8015c60 <dhcp_parse_reply+0x58c>)
 8015bb6:	f003 f83f 	bl	8018c38 <iprintf>
 8015bba:	f06f 0305 	mvn.w	r3, #5
 8015bbe:	e046      	b.n	8015c4e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015bc6:	e002      	b.n	8015bce <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015bc8:	f06f 0301 	mvn.w	r3, #1
 8015bcc:	e03f      	b.n	8015c4e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d00a      	beq.n	8015bea <dhcp_parse_reply+0x516>
 8015bd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015bd6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d206      	bcs.n	8015bea <dhcp_parse_reply+0x516>
 8015bdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015be0:	4413      	add	r3, r2
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	2bff      	cmp	r3, #255	; 0xff
 8015be6:	f47f adb8 	bne.w	801575a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015bea:	4b1f      	ldr	r3, [pc, #124]	; (8015c68 <dhcp_parse_reply+0x594>)
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d018      	beq.n	8015c24 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015bf2:	4b1f      	ldr	r3, [pc, #124]	; (8015c70 <dhcp_parse_reply+0x59c>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015bf8:	4b1b      	ldr	r3, [pc, #108]	; (8015c68 <dhcp_parse_reply+0x594>)
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2b01      	cmp	r3, #1
 8015c02:	d102      	bne.n	8015c0a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015c04:	2301      	movs	r3, #1
 8015c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c08:	e00c      	b.n	8015c24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	2b02      	cmp	r3, #2
 8015c0e:	d102      	bne.n	8015c16 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015c10:	2301      	movs	r3, #1
 8015c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c14:	e006      	b.n	8015c24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2b03      	cmp	r3, #3
 8015c1a:	d103      	bne.n	8015c24 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015c20:	2301      	movs	r3, #1
 8015c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d006      	beq.n	8015c38 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015c2e:	236c      	movs	r3, #108	; 0x6c
 8015c30:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015c32:	23ec      	movs	r3, #236	; 0xec
 8015c34:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015c36:	e56a      	b.n	801570e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d006      	beq.n	8015c4c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015c42:	232c      	movs	r3, #44	; 0x2c
 8015c44:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015c46:	236c      	movs	r3, #108	; 0x6c
 8015c48:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015c4a:	e560      	b.n	801570e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015c4c:	2300      	movs	r3, #0
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3740      	adds	r7, #64	; 0x40
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bd80      	pop	{r7, pc}
 8015c56:	bf00      	nop
 8015c58:	0801d248 	.word	0x0801d248
 8015c5c:	0801d4d0 	.word	0x0801d4d0
 8015c60:	0801d2a8 	.word	0x0801d2a8
 8015c64:	0801d514 	.word	0x0801d514
 8015c68:	20011230 	.word	0x20011230
 8015c6c:	0801d528 	.word	0x0801d528
 8015c70:	20011210 	.word	0x20011210
 8015c74:	0801d540 	.word	0x0801d540
 8015c78:	0801d554 	.word	0x0801d554

08015c7c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08a      	sub	sp, #40	; 0x28
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
 8015c88:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015c8a:	4b60      	ldr	r3, [pc, #384]	; (8015e0c <dhcp_recv+0x190>)
 8015c8c:	685b      	ldr	r3, [r3, #4]
 8015c8e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c90:	6a3b      	ldr	r3, [r7, #32]
 8015c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c94:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	f000 809d 	beq.w	8015dde <dhcp_recv+0x162>
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	791b      	ldrb	r3, [r3, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	f000 8098 	beq.w	8015dde <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	895b      	ldrh	r3, [r3, #10]
 8015cb2:	2b2b      	cmp	r3, #43	; 0x2b
 8015cb4:	f240 8095 	bls.w	8015de2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015cb8:	69bb      	ldr	r3, [r7, #24]
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	f040 8092 	bne.w	8015de6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cc8:	e012      	b.n	8015cf0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cce:	6a3a      	ldr	r2, [r7, #32]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cda:	69b9      	ldr	r1, [r7, #24]
 8015cdc:	440b      	add	r3, r1
 8015cde:	7f1b      	ldrb	r3, [r3, #28]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	f040 8082 	bne.w	8015dea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cea:	3301      	adds	r3, #1
 8015cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015cf0:	6a3b      	ldr	r3, [r7, #32]
 8015cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015cf6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d203      	bcs.n	8015d06 <dhcp_recv+0x8a>
 8015cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d02:	2b05      	cmp	r3, #5
 8015d04:	d9e1      	bls.n	8015cca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	685b      	ldr	r3, [r3, #4]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7f5 fc43 	bl	800b596 <lwip_htonl>
 8015d10:	4602      	mov	r2, r0
 8015d12:	69fb      	ldr	r3, [r7, #28]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d169      	bne.n	8015dee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015d1a:	69f9      	ldr	r1, [r7, #28]
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f7ff fcd9 	bl	80156d4 <dhcp_parse_reply>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d164      	bne.n	8015df2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015d28:	4b39      	ldr	r3, [pc, #228]	; (8015e10 <dhcp_recv+0x194>)
 8015d2a:	785b      	ldrb	r3, [r3, #1]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d062      	beq.n	8015df6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015d36:	4b37      	ldr	r3, [pc, #220]	; (8015e14 <dhcp_recv+0x198>)
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015d3c:	7cfb      	ldrb	r3, [r7, #19]
 8015d3e:	2b05      	cmp	r3, #5
 8015d40:	d12a      	bne.n	8015d98 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015d42:	69fb      	ldr	r3, [r7, #28]
 8015d44:	795b      	ldrb	r3, [r3, #5]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d112      	bne.n	8015d70 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015d4a:	6979      	ldr	r1, [r7, #20]
 8015d4c:	6a38      	ldr	r0, [r7, #32]
 8015d4e:	f7fe fe17 	bl	8014980 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015d52:	6a3b      	ldr	r3, [r7, #32]
 8015d54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d58:	f003 0308 	and.w	r3, r3, #8
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d003      	beq.n	8015d68 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015d60:	6a38      	ldr	r0, [r7, #32]
 8015d62:	f7fe fb87 	bl	8014474 <dhcp_check>
 8015d66:	e049      	b.n	8015dfc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015d68:	6a38      	ldr	r0, [r7, #32]
 8015d6a:	f7ff f867 	bl	8014e3c <dhcp_bind>
 8015d6e:	e045      	b.n	8015dfc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	795b      	ldrb	r3, [r3, #5]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d007      	beq.n	8015d88 <dhcp_recv+0x10c>
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	795b      	ldrb	r3, [r3, #5]
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	d003      	beq.n	8015d88 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015d84:	2b05      	cmp	r3, #5
 8015d86:	d139      	bne.n	8015dfc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015d88:	6979      	ldr	r1, [r7, #20]
 8015d8a:	6a38      	ldr	r0, [r7, #32]
 8015d8c:	f7fe fdf8 	bl	8014980 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015d90:	6a38      	ldr	r0, [r7, #32]
 8015d92:	f7ff f853 	bl	8014e3c <dhcp_bind>
 8015d96:	e031      	b.n	8015dfc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015d98:	7cfb      	ldrb	r3, [r7, #19]
 8015d9a:	2b06      	cmp	r3, #6
 8015d9c:	d113      	bne.n	8015dc6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015da2:	2b03      	cmp	r3, #3
 8015da4:	d00b      	beq.n	8015dbe <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	795b      	ldrb	r3, [r3, #5]
 8015daa:	2b01      	cmp	r3, #1
 8015dac:	d007      	beq.n	8015dbe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015dae:	69fb      	ldr	r3, [r7, #28]
 8015db0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015db2:	2b04      	cmp	r3, #4
 8015db4:	d003      	beq.n	8015dbe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015db6:	69fb      	ldr	r3, [r7, #28]
 8015db8:	795b      	ldrb	r3, [r3, #5]
 8015dba:	2b05      	cmp	r3, #5
 8015dbc:	d103      	bne.n	8015dc6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015dbe:	6a38      	ldr	r0, [r7, #32]
 8015dc0:	f7fe fb3e 	bl	8014440 <dhcp_handle_nak>
 8015dc4:	e01a      	b.n	8015dfc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015dc6:	7cfb      	ldrb	r3, [r7, #19]
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	d116      	bne.n	8015dfa <dhcp_recv+0x17e>
 8015dcc:	69fb      	ldr	r3, [r7, #28]
 8015dce:	795b      	ldrb	r3, [r3, #5]
 8015dd0:	2b06      	cmp	r3, #6
 8015dd2:	d112      	bne.n	8015dfa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015dd4:	6979      	ldr	r1, [r7, #20]
 8015dd6:	6a38      	ldr	r0, [r7, #32]
 8015dd8:	f7fe fb80 	bl	80144dc <dhcp_handle_offer>
 8015ddc:	e00e      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015dde:	bf00      	nop
 8015de0:	e00c      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015de2:	bf00      	nop
 8015de4:	e00a      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015de6:	bf00      	nop
 8015de8:	e008      	b.n	8015dfc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015dea:	bf00      	nop
 8015dec:	e006      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015dee:	bf00      	nop
 8015df0:	e004      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015df2:	bf00      	nop
 8015df4:	e002      	b.n	8015dfc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015df6:	bf00      	nop
 8015df8:	e000      	b.n	8015dfc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015dfa:	bf00      	nop
  pbuf_free(p);
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f7f6 ffe9 	bl	800cdd4 <pbuf_free>
}
 8015e02:	bf00      	nop
 8015e04:	3728      	adds	r7, #40	; 0x28
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	2000da3c 	.word	0x2000da3c
 8015e10:	20011230 	.word	0x20011230
 8015e14:	20011210 	.word	0x20011210

08015e18 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b088      	sub	sp, #32
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	603b      	str	r3, [r7, #0]
 8015e24:	4613      	mov	r3, r2
 8015e26:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d108      	bne.n	8015e40 <dhcp_create_msg+0x28>
 8015e2e:	4b5f      	ldr	r3, [pc, #380]	; (8015fac <dhcp_create_msg+0x194>)
 8015e30:	f240 7269 	movw	r2, #1897	; 0x769
 8015e34:	495e      	ldr	r1, [pc, #376]	; (8015fb0 <dhcp_create_msg+0x198>)
 8015e36:	485f      	ldr	r0, [pc, #380]	; (8015fb4 <dhcp_create_msg+0x19c>)
 8015e38:	f002 fefe 	bl	8018c38 <iprintf>
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	e0b1      	b.n	8015fa4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d108      	bne.n	8015e58 <dhcp_create_msg+0x40>
 8015e46:	4b59      	ldr	r3, [pc, #356]	; (8015fac <dhcp_create_msg+0x194>)
 8015e48:	f240 726a 	movw	r2, #1898	; 0x76a
 8015e4c:	495a      	ldr	r1, [pc, #360]	; (8015fb8 <dhcp_create_msg+0x1a0>)
 8015e4e:	4859      	ldr	r0, [pc, #356]	; (8015fb4 <dhcp_create_msg+0x19c>)
 8015e50:	f002 fef2 	bl	8018c38 <iprintf>
 8015e54:	2300      	movs	r3, #0
 8015e56:	e0a5      	b.n	8015fa4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e5c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015e60:	2036      	movs	r0, #54	; 0x36
 8015e62:	f7f6 fcd3 	bl	800c80c <pbuf_alloc>
 8015e66:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e098      	b.n	8015fa4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015e72:	69bb      	ldr	r3, [r7, #24]
 8015e74:	895b      	ldrh	r3, [r3, #10]
 8015e76:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015e7a:	d206      	bcs.n	8015e8a <dhcp_create_msg+0x72>
 8015e7c:	4b4b      	ldr	r3, [pc, #300]	; (8015fac <dhcp_create_msg+0x194>)
 8015e7e:	f240 7271 	movw	r2, #1905	; 0x771
 8015e82:	494e      	ldr	r1, [pc, #312]	; (8015fbc <dhcp_create_msg+0x1a4>)
 8015e84:	484b      	ldr	r0, [pc, #300]	; (8015fb4 <dhcp_create_msg+0x19c>)
 8015e86:	f002 fed7 	bl	8018c38 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015e8a:	79fb      	ldrb	r3, [r7, #7]
 8015e8c:	2b03      	cmp	r3, #3
 8015e8e:	d103      	bne.n	8015e98 <dhcp_create_msg+0x80>
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	795b      	ldrb	r3, [r3, #5]
 8015e94:	2b03      	cmp	r3, #3
 8015e96:	d10d      	bne.n	8015eb4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	799b      	ldrb	r3, [r3, #6]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d105      	bne.n	8015eac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015ea0:	f002 fddc 	bl	8018a5c <rand>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	4b45      	ldr	r3, [pc, #276]	; (8015fc0 <dhcp_create_msg+0x1a8>)
 8015eaa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015eac:	4b44      	ldr	r3, [pc, #272]	; (8015fc0 <dhcp_create_msg+0x1a8>)
 8015eae:	681a      	ldr	r2, [r3, #0]
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015eba:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015ebe:	2100      	movs	r1, #0
 8015ec0:	6978      	ldr	r0, [r7, #20]
 8015ec2:	f003 f849 	bl	8018f58 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2201      	movs	r2, #1
 8015eca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015ecc:	697b      	ldr	r3, [r7, #20]
 8015ece:	2201      	movs	r2, #1
 8015ed0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7f5 fb58 	bl	800b596 <lwip_htonl>
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015eec:	79fb      	ldrb	r3, [r7, #7]
 8015eee:	2b08      	cmp	r3, #8
 8015ef0:	d010      	beq.n	8015f14 <dhcp_create_msg+0xfc>
 8015ef2:	79fb      	ldrb	r3, [r7, #7]
 8015ef4:	2b04      	cmp	r3, #4
 8015ef6:	d00d      	beq.n	8015f14 <dhcp_create_msg+0xfc>
 8015ef8:	79fb      	ldrb	r3, [r7, #7]
 8015efa:	2b07      	cmp	r3, #7
 8015efc:	d00a      	beq.n	8015f14 <dhcp_create_msg+0xfc>
 8015efe:	79fb      	ldrb	r3, [r7, #7]
 8015f00:	2b03      	cmp	r3, #3
 8015f02:	d10c      	bne.n	8015f1e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015f08:	2b05      	cmp	r3, #5
 8015f0a:	d003      	beq.n	8015f14 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	795b      	ldrb	r3, [r3, #5]
 8015f10:	2b04      	cmp	r3, #4
 8015f12:	d104      	bne.n	8015f1e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	3304      	adds	r3, #4
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f1e:	2300      	movs	r3, #0
 8015f20:	83fb      	strh	r3, [r7, #30]
 8015f22:	e00c      	b.n	8015f3e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015f24:	8bfa      	ldrh	r2, [r7, #30]
 8015f26:	8bfb      	ldrh	r3, [r7, #30]
 8015f28:	68f9      	ldr	r1, [r7, #12]
 8015f2a:	440a      	add	r2, r1
 8015f2c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015f30:	697a      	ldr	r2, [r7, #20]
 8015f32:	4413      	add	r3, r2
 8015f34:	460a      	mov	r2, r1
 8015f36:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f38:	8bfb      	ldrh	r3, [r7, #30]
 8015f3a:	3301      	adds	r3, #1
 8015f3c:	83fb      	strh	r3, [r7, #30]
 8015f3e:	8bfb      	ldrh	r3, [r7, #30]
 8015f40:	2b05      	cmp	r3, #5
 8015f42:	d9ef      	bls.n	8015f24 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	2200      	movs	r2, #0
 8015f48:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015f4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015f50:	2200      	movs	r2, #0
 8015f52:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015f56:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015f60:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015f64:	2200      	movs	r2, #0
 8015f66:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015f6a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f74:	2301      	movs	r3, #1
 8015f76:	2235      	movs	r2, #53	; 0x35
 8015f78:	2000      	movs	r0, #0
 8015f7a:	f7ff fadb 	bl	8015534 <dhcp_option>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f88:	79fa      	ldrb	r2, [r7, #7]
 8015f8a:	8a7b      	ldrh	r3, [r7, #18]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7ff fb05 	bl	801559c <dhcp_option_byte>
 8015f92:	4603      	mov	r3, r0
 8015f94:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d002      	beq.n	8015fa2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	8a7a      	ldrh	r2, [r7, #18]
 8015fa0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015fa2:	69bb      	ldr	r3, [r7, #24]
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3720      	adds	r7, #32
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	0801d248 	.word	0x0801d248
 8015fb0:	0801d568 	.word	0x0801d568
 8015fb4:	0801d2a8 	.word	0x0801d2a8
 8015fb8:	0801d588 	.word	0x0801d588
 8015fbc:	0801d5a8 	.word	0x0801d5a8
 8015fc0:	20011240 	.word	0x20011240

08015fc4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	4603      	mov	r3, r0
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	607a      	str	r2, [r7, #4]
 8015fd0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015fd2:	89fb      	ldrh	r3, [r7, #14]
 8015fd4:	1c5a      	adds	r2, r3, #1
 8015fd6:	81fa      	strh	r2, [r7, #14]
 8015fd8:	461a      	mov	r2, r3
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	4413      	add	r3, r2
 8015fde:	22ff      	movs	r2, #255	; 0xff
 8015fe0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015fe2:	e007      	b.n	8015ff4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015fe4:	89fb      	ldrh	r3, [r7, #14]
 8015fe6:	1c5a      	adds	r2, r3, #1
 8015fe8:	81fa      	strh	r2, [r7, #14]
 8015fea:	461a      	mov	r2, r3
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	4413      	add	r3, r2
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015ff4:	89fb      	ldrh	r3, [r7, #14]
 8015ff6:	2b43      	cmp	r3, #67	; 0x43
 8015ff8:	d904      	bls.n	8016004 <dhcp_option_trailer+0x40>
 8015ffa:	89fb      	ldrh	r3, [r7, #14]
 8015ffc:	f003 0303 	and.w	r3, r3, #3
 8016000:	2b00      	cmp	r3, #0
 8016002:	d002      	beq.n	801600a <dhcp_option_trailer+0x46>
 8016004:	89fb      	ldrh	r3, [r7, #14]
 8016006:	2b43      	cmp	r3, #67	; 0x43
 8016008:	d9ec      	bls.n	8015fe4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801600a:	89fb      	ldrh	r3, [r7, #14]
 801600c:	33f0      	adds	r3, #240	; 0xf0
 801600e:	b29b      	uxth	r3, r3
 8016010:	4619      	mov	r1, r3
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f7f6 fd58 	bl	800cac8 <pbuf_realloc>
}
 8016018:	bf00      	nop
 801601a:	3710      	adds	r7, #16
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016020:	b480      	push	{r7}
 8016022:	b085      	sub	sp, #20
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d017      	beq.n	801605e <dhcp_supplied_address+0x3e>
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016032:	2b00      	cmp	r3, #0
 8016034:	d013      	beq.n	801605e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801603a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	795b      	ldrb	r3, [r3, #5]
 8016040:	2b0a      	cmp	r3, #10
 8016042:	d007      	beq.n	8016054 <dhcp_supplied_address+0x34>
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	795b      	ldrb	r3, [r3, #5]
 8016048:	2b05      	cmp	r3, #5
 801604a:	d003      	beq.n	8016054 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016050:	2b04      	cmp	r3, #4
 8016052:	d101      	bne.n	8016058 <dhcp_supplied_address+0x38>
 8016054:	2301      	movs	r3, #1
 8016056:	e000      	b.n	801605a <dhcp_supplied_address+0x3a>
 8016058:	2300      	movs	r3, #0
 801605a:	b2db      	uxtb	r3, r3
 801605c:	e000      	b.n	8016060 <dhcp_supplied_address+0x40>
  }
  return 0;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3714      	adds	r7, #20
 8016064:	46bd      	mov	sp, r7
 8016066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606a:	4770      	bx	lr

0801606c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016074:	4915      	ldr	r1, [pc, #84]	; (80160cc <etharp_free_entry+0x60>)
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	4613      	mov	r3, r2
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	4413      	add	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	440b      	add	r3, r1
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d013      	beq.n	80160b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016088:	4910      	ldr	r1, [pc, #64]	; (80160cc <etharp_free_entry+0x60>)
 801608a:	687a      	ldr	r2, [r7, #4]
 801608c:	4613      	mov	r3, r2
 801608e:	005b      	lsls	r3, r3, #1
 8016090:	4413      	add	r3, r2
 8016092:	00db      	lsls	r3, r3, #3
 8016094:	440b      	add	r3, r1
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4618      	mov	r0, r3
 801609a:	f7f6 fe9b 	bl	800cdd4 <pbuf_free>
    arp_table[i].q = NULL;
 801609e:	490b      	ldr	r1, [pc, #44]	; (80160cc <etharp_free_entry+0x60>)
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	4613      	mov	r3, r2
 80160a4:	005b      	lsls	r3, r3, #1
 80160a6:	4413      	add	r3, r2
 80160a8:	00db      	lsls	r3, r3, #3
 80160aa:	440b      	add	r3, r1
 80160ac:	2200      	movs	r2, #0
 80160ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80160b0:	4906      	ldr	r1, [pc, #24]	; (80160cc <etharp_free_entry+0x60>)
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	4613      	mov	r3, r2
 80160b6:	005b      	lsls	r3, r3, #1
 80160b8:	4413      	add	r3, r2
 80160ba:	00db      	lsls	r3, r3, #3
 80160bc:	440b      	add	r3, r1
 80160be:	3314      	adds	r3, #20
 80160c0:	2200      	movs	r2, #0
 80160c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80160c4:	bf00      	nop
 80160c6:	3708      	adds	r7, #8
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	20011244 	.word	0x20011244

080160d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80160d6:	2300      	movs	r3, #0
 80160d8:	607b      	str	r3, [r7, #4]
 80160da:	e096      	b.n	801620a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80160dc:	494f      	ldr	r1, [pc, #316]	; (801621c <etharp_tmr+0x14c>)
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	4613      	mov	r3, r2
 80160e2:	005b      	lsls	r3, r3, #1
 80160e4:	4413      	add	r3, r2
 80160e6:	00db      	lsls	r3, r3, #3
 80160e8:	440b      	add	r3, r1
 80160ea:	3314      	adds	r3, #20
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80160f0:	78fb      	ldrb	r3, [r7, #3]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	f000 8086 	beq.w	8016204 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80160f8:	4948      	ldr	r1, [pc, #288]	; (801621c <etharp_tmr+0x14c>)
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	4613      	mov	r3, r2
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	4413      	add	r3, r2
 8016102:	00db      	lsls	r3, r3, #3
 8016104:	440b      	add	r3, r1
 8016106:	3312      	adds	r3, #18
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	3301      	adds	r3, #1
 801610c:	b298      	uxth	r0, r3
 801610e:	4943      	ldr	r1, [pc, #268]	; (801621c <etharp_tmr+0x14c>)
 8016110:	687a      	ldr	r2, [r7, #4]
 8016112:	4613      	mov	r3, r2
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	4413      	add	r3, r2
 8016118:	00db      	lsls	r3, r3, #3
 801611a:	440b      	add	r3, r1
 801611c:	3312      	adds	r3, #18
 801611e:	4602      	mov	r2, r0
 8016120:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016122:	493e      	ldr	r1, [pc, #248]	; (801621c <etharp_tmr+0x14c>)
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	4613      	mov	r3, r2
 8016128:	005b      	lsls	r3, r3, #1
 801612a:	4413      	add	r3, r2
 801612c:	00db      	lsls	r3, r3, #3
 801612e:	440b      	add	r3, r1
 8016130:	3312      	adds	r3, #18
 8016132:	881b      	ldrh	r3, [r3, #0]
 8016134:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016138:	d215      	bcs.n	8016166 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801613a:	4938      	ldr	r1, [pc, #224]	; (801621c <etharp_tmr+0x14c>)
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	4613      	mov	r3, r2
 8016140:	005b      	lsls	r3, r3, #1
 8016142:	4413      	add	r3, r2
 8016144:	00db      	lsls	r3, r3, #3
 8016146:	440b      	add	r3, r1
 8016148:	3314      	adds	r3, #20
 801614a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801614c:	2b01      	cmp	r3, #1
 801614e:	d10e      	bne.n	801616e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016150:	4932      	ldr	r1, [pc, #200]	; (801621c <etharp_tmr+0x14c>)
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	00db      	lsls	r3, r3, #3
 801615c:	440b      	add	r3, r1
 801615e:	3312      	adds	r3, #18
 8016160:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016162:	2b04      	cmp	r3, #4
 8016164:	d903      	bls.n	801616e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f7ff ff80 	bl	801606c <etharp_free_entry>
 801616c:	e04a      	b.n	8016204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801616e:	492b      	ldr	r1, [pc, #172]	; (801621c <etharp_tmr+0x14c>)
 8016170:	687a      	ldr	r2, [r7, #4]
 8016172:	4613      	mov	r3, r2
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	4413      	add	r3, r2
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	440b      	add	r3, r1
 801617c:	3314      	adds	r3, #20
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2b03      	cmp	r3, #3
 8016182:	d10a      	bne.n	801619a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016184:	4925      	ldr	r1, [pc, #148]	; (801621c <etharp_tmr+0x14c>)
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	4613      	mov	r3, r2
 801618a:	005b      	lsls	r3, r3, #1
 801618c:	4413      	add	r3, r2
 801618e:	00db      	lsls	r3, r3, #3
 8016190:	440b      	add	r3, r1
 8016192:	3314      	adds	r3, #20
 8016194:	2204      	movs	r2, #4
 8016196:	701a      	strb	r2, [r3, #0]
 8016198:	e034      	b.n	8016204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801619a:	4920      	ldr	r1, [pc, #128]	; (801621c <etharp_tmr+0x14c>)
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	4613      	mov	r3, r2
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	4413      	add	r3, r2
 80161a4:	00db      	lsls	r3, r3, #3
 80161a6:	440b      	add	r3, r1
 80161a8:	3314      	adds	r3, #20
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	2b04      	cmp	r3, #4
 80161ae:	d10a      	bne.n	80161c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80161b0:	491a      	ldr	r1, [pc, #104]	; (801621c <etharp_tmr+0x14c>)
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	4613      	mov	r3, r2
 80161b6:	005b      	lsls	r3, r3, #1
 80161b8:	4413      	add	r3, r2
 80161ba:	00db      	lsls	r3, r3, #3
 80161bc:	440b      	add	r3, r1
 80161be:	3314      	adds	r3, #20
 80161c0:	2202      	movs	r2, #2
 80161c2:	701a      	strb	r2, [r3, #0]
 80161c4:	e01e      	b.n	8016204 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80161c6:	4915      	ldr	r1, [pc, #84]	; (801621c <etharp_tmr+0x14c>)
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	4613      	mov	r3, r2
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	4413      	add	r3, r2
 80161d0:	00db      	lsls	r3, r3, #3
 80161d2:	440b      	add	r3, r1
 80161d4:	3314      	adds	r3, #20
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d113      	bne.n	8016204 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80161dc:	490f      	ldr	r1, [pc, #60]	; (801621c <etharp_tmr+0x14c>)
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	4613      	mov	r3, r2
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	4413      	add	r3, r2
 80161e6:	00db      	lsls	r3, r3, #3
 80161e8:	440b      	add	r3, r1
 80161ea:	3308      	adds	r3, #8
 80161ec:	6818      	ldr	r0, [r3, #0]
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	4613      	mov	r3, r2
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	4413      	add	r3, r2
 80161f6:	00db      	lsls	r3, r3, #3
 80161f8:	4a08      	ldr	r2, [pc, #32]	; (801621c <etharp_tmr+0x14c>)
 80161fa:	4413      	add	r3, r2
 80161fc:	3304      	adds	r3, #4
 80161fe:	4619      	mov	r1, r3
 8016200:	f000 fe72 	bl	8016ee8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	3301      	adds	r3, #1
 8016208:	607b      	str	r3, [r7, #4]
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2b09      	cmp	r3, #9
 801620e:	f77f af65 	ble.w	80160dc <etharp_tmr+0xc>
      }
    }
  }
}
 8016212:	bf00      	nop
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	20011244 	.word	0x20011244

08016220 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b08a      	sub	sp, #40	; 0x28
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	460b      	mov	r3, r1
 801622a:	607a      	str	r2, [r7, #4]
 801622c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801622e:	230a      	movs	r3, #10
 8016230:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016232:	230a      	movs	r3, #10
 8016234:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016236:	230a      	movs	r3, #10
 8016238:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801623e:	230a      	movs	r3, #10
 8016240:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016242:	2300      	movs	r3, #0
 8016244:	83bb      	strh	r3, [r7, #28]
 8016246:	2300      	movs	r3, #0
 8016248:	837b      	strh	r3, [r7, #26]
 801624a:	2300      	movs	r3, #0
 801624c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801624e:	2300      	movs	r3, #0
 8016250:	843b      	strh	r3, [r7, #32]
 8016252:	e0ae      	b.n	80163b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016258:	49a6      	ldr	r1, [pc, #664]	; (80164f4 <etharp_find_entry+0x2d4>)
 801625a:	4613      	mov	r3, r2
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	4413      	add	r3, r2
 8016260:	00db      	lsls	r3, r3, #3
 8016262:	440b      	add	r3, r1
 8016264:	3314      	adds	r3, #20
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801626a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801626e:	2b0a      	cmp	r3, #10
 8016270:	d105      	bne.n	801627e <etharp_find_entry+0x5e>
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d102      	bne.n	801627e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016278:	8c3b      	ldrh	r3, [r7, #32]
 801627a:	847b      	strh	r3, [r7, #34]	; 0x22
 801627c:	e095      	b.n	80163aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801627e:	7dfb      	ldrb	r3, [r7, #23]
 8016280:	2b00      	cmp	r3, #0
 8016282:	f000 8092 	beq.w	80163aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016286:	7dfb      	ldrb	r3, [r7, #23]
 8016288:	2b01      	cmp	r3, #1
 801628a:	d009      	beq.n	80162a0 <etharp_find_entry+0x80>
 801628c:	7dfb      	ldrb	r3, [r7, #23]
 801628e:	2b01      	cmp	r3, #1
 8016290:	d806      	bhi.n	80162a0 <etharp_find_entry+0x80>
 8016292:	4b99      	ldr	r3, [pc, #612]	; (80164f8 <etharp_find_entry+0x2d8>)
 8016294:	f240 1223 	movw	r2, #291	; 0x123
 8016298:	4998      	ldr	r1, [pc, #608]	; (80164fc <etharp_find_entry+0x2dc>)
 801629a:	4899      	ldr	r0, [pc, #612]	; (8016500 <etharp_find_entry+0x2e0>)
 801629c:	f002 fccc 	bl	8018c38 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d020      	beq.n	80162e8 <etharp_find_entry+0xc8>
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	6819      	ldr	r1, [r3, #0]
 80162aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ae:	4891      	ldr	r0, [pc, #580]	; (80164f4 <etharp_find_entry+0x2d4>)
 80162b0:	4613      	mov	r3, r2
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	4413      	add	r3, r2
 80162b6:	00db      	lsls	r3, r3, #3
 80162b8:	4403      	add	r3, r0
 80162ba:	3304      	adds	r3, #4
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4299      	cmp	r1, r3
 80162c0:	d112      	bne.n	80162e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d00c      	beq.n	80162e2 <etharp_find_entry+0xc2>
 80162c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162cc:	4989      	ldr	r1, [pc, #548]	; (80164f4 <etharp_find_entry+0x2d4>)
 80162ce:	4613      	mov	r3, r2
 80162d0:	005b      	lsls	r3, r3, #1
 80162d2:	4413      	add	r3, r2
 80162d4:	00db      	lsls	r3, r3, #3
 80162d6:	440b      	add	r3, r1
 80162d8:	3308      	adds	r3, #8
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d102      	bne.n	80162e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80162e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80162e6:	e100      	b.n	80164ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80162e8:	7dfb      	ldrb	r3, [r7, #23]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d140      	bne.n	8016370 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80162ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162f2:	4980      	ldr	r1, [pc, #512]	; (80164f4 <etharp_find_entry+0x2d4>)
 80162f4:	4613      	mov	r3, r2
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4413      	add	r3, r2
 80162fa:	00db      	lsls	r3, r3, #3
 80162fc:	440b      	add	r3, r1
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d01a      	beq.n	801633a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016304:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016308:	497a      	ldr	r1, [pc, #488]	; (80164f4 <etharp_find_entry+0x2d4>)
 801630a:	4613      	mov	r3, r2
 801630c:	005b      	lsls	r3, r3, #1
 801630e:	4413      	add	r3, r2
 8016310:	00db      	lsls	r3, r3, #3
 8016312:	440b      	add	r3, r1
 8016314:	3312      	adds	r3, #18
 8016316:	881b      	ldrh	r3, [r3, #0]
 8016318:	8bba      	ldrh	r2, [r7, #28]
 801631a:	429a      	cmp	r2, r3
 801631c:	d845      	bhi.n	80163aa <etharp_find_entry+0x18a>
            old_queue = i;
 801631e:	8c3b      	ldrh	r3, [r7, #32]
 8016320:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016326:	4973      	ldr	r1, [pc, #460]	; (80164f4 <etharp_find_entry+0x2d4>)
 8016328:	4613      	mov	r3, r2
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	4413      	add	r3, r2
 801632e:	00db      	lsls	r3, r3, #3
 8016330:	440b      	add	r3, r1
 8016332:	3312      	adds	r3, #18
 8016334:	881b      	ldrh	r3, [r3, #0]
 8016336:	83bb      	strh	r3, [r7, #28]
 8016338:	e037      	b.n	80163aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801633a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801633e:	496d      	ldr	r1, [pc, #436]	; (80164f4 <etharp_find_entry+0x2d4>)
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	440b      	add	r3, r1
 801634a:	3312      	adds	r3, #18
 801634c:	881b      	ldrh	r3, [r3, #0]
 801634e:	8b7a      	ldrh	r2, [r7, #26]
 8016350:	429a      	cmp	r2, r3
 8016352:	d82a      	bhi.n	80163aa <etharp_find_entry+0x18a>
            old_pending = i;
 8016354:	8c3b      	ldrh	r3, [r7, #32]
 8016356:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801635c:	4965      	ldr	r1, [pc, #404]	; (80164f4 <etharp_find_entry+0x2d4>)
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	3312      	adds	r3, #18
 801636a:	881b      	ldrh	r3, [r3, #0]
 801636c:	837b      	strh	r3, [r7, #26]
 801636e:	e01c      	b.n	80163aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016370:	7dfb      	ldrb	r3, [r7, #23]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d919      	bls.n	80163aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801637a:	495e      	ldr	r1, [pc, #376]	; (80164f4 <etharp_find_entry+0x2d4>)
 801637c:	4613      	mov	r3, r2
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	4413      	add	r3, r2
 8016382:	00db      	lsls	r3, r3, #3
 8016384:	440b      	add	r3, r1
 8016386:	3312      	adds	r3, #18
 8016388:	881b      	ldrh	r3, [r3, #0]
 801638a:	8b3a      	ldrh	r2, [r7, #24]
 801638c:	429a      	cmp	r2, r3
 801638e:	d80c      	bhi.n	80163aa <etharp_find_entry+0x18a>
            old_stable = i;
 8016390:	8c3b      	ldrh	r3, [r7, #32]
 8016392:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016394:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016398:	4956      	ldr	r1, [pc, #344]	; (80164f4 <etharp_find_entry+0x2d4>)
 801639a:	4613      	mov	r3, r2
 801639c:	005b      	lsls	r3, r3, #1
 801639e:	4413      	add	r3, r2
 80163a0:	00db      	lsls	r3, r3, #3
 80163a2:	440b      	add	r3, r1
 80163a4:	3312      	adds	r3, #18
 80163a6:	881b      	ldrh	r3, [r3, #0]
 80163a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163aa:	8c3b      	ldrh	r3, [r7, #32]
 80163ac:	3301      	adds	r3, #1
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	843b      	strh	r3, [r7, #32]
 80163b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163b6:	2b09      	cmp	r3, #9
 80163b8:	f77f af4c 	ble.w	8016254 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80163bc:	7afb      	ldrb	r3, [r7, #11]
 80163be:	f003 0302 	and.w	r3, r3, #2
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d108      	bne.n	80163d8 <etharp_find_entry+0x1b8>
 80163c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80163ca:	2b0a      	cmp	r3, #10
 80163cc:	d107      	bne.n	80163de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80163ce:	7afb      	ldrb	r3, [r7, #11]
 80163d0:	f003 0301 	and.w	r3, r3, #1
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d102      	bne.n	80163de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80163d8:	f04f 33ff 	mov.w	r3, #4294967295
 80163dc:	e085      	b.n	80164ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80163de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80163e2:	2b09      	cmp	r3, #9
 80163e4:	dc02      	bgt.n	80163ec <etharp_find_entry+0x1cc>
    i = empty;
 80163e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163e8:	843b      	strh	r3, [r7, #32]
 80163ea:	e039      	b.n	8016460 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80163ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80163f0:	2b09      	cmp	r3, #9
 80163f2:	dc14      	bgt.n	801641e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80163f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80163f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163fc:	493d      	ldr	r1, [pc, #244]	; (80164f4 <etharp_find_entry+0x2d4>)
 80163fe:	4613      	mov	r3, r2
 8016400:	005b      	lsls	r3, r3, #1
 8016402:	4413      	add	r3, r2
 8016404:	00db      	lsls	r3, r3, #3
 8016406:	440b      	add	r3, r1
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d018      	beq.n	8016440 <etharp_find_entry+0x220>
 801640e:	4b3a      	ldr	r3, [pc, #232]	; (80164f8 <etharp_find_entry+0x2d8>)
 8016410:	f240 126d 	movw	r2, #365	; 0x16d
 8016414:	493b      	ldr	r1, [pc, #236]	; (8016504 <etharp_find_entry+0x2e4>)
 8016416:	483a      	ldr	r0, [pc, #232]	; (8016500 <etharp_find_entry+0x2e0>)
 8016418:	f002 fc0e 	bl	8018c38 <iprintf>
 801641c:	e010      	b.n	8016440 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801641e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016422:	2b09      	cmp	r3, #9
 8016424:	dc02      	bgt.n	801642c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016428:	843b      	strh	r3, [r7, #32]
 801642a:	e009      	b.n	8016440 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801642c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016430:	2b09      	cmp	r3, #9
 8016432:	dc02      	bgt.n	801643a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016434:	8bfb      	ldrh	r3, [r7, #30]
 8016436:	843b      	strh	r3, [r7, #32]
 8016438:	e002      	b.n	8016440 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801643a:	f04f 33ff 	mov.w	r3, #4294967295
 801643e:	e054      	b.n	80164ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016440:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016444:	2b09      	cmp	r3, #9
 8016446:	dd06      	ble.n	8016456 <etharp_find_entry+0x236>
 8016448:	4b2b      	ldr	r3, [pc, #172]	; (80164f8 <etharp_find_entry+0x2d8>)
 801644a:	f240 127f 	movw	r2, #383	; 0x17f
 801644e:	492e      	ldr	r1, [pc, #184]	; (8016508 <etharp_find_entry+0x2e8>)
 8016450:	482b      	ldr	r0, [pc, #172]	; (8016500 <etharp_find_entry+0x2e0>)
 8016452:	f002 fbf1 	bl	8018c38 <iprintf>
    etharp_free_entry(i);
 8016456:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801645a:	4618      	mov	r0, r3
 801645c:	f7ff fe06 	bl	801606c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016460:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016464:	2b09      	cmp	r3, #9
 8016466:	dd06      	ble.n	8016476 <etharp_find_entry+0x256>
 8016468:	4b23      	ldr	r3, [pc, #140]	; (80164f8 <etharp_find_entry+0x2d8>)
 801646a:	f240 1283 	movw	r2, #387	; 0x183
 801646e:	4926      	ldr	r1, [pc, #152]	; (8016508 <etharp_find_entry+0x2e8>)
 8016470:	4823      	ldr	r0, [pc, #140]	; (8016500 <etharp_find_entry+0x2e0>)
 8016472:	f002 fbe1 	bl	8018c38 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801647a:	491e      	ldr	r1, [pc, #120]	; (80164f4 <etharp_find_entry+0x2d4>)
 801647c:	4613      	mov	r3, r2
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	4413      	add	r3, r2
 8016482:	00db      	lsls	r3, r3, #3
 8016484:	440b      	add	r3, r1
 8016486:	3314      	adds	r3, #20
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d006      	beq.n	801649c <etharp_find_entry+0x27c>
 801648e:	4b1a      	ldr	r3, [pc, #104]	; (80164f8 <etharp_find_entry+0x2d8>)
 8016490:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016494:	491d      	ldr	r1, [pc, #116]	; (801650c <etharp_find_entry+0x2ec>)
 8016496:	481a      	ldr	r0, [pc, #104]	; (8016500 <etharp_find_entry+0x2e0>)
 8016498:	f002 fbce 	bl	8018c38 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d00b      	beq.n	80164ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80164a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6819      	ldr	r1, [r3, #0]
 80164aa:	4812      	ldr	r0, [pc, #72]	; (80164f4 <etharp_find_entry+0x2d4>)
 80164ac:	4613      	mov	r3, r2
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	4413      	add	r3, r2
 80164b2:	00db      	lsls	r3, r3, #3
 80164b4:	4403      	add	r3, r0
 80164b6:	3304      	adds	r3, #4
 80164b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80164ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164be:	490d      	ldr	r1, [pc, #52]	; (80164f4 <etharp_find_entry+0x2d4>)
 80164c0:	4613      	mov	r3, r2
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	4413      	add	r3, r2
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	440b      	add	r3, r1
 80164ca:	3312      	adds	r3, #18
 80164cc:	2200      	movs	r2, #0
 80164ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80164d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164d4:	4907      	ldr	r1, [pc, #28]	; (80164f4 <etharp_find_entry+0x2d4>)
 80164d6:	4613      	mov	r3, r2
 80164d8:	005b      	lsls	r3, r3, #1
 80164da:	4413      	add	r3, r2
 80164dc:	00db      	lsls	r3, r3, #3
 80164de:	440b      	add	r3, r1
 80164e0:	3308      	adds	r3, #8
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80164e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3728      	adds	r7, #40	; 0x28
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	20011244 	.word	0x20011244
 80164f8:	0801d5e8 	.word	0x0801d5e8
 80164fc:	0801d620 	.word	0x0801d620
 8016500:	0801d660 	.word	0x0801d660
 8016504:	0801d688 	.word	0x0801d688
 8016508:	0801d6a0 	.word	0x0801d6a0
 801650c:	0801d6b4 	.word	0x0801d6b4

08016510 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b088      	sub	sp, #32
 8016514:	af02      	add	r7, sp, #8
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
 801651c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016524:	2b06      	cmp	r3, #6
 8016526:	d006      	beq.n	8016536 <etharp_update_arp_entry+0x26>
 8016528:	4b48      	ldr	r3, [pc, #288]	; (801664c <etharp_update_arp_entry+0x13c>)
 801652a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801652e:	4948      	ldr	r1, [pc, #288]	; (8016650 <etharp_update_arp_entry+0x140>)
 8016530:	4848      	ldr	r0, [pc, #288]	; (8016654 <etharp_update_arp_entry+0x144>)
 8016532:	f002 fb81 	bl	8018c38 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d012      	beq.n	8016562 <etharp_update_arp_entry+0x52>
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00e      	beq.n	8016562 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	68f9      	ldr	r1, [r7, #12]
 801654a:	4618      	mov	r0, r3
 801654c:	f001 f920 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8016550:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016552:	2b00      	cmp	r3, #0
 8016554:	d105      	bne.n	8016562 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801655e:	2be0      	cmp	r3, #224	; 0xe0
 8016560:	d102      	bne.n	8016568 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016562:	f06f 030f 	mvn.w	r3, #15
 8016566:	e06c      	b.n	8016642 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016568:	78fb      	ldrb	r3, [r7, #3]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	4619      	mov	r1, r3
 801656e:	68b8      	ldr	r0, [r7, #8]
 8016570:	f7ff fe56 	bl	8016220 <etharp_find_entry>
 8016574:	4603      	mov	r3, r0
 8016576:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016578:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801657c:	2b00      	cmp	r3, #0
 801657e:	da02      	bge.n	8016586 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016580:	8afb      	ldrh	r3, [r7, #22]
 8016582:	b25b      	sxtb	r3, r3
 8016584:	e05d      	b.n	8016642 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801658a:	4933      	ldr	r1, [pc, #204]	; (8016658 <etharp_update_arp_entry+0x148>)
 801658c:	4613      	mov	r3, r2
 801658e:	005b      	lsls	r3, r3, #1
 8016590:	4413      	add	r3, r2
 8016592:	00db      	lsls	r3, r3, #3
 8016594:	440b      	add	r3, r1
 8016596:	3314      	adds	r3, #20
 8016598:	2202      	movs	r2, #2
 801659a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801659c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165a0:	492d      	ldr	r1, [pc, #180]	; (8016658 <etharp_update_arp_entry+0x148>)
 80165a2:	4613      	mov	r3, r2
 80165a4:	005b      	lsls	r3, r3, #1
 80165a6:	4413      	add	r3, r2
 80165a8:	00db      	lsls	r3, r3, #3
 80165aa:	440b      	add	r3, r1
 80165ac:	3308      	adds	r3, #8
 80165ae:	68fa      	ldr	r2, [r7, #12]
 80165b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80165b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165b6:	4613      	mov	r3, r2
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	4413      	add	r3, r2
 80165bc:	00db      	lsls	r3, r3, #3
 80165be:	3308      	adds	r3, #8
 80165c0:	4a25      	ldr	r2, [pc, #148]	; (8016658 <etharp_update_arp_entry+0x148>)
 80165c2:	4413      	add	r3, r2
 80165c4:	3304      	adds	r3, #4
 80165c6:	2206      	movs	r2, #6
 80165c8:	6879      	ldr	r1, [r7, #4]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f002 fe24 	bl	8019218 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80165d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165d4:	4920      	ldr	r1, [pc, #128]	; (8016658 <etharp_update_arp_entry+0x148>)
 80165d6:	4613      	mov	r3, r2
 80165d8:	005b      	lsls	r3, r3, #1
 80165da:	4413      	add	r3, r2
 80165dc:	00db      	lsls	r3, r3, #3
 80165de:	440b      	add	r3, r1
 80165e0:	3312      	adds	r3, #18
 80165e2:	2200      	movs	r2, #0
 80165e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80165e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80165ea:	491b      	ldr	r1, [pc, #108]	; (8016658 <etharp_update_arp_entry+0x148>)
 80165ec:	4613      	mov	r3, r2
 80165ee:	005b      	lsls	r3, r3, #1
 80165f0:	4413      	add	r3, r2
 80165f2:	00db      	lsls	r3, r3, #3
 80165f4:	440b      	add	r3, r1
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d021      	beq.n	8016640 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80165fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016600:	4915      	ldr	r1, [pc, #84]	; (8016658 <etharp_update_arp_entry+0x148>)
 8016602:	4613      	mov	r3, r2
 8016604:	005b      	lsls	r3, r3, #1
 8016606:	4413      	add	r3, r2
 8016608:	00db      	lsls	r3, r3, #3
 801660a:	440b      	add	r3, r1
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016610:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016614:	4910      	ldr	r1, [pc, #64]	; (8016658 <etharp_update_arp_entry+0x148>)
 8016616:	4613      	mov	r3, r2
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	4413      	add	r3, r2
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	440b      	add	r3, r1
 8016620:	2200      	movs	r2, #0
 8016622:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801662a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801662e:	9300      	str	r3, [sp, #0]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6939      	ldr	r1, [r7, #16]
 8016634:	68f8      	ldr	r0, [r7, #12]
 8016636:	f001 ffb9 	bl	80185ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801663a:	6938      	ldr	r0, [r7, #16]
 801663c:	f7f6 fbca 	bl	800cdd4 <pbuf_free>
  }
  return ERR_OK;
 8016640:	2300      	movs	r3, #0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3718      	adds	r7, #24
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	0801d5e8 	.word	0x0801d5e8
 8016650:	0801d6e0 	.word	0x0801d6e0
 8016654:	0801d660 	.word	0x0801d660
 8016658:	20011244 	.word	0x20011244

0801665c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016664:	2300      	movs	r3, #0
 8016666:	60fb      	str	r3, [r7, #12]
 8016668:	e01e      	b.n	80166a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801666a:	4913      	ldr	r1, [pc, #76]	; (80166b8 <etharp_cleanup_netif+0x5c>)
 801666c:	68fa      	ldr	r2, [r7, #12]
 801666e:	4613      	mov	r3, r2
 8016670:	005b      	lsls	r3, r3, #1
 8016672:	4413      	add	r3, r2
 8016674:	00db      	lsls	r3, r3, #3
 8016676:	440b      	add	r3, r1
 8016678:	3314      	adds	r3, #20
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801667e:	7afb      	ldrb	r3, [r7, #11]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00e      	beq.n	80166a2 <etharp_cleanup_netif+0x46>
 8016684:	490c      	ldr	r1, [pc, #48]	; (80166b8 <etharp_cleanup_netif+0x5c>)
 8016686:	68fa      	ldr	r2, [r7, #12]
 8016688:	4613      	mov	r3, r2
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	4413      	add	r3, r2
 801668e:	00db      	lsls	r3, r3, #3
 8016690:	440b      	add	r3, r1
 8016692:	3308      	adds	r3, #8
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	429a      	cmp	r2, r3
 801669a:	d102      	bne.n	80166a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801669c:	68f8      	ldr	r0, [r7, #12]
 801669e:	f7ff fce5 	bl	801606c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	3301      	adds	r3, #1
 80166a6:	60fb      	str	r3, [r7, #12]
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b09      	cmp	r3, #9
 80166ac:	dddd      	ble.n	801666a <etharp_cleanup_netif+0xe>
    }
  }
}
 80166ae:	bf00      	nop
 80166b0:	bf00      	nop
 80166b2:	3710      	adds	r7, #16
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	20011244 	.word	0x20011244

080166bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80166bc:	b5b0      	push	{r4, r5, r7, lr}
 80166be:	b08a      	sub	sp, #40	; 0x28
 80166c0:	af04      	add	r7, sp, #16
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d107      	bne.n	80166dc <etharp_input+0x20>
 80166cc:	4b3f      	ldr	r3, [pc, #252]	; (80167cc <etharp_input+0x110>)
 80166ce:	f240 228a 	movw	r2, #650	; 0x28a
 80166d2:	493f      	ldr	r1, [pc, #252]	; (80167d0 <etharp_input+0x114>)
 80166d4:	483f      	ldr	r0, [pc, #252]	; (80167d4 <etharp_input+0x118>)
 80166d6:	f002 faaf 	bl	8018c38 <iprintf>
 80166da:	e074      	b.n	80167c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	881b      	ldrh	r3, [r3, #0]
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ec:	d10c      	bne.n	8016708 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80166f2:	2b06      	cmp	r3, #6
 80166f4:	d108      	bne.n	8016708 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80166f6:	693b      	ldr	r3, [r7, #16]
 80166f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80166fa:	2b04      	cmp	r3, #4
 80166fc:	d104      	bne.n	8016708 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	885b      	ldrh	r3, [r3, #2]
 8016702:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016704:	2b08      	cmp	r3, #8
 8016706:	d003      	beq.n	8016710 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7f6 fb63 	bl	800cdd4 <pbuf_free>
    return;
 801670e:	e05a      	b.n	80167c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016710:	693b      	ldr	r3, [r7, #16]
 8016712:	330e      	adds	r3, #14
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	3318      	adds	r3, #24
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	3304      	adds	r3, #4
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d102      	bne.n	8016730 <etharp_input+0x74>
    for_us = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	75fb      	strb	r3, [r7, #23]
 801672e:	e009      	b.n	8016744 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016730:	68ba      	ldr	r2, [r7, #8]
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	3304      	adds	r3, #4
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	429a      	cmp	r2, r3
 801673a:	bf0c      	ite	eq
 801673c:	2301      	moveq	r3, #1
 801673e:	2300      	movne	r3, #0
 8016740:	b2db      	uxtb	r3, r3
 8016742:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	f103 0208 	add.w	r2, r3, #8
 801674a:	7dfb      	ldrb	r3, [r7, #23]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d001      	beq.n	8016754 <etharp_input+0x98>
 8016750:	2301      	movs	r3, #1
 8016752:	e000      	b.n	8016756 <etharp_input+0x9a>
 8016754:	2302      	movs	r3, #2
 8016756:	f107 010c 	add.w	r1, r7, #12
 801675a:	6838      	ldr	r0, [r7, #0]
 801675c:	f7ff fed8 	bl	8016510 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	88db      	ldrh	r3, [r3, #6]
 8016764:	b29b      	uxth	r3, r3
 8016766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801676a:	d003      	beq.n	8016774 <etharp_input+0xb8>
 801676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016770:	d01e      	beq.n	80167b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016772:	e025      	b.n	80167c0 <etharp_input+0x104>
      if (for_us) {
 8016774:	7dfb      	ldrb	r3, [r7, #23]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d021      	beq.n	80167be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801678c:	683b      	ldr	r3, [r7, #0]
 801678e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016790:	693a      	ldr	r2, [r7, #16]
 8016792:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016794:	2102      	movs	r1, #2
 8016796:	9103      	str	r1, [sp, #12]
 8016798:	f107 010c 	add.w	r1, r7, #12
 801679c:	9102      	str	r1, [sp, #8]
 801679e:	9201      	str	r2, [sp, #4]
 80167a0:	9300      	str	r3, [sp, #0]
 80167a2:	462b      	mov	r3, r5
 80167a4:	4622      	mov	r2, r4
 80167a6:	4601      	mov	r1, r0
 80167a8:	6838      	ldr	r0, [r7, #0]
 80167aa:	f000 faef 	bl	8016d8c <etharp_raw>
      break;
 80167ae:	e006      	b.n	80167be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80167b0:	f107 030c 	add.w	r3, r7, #12
 80167b4:	4619      	mov	r1, r3
 80167b6:	6838      	ldr	r0, [r7, #0]
 80167b8:	f7fe f9fc 	bl	8014bb4 <dhcp_arp_reply>
      break;
 80167bc:	e000      	b.n	80167c0 <etharp_input+0x104>
      break;
 80167be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f7f6 fb07 	bl	800cdd4 <pbuf_free>
}
 80167c6:	3718      	adds	r7, #24
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bdb0      	pop	{r4, r5, r7, pc}
 80167cc:	0801d5e8 	.word	0x0801d5e8
 80167d0:	0801d738 	.word	0x0801d738
 80167d4:	0801d660 	.word	0x0801d660

080167d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b086      	sub	sp, #24
 80167dc:	af02      	add	r7, sp, #8
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	4613      	mov	r3, r2
 80167e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80167e6:	79fa      	ldrb	r2, [r7, #7]
 80167e8:	4944      	ldr	r1, [pc, #272]	; (80168fc <etharp_output_to_arp_index+0x124>)
 80167ea:	4613      	mov	r3, r2
 80167ec:	005b      	lsls	r3, r3, #1
 80167ee:	4413      	add	r3, r2
 80167f0:	00db      	lsls	r3, r3, #3
 80167f2:	440b      	add	r3, r1
 80167f4:	3314      	adds	r3, #20
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	2b01      	cmp	r3, #1
 80167fa:	d806      	bhi.n	801680a <etharp_output_to_arp_index+0x32>
 80167fc:	4b40      	ldr	r3, [pc, #256]	; (8016900 <etharp_output_to_arp_index+0x128>)
 80167fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016802:	4940      	ldr	r1, [pc, #256]	; (8016904 <etharp_output_to_arp_index+0x12c>)
 8016804:	4840      	ldr	r0, [pc, #256]	; (8016908 <etharp_output_to_arp_index+0x130>)
 8016806:	f002 fa17 	bl	8018c38 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801680a:	79fa      	ldrb	r2, [r7, #7]
 801680c:	493b      	ldr	r1, [pc, #236]	; (80168fc <etharp_output_to_arp_index+0x124>)
 801680e:	4613      	mov	r3, r2
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	4413      	add	r3, r2
 8016814:	00db      	lsls	r3, r3, #3
 8016816:	440b      	add	r3, r1
 8016818:	3314      	adds	r3, #20
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	2b02      	cmp	r3, #2
 801681e:	d153      	bne.n	80168c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016820:	79fa      	ldrb	r2, [r7, #7]
 8016822:	4936      	ldr	r1, [pc, #216]	; (80168fc <etharp_output_to_arp_index+0x124>)
 8016824:	4613      	mov	r3, r2
 8016826:	005b      	lsls	r3, r3, #1
 8016828:	4413      	add	r3, r2
 801682a:	00db      	lsls	r3, r3, #3
 801682c:	440b      	add	r3, r1
 801682e:	3312      	adds	r3, #18
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016836:	d919      	bls.n	801686c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016838:	79fa      	ldrb	r2, [r7, #7]
 801683a:	4613      	mov	r3, r2
 801683c:	005b      	lsls	r3, r3, #1
 801683e:	4413      	add	r3, r2
 8016840:	00db      	lsls	r3, r3, #3
 8016842:	4a2e      	ldr	r2, [pc, #184]	; (80168fc <etharp_output_to_arp_index+0x124>)
 8016844:	4413      	add	r3, r2
 8016846:	3304      	adds	r3, #4
 8016848:	4619      	mov	r1, r3
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f000 fb4c 	bl	8016ee8 <etharp_request>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d138      	bne.n	80168c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016856:	79fa      	ldrb	r2, [r7, #7]
 8016858:	4928      	ldr	r1, [pc, #160]	; (80168fc <etharp_output_to_arp_index+0x124>)
 801685a:	4613      	mov	r3, r2
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	4413      	add	r3, r2
 8016860:	00db      	lsls	r3, r3, #3
 8016862:	440b      	add	r3, r1
 8016864:	3314      	adds	r3, #20
 8016866:	2203      	movs	r2, #3
 8016868:	701a      	strb	r2, [r3, #0]
 801686a:	e02d      	b.n	80168c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801686c:	79fa      	ldrb	r2, [r7, #7]
 801686e:	4923      	ldr	r1, [pc, #140]	; (80168fc <etharp_output_to_arp_index+0x124>)
 8016870:	4613      	mov	r3, r2
 8016872:	005b      	lsls	r3, r3, #1
 8016874:	4413      	add	r3, r2
 8016876:	00db      	lsls	r3, r3, #3
 8016878:	440b      	add	r3, r1
 801687a:	3312      	adds	r3, #18
 801687c:	881b      	ldrh	r3, [r3, #0]
 801687e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016882:	d321      	bcc.n	80168c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016884:	79fa      	ldrb	r2, [r7, #7]
 8016886:	4613      	mov	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	4413      	add	r3, r2
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	4a1b      	ldr	r2, [pc, #108]	; (80168fc <etharp_output_to_arp_index+0x124>)
 8016890:	4413      	add	r3, r2
 8016892:	1d19      	adds	r1, r3, #4
 8016894:	79fa      	ldrb	r2, [r7, #7]
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	3308      	adds	r3, #8
 80168a0:	4a16      	ldr	r2, [pc, #88]	; (80168fc <etharp_output_to_arp_index+0x124>)
 80168a2:	4413      	add	r3, r2
 80168a4:	3304      	adds	r3, #4
 80168a6:	461a      	mov	r2, r3
 80168a8:	68f8      	ldr	r0, [r7, #12]
 80168aa:	f000 fafb 	bl	8016ea4 <etharp_request_dst>
 80168ae:	4603      	mov	r3, r0
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d109      	bne.n	80168c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80168b4:	79fa      	ldrb	r2, [r7, #7]
 80168b6:	4911      	ldr	r1, [pc, #68]	; (80168fc <etharp_output_to_arp_index+0x124>)
 80168b8:	4613      	mov	r3, r2
 80168ba:	005b      	lsls	r3, r3, #1
 80168bc:	4413      	add	r3, r2
 80168be:	00db      	lsls	r3, r3, #3
 80168c0:	440b      	add	r3, r1
 80168c2:	3314      	adds	r3, #20
 80168c4:	2203      	movs	r2, #3
 80168c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80168ce:	79fa      	ldrb	r2, [r7, #7]
 80168d0:	4613      	mov	r3, r2
 80168d2:	005b      	lsls	r3, r3, #1
 80168d4:	4413      	add	r3, r2
 80168d6:	00db      	lsls	r3, r3, #3
 80168d8:	3308      	adds	r3, #8
 80168da:	4a08      	ldr	r2, [pc, #32]	; (80168fc <etharp_output_to_arp_index+0x124>)
 80168dc:	4413      	add	r3, r2
 80168de:	3304      	adds	r3, #4
 80168e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80168e4:	9200      	str	r2, [sp, #0]
 80168e6:	460a      	mov	r2, r1
 80168e8:	68b9      	ldr	r1, [r7, #8]
 80168ea:	68f8      	ldr	r0, [r7, #12]
 80168ec:	f001 fe5e 	bl	80185ac <ethernet_output>
 80168f0:	4603      	mov	r3, r0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}
 80168fa:	bf00      	nop
 80168fc:	20011244 	.word	0x20011244
 8016900:	0801d5e8 	.word	0x0801d5e8
 8016904:	0801d758 	.word	0x0801d758
 8016908:	0801d660 	.word	0x0801d660

0801690c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b08a      	sub	sp, #40	; 0x28
 8016910:	af02      	add	r7, sp, #8
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d106      	bne.n	8016930 <etharp_output+0x24>
 8016922:	4b73      	ldr	r3, [pc, #460]	; (8016af0 <etharp_output+0x1e4>)
 8016924:	f240 321e 	movw	r2, #798	; 0x31e
 8016928:	4972      	ldr	r1, [pc, #456]	; (8016af4 <etharp_output+0x1e8>)
 801692a:	4873      	ldr	r0, [pc, #460]	; (8016af8 <etharp_output+0x1ec>)
 801692c:	f002 f984 	bl	8018c38 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d106      	bne.n	8016944 <etharp_output+0x38>
 8016936:	4b6e      	ldr	r3, [pc, #440]	; (8016af0 <etharp_output+0x1e4>)
 8016938:	f240 321f 	movw	r2, #799	; 0x31f
 801693c:	496f      	ldr	r1, [pc, #444]	; (8016afc <etharp_output+0x1f0>)
 801693e:	486e      	ldr	r0, [pc, #440]	; (8016af8 <etharp_output+0x1ec>)
 8016940:	f002 f97a 	bl	8018c38 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d106      	bne.n	8016958 <etharp_output+0x4c>
 801694a:	4b69      	ldr	r3, [pc, #420]	; (8016af0 <etharp_output+0x1e4>)
 801694c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016950:	496b      	ldr	r1, [pc, #428]	; (8016b00 <etharp_output+0x1f4>)
 8016952:	4869      	ldr	r0, [pc, #420]	; (8016af8 <etharp_output+0x1ec>)
 8016954:	f002 f970 	bl	8018c38 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	68f9      	ldr	r1, [r7, #12]
 801695e:	4618      	mov	r0, r3
 8016960:	f000 ff16 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d002      	beq.n	8016970 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801696a:	4b66      	ldr	r3, [pc, #408]	; (8016b04 <etharp_output+0x1f8>)
 801696c:	61fb      	str	r3, [r7, #28]
 801696e:	e0af      	b.n	8016ad0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016978:	2be0      	cmp	r3, #224	; 0xe0
 801697a:	d118      	bne.n	80169ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801697c:	2301      	movs	r3, #1
 801697e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016980:	2300      	movs	r3, #0
 8016982:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016984:	235e      	movs	r3, #94	; 0x5e
 8016986:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	3301      	adds	r3, #1
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016992:	b2db      	uxtb	r3, r3
 8016994:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	3302      	adds	r3, #2
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	3303      	adds	r3, #3
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80169a6:	f107 0310 	add.w	r3, r7, #16
 80169aa:	61fb      	str	r3, [r7, #28]
 80169ac:	e090      	b.n	8016ad0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	3304      	adds	r3, #4
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	405a      	eors	r2, r3
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	3308      	adds	r3, #8
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4013      	ands	r3, r2
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d012      	beq.n	80169ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80169cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d00b      	beq.n	80169ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	330c      	adds	r3, #12
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d003      	beq.n	80169e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	330c      	adds	r3, #12
 80169e2:	61bb      	str	r3, [r7, #24]
 80169e4:	e002      	b.n	80169ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80169e6:	f06f 0303 	mvn.w	r3, #3
 80169ea:	e07d      	b.n	8016ae8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80169ec:	4b46      	ldr	r3, [pc, #280]	; (8016b08 <etharp_output+0x1fc>)
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	4619      	mov	r1, r3
 80169f2:	4a46      	ldr	r2, [pc, #280]	; (8016b0c <etharp_output+0x200>)
 80169f4:	460b      	mov	r3, r1
 80169f6:	005b      	lsls	r3, r3, #1
 80169f8:	440b      	add	r3, r1
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	4413      	add	r3, r2
 80169fe:	3314      	adds	r3, #20
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d925      	bls.n	8016a52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a06:	4b40      	ldr	r3, [pc, #256]	; (8016b08 <etharp_output+0x1fc>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	4a3f      	ldr	r2, [pc, #252]	; (8016b0c <etharp_output+0x200>)
 8016a0e:	460b      	mov	r3, r1
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	440b      	add	r3, r1
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	4413      	add	r3, r2
 8016a18:	3308      	adds	r3, #8
 8016a1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a1c:	68fa      	ldr	r2, [r7, #12]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d117      	bne.n	8016a52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016a22:	69bb      	ldr	r3, [r7, #24]
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	4b38      	ldr	r3, [pc, #224]	; (8016b08 <etharp_output+0x1fc>)
 8016a28:	781b      	ldrb	r3, [r3, #0]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	4937      	ldr	r1, [pc, #220]	; (8016b0c <etharp_output+0x200>)
 8016a2e:	4603      	mov	r3, r0
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	4403      	add	r3, r0
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	440b      	add	r3, r1
 8016a38:	3304      	adds	r3, #4
 8016a3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d108      	bne.n	8016a52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016a40:	4b31      	ldr	r3, [pc, #196]	; (8016b08 <etharp_output+0x1fc>)
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	461a      	mov	r2, r3
 8016a46:	68b9      	ldr	r1, [r7, #8]
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	f7ff fec5 	bl	80167d8 <etharp_output_to_arp_index>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	e04a      	b.n	8016ae8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a52:	2300      	movs	r3, #0
 8016a54:	75fb      	strb	r3, [r7, #23]
 8016a56:	e031      	b.n	8016abc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016a58:	7dfa      	ldrb	r2, [r7, #23]
 8016a5a:	492c      	ldr	r1, [pc, #176]	; (8016b0c <etharp_output+0x200>)
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	005b      	lsls	r3, r3, #1
 8016a60:	4413      	add	r3, r2
 8016a62:	00db      	lsls	r3, r3, #3
 8016a64:	440b      	add	r3, r1
 8016a66:	3314      	adds	r3, #20
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d923      	bls.n	8016ab6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016a6e:	7dfa      	ldrb	r2, [r7, #23]
 8016a70:	4926      	ldr	r1, [pc, #152]	; (8016b0c <etharp_output+0x200>)
 8016a72:	4613      	mov	r3, r2
 8016a74:	005b      	lsls	r3, r3, #1
 8016a76:	4413      	add	r3, r2
 8016a78:	00db      	lsls	r3, r3, #3
 8016a7a:	440b      	add	r3, r1
 8016a7c:	3308      	adds	r3, #8
 8016a7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016a80:	68fa      	ldr	r2, [r7, #12]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d117      	bne.n	8016ab6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016a86:	69bb      	ldr	r3, [r7, #24]
 8016a88:	6819      	ldr	r1, [r3, #0]
 8016a8a:	7dfa      	ldrb	r2, [r7, #23]
 8016a8c:	481f      	ldr	r0, [pc, #124]	; (8016b0c <etharp_output+0x200>)
 8016a8e:	4613      	mov	r3, r2
 8016a90:	005b      	lsls	r3, r3, #1
 8016a92:	4413      	add	r3, r2
 8016a94:	00db      	lsls	r3, r3, #3
 8016a96:	4403      	add	r3, r0
 8016a98:	3304      	adds	r3, #4
 8016a9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016a9c:	4299      	cmp	r1, r3
 8016a9e:	d10a      	bne.n	8016ab6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016aa0:	4a19      	ldr	r2, [pc, #100]	; (8016b08 <etharp_output+0x1fc>)
 8016aa2:	7dfb      	ldrb	r3, [r7, #23]
 8016aa4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016aa6:	7dfb      	ldrb	r3, [r7, #23]
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	68b9      	ldr	r1, [r7, #8]
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f7ff fe93 	bl	80167d8 <etharp_output_to_arp_index>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	e018      	b.n	8016ae8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016ab6:	7dfb      	ldrb	r3, [r7, #23]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	75fb      	strb	r3, [r7, #23]
 8016abc:	7dfb      	ldrb	r3, [r7, #23]
 8016abe:	2b09      	cmp	r3, #9
 8016ac0:	d9ca      	bls.n	8016a58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016ac2:	68ba      	ldr	r2, [r7, #8]
 8016ac4:	69b9      	ldr	r1, [r7, #24]
 8016ac6:	68f8      	ldr	r0, [r7, #12]
 8016ac8:	f000 f822 	bl	8016b10 <etharp_query>
 8016acc:	4603      	mov	r3, r0
 8016ace:	e00b      	b.n	8016ae8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	69fb      	ldr	r3, [r7, #28]
 8016ade:	68b9      	ldr	r1, [r7, #8]
 8016ae0:	68f8      	ldr	r0, [r7, #12]
 8016ae2:	f001 fd63 	bl	80185ac <ethernet_output>
 8016ae6:	4603      	mov	r3, r0
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3720      	adds	r7, #32
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}
 8016af0:	0801d5e8 	.word	0x0801d5e8
 8016af4:	0801d738 	.word	0x0801d738
 8016af8:	0801d660 	.word	0x0801d660
 8016afc:	0801d788 	.word	0x0801d788
 8016b00:	0801d728 	.word	0x0801d728
 8016b04:	08027f34 	.word	0x08027f34
 8016b08:	20011334 	.word	0x20011334
 8016b0c:	20011244 	.word	0x20011244

08016b10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b08c      	sub	sp, #48	; 0x30
 8016b14:	af02      	add	r7, sp, #8
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	332a      	adds	r3, #42	; 0x2a
 8016b20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016b22:	23ff      	movs	r3, #255	; 0xff
 8016b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016b28:	2300      	movs	r3, #0
 8016b2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	68f9      	ldr	r1, [r7, #12]
 8016b32:	4618      	mov	r0, r3
 8016b34:	f000 fe2c 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d10c      	bne.n	8016b58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016b3e:	68bb      	ldr	r3, [r7, #8]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b46:	2be0      	cmp	r3, #224	; 0xe0
 8016b48:	d006      	beq.n	8016b58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d003      	beq.n	8016b58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016b58:	f06f 030f 	mvn.w	r3, #15
 8016b5c:	e101      	b.n	8016d62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016b5e:	68fa      	ldr	r2, [r7, #12]
 8016b60:	2101      	movs	r1, #1
 8016b62:	68b8      	ldr	r0, [r7, #8]
 8016b64:	f7ff fb5c 	bl	8016220 <etharp_find_entry>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016b6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	da02      	bge.n	8016b7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016b74:	8a7b      	ldrh	r3, [r7, #18]
 8016b76:	b25b      	sxtb	r3, r3
 8016b78:	e0f3      	b.n	8016d62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016b7a:	8a7b      	ldrh	r3, [r7, #18]
 8016b7c:	2b7e      	cmp	r3, #126	; 0x7e
 8016b7e:	d906      	bls.n	8016b8e <etharp_query+0x7e>
 8016b80:	4b7a      	ldr	r3, [pc, #488]	; (8016d6c <etharp_query+0x25c>)
 8016b82:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016b86:	497a      	ldr	r1, [pc, #488]	; (8016d70 <etharp_query+0x260>)
 8016b88:	487a      	ldr	r0, [pc, #488]	; (8016d74 <etharp_query+0x264>)
 8016b8a:	f002 f855 	bl	8018c38 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016b8e:	8a7b      	ldrh	r3, [r7, #18]
 8016b90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016b92:	7c7a      	ldrb	r2, [r7, #17]
 8016b94:	4978      	ldr	r1, [pc, #480]	; (8016d78 <etharp_query+0x268>)
 8016b96:	4613      	mov	r3, r2
 8016b98:	005b      	lsls	r3, r3, #1
 8016b9a:	4413      	add	r3, r2
 8016b9c:	00db      	lsls	r3, r3, #3
 8016b9e:	440b      	add	r3, r1
 8016ba0:	3314      	adds	r3, #20
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d115      	bne.n	8016bd4 <etharp_query+0xc4>
    is_new_entry = 1;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016bac:	7c7a      	ldrb	r2, [r7, #17]
 8016bae:	4972      	ldr	r1, [pc, #456]	; (8016d78 <etharp_query+0x268>)
 8016bb0:	4613      	mov	r3, r2
 8016bb2:	005b      	lsls	r3, r3, #1
 8016bb4:	4413      	add	r3, r2
 8016bb6:	00db      	lsls	r3, r3, #3
 8016bb8:	440b      	add	r3, r1
 8016bba:	3314      	adds	r3, #20
 8016bbc:	2201      	movs	r2, #1
 8016bbe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016bc0:	7c7a      	ldrb	r2, [r7, #17]
 8016bc2:	496d      	ldr	r1, [pc, #436]	; (8016d78 <etharp_query+0x268>)
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	005b      	lsls	r3, r3, #1
 8016bc8:	4413      	add	r3, r2
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	440b      	add	r3, r1
 8016bce:	3308      	adds	r3, #8
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016bd4:	7c7a      	ldrb	r2, [r7, #17]
 8016bd6:	4968      	ldr	r1, [pc, #416]	; (8016d78 <etharp_query+0x268>)
 8016bd8:	4613      	mov	r3, r2
 8016bda:	005b      	lsls	r3, r3, #1
 8016bdc:	4413      	add	r3, r2
 8016bde:	00db      	lsls	r3, r3, #3
 8016be0:	440b      	add	r3, r1
 8016be2:	3314      	adds	r3, #20
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	2b01      	cmp	r3, #1
 8016be8:	d011      	beq.n	8016c0e <etharp_query+0xfe>
 8016bea:	7c7a      	ldrb	r2, [r7, #17]
 8016bec:	4962      	ldr	r1, [pc, #392]	; (8016d78 <etharp_query+0x268>)
 8016bee:	4613      	mov	r3, r2
 8016bf0:	005b      	lsls	r3, r3, #1
 8016bf2:	4413      	add	r3, r2
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	440b      	add	r3, r1
 8016bf8:	3314      	adds	r3, #20
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d806      	bhi.n	8016c0e <etharp_query+0xfe>
 8016c00:	4b5a      	ldr	r3, [pc, #360]	; (8016d6c <etharp_query+0x25c>)
 8016c02:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016c06:	495d      	ldr	r1, [pc, #372]	; (8016d7c <etharp_query+0x26c>)
 8016c08:	485a      	ldr	r0, [pc, #360]	; (8016d74 <etharp_query+0x264>)
 8016c0a:	f002 f815 	bl	8018c38 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016c0e:	6a3b      	ldr	r3, [r7, #32]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d102      	bne.n	8016c1a <etharp_query+0x10a>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d10c      	bne.n	8016c34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016c1a:	68b9      	ldr	r1, [r7, #8]
 8016c1c:	68f8      	ldr	r0, [r7, #12]
 8016c1e:	f000 f963 	bl	8016ee8 <etharp_request>
 8016c22:	4603      	mov	r3, r0
 8016c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d102      	bne.n	8016c34 <etharp_query+0x124>
      return result;
 8016c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016c32:	e096      	b.n	8016d62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d106      	bne.n	8016c48 <etharp_query+0x138>
 8016c3a:	4b4c      	ldr	r3, [pc, #304]	; (8016d6c <etharp_query+0x25c>)
 8016c3c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016c40:	494f      	ldr	r1, [pc, #316]	; (8016d80 <etharp_query+0x270>)
 8016c42:	484c      	ldr	r0, [pc, #304]	; (8016d74 <etharp_query+0x264>)
 8016c44:	f001 fff8 	bl	8018c38 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016c48:	7c7a      	ldrb	r2, [r7, #17]
 8016c4a:	494b      	ldr	r1, [pc, #300]	; (8016d78 <etharp_query+0x268>)
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	440b      	add	r3, r1
 8016c56:	3314      	adds	r3, #20
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	2b01      	cmp	r3, #1
 8016c5c:	d917      	bls.n	8016c8e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016c5e:	4a49      	ldr	r2, [pc, #292]	; (8016d84 <etharp_query+0x274>)
 8016c60:	7c7b      	ldrb	r3, [r7, #17]
 8016c62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016c64:	7c7a      	ldrb	r2, [r7, #17]
 8016c66:	4613      	mov	r3, r2
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	4413      	add	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	3308      	adds	r3, #8
 8016c70:	4a41      	ldr	r2, [pc, #260]	; (8016d78 <etharp_query+0x268>)
 8016c72:	4413      	add	r3, r2
 8016c74:	3304      	adds	r3, #4
 8016c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016c7a:	9200      	str	r2, [sp, #0]
 8016c7c:	697a      	ldr	r2, [r7, #20]
 8016c7e:	6879      	ldr	r1, [r7, #4]
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f001 fc93 	bl	80185ac <ethernet_output>
 8016c86:	4603      	mov	r3, r0
 8016c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c8c:	e067      	b.n	8016d5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c8e:	7c7a      	ldrb	r2, [r7, #17]
 8016c90:	4939      	ldr	r1, [pc, #228]	; (8016d78 <etharp_query+0x268>)
 8016c92:	4613      	mov	r3, r2
 8016c94:	005b      	lsls	r3, r3, #1
 8016c96:	4413      	add	r3, r2
 8016c98:	00db      	lsls	r3, r3, #3
 8016c9a:	440b      	add	r3, r1
 8016c9c:	3314      	adds	r3, #20
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d15c      	bne.n	8016d5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016cac:	e01c      	b.n	8016ce8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016cae:	69fb      	ldr	r3, [r7, #28]
 8016cb0:	895a      	ldrh	r2, [r3, #10]
 8016cb2:	69fb      	ldr	r3, [r7, #28]
 8016cb4:	891b      	ldrh	r3, [r3, #8]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d10a      	bne.n	8016cd0 <etharp_query+0x1c0>
 8016cba:	69fb      	ldr	r3, [r7, #28]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d006      	beq.n	8016cd0 <etharp_query+0x1c0>
 8016cc2:	4b2a      	ldr	r3, [pc, #168]	; (8016d6c <etharp_query+0x25c>)
 8016cc4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016cc8:	492f      	ldr	r1, [pc, #188]	; (8016d88 <etharp_query+0x278>)
 8016cca:	482a      	ldr	r0, [pc, #168]	; (8016d74 <etharp_query+0x264>)
 8016ccc:	f001 ffb4 	bl	8018c38 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016cd0:	69fb      	ldr	r3, [r7, #28]
 8016cd2:	7b1b      	ldrb	r3, [r3, #12]
 8016cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d002      	beq.n	8016ce2 <etharp_query+0x1d2>
        copy_needed = 1;
 8016cdc:	2301      	movs	r3, #1
 8016cde:	61bb      	str	r3, [r7, #24]
        break;
 8016ce0:	e005      	b.n	8016cee <etharp_query+0x1de>
      }
      p = p->next;
 8016ce2:	69fb      	ldr	r3, [r7, #28]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1df      	bne.n	8016cae <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d007      	beq.n	8016d04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016cfa:	200e      	movs	r0, #14
 8016cfc:	f7f6 fae2 	bl	800d2c4 <pbuf_clone>
 8016d00:	61f8      	str	r0, [r7, #28]
 8016d02:	e004      	b.n	8016d0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016d08:	69f8      	ldr	r0, [r7, #28]
 8016d0a:	f7f6 f909 	bl	800cf20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016d0e:	69fb      	ldr	r3, [r7, #28]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d021      	beq.n	8016d58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016d14:	7c7a      	ldrb	r2, [r7, #17]
 8016d16:	4918      	ldr	r1, [pc, #96]	; (8016d78 <etharp_query+0x268>)
 8016d18:	4613      	mov	r3, r2
 8016d1a:	005b      	lsls	r3, r3, #1
 8016d1c:	4413      	add	r3, r2
 8016d1e:	00db      	lsls	r3, r3, #3
 8016d20:	440b      	add	r3, r1
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d00a      	beq.n	8016d3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016d28:	7c7a      	ldrb	r2, [r7, #17]
 8016d2a:	4913      	ldr	r1, [pc, #76]	; (8016d78 <etharp_query+0x268>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7f6 f84b 	bl	800cdd4 <pbuf_free>
      }
      arp_table[i].q = p;
 8016d3e:	7c7a      	ldrb	r2, [r7, #17]
 8016d40:	490d      	ldr	r1, [pc, #52]	; (8016d78 <etharp_query+0x268>)
 8016d42:	4613      	mov	r3, r2
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	4413      	add	r3, r2
 8016d48:	00db      	lsls	r3, r3, #3
 8016d4a:	440b      	add	r3, r1
 8016d4c:	69fa      	ldr	r2, [r7, #28]
 8016d4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016d50:	2300      	movs	r3, #0
 8016d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d56:	e002      	b.n	8016d5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016d58:	23ff      	movs	r3, #255	; 0xff
 8016d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016d5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3728      	adds	r7, #40	; 0x28
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	0801d5e8 	.word	0x0801d5e8
 8016d70:	0801d794 	.word	0x0801d794
 8016d74:	0801d660 	.word	0x0801d660
 8016d78:	20011244 	.word	0x20011244
 8016d7c:	0801d7a4 	.word	0x0801d7a4
 8016d80:	0801d788 	.word	0x0801d788
 8016d84:	20011334 	.word	0x20011334
 8016d88:	0801d7cc 	.word	0x0801d7cc

08016d8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08a      	sub	sp, #40	; 0x28
 8016d90:	af02      	add	r7, sp, #8
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	60b9      	str	r1, [r7, #8]
 8016d96:	607a      	str	r2, [r7, #4]
 8016d98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d106      	bne.n	8016db2 <etharp_raw+0x26>
 8016da4:	4b3a      	ldr	r3, [pc, #232]	; (8016e90 <etharp_raw+0x104>)
 8016da6:	f240 4257 	movw	r2, #1111	; 0x457
 8016daa:	493a      	ldr	r1, [pc, #232]	; (8016e94 <etharp_raw+0x108>)
 8016dac:	483a      	ldr	r0, [pc, #232]	; (8016e98 <etharp_raw+0x10c>)
 8016dae:	f001 ff43 	bl	8018c38 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016db2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016db6:	211c      	movs	r1, #28
 8016db8:	200e      	movs	r0, #14
 8016dba:	f7f5 fd27 	bl	800c80c <pbuf_alloc>
 8016dbe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016dc0:	69bb      	ldr	r3, [r7, #24]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d102      	bne.n	8016dcc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8016dca:	e05d      	b.n	8016e88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	895b      	ldrh	r3, [r3, #10]
 8016dd0:	2b1b      	cmp	r3, #27
 8016dd2:	d806      	bhi.n	8016de2 <etharp_raw+0x56>
 8016dd4:	4b2e      	ldr	r3, [pc, #184]	; (8016e90 <etharp_raw+0x104>)
 8016dd6:	f240 4262 	movw	r2, #1122	; 0x462
 8016dda:	4930      	ldr	r1, [pc, #192]	; (8016e9c <etharp_raw+0x110>)
 8016ddc:	482e      	ldr	r0, [pc, #184]	; (8016e98 <etharp_raw+0x10c>)
 8016dde:	f001 ff2b 	bl	8018c38 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016de2:	69bb      	ldr	r3, [r7, #24]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016de8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7f4 fbbe 	bl	800b56c <lwip_htons>
 8016df0:	4603      	mov	r3, r0
 8016df2:	461a      	mov	r2, r3
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016dfe:	2b06      	cmp	r3, #6
 8016e00:	d006      	beq.n	8016e10 <etharp_raw+0x84>
 8016e02:	4b23      	ldr	r3, [pc, #140]	; (8016e90 <etharp_raw+0x104>)
 8016e04:	f240 4269 	movw	r2, #1129	; 0x469
 8016e08:	4925      	ldr	r1, [pc, #148]	; (8016ea0 <etharp_raw+0x114>)
 8016e0a:	4823      	ldr	r0, [pc, #140]	; (8016e98 <etharp_raw+0x10c>)
 8016e0c:	f001 ff14 	bl	8018c38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	3308      	adds	r3, #8
 8016e14:	2206      	movs	r2, #6
 8016e16:	6839      	ldr	r1, [r7, #0]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f002 f9fd 	bl	8019218 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016e1e:	697b      	ldr	r3, [r7, #20]
 8016e20:	3312      	adds	r3, #18
 8016e22:	2206      	movs	r2, #6
 8016e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e26:	4618      	mov	r0, r3
 8016e28:	f002 f9f6 	bl	8019218 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	330e      	adds	r3, #14
 8016e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e32:	6812      	ldr	r2, [r2, #0]
 8016e34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	3318      	adds	r3, #24
 8016e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e3c:	6812      	ldr	r2, [r2, #0]
 8016e3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016e40:	697b      	ldr	r3, [r7, #20]
 8016e42:	2200      	movs	r2, #0
 8016e44:	701a      	strb	r2, [r3, #0]
 8016e46:	2200      	movs	r2, #0
 8016e48:	f042 0201 	orr.w	r2, r2, #1
 8016e4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	2200      	movs	r2, #0
 8016e52:	f042 0208 	orr.w	r2, r2, #8
 8016e56:	709a      	strb	r2, [r3, #2]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	2206      	movs	r2, #6
 8016e60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016e62:	697b      	ldr	r3, [r7, #20]
 8016e64:	2204      	movs	r2, #4
 8016e66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016e68:	f640 0306 	movw	r3, #2054	; 0x806
 8016e6c:	9300      	str	r3, [sp, #0]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	68ba      	ldr	r2, [r7, #8]
 8016e72:	69b9      	ldr	r1, [r7, #24]
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	f001 fb99 	bl	80185ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016e7a:	69b8      	ldr	r0, [r7, #24]
 8016e7c:	f7f5 ffaa 	bl	800cdd4 <pbuf_free>
  p = NULL;
 8016e80:	2300      	movs	r3, #0
 8016e82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3720      	adds	r7, #32
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	0801d5e8 	.word	0x0801d5e8
 8016e94:	0801d738 	.word	0x0801d738
 8016e98:	0801d660 	.word	0x0801d660
 8016e9c:	0801d7e8 	.word	0x0801d7e8
 8016ea0:	0801d81c 	.word	0x0801d81c

08016ea4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b088      	sub	sp, #32
 8016ea8:	af04      	add	r7, sp, #16
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016ec0:	2201      	movs	r2, #1
 8016ec2:	9203      	str	r2, [sp, #12]
 8016ec4:	68ba      	ldr	r2, [r7, #8]
 8016ec6:	9202      	str	r2, [sp, #8]
 8016ec8:	4a06      	ldr	r2, [pc, #24]	; (8016ee4 <etharp_request_dst+0x40>)
 8016eca:	9201      	str	r2, [sp, #4]
 8016ecc:	9300      	str	r3, [sp, #0]
 8016ece:	4603      	mov	r3, r0
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	68f8      	ldr	r0, [r7, #12]
 8016ed4:	f7ff ff5a 	bl	8016d8c <etharp_raw>
 8016ed8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3710      	adds	r7, #16
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	08027f3c 	.word	0x08027f3c

08016ee8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016ef2:	4a05      	ldr	r2, [pc, #20]	; (8016f08 <etharp_request+0x20>)
 8016ef4:	6839      	ldr	r1, [r7, #0]
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f7ff ffd4 	bl	8016ea4 <etharp_request_dst>
 8016efc:	4603      	mov	r3, r0
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3708      	adds	r7, #8
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
 8016f06:	bf00      	nop
 8016f08:	08027f34 	.word	0x08027f34

08016f0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08e      	sub	sp, #56	; 0x38
 8016f10:	af04      	add	r7, sp, #16
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016f16:	4b79      	ldr	r3, [pc, #484]	; (80170fc <icmp_input+0x1f0>)
 8016f18:	689b      	ldr	r3, [r3, #8]
 8016f1a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	f003 030f 	and.w	r3, r3, #15
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f2e:	2b13      	cmp	r3, #19
 8016f30:	f240 80cd 	bls.w	80170ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	895b      	ldrh	r3, [r3, #10]
 8016f38:	2b03      	cmp	r3, #3
 8016f3a:	f240 80ca 	bls.w	80170d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016f48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f000 80b7 	beq.w	80170c0 <icmp_input+0x1b4>
 8016f52:	2b08      	cmp	r3, #8
 8016f54:	f040 80b7 	bne.w	80170c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016f58:	4b69      	ldr	r3, [pc, #420]	; (8017100 <icmp_input+0x1f4>)
 8016f5a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f5c:	4b67      	ldr	r3, [pc, #412]	; (80170fc <icmp_input+0x1f0>)
 8016f5e:	695b      	ldr	r3, [r3, #20]
 8016f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f64:	2be0      	cmp	r3, #224	; 0xe0
 8016f66:	f000 80bb 	beq.w	80170e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016f6a:	4b64      	ldr	r3, [pc, #400]	; (80170fc <icmp_input+0x1f0>)
 8016f6c:	695b      	ldr	r3, [r3, #20]
 8016f6e:	4a63      	ldr	r2, [pc, #396]	; (80170fc <icmp_input+0x1f0>)
 8016f70:	6812      	ldr	r2, [r2, #0]
 8016f72:	4611      	mov	r1, r2
 8016f74:	4618      	mov	r0, r3
 8016f76:	f000 fc0b 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	f040 80b1 	bne.w	80170e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	891b      	ldrh	r3, [r3, #8]
 8016f86:	2b07      	cmp	r3, #7
 8016f88:	f240 80a5 	bls.w	80170d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f8e:	330e      	adds	r3, #14
 8016f90:	4619      	mov	r1, r3
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f7f5 fe88 	bl	800cca8 <pbuf_add_header>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d04b      	beq.n	8017036 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	891a      	ldrh	r2, [r3, #8]
 8016fa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fa4:	4413      	add	r3, r2
 8016fa6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	891b      	ldrh	r3, [r3, #8]
 8016fac:	8b7a      	ldrh	r2, [r7, #26]
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	f0c0 809a 	bcc.w	80170e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016fb4:	8b7b      	ldrh	r3, [r7, #26]
 8016fb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fba:	4619      	mov	r1, r3
 8016fbc:	200e      	movs	r0, #14
 8016fbe:	f7f5 fc25 	bl	800c80c <pbuf_alloc>
 8016fc2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	f000 8090 	beq.w	80170ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016fcc:	697b      	ldr	r3, [r7, #20]
 8016fce:	895b      	ldrh	r3, [r3, #10]
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fd4:	3308      	adds	r3, #8
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d203      	bcs.n	8016fe2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016fda:	6978      	ldr	r0, [r7, #20]
 8016fdc:	f7f5 fefa 	bl	800cdd4 <pbuf_free>
          goto icmperr;
 8016fe0:	e085      	b.n	80170ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fea:	4618      	mov	r0, r3
 8016fec:	f002 f914 	bl	8019218 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	6978      	ldr	r0, [r7, #20]
 8016ff6:	f7f5 fe67 	bl	800ccc8 <pbuf_remove_header>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d009      	beq.n	8017014 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017000:	4b40      	ldr	r3, [pc, #256]	; (8017104 <icmp_input+0x1f8>)
 8017002:	22b6      	movs	r2, #182	; 0xb6
 8017004:	4940      	ldr	r1, [pc, #256]	; (8017108 <icmp_input+0x1fc>)
 8017006:	4841      	ldr	r0, [pc, #260]	; (801710c <icmp_input+0x200>)
 8017008:	f001 fe16 	bl	8018c38 <iprintf>
          pbuf_free(r);
 801700c:	6978      	ldr	r0, [r7, #20]
 801700e:	f7f5 fee1 	bl	800cdd4 <pbuf_free>
          goto icmperr;
 8017012:	e06c      	b.n	80170ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017014:	6879      	ldr	r1, [r7, #4]
 8017016:	6978      	ldr	r0, [r7, #20]
 8017018:	f7f6 f810 	bl	800d03c <pbuf_copy>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d003      	beq.n	801702a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017022:	6978      	ldr	r0, [r7, #20]
 8017024:	f7f5 fed6 	bl	800cdd4 <pbuf_free>
          goto icmperr;
 8017028:	e061      	b.n	80170ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f7f5 fed2 	bl	800cdd4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	607b      	str	r3, [r7, #4]
 8017034:	e00f      	b.n	8017056 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017038:	330e      	adds	r3, #14
 801703a:	4619      	mov	r1, r3
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f7f5 fe43 	bl	800ccc8 <pbuf_remove_header>
 8017042:	4603      	mov	r3, r0
 8017044:	2b00      	cmp	r3, #0
 8017046:	d006      	beq.n	8017056 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017048:	4b2e      	ldr	r3, [pc, #184]	; (8017104 <icmp_input+0x1f8>)
 801704a:	22c7      	movs	r2, #199	; 0xc7
 801704c:	4930      	ldr	r1, [pc, #192]	; (8017110 <icmp_input+0x204>)
 801704e:	482f      	ldr	r0, [pc, #188]	; (801710c <icmp_input+0x200>)
 8017050:	f001 fdf2 	bl	8018c38 <iprintf>
          goto icmperr;
 8017054:	e04b      	b.n	80170ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801705c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801705e:	4619      	mov	r1, r3
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f7f5 fe21 	bl	800cca8 <pbuf_add_header>
 8017066:	4603      	mov	r3, r0
 8017068:	2b00      	cmp	r3, #0
 801706a:	d12b      	bne.n	80170c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017072:	69fb      	ldr	r3, [r7, #28]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801707a:	4b20      	ldr	r3, [pc, #128]	; (80170fc <icmp_input+0x1f0>)
 801707c:	691a      	ldr	r2, [r3, #16]
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	2200      	movs	r2, #0
 8017086:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	2200      	movs	r2, #0
 801708c:	709a      	strb	r2, [r3, #2]
 801708e:	2200      	movs	r2, #0
 8017090:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	22ff      	movs	r2, #255	; 0xff
 8017096:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2200      	movs	r2, #0
 801709c:	729a      	strb	r2, [r3, #10]
 801709e:	2200      	movs	r2, #0
 80170a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	9302      	str	r3, [sp, #8]
 80170a6:	2301      	movs	r3, #1
 80170a8:	9301      	str	r3, [sp, #4]
 80170aa:	2300      	movs	r3, #0
 80170ac:	9300      	str	r3, [sp, #0]
 80170ae:	23ff      	movs	r3, #255	; 0xff
 80170b0:	2200      	movs	r2, #0
 80170b2:	69f9      	ldr	r1, [r7, #28]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 fa93 	bl	80175e0 <ip4_output_if>
 80170ba:	4603      	mov	r3, r0
 80170bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80170be:	e001      	b.n	80170c4 <icmp_input+0x1b8>
      break;
 80170c0:	bf00      	nop
 80170c2:	e000      	b.n	80170c6 <icmp_input+0x1ba>
      break;
 80170c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f7f5 fe84 	bl	800cdd4 <pbuf_free>
  return;
 80170cc:	e013      	b.n	80170f6 <icmp_input+0x1ea>
    goto lenerr;
 80170ce:	bf00      	nop
 80170d0:	e002      	b.n	80170d8 <icmp_input+0x1cc>
    goto lenerr;
 80170d2:	bf00      	nop
 80170d4:	e000      	b.n	80170d8 <icmp_input+0x1cc>
        goto lenerr;
 80170d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7f5 fe7b 	bl	800cdd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80170de:	e00a      	b.n	80170f6 <icmp_input+0x1ea>
        goto icmperr;
 80170e0:	bf00      	nop
 80170e2:	e004      	b.n	80170ee <icmp_input+0x1e2>
        goto icmperr;
 80170e4:	bf00      	nop
 80170e6:	e002      	b.n	80170ee <icmp_input+0x1e2>
          goto icmperr;
 80170e8:	bf00      	nop
 80170ea:	e000      	b.n	80170ee <icmp_input+0x1e2>
          goto icmperr;
 80170ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	f7f5 fe70 	bl	800cdd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80170f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80170f6:	3728      	adds	r7, #40	; 0x28
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	2000da3c 	.word	0x2000da3c
 8017100:	2000da50 	.word	0x2000da50
 8017104:	0801d860 	.word	0x0801d860
 8017108:	0801d898 	.word	0x0801d898
 801710c:	0801d8d0 	.word	0x0801d8d0
 8017110:	0801d8f8 	.word	0x0801d8f8

08017114 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
 801711c:	460b      	mov	r3, r1
 801711e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017120:	78fb      	ldrb	r3, [r7, #3]
 8017122:	461a      	mov	r2, r3
 8017124:	2103      	movs	r1, #3
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 f814 	bl	8017154 <icmp_send_response>
}
 801712c:	bf00      	nop
 801712e:	3708      	adds	r7, #8
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b082      	sub	sp, #8
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	460b      	mov	r3, r1
 801713e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017140:	78fb      	ldrb	r3, [r7, #3]
 8017142:	461a      	mov	r2, r3
 8017144:	210b      	movs	r1, #11
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 f804 	bl	8017154 <icmp_send_response>
}
 801714c:	bf00      	nop
 801714e:	3708      	adds	r7, #8
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b08c      	sub	sp, #48	; 0x30
 8017158:	af04      	add	r7, sp, #16
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	460b      	mov	r3, r1
 801715e:	70fb      	strb	r3, [r7, #3]
 8017160:	4613      	mov	r3, r2
 8017162:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017164:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017168:	2124      	movs	r1, #36	; 0x24
 801716a:	2022      	movs	r0, #34	; 0x22
 801716c:	f7f5 fb4e 	bl	800c80c <pbuf_alloc>
 8017170:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017172:	69fb      	ldr	r3, [r7, #28]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d04c      	beq.n	8017212 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017178:	69fb      	ldr	r3, [r7, #28]
 801717a:	895b      	ldrh	r3, [r3, #10]
 801717c:	2b23      	cmp	r3, #35	; 0x23
 801717e:	d806      	bhi.n	801718e <icmp_send_response+0x3a>
 8017180:	4b26      	ldr	r3, [pc, #152]	; (801721c <icmp_send_response+0xc8>)
 8017182:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017186:	4926      	ldr	r1, [pc, #152]	; (8017220 <icmp_send_response+0xcc>)
 8017188:	4826      	ldr	r0, [pc, #152]	; (8017224 <icmp_send_response+0xd0>)
 801718a:	f001 fd55 	bl	8018c38 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017194:	69fb      	ldr	r3, [r7, #28]
 8017196:	685b      	ldr	r3, [r3, #4]
 8017198:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	78fa      	ldrb	r2, [r7, #3]
 801719e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	78ba      	ldrb	r2, [r7, #2]
 80171a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	2200      	movs	r2, #0
 80171aa:	711a      	strb	r2, [r3, #4]
 80171ac:	2200      	movs	r2, #0
 80171ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	2200      	movs	r2, #0
 80171b4:	719a      	strb	r2, [r3, #6]
 80171b6:	2200      	movs	r2, #0
 80171b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	f103 0008 	add.w	r0, r3, #8
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	221c      	movs	r2, #28
 80171c8:	4619      	mov	r1, r3
 80171ca:	f002 f825 	bl	8019218 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80171ce:	69bb      	ldr	r3, [r7, #24]
 80171d0:	68db      	ldr	r3, [r3, #12]
 80171d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80171d4:	f107 030c 	add.w	r3, r7, #12
 80171d8:	4618      	mov	r0, r3
 80171da:	f000 f825 	bl	8017228 <ip4_route>
 80171de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d011      	beq.n	801720a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	2200      	movs	r2, #0
 80171ea:	709a      	strb	r2, [r3, #2]
 80171ec:	2200      	movs	r2, #0
 80171ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80171f0:	f107 020c 	add.w	r2, r7, #12
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	9302      	str	r3, [sp, #8]
 80171f8:	2301      	movs	r3, #1
 80171fa:	9301      	str	r3, [sp, #4]
 80171fc:	2300      	movs	r3, #0
 80171fe:	9300      	str	r3, [sp, #0]
 8017200:	23ff      	movs	r3, #255	; 0xff
 8017202:	2100      	movs	r1, #0
 8017204:	69f8      	ldr	r0, [r7, #28]
 8017206:	f000 f9eb 	bl	80175e0 <ip4_output_if>
  }
  pbuf_free(q);
 801720a:	69f8      	ldr	r0, [r7, #28]
 801720c:	f7f5 fde2 	bl	800cdd4 <pbuf_free>
 8017210:	e000      	b.n	8017214 <icmp_send_response+0xc0>
    return;
 8017212:	bf00      	nop
}
 8017214:	3720      	adds	r7, #32
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop
 801721c:	0801d860 	.word	0x0801d860
 8017220:	0801d92c 	.word	0x0801d92c
 8017224:	0801d8d0 	.word	0x0801d8d0

08017228 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017228:	b480      	push	{r7}
 801722a:	b085      	sub	sp, #20
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017230:	4b33      	ldr	r3, [pc, #204]	; (8017300 <ip4_route+0xd8>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	60fb      	str	r3, [r7, #12]
 8017236:	e036      	b.n	80172a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801723e:	f003 0301 	and.w	r3, r3, #1
 8017242:	b2db      	uxtb	r3, r3
 8017244:	2b00      	cmp	r3, #0
 8017246:	d02b      	beq.n	80172a0 <ip4_route+0x78>
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801724e:	089b      	lsrs	r3, r3, #2
 8017250:	f003 0301 	and.w	r3, r3, #1
 8017254:	b2db      	uxtb	r3, r3
 8017256:	2b00      	cmp	r3, #0
 8017258:	d022      	beq.n	80172a0 <ip4_route+0x78>
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	3304      	adds	r3, #4
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d01d      	beq.n	80172a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	3304      	adds	r3, #4
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	405a      	eors	r2, r3
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	3308      	adds	r3, #8
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	4013      	ands	r3, r2
 8017278:	2b00      	cmp	r3, #0
 801727a:	d101      	bne.n	8017280 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	e038      	b.n	80172f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017286:	f003 0302 	and.w	r3, r3, #2
 801728a:	2b00      	cmp	r3, #0
 801728c:	d108      	bne.n	80172a0 <ip4_route+0x78>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	330c      	adds	r3, #12
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	429a      	cmp	r2, r3
 801729a:	d101      	bne.n	80172a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	e028      	b.n	80172f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	60fb      	str	r3, [r7, #12]
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d1c5      	bne.n	8017238 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80172ac:	4b15      	ldr	r3, [pc, #84]	; (8017304 <ip4_route+0xdc>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d01a      	beq.n	80172ea <ip4_route+0xc2>
 80172b4:	4b13      	ldr	r3, [pc, #76]	; (8017304 <ip4_route+0xdc>)
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80172bc:	f003 0301 	and.w	r3, r3, #1
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d012      	beq.n	80172ea <ip4_route+0xc2>
 80172c4:	4b0f      	ldr	r3, [pc, #60]	; (8017304 <ip4_route+0xdc>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80172cc:	f003 0304 	and.w	r3, r3, #4
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d00a      	beq.n	80172ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172d4:	4b0b      	ldr	r3, [pc, #44]	; (8017304 <ip4_route+0xdc>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	3304      	adds	r3, #4
 80172da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d004      	beq.n	80172ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	2b7f      	cmp	r3, #127	; 0x7f
 80172e8:	d101      	bne.n	80172ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80172ea:	2300      	movs	r3, #0
 80172ec:	e001      	b.n	80172f2 <ip4_route+0xca>
  }

  return netif_default;
 80172ee:	4b05      	ldr	r3, [pc, #20]	; (8017304 <ip4_route+0xdc>)
 80172f0:	681b      	ldr	r3, [r3, #0]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3714      	adds	r7, #20
 80172f6:	46bd      	mov	sp, r7
 80172f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop
 8017300:	200111a4 	.word	0x200111a4
 8017304:	200111a8 	.word	0x200111a8

08017308 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017316:	f003 0301 	and.w	r3, r3, #1
 801731a:	b2db      	uxtb	r3, r3
 801731c:	2b00      	cmp	r3, #0
 801731e:	d016      	beq.n	801734e <ip4_input_accept+0x46>
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	3304      	adds	r3, #4
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d011      	beq.n	801734e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801732a:	4b0b      	ldr	r3, [pc, #44]	; (8017358 <ip4_input_accept+0x50>)
 801732c:	695a      	ldr	r2, [r3, #20]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	3304      	adds	r3, #4
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	429a      	cmp	r2, r3
 8017336:	d008      	beq.n	801734a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017338:	4b07      	ldr	r3, [pc, #28]	; (8017358 <ip4_input_accept+0x50>)
 801733a:	695b      	ldr	r3, [r3, #20]
 801733c:	6879      	ldr	r1, [r7, #4]
 801733e:	4618      	mov	r0, r3
 8017340:	f000 fa26 	bl	8017790 <ip4_addr_isbroadcast_u32>
 8017344:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017346:	2b00      	cmp	r3, #0
 8017348:	d001      	beq.n	801734e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801734a:	2301      	movs	r3, #1
 801734c:	e000      	b.n	8017350 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	2000da3c 	.word	0x2000da3c

0801735c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b088      	sub	sp, #32
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017366:	2301      	movs	r3, #1
 8017368:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	091b      	lsrs	r3, r3, #4
 8017376:	b2db      	uxtb	r3, r3
 8017378:	2b04      	cmp	r3, #4
 801737a:	d004      	beq.n	8017386 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7f5 fd29 	bl	800cdd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017382:	2300      	movs	r3, #0
 8017384:	e123      	b.n	80175ce <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017386:	69fb      	ldr	r3, [r7, #28]
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	f003 030f 	and.w	r3, r3, #15
 801738e:	b2db      	uxtb	r3, r3
 8017390:	009b      	lsls	r3, r3, #2
 8017392:	b2db      	uxtb	r3, r3
 8017394:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	885b      	ldrh	r3, [r3, #2]
 801739a:	b29b      	uxth	r3, r3
 801739c:	4618      	mov	r0, r3
 801739e:	f7f4 f8e5 	bl	800b56c <lwip_htons>
 80173a2:	4603      	mov	r3, r0
 80173a4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	891b      	ldrh	r3, [r3, #8]
 80173aa:	8a3a      	ldrh	r2, [r7, #16]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d204      	bcs.n	80173ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80173b0:	8a3b      	ldrh	r3, [r7, #16]
 80173b2:	4619      	mov	r1, r3
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f7f5 fb87 	bl	800cac8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	895b      	ldrh	r3, [r3, #10]
 80173be:	8a7a      	ldrh	r2, [r7, #18]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d807      	bhi.n	80173d4 <ip4_input+0x78>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	891b      	ldrh	r3, [r3, #8]
 80173c8:	8a3a      	ldrh	r2, [r7, #16]
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d802      	bhi.n	80173d4 <ip4_input+0x78>
 80173ce:	8a7b      	ldrh	r3, [r7, #18]
 80173d0:	2b13      	cmp	r3, #19
 80173d2:	d804      	bhi.n	80173de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f7f5 fcfd 	bl	800cdd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80173da:	2300      	movs	r3, #0
 80173dc:	e0f7      	b.n	80175ce <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	691b      	ldr	r3, [r3, #16]
 80173e2:	4a7d      	ldr	r2, [pc, #500]	; (80175d8 <ip4_input+0x27c>)
 80173e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	68db      	ldr	r3, [r3, #12]
 80173ea:	4a7b      	ldr	r2, [pc, #492]	; (80175d8 <ip4_input+0x27c>)
 80173ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173ee:	4b7a      	ldr	r3, [pc, #488]	; (80175d8 <ip4_input+0x27c>)
 80173f0:	695b      	ldr	r3, [r3, #20]
 80173f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173f6:	2be0      	cmp	r3, #224	; 0xe0
 80173f8:	d112      	bne.n	8017420 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017400:	f003 0301 	and.w	r3, r3, #1
 8017404:	b2db      	uxtb	r3, r3
 8017406:	2b00      	cmp	r3, #0
 8017408:	d007      	beq.n	801741a <ip4_input+0xbe>
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	3304      	adds	r3, #4
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d002      	beq.n	801741a <ip4_input+0xbe>
      netif = inp;
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	61bb      	str	r3, [r7, #24]
 8017418:	e02a      	b.n	8017470 <ip4_input+0x114>
    } else {
      netif = NULL;
 801741a:	2300      	movs	r3, #0
 801741c:	61bb      	str	r3, [r7, #24]
 801741e:	e027      	b.n	8017470 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017420:	6838      	ldr	r0, [r7, #0]
 8017422:	f7ff ff71 	bl	8017308 <ip4_input_accept>
 8017426:	4603      	mov	r3, r0
 8017428:	2b00      	cmp	r3, #0
 801742a:	d002      	beq.n	8017432 <ip4_input+0xd6>
      netif = inp;
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	61bb      	str	r3, [r7, #24]
 8017430:	e01e      	b.n	8017470 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017432:	2300      	movs	r3, #0
 8017434:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017436:	4b68      	ldr	r3, [pc, #416]	; (80175d8 <ip4_input+0x27c>)
 8017438:	695b      	ldr	r3, [r3, #20]
 801743a:	b2db      	uxtb	r3, r3
 801743c:	2b7f      	cmp	r3, #127	; 0x7f
 801743e:	d017      	beq.n	8017470 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017440:	4b66      	ldr	r3, [pc, #408]	; (80175dc <ip4_input+0x280>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	61bb      	str	r3, [r7, #24]
 8017446:	e00e      	b.n	8017466 <ip4_input+0x10a>
          if (netif == inp) {
 8017448:	69ba      	ldr	r2, [r7, #24]
 801744a:	683b      	ldr	r3, [r7, #0]
 801744c:	429a      	cmp	r2, r3
 801744e:	d006      	beq.n	801745e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017450:	69b8      	ldr	r0, [r7, #24]
 8017452:	f7ff ff59 	bl	8017308 <ip4_input_accept>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d108      	bne.n	801746e <ip4_input+0x112>
 801745c:	e000      	b.n	8017460 <ip4_input+0x104>
            continue;
 801745e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017460:	69bb      	ldr	r3, [r7, #24]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	61bb      	str	r3, [r7, #24]
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d1ed      	bne.n	8017448 <ip4_input+0xec>
 801746c:	e000      	b.n	8017470 <ip4_input+0x114>
            break;
 801746e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d111      	bne.n	801749a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017476:	69fb      	ldr	r3, [r7, #28]
 8017478:	7a5b      	ldrb	r3, [r3, #9]
 801747a:	2b11      	cmp	r3, #17
 801747c:	d10d      	bne.n	801749a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801747e:	8a7b      	ldrh	r3, [r7, #18]
 8017480:	69fa      	ldr	r2, [r7, #28]
 8017482:	4413      	add	r3, r2
 8017484:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	885b      	ldrh	r3, [r3, #2]
 801748a:	b29b      	uxth	r3, r3
 801748c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017490:	d103      	bne.n	801749a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d017      	beq.n	80174d0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80174a0:	4b4d      	ldr	r3, [pc, #308]	; (80175d8 <ip4_input+0x27c>)
 80174a2:	691b      	ldr	r3, [r3, #16]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d013      	beq.n	80174d0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80174a8:	4b4b      	ldr	r3, [pc, #300]	; (80175d8 <ip4_input+0x27c>)
 80174aa:	691b      	ldr	r3, [r3, #16]
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f000 f96e 	bl	8017790 <ip4_addr_isbroadcast_u32>
 80174b4:	4603      	mov	r3, r0
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d105      	bne.n	80174c6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80174ba:	4b47      	ldr	r3, [pc, #284]	; (80175d8 <ip4_input+0x27c>)
 80174bc:	691b      	ldr	r3, [r3, #16]
 80174be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80174c2:	2be0      	cmp	r3, #224	; 0xe0
 80174c4:	d104      	bne.n	80174d0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80174c6:	6878      	ldr	r0, [r7, #4]
 80174c8:	f7f5 fc84 	bl	800cdd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	e07e      	b.n	80175ce <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80174d0:	69bb      	ldr	r3, [r7, #24]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d104      	bne.n	80174e0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f7f5 fc7c 	bl	800cdd4 <pbuf_free>
    return ERR_OK;
 80174dc:	2300      	movs	r3, #0
 80174de:	e076      	b.n	80175ce <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	88db      	ldrh	r3, [r3, #6]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	461a      	mov	r2, r3
 80174e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80174ec:	4013      	ands	r3, r2
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d00b      	beq.n	801750a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 fc92 	bl	8017e1c <ip4_reass>
 80174f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d101      	bne.n	8017504 <ip4_input+0x1a8>
      return ERR_OK;
 8017500:	2300      	movs	r3, #0
 8017502:	e064      	b.n	80175ce <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	685b      	ldr	r3, [r3, #4]
 8017508:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801750a:	4a33      	ldr	r2, [pc, #204]	; (80175d8 <ip4_input+0x27c>)
 801750c:	69bb      	ldr	r3, [r7, #24]
 801750e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017510:	4a31      	ldr	r2, [pc, #196]	; (80175d8 <ip4_input+0x27c>)
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017516:	4a30      	ldr	r2, [pc, #192]	; (80175d8 <ip4_input+0x27c>)
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	f003 030f 	and.w	r3, r3, #15
 8017524:	b2db      	uxtb	r3, r3
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	b2db      	uxtb	r3, r3
 801752a:	b29a      	uxth	r2, r3
 801752c:	4b2a      	ldr	r3, [pc, #168]	; (80175d8 <ip4_input+0x27c>)
 801752e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017530:	8a7b      	ldrh	r3, [r7, #18]
 8017532:	4619      	mov	r1, r3
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7f5 fbc7 	bl	800ccc8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	7a5b      	ldrb	r3, [r3, #9]
 801753e:	2b11      	cmp	r3, #17
 8017540:	d006      	beq.n	8017550 <ip4_input+0x1f4>
 8017542:	2b11      	cmp	r3, #17
 8017544:	dc13      	bgt.n	801756e <ip4_input+0x212>
 8017546:	2b01      	cmp	r3, #1
 8017548:	d00c      	beq.n	8017564 <ip4_input+0x208>
 801754a:	2b06      	cmp	r3, #6
 801754c:	d005      	beq.n	801755a <ip4_input+0x1fe>
 801754e:	e00e      	b.n	801756e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7fc fade 	bl	8013b14 <udp_input>
        break;
 8017558:	e026      	b.n	80175a8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801755a:	6839      	ldr	r1, [r7, #0]
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f7f7 fe97 	bl	800f290 <tcp_input>
        break;
 8017562:	e021      	b.n	80175a8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017564:	6839      	ldr	r1, [r7, #0]
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f7ff fcd0 	bl	8016f0c <icmp_input>
        break;
 801756c:	e01c      	b.n	80175a8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801756e:	4b1a      	ldr	r3, [pc, #104]	; (80175d8 <ip4_input+0x27c>)
 8017570:	695b      	ldr	r3, [r3, #20]
 8017572:	69b9      	ldr	r1, [r7, #24]
 8017574:	4618      	mov	r0, r3
 8017576:	f000 f90b 	bl	8017790 <ip4_addr_isbroadcast_u32>
 801757a:	4603      	mov	r3, r0
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10f      	bne.n	80175a0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017580:	4b15      	ldr	r3, [pc, #84]	; (80175d8 <ip4_input+0x27c>)
 8017582:	695b      	ldr	r3, [r3, #20]
 8017584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017588:	2be0      	cmp	r3, #224	; 0xe0
 801758a:	d009      	beq.n	80175a0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801758c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017590:	4619      	mov	r1, r3
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7f5 fc0b 	bl	800cdae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017598:	2102      	movs	r1, #2
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f7ff fdba 	bl	8017114 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7f5 fc17 	bl	800cdd4 <pbuf_free>
        break;
 80175a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80175a8:	4b0b      	ldr	r3, [pc, #44]	; (80175d8 <ip4_input+0x27c>)
 80175aa:	2200      	movs	r2, #0
 80175ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80175ae:	4b0a      	ldr	r3, [pc, #40]	; (80175d8 <ip4_input+0x27c>)
 80175b0:	2200      	movs	r2, #0
 80175b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80175b4:	4b08      	ldr	r3, [pc, #32]	; (80175d8 <ip4_input+0x27c>)
 80175b6:	2200      	movs	r2, #0
 80175b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80175ba:	4b07      	ldr	r3, [pc, #28]	; (80175d8 <ip4_input+0x27c>)
 80175bc:	2200      	movs	r2, #0
 80175be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80175c0:	4b05      	ldr	r3, [pc, #20]	; (80175d8 <ip4_input+0x27c>)
 80175c2:	2200      	movs	r2, #0
 80175c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80175c6:	4b04      	ldr	r3, [pc, #16]	; (80175d8 <ip4_input+0x27c>)
 80175c8:	2200      	movs	r2, #0
 80175ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80175cc:	2300      	movs	r3, #0
}
 80175ce:	4618      	mov	r0, r3
 80175d0:	3720      	adds	r7, #32
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bd80      	pop	{r7, pc}
 80175d6:	bf00      	nop
 80175d8:	2000da3c 	.word	0x2000da3c
 80175dc:	200111a4 	.word	0x200111a4

080175e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b08a      	sub	sp, #40	; 0x28
 80175e4:	af04      	add	r7, sp, #16
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	60b9      	str	r1, [r7, #8]
 80175ea:	607a      	str	r2, [r7, #4]
 80175ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d009      	beq.n	801760c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d003      	beq.n	8017606 <ip4_output_if+0x26>
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d102      	bne.n	801760c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017608:	3304      	adds	r3, #4
 801760a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801760c:	78fa      	ldrb	r2, [r7, #3]
 801760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017610:	9302      	str	r3, [sp, #8]
 8017612:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017616:	9301      	str	r3, [sp, #4]
 8017618:	f897 3020 	ldrb.w	r3, [r7, #32]
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	4613      	mov	r3, r2
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	6979      	ldr	r1, [r7, #20]
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f000 f805 	bl	8017634 <ip4_output_if_src>
 801762a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801762c:	4618      	mov	r0, r3
 801762e:	3718      	adds	r7, #24
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}

08017634 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b088      	sub	sp, #32
 8017638:	af00      	add	r7, sp, #0
 801763a:	60f8      	str	r0, [r7, #12]
 801763c:	60b9      	str	r1, [r7, #8]
 801763e:	607a      	str	r2, [r7, #4]
 8017640:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	7b9b      	ldrb	r3, [r3, #14]
 8017646:	2b01      	cmp	r3, #1
 8017648:	d006      	beq.n	8017658 <ip4_output_if_src+0x24>
 801764a:	4b4b      	ldr	r3, [pc, #300]	; (8017778 <ip4_output_if_src+0x144>)
 801764c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017650:	494a      	ldr	r1, [pc, #296]	; (801777c <ip4_output_if_src+0x148>)
 8017652:	484b      	ldr	r0, [pc, #300]	; (8017780 <ip4_output_if_src+0x14c>)
 8017654:	f001 faf0 	bl	8018c38 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d060      	beq.n	8017720 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801765e:	2314      	movs	r3, #20
 8017660:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017662:	2114      	movs	r1, #20
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f7f5 fb1f 	bl	800cca8 <pbuf_add_header>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d002      	beq.n	8017676 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017670:	f06f 0301 	mvn.w	r3, #1
 8017674:	e07c      	b.n	8017770 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	895b      	ldrh	r3, [r3, #10]
 8017680:	2b13      	cmp	r3, #19
 8017682:	d806      	bhi.n	8017692 <ip4_output_if_src+0x5e>
 8017684:	4b3c      	ldr	r3, [pc, #240]	; (8017778 <ip4_output_if_src+0x144>)
 8017686:	f44f 7262 	mov.w	r2, #904	; 0x388
 801768a:	493e      	ldr	r1, [pc, #248]	; (8017784 <ip4_output_if_src+0x150>)
 801768c:	483c      	ldr	r0, [pc, #240]	; (8017780 <ip4_output_if_src+0x14c>)
 801768e:	f001 fad3 	bl	8018c38 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017692:	69fb      	ldr	r3, [r7, #28]
 8017694:	78fa      	ldrb	r2, [r7, #3]
 8017696:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017698:	69fb      	ldr	r3, [r7, #28]
 801769a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801769e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	69fb      	ldr	r3, [r7, #28]
 80176a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80176a8:	8b7b      	ldrh	r3, [r7, #26]
 80176aa:	089b      	lsrs	r3, r3, #2
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176b4:	b2da      	uxtb	r2, r3
 80176b6:	69fb      	ldr	r3, [r7, #28]
 80176b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80176c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	891b      	ldrh	r3, [r3, #8]
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7f3 ff50 	bl	800b56c <lwip_htons>
 80176cc:	4603      	mov	r3, r0
 80176ce:	461a      	mov	r2, r3
 80176d0:	69fb      	ldr	r3, [r7, #28]
 80176d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80176d4:	69fb      	ldr	r3, [r7, #28]
 80176d6:	2200      	movs	r2, #0
 80176d8:	719a      	strb	r2, [r3, #6]
 80176da:	2200      	movs	r2, #0
 80176dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80176de:	4b2a      	ldr	r3, [pc, #168]	; (8017788 <ip4_output_if_src+0x154>)
 80176e0:	881b      	ldrh	r3, [r3, #0]
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7f3 ff42 	bl	800b56c <lwip_htons>
 80176e8:	4603      	mov	r3, r0
 80176ea:	461a      	mov	r2, r3
 80176ec:	69fb      	ldr	r3, [r7, #28]
 80176ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80176f0:	4b25      	ldr	r3, [pc, #148]	; (8017788 <ip4_output_if_src+0x154>)
 80176f2:	881b      	ldrh	r3, [r3, #0]
 80176f4:	3301      	adds	r3, #1
 80176f6:	b29a      	uxth	r2, r3
 80176f8:	4b23      	ldr	r3, [pc, #140]	; (8017788 <ip4_output_if_src+0x154>)
 80176fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d104      	bne.n	801770c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017702:	4b22      	ldr	r3, [pc, #136]	; (801778c <ip4_output_if_src+0x158>)
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	69fb      	ldr	r3, [r7, #28]
 8017708:	60da      	str	r2, [r3, #12]
 801770a:	e003      	b.n	8017714 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	69fb      	ldr	r3, [r7, #28]
 8017712:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017714:	69fb      	ldr	r3, [r7, #28]
 8017716:	2200      	movs	r2, #0
 8017718:	729a      	strb	r2, [r3, #10]
 801771a:	2200      	movs	r2, #0
 801771c:	72da      	strb	r2, [r3, #11]
 801771e:	e00f      	b.n	8017740 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	895b      	ldrh	r3, [r3, #10]
 8017724:	2b13      	cmp	r3, #19
 8017726:	d802      	bhi.n	801772e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017728:	f06f 0301 	mvn.w	r3, #1
 801772c:	e020      	b.n	8017770 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017734:	69fb      	ldr	r3, [r7, #28]
 8017736:	691b      	ldr	r3, [r3, #16]
 8017738:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801773a:	f107 0314 	add.w	r3, r7, #20
 801773e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017744:	2b00      	cmp	r3, #0
 8017746:	d00c      	beq.n	8017762 <ip4_output_if_src+0x12e>
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	891a      	ldrh	r2, [r3, #8]
 801774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801774e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017750:	429a      	cmp	r2, r3
 8017752:	d906      	bls.n	8017762 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017758:	68f8      	ldr	r0, [r7, #12]
 801775a:	f000 fd53 	bl	8018204 <ip4_frag>
 801775e:	4603      	mov	r3, r0
 8017760:	e006      	b.n	8017770 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017764:	695b      	ldr	r3, [r3, #20]
 8017766:	687a      	ldr	r2, [r7, #4]
 8017768:	68f9      	ldr	r1, [r7, #12]
 801776a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801776c:	4798      	blx	r3
 801776e:	4603      	mov	r3, r0
}
 8017770:	4618      	mov	r0, r3
 8017772:	3720      	adds	r7, #32
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}
 8017778:	0801d958 	.word	0x0801d958
 801777c:	0801d98c 	.word	0x0801d98c
 8017780:	0801d998 	.word	0x0801d998
 8017784:	0801d9c0 	.word	0x0801d9c0
 8017788:	20011336 	.word	0x20011336
 801778c:	08027f2c 	.word	0x08027f2c

08017790 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017790:	b480      	push	{r7}
 8017792:	b085      	sub	sp, #20
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177a4:	d002      	beq.n	80177ac <ip4_addr_isbroadcast_u32+0x1c>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d101      	bne.n	80177b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80177ac:	2301      	movs	r3, #1
 80177ae:	e02a      	b.n	8017806 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80177b6:	f003 0302 	and.w	r3, r3, #2
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d101      	bne.n	80177c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80177be:	2300      	movs	r3, #0
 80177c0:	e021      	b.n	8017806 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	3304      	adds	r3, #4
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	687a      	ldr	r2, [r7, #4]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d101      	bne.n	80177d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80177ce:	2300      	movs	r3, #0
 80177d0:	e019      	b.n	8017806 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80177d2:	68fa      	ldr	r2, [r7, #12]
 80177d4:	683b      	ldr	r3, [r7, #0]
 80177d6:	3304      	adds	r3, #4
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	405a      	eors	r2, r3
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	3308      	adds	r3, #8
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	4013      	ands	r3, r2
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d10d      	bne.n	8017804 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	3308      	adds	r3, #8
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	43da      	mvns	r2, r3
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	3308      	adds	r3, #8
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d101      	bne.n	8017804 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017800:	2301      	movs	r3, #1
 8017802:	e000      	b.n	8017806 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017804:	2300      	movs	r3, #0
  }
}
 8017806:	4618      	mov	r0, r3
 8017808:	3714      	adds	r7, #20
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr
	...

08017814 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b084      	sub	sp, #16
 8017818:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801781a:	2300      	movs	r3, #0
 801781c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801781e:	4b12      	ldr	r3, [pc, #72]	; (8017868 <ip_reass_tmr+0x54>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017824:	e018      	b.n	8017858 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	7fdb      	ldrb	r3, [r3, #31]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d00b      	beq.n	8017846 <ip_reass_tmr+0x32>
      r->timer--;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	7fdb      	ldrb	r3, [r3, #31]
 8017832:	3b01      	subs	r3, #1
 8017834:	b2da      	uxtb	r2, r3
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	60fb      	str	r3, [r7, #12]
 8017844:	e008      	b.n	8017858 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017850:	68b9      	ldr	r1, [r7, #8]
 8017852:	6878      	ldr	r0, [r7, #4]
 8017854:	f000 f80a 	bl	801786c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d1e3      	bne.n	8017826 <ip_reass_tmr+0x12>
    }
  }
}
 801785e:	bf00      	nop
 8017860:	bf00      	nop
 8017862:	3710      	adds	r7, #16
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	20011338 	.word	0x20011338

0801786c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b088      	sub	sp, #32
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017876:	2300      	movs	r3, #0
 8017878:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801787a:	683a      	ldr	r2, [r7, #0]
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	429a      	cmp	r2, r3
 8017880:	d105      	bne.n	801788e <ip_reass_free_complete_datagram+0x22>
 8017882:	4b45      	ldr	r3, [pc, #276]	; (8017998 <ip_reass_free_complete_datagram+0x12c>)
 8017884:	22ab      	movs	r2, #171	; 0xab
 8017886:	4945      	ldr	r1, [pc, #276]	; (801799c <ip_reass_free_complete_datagram+0x130>)
 8017888:	4845      	ldr	r0, [pc, #276]	; (80179a0 <ip_reass_free_complete_datagram+0x134>)
 801788a:	f001 f9d5 	bl	8018c38 <iprintf>
  if (prev != NULL) {
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d00a      	beq.n	80178aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	687a      	ldr	r2, [r7, #4]
 801789a:	429a      	cmp	r2, r3
 801789c:	d005      	beq.n	80178aa <ip_reass_free_complete_datagram+0x3e>
 801789e:	4b3e      	ldr	r3, [pc, #248]	; (8017998 <ip_reass_free_complete_datagram+0x12c>)
 80178a0:	22ad      	movs	r2, #173	; 0xad
 80178a2:	4940      	ldr	r1, [pc, #256]	; (80179a4 <ip_reass_free_complete_datagram+0x138>)
 80178a4:	483e      	ldr	r0, [pc, #248]	; (80179a0 <ip_reass_free_complete_datagram+0x134>)
 80178a6:	f001 f9c7 	bl	8018c38 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	889b      	ldrh	r3, [r3, #4]
 80178b6:	b29b      	uxth	r3, r3
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d12a      	bne.n	8017912 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	681a      	ldr	r2, [r3, #0]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80178ca:	69bb      	ldr	r3, [r7, #24]
 80178cc:	6858      	ldr	r0, [r3, #4]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	3308      	adds	r3, #8
 80178d2:	2214      	movs	r2, #20
 80178d4:	4619      	mov	r1, r3
 80178d6:	f001 fc9f 	bl	8019218 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80178da:	2101      	movs	r1, #1
 80178dc:	69b8      	ldr	r0, [r7, #24]
 80178de:	f7ff fc29 	bl	8017134 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80178e2:	69b8      	ldr	r0, [r7, #24]
 80178e4:	f7f5 fb04 	bl	800cef0 <pbuf_clen>
 80178e8:	4603      	mov	r3, r0
 80178ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80178ec:	8bfa      	ldrh	r2, [r7, #30]
 80178ee:	8a7b      	ldrh	r3, [r7, #18]
 80178f0:	4413      	add	r3, r2
 80178f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178f6:	db05      	blt.n	8017904 <ip_reass_free_complete_datagram+0x98>
 80178f8:	4b27      	ldr	r3, [pc, #156]	; (8017998 <ip_reass_free_complete_datagram+0x12c>)
 80178fa:	22bc      	movs	r2, #188	; 0xbc
 80178fc:	492a      	ldr	r1, [pc, #168]	; (80179a8 <ip_reass_free_complete_datagram+0x13c>)
 80178fe:	4828      	ldr	r0, [pc, #160]	; (80179a0 <ip_reass_free_complete_datagram+0x134>)
 8017900:	f001 f99a 	bl	8018c38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017904:	8bfa      	ldrh	r2, [r7, #30]
 8017906:	8a7b      	ldrh	r3, [r7, #18]
 8017908:	4413      	add	r3, r2
 801790a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801790c:	69b8      	ldr	r0, [r7, #24]
 801790e:	f7f5 fa61 	bl	800cdd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017918:	e01f      	b.n	801795a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801791a:	69bb      	ldr	r3, [r7, #24]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017920:	69bb      	ldr	r3, [r7, #24]
 8017922:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017924:	697b      	ldr	r3, [r7, #20]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801792a:	68f8      	ldr	r0, [r7, #12]
 801792c:	f7f5 fae0 	bl	800cef0 <pbuf_clen>
 8017930:	4603      	mov	r3, r0
 8017932:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017934:	8bfa      	ldrh	r2, [r7, #30]
 8017936:	8a7b      	ldrh	r3, [r7, #18]
 8017938:	4413      	add	r3, r2
 801793a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801793e:	db05      	blt.n	801794c <ip_reass_free_complete_datagram+0xe0>
 8017940:	4b15      	ldr	r3, [pc, #84]	; (8017998 <ip_reass_free_complete_datagram+0x12c>)
 8017942:	22cc      	movs	r2, #204	; 0xcc
 8017944:	4918      	ldr	r1, [pc, #96]	; (80179a8 <ip_reass_free_complete_datagram+0x13c>)
 8017946:	4816      	ldr	r0, [pc, #88]	; (80179a0 <ip_reass_free_complete_datagram+0x134>)
 8017948:	f001 f976 	bl	8018c38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801794c:	8bfa      	ldrh	r2, [r7, #30]
 801794e:	8a7b      	ldrh	r3, [r7, #18]
 8017950:	4413      	add	r3, r2
 8017952:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017954:	68f8      	ldr	r0, [r7, #12]
 8017956:	f7f5 fa3d 	bl	800cdd4 <pbuf_free>
  while (p != NULL) {
 801795a:	69bb      	ldr	r3, [r7, #24]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d1dc      	bne.n	801791a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017960:	6839      	ldr	r1, [r7, #0]
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f000 f8c2 	bl	8017aec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017968:	4b10      	ldr	r3, [pc, #64]	; (80179ac <ip_reass_free_complete_datagram+0x140>)
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	8bfa      	ldrh	r2, [r7, #30]
 801796e:	429a      	cmp	r2, r3
 8017970:	d905      	bls.n	801797e <ip_reass_free_complete_datagram+0x112>
 8017972:	4b09      	ldr	r3, [pc, #36]	; (8017998 <ip_reass_free_complete_datagram+0x12c>)
 8017974:	22d2      	movs	r2, #210	; 0xd2
 8017976:	490e      	ldr	r1, [pc, #56]	; (80179b0 <ip_reass_free_complete_datagram+0x144>)
 8017978:	4809      	ldr	r0, [pc, #36]	; (80179a0 <ip_reass_free_complete_datagram+0x134>)
 801797a:	f001 f95d 	bl	8018c38 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801797e:	4b0b      	ldr	r3, [pc, #44]	; (80179ac <ip_reass_free_complete_datagram+0x140>)
 8017980:	881a      	ldrh	r2, [r3, #0]
 8017982:	8bfb      	ldrh	r3, [r7, #30]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	b29a      	uxth	r2, r3
 8017988:	4b08      	ldr	r3, [pc, #32]	; (80179ac <ip_reass_free_complete_datagram+0x140>)
 801798a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801798c:	8bfb      	ldrh	r3, [r7, #30]
}
 801798e:	4618      	mov	r0, r3
 8017990:	3720      	adds	r7, #32
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}
 8017996:	bf00      	nop
 8017998:	0801d9f0 	.word	0x0801d9f0
 801799c:	0801da2c 	.word	0x0801da2c
 80179a0:	0801da38 	.word	0x0801da38
 80179a4:	0801da60 	.word	0x0801da60
 80179a8:	0801da74 	.word	0x0801da74
 80179ac:	2001133c 	.word	0x2001133c
 80179b0:	0801da94 	.word	0x0801da94

080179b4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b08a      	sub	sp, #40	; 0x28
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80179be:	2300      	movs	r3, #0
 80179c0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80179c2:	2300      	movs	r3, #0
 80179c4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80179c6:	2300      	movs	r3, #0
 80179c8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80179ca:	2300      	movs	r3, #0
 80179cc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80179d2:	4b28      	ldr	r3, [pc, #160]	; (8017a74 <ip_reass_remove_oldest_datagram+0xc0>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80179d8:	e030      	b.n	8017a3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80179da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179dc:	695a      	ldr	r2, [r3, #20]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	68db      	ldr	r3, [r3, #12]
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d10c      	bne.n	8017a00 <ip_reass_remove_oldest_datagram+0x4c>
 80179e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e8:	699a      	ldr	r2, [r3, #24]
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	691b      	ldr	r3, [r3, #16]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d106      	bne.n	8017a00 <ip_reass_remove_oldest_datagram+0x4c>
 80179f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f4:	899a      	ldrh	r2, [r3, #12]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	889b      	ldrh	r3, [r3, #4]
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d014      	beq.n	8017a2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	3301      	adds	r3, #1
 8017a04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017a06:	6a3b      	ldr	r3, [r7, #32]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d104      	bne.n	8017a16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	61bb      	str	r3, [r7, #24]
 8017a14:	e009      	b.n	8017a2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a18:	7fda      	ldrb	r2, [r3, #31]
 8017a1a:	6a3b      	ldr	r3, [r7, #32]
 8017a1c:	7fdb      	ldrb	r3, [r3, #31]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	d803      	bhi.n	8017a2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a26:	69fb      	ldr	r3, [r7, #28]
 8017a28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d001      	beq.n	8017a36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d1cb      	bne.n	80179da <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017a42:	6a3b      	ldr	r3, [r7, #32]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d008      	beq.n	8017a5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017a48:	69b9      	ldr	r1, [r7, #24]
 8017a4a:	6a38      	ldr	r0, [r7, #32]
 8017a4c:	f7ff ff0e 	bl	801786c <ip_reass_free_complete_datagram>
 8017a50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017a52:	697a      	ldr	r2, [r7, #20]
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	4413      	add	r3, r2
 8017a58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017a5a:	697a      	ldr	r2, [r7, #20]
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	da02      	bge.n	8017a68 <ip_reass_remove_oldest_datagram+0xb4>
 8017a62:	693b      	ldr	r3, [r7, #16]
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	dcac      	bgt.n	80179c2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017a68:	697b      	ldr	r3, [r7, #20]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3728      	adds	r7, #40	; 0x28
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	20011338 	.word	0x20011338

08017a78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b084      	sub	sp, #16
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a82:	2004      	movs	r0, #4
 8017a84:	f7f4 fa80 	bl	800bf88 <memp_malloc>
 8017a88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d110      	bne.n	8017ab2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017a90:	6839      	ldr	r1, [r7, #0]
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7ff ff8e 	bl	80179b4 <ip_reass_remove_oldest_datagram>
 8017a98:	4602      	mov	r2, r0
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	4293      	cmp	r3, r2
 8017a9e:	dc03      	bgt.n	8017aa8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017aa0:	2004      	movs	r0, #4
 8017aa2:	f7f4 fa71 	bl	800bf88 <memp_malloc>
 8017aa6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d101      	bne.n	8017ab2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	e016      	b.n	8017ae0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017ab2:	2220      	movs	r2, #32
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	68f8      	ldr	r0, [r7, #12]
 8017ab8:	f001 fa4e 	bl	8018f58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	220f      	movs	r2, #15
 8017ac0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017ac2:	4b09      	ldr	r3, [pc, #36]	; (8017ae8 <ip_reass_enqueue_new_datagram+0x70>)
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017aca:	4a07      	ldr	r2, [pc, #28]	; (8017ae8 <ip_reass_enqueue_new_datagram+0x70>)
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	3308      	adds	r3, #8
 8017ad4:	2214      	movs	r2, #20
 8017ad6:	6879      	ldr	r1, [r7, #4]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f001 fb9d 	bl	8019218 <memcpy>
  return ipr;
 8017ade:	68fb      	ldr	r3, [r7, #12]
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3710      	adds	r7, #16
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	20011338 	.word	0x20011338

08017aec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017af6:	4b10      	ldr	r3, [pc, #64]	; (8017b38 <ip_reass_dequeue_datagram+0x4c>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d104      	bne.n	8017b0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4a0c      	ldr	r2, [pc, #48]	; (8017b38 <ip_reass_dequeue_datagram+0x4c>)
 8017b06:	6013      	str	r3, [r2, #0]
 8017b08:	e00d      	b.n	8017b26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d106      	bne.n	8017b1e <ip_reass_dequeue_datagram+0x32>
 8017b10:	4b0a      	ldr	r3, [pc, #40]	; (8017b3c <ip_reass_dequeue_datagram+0x50>)
 8017b12:	f240 1245 	movw	r2, #325	; 0x145
 8017b16:	490a      	ldr	r1, [pc, #40]	; (8017b40 <ip_reass_dequeue_datagram+0x54>)
 8017b18:	480a      	ldr	r0, [pc, #40]	; (8017b44 <ip_reass_dequeue_datagram+0x58>)
 8017b1a:	f001 f88d 	bl	8018c38 <iprintf>
    prev->next = ipr->next;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017b26:	6879      	ldr	r1, [r7, #4]
 8017b28:	2004      	movs	r0, #4
 8017b2a:	f7f4 faa3 	bl	800c074 <memp_free>
}
 8017b2e:	bf00      	nop
 8017b30:	3708      	adds	r7, #8
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}
 8017b36:	bf00      	nop
 8017b38:	20011338 	.word	0x20011338
 8017b3c:	0801d9f0 	.word	0x0801d9f0
 8017b40:	0801dab8 	.word	0x0801dab8
 8017b44:	0801da38 	.word	0x0801da38

08017b48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b08c      	sub	sp, #48	; 0x30
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017b54:	2300      	movs	r3, #0
 8017b56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017b5c:	68bb      	ldr	r3, [r7, #8]
 8017b5e:	685b      	ldr	r3, [r3, #4]
 8017b60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017b62:	69fb      	ldr	r3, [r7, #28]
 8017b64:	885b      	ldrh	r3, [r3, #2]
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7f3 fcff 	bl	800b56c <lwip_htons>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017b72:	69fb      	ldr	r3, [r7, #28]
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	f003 030f 	and.w	r3, r3, #15
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017b80:	7e7b      	ldrb	r3, [r7, #25]
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	8b7a      	ldrh	r2, [r7, #26]
 8017b86:	429a      	cmp	r2, r3
 8017b88:	d202      	bcs.n	8017b90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b8e:	e135      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017b90:	7e7b      	ldrb	r3, [r7, #25]
 8017b92:	b29b      	uxth	r3, r3
 8017b94:	8b7a      	ldrh	r2, [r7, #26]
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017b9a:	69fb      	ldr	r3, [r7, #28]
 8017b9c:	88db      	ldrh	r3, [r3, #6]
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7f3 fce3 	bl	800b56c <lwip_htons>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	00db      	lsls	r3, r3, #3
 8017bb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bba:	2200      	movs	r2, #0
 8017bbc:	701a      	strb	r2, [r3, #0]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	705a      	strb	r2, [r3, #1]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	709a      	strb	r2, [r3, #2]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bcc:	8afa      	ldrh	r2, [r7, #22]
 8017bce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017bd0:	8afa      	ldrh	r2, [r7, #22]
 8017bd2:	8b7b      	ldrh	r3, [r7, #26]
 8017bd4:	4413      	add	r3, r2
 8017bd6:	b29a      	uxth	r2, r3
 8017bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bde:	88db      	ldrh	r3, [r3, #6]
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	8afa      	ldrh	r2, [r7, #22]
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d902      	bls.n	8017bee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017be8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bec:	e106      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8017bf4:	e068      	b.n	8017cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bfe:	889b      	ldrh	r3, [r3, #4]
 8017c00:	b29a      	uxth	r2, r3
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	889b      	ldrh	r3, [r3, #4]
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	429a      	cmp	r2, r3
 8017c0a:	d235      	bcs.n	8017c78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d020      	beq.n	8017c5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1a:	889b      	ldrh	r3, [r3, #4]
 8017c1c:	b29a      	uxth	r2, r3
 8017c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c20:	88db      	ldrh	r3, [r3, #6]
 8017c22:	b29b      	uxth	r3, r3
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d307      	bcc.n	8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c2a:	88db      	ldrh	r3, [r3, #6]
 8017c2c:	b29a      	uxth	r2, r3
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	889b      	ldrh	r3, [r3, #4]
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d902      	bls.n	8017c3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c38:	f04f 33ff 	mov.w	r3, #4294967295
 8017c3c:	e0de      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	68ba      	ldr	r2, [r7, #8]
 8017c42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c46:	88db      	ldrh	r3, [r3, #6]
 8017c48:	b29a      	uxth	r2, r3
 8017c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c4c:	889b      	ldrh	r3, [r3, #4]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d03d      	beq.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c54:	2300      	movs	r3, #0
 8017c56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017c58:	e03a      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5c:	88db      	ldrh	r3, [r3, #6]
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	693b      	ldr	r3, [r7, #16]
 8017c62:	889b      	ldrh	r3, [r3, #4]
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d902      	bls.n	8017c70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6e:	e0c5      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	68ba      	ldr	r2, [r7, #8]
 8017c74:	605a      	str	r2, [r3, #4]
      break;
 8017c76:	e02b      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7a:	889b      	ldrh	r3, [r3, #4]
 8017c7c:	b29a      	uxth	r2, r3
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	889b      	ldrh	r3, [r3, #4]
 8017c82:	b29b      	uxth	r3, r3
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d102      	bne.n	8017c8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c88:	f04f 33ff 	mov.w	r3, #4294967295
 8017c8c:	e0b6      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c90:	889b      	ldrh	r3, [r3, #4]
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	88db      	ldrh	r3, [r3, #6]
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d202      	bcs.n	8017ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8017ca2:	e0ab      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d009      	beq.n	8017cbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	88db      	ldrh	r3, [r3, #6]
 8017cae:	b29a      	uxth	r2, r3
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	889b      	ldrh	r3, [r3, #4]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d001      	beq.n	8017cbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017cbe:	693b      	ldr	r3, [r7, #16]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017cc4:	693b      	ldr	r3, [r7, #16]
 8017cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d193      	bne.n	8017bf6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017cce:	e000      	b.n	8017cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017cd0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d12d      	bne.n	8017d34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d01c      	beq.n	8017d18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce0:	88db      	ldrh	r3, [r3, #6]
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce6:	889b      	ldrh	r3, [r3, #4]
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d906      	bls.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017cee:	4b45      	ldr	r3, [pc, #276]	; (8017e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017cf0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017cf4:	4944      	ldr	r1, [pc, #272]	; (8017e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017cf6:	4845      	ldr	r0, [pc, #276]	; (8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cf8:	f000 ff9e 	bl	8018c38 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfe:	68ba      	ldr	r2, [r7, #8]
 8017d00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d04:	88db      	ldrh	r3, [r3, #6]
 8017d06:	b29a      	uxth	r2, r3
 8017d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d0a:	889b      	ldrh	r3, [r3, #4]
 8017d0c:	b29b      	uxth	r3, r3
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d010      	beq.n	8017d34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017d12:	2300      	movs	r3, #0
 8017d14:	623b      	str	r3, [r7, #32]
 8017d16:	e00d      	b.n	8017d34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d006      	beq.n	8017d2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017d20:	4b38      	ldr	r3, [pc, #224]	; (8017e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017d26:	493a      	ldr	r1, [pc, #232]	; (8017e10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017d28:	4838      	ldr	r0, [pc, #224]	; (8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d2a:	f000 ff85 	bl	8018c38 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	68ba      	ldr	r2, [r7, #8]
 8017d32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d105      	bne.n	8017d46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	7f9b      	ldrb	r3, [r3, #30]
 8017d3e:	f003 0301 	and.w	r3, r3, #1
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d059      	beq.n	8017dfa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017d46:	6a3b      	ldr	r3, [r7, #32]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d04f      	beq.n	8017dec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d006      	beq.n	8017d62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	889b      	ldrh	r3, [r3, #4]
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d002      	beq.n	8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017d62:	2300      	movs	r3, #0
 8017d64:	623b      	str	r3, [r7, #32]
 8017d66:	e041      	b.n	8017dec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d72:	e012      	b.n	8017d9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d76:	685b      	ldr	r3, [r3, #4]
 8017d78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7c:	88db      	ldrh	r3, [r3, #6]
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d82:	889b      	ldrh	r3, [r3, #4]
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d002      	beq.n	8017d90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	623b      	str	r3, [r7, #32]
            break;
 8017d8e:	e007      	b.n	8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d1e9      	bne.n	8017d74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017da0:	6a3b      	ldr	r3, [r7, #32]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d022      	beq.n	8017dec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d106      	bne.n	8017dbc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017dae:	4b15      	ldr	r3, [pc, #84]	; (8017e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017db0:	f240 12df 	movw	r2, #479	; 0x1df
 8017db4:	4917      	ldr	r1, [pc, #92]	; (8017e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017db6:	4815      	ldr	r0, [pc, #84]	; (8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017db8:	f000 ff3e 	bl	8018c38 <iprintf>
          LWIP_ASSERT("sanity check",
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	685b      	ldr	r3, [r3, #4]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	d106      	bne.n	8017dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017dc8:	4b0e      	ldr	r3, [pc, #56]	; (8017e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017dca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017dce:	4911      	ldr	r1, [pc, #68]	; (8017e14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017dd0:	480e      	ldr	r0, [pc, #56]	; (8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017dd2:	f000 ff31 	bl	8018c38 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d006      	beq.n	8017dec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017dde:	4b09      	ldr	r3, [pc, #36]	; (8017e04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017de0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017de4:	490c      	ldr	r1, [pc, #48]	; (8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017de6:	4809      	ldr	r0, [pc, #36]	; (8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017de8:	f000 ff26 	bl	8018c38 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017dec:	6a3b      	ldr	r3, [r7, #32]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	bf14      	ite	ne
 8017df2:	2301      	movne	r3, #1
 8017df4:	2300      	moveq	r3, #0
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	e000      	b.n	8017dfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017dfa:	2300      	movs	r3, #0
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3730      	adds	r7, #48	; 0x30
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	0801d9f0 	.word	0x0801d9f0
 8017e08:	0801dad4 	.word	0x0801dad4
 8017e0c:	0801da38 	.word	0x0801da38
 8017e10:	0801daf4 	.word	0x0801daf4
 8017e14:	0801db2c 	.word	0x0801db2c
 8017e18:	0801db3c 	.word	0x0801db3c

08017e1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b08e      	sub	sp, #56	; 0x38
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	f003 030f 	and.w	r3, r3, #15
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	009b      	lsls	r3, r3, #2
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	2b14      	cmp	r3, #20
 8017e3a:	f040 8171 	bne.w	8018120 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e40:	88db      	ldrh	r3, [r3, #6]
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7f3 fb91 	bl	800b56c <lwip_htons>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	00db      	lsls	r3, r3, #3
 8017e54:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e58:	885b      	ldrh	r3, [r3, #2]
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f7f3 fb85 	bl	800b56c <lwip_htons>
 8017e62:	4603      	mov	r3, r0
 8017e64:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	f003 030f 	and.w	r3, r3, #15
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e7a:	b29b      	uxth	r3, r3
 8017e7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	f0c0 8150 	bcc.w	8018124 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7f5 f82d 	bl	800cef0 <pbuf_clen>
 8017e96:	4603      	mov	r3, r0
 8017e98:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017e9a:	4b8c      	ldr	r3, [pc, #560]	; (80180cc <ip4_reass+0x2b0>)
 8017e9c:	881b      	ldrh	r3, [r3, #0]
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	8c3b      	ldrh	r3, [r7, #32]
 8017ea2:	4413      	add	r3, r2
 8017ea4:	2b0a      	cmp	r3, #10
 8017ea6:	dd10      	ble.n	8017eca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ea8:	8c3b      	ldrh	r3, [r7, #32]
 8017eaa:	4619      	mov	r1, r3
 8017eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eae:	f7ff fd81 	bl	80179b4 <ip_reass_remove_oldest_datagram>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	f000 8137 	beq.w	8018128 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017eba:	4b84      	ldr	r3, [pc, #528]	; (80180cc <ip4_reass+0x2b0>)
 8017ebc:	881b      	ldrh	r3, [r3, #0]
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	8c3b      	ldrh	r3, [r7, #32]
 8017ec2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ec4:	2b0a      	cmp	r3, #10
 8017ec6:	f300 812f 	bgt.w	8018128 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017eca:	4b81      	ldr	r3, [pc, #516]	; (80180d0 <ip4_reass+0x2b4>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	633b      	str	r3, [r7, #48]	; 0x30
 8017ed0:	e015      	b.n	8017efe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed4:	695a      	ldr	r2, [r3, #20]
 8017ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d10c      	bne.n	8017ef8 <ip4_reass+0xdc>
 8017ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee0:	699a      	ldr	r2, [r3, #24]
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	691b      	ldr	r3, [r3, #16]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d106      	bne.n	8017ef8 <ip4_reass+0xdc>
 8017eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eec:	899a      	ldrh	r2, [r3, #12]
 8017eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef0:	889b      	ldrh	r3, [r3, #4]
 8017ef2:	b29b      	uxth	r3, r3
 8017ef4:	429a      	cmp	r2, r3
 8017ef6:	d006      	beq.n	8017f06 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	633b      	str	r3, [r7, #48]	; 0x30
 8017efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d1e6      	bne.n	8017ed2 <ip4_reass+0xb6>
 8017f04:	e000      	b.n	8017f08 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017f06:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d109      	bne.n	8017f22 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017f0e:	8c3b      	ldrh	r3, [r7, #32]
 8017f10:	4619      	mov	r1, r3
 8017f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f14:	f7ff fdb0 	bl	8017a78 <ip_reass_enqueue_new_datagram>
 8017f18:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d11c      	bne.n	8017f5a <ip4_reass+0x13e>
      goto nullreturn;
 8017f20:	e105      	b.n	801812e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f24:	88db      	ldrh	r3, [r3, #6]
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7f3 fb1f 	bl	800b56c <lwip_htons>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d110      	bne.n	8017f5a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3a:	89db      	ldrh	r3, [r3, #14]
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f3 fb15 	bl	800b56c <lwip_htons>
 8017f42:	4603      	mov	r3, r0
 8017f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d006      	beq.n	8017f5a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4e:	3308      	adds	r3, #8
 8017f50:	2214      	movs	r2, #20
 8017f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f54:	4618      	mov	r0, r3
 8017f56:	f001 f95f 	bl	8019218 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5c:	88db      	ldrh	r3, [r3, #6]
 8017f5e:	b29b      	uxth	r3, r3
 8017f60:	f003 0320 	and.w	r3, r3, #32
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	bf0c      	ite	eq
 8017f68:	2301      	moveq	r3, #1
 8017f6a:	2300      	movne	r3, #0
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017f70:	69fb      	ldr	r3, [r7, #28]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d00e      	beq.n	8017f94 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f7a:	4413      	add	r3, r2
 8017f7c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017f7e:	8b7a      	ldrh	r2, [r7, #26]
 8017f80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017f82:	429a      	cmp	r2, r3
 8017f84:	f0c0 80a0 	bcc.w	80180c8 <ip4_reass+0x2ac>
 8017f88:	8b7b      	ldrh	r3, [r7, #26]
 8017f8a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	f200 809a 	bhi.w	80180c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017f94:	69fa      	ldr	r2, [r7, #28]
 8017f96:	6879      	ldr	r1, [r7, #4]
 8017f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f9a:	f7ff fdd5 	bl	8017b48 <ip_reass_chain_frag_into_datagram_and_validate>
 8017f9e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fa6:	f000 809b 	beq.w	80180e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017faa:	4b48      	ldr	r3, [pc, #288]	; (80180cc <ip4_reass+0x2b0>)
 8017fac:	881a      	ldrh	r2, [r3, #0]
 8017fae:	8c3b      	ldrh	r3, [r7, #32]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	4b45      	ldr	r3, [pc, #276]	; (80180cc <ip4_reass+0x2b0>)
 8017fb6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d00d      	beq.n	8017fda <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017fbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017fc2:	4413      	add	r3, r2
 8017fc4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc8:	8a7a      	ldrh	r2, [r7, #18]
 8017fca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fce:	7f9b      	ldrb	r3, [r3, #30]
 8017fd0:	f043 0301 	orr.w	r3, r3, #1
 8017fd4:	b2da      	uxtb	r2, r3
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017fda:	697b      	ldr	r3, [r7, #20]
 8017fdc:	2b01      	cmp	r3, #1
 8017fde:	d171      	bne.n	80180c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe2:	8b9b      	ldrh	r3, [r3, #28]
 8017fe4:	3314      	adds	r3, #20
 8017fe6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	685b      	ldr	r3, [r3, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff4:	685b      	ldr	r3, [r3, #4]
 8017ff6:	685b      	ldr	r3, [r3, #4]
 8017ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffc:	3308      	adds	r3, #8
 8017ffe:	2214      	movs	r2, #20
 8018000:	4619      	mov	r1, r3
 8018002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018004:	f001 f908 	bl	8019218 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018008:	8a3b      	ldrh	r3, [r7, #16]
 801800a:	4618      	mov	r0, r3
 801800c:	f7f3 faae 	bl	800b56c <lwip_htons>
 8018010:	4603      	mov	r3, r0
 8018012:	461a      	mov	r2, r3
 8018014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018016:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801a:	2200      	movs	r2, #0
 801801c:	719a      	strb	r2, [r3, #6]
 801801e:	2200      	movs	r2, #0
 8018020:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018024:	2200      	movs	r2, #0
 8018026:	729a      	strb	r2, [r3, #10]
 8018028:	2200      	movs	r2, #0
 801802a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802e:	685b      	ldr	r3, [r3, #4]
 8018030:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018032:	e00d      	b.n	8018050 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801803a:	2114      	movs	r1, #20
 801803c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801803e:	f7f4 fe43 	bl	800ccc8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f7f4 ff93 	bl	800cf70 <pbuf_cat>
      r = iprh->next_pbuf;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018052:	2b00      	cmp	r3, #0
 8018054:	d1ee      	bne.n	8018034 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018056:	4b1e      	ldr	r3, [pc, #120]	; (80180d0 <ip4_reass+0x2b4>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801805c:	429a      	cmp	r2, r3
 801805e:	d102      	bne.n	8018066 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018060:	2300      	movs	r3, #0
 8018062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018064:	e010      	b.n	8018088 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018066:	4b1a      	ldr	r3, [pc, #104]	; (80180d0 <ip4_reass+0x2b4>)
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801806c:	e007      	b.n	801807e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018074:	429a      	cmp	r2, r3
 8018076:	d006      	beq.n	8018086 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018080:	2b00      	cmp	r3, #0
 8018082:	d1f4      	bne.n	801806e <ip4_reass+0x252>
 8018084:	e000      	b.n	8018088 <ip4_reass+0x26c>
          break;
 8018086:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801808a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801808c:	f7ff fd2e 	bl	8017aec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	f7f4 ff2d 	bl	800cef0 <pbuf_clen>
 8018096:	4603      	mov	r3, r0
 8018098:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801809a:	4b0c      	ldr	r3, [pc, #48]	; (80180cc <ip4_reass+0x2b0>)
 801809c:	881b      	ldrh	r3, [r3, #0]
 801809e:	8c3a      	ldrh	r2, [r7, #32]
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d906      	bls.n	80180b2 <ip4_reass+0x296>
 80180a4:	4b0b      	ldr	r3, [pc, #44]	; (80180d4 <ip4_reass+0x2b8>)
 80180a6:	f240 229b 	movw	r2, #667	; 0x29b
 80180aa:	490b      	ldr	r1, [pc, #44]	; (80180d8 <ip4_reass+0x2bc>)
 80180ac:	480b      	ldr	r0, [pc, #44]	; (80180dc <ip4_reass+0x2c0>)
 80180ae:	f000 fdc3 	bl	8018c38 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80180b2:	4b06      	ldr	r3, [pc, #24]	; (80180cc <ip4_reass+0x2b0>)
 80180b4:	881a      	ldrh	r2, [r3, #0]
 80180b6:	8c3b      	ldrh	r3, [r7, #32]
 80180b8:	1ad3      	subs	r3, r2, r3
 80180ba:	b29a      	uxth	r2, r3
 80180bc:	4b03      	ldr	r3, [pc, #12]	; (80180cc <ip4_reass+0x2b0>)
 80180be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	e038      	b.n	8018136 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80180c4:	2300      	movs	r3, #0
 80180c6:	e036      	b.n	8018136 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80180c8:	bf00      	nop
 80180ca:	e00a      	b.n	80180e2 <ip4_reass+0x2c6>
 80180cc:	2001133c 	.word	0x2001133c
 80180d0:	20011338 	.word	0x20011338
 80180d4:	0801d9f0 	.word	0x0801d9f0
 80180d8:	0801db60 	.word	0x0801db60
 80180dc:	0801da38 	.word	0x0801da38
    goto nullreturn_ipr;
 80180e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80180e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d106      	bne.n	80180f6 <ip4_reass+0x2da>
 80180e8:	4b15      	ldr	r3, [pc, #84]	; (8018140 <ip4_reass+0x324>)
 80180ea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80180ee:	4915      	ldr	r1, [pc, #84]	; (8018144 <ip4_reass+0x328>)
 80180f0:	4815      	ldr	r0, [pc, #84]	; (8018148 <ip4_reass+0x32c>)
 80180f2:	f000 fda1 	bl	8018c38 <iprintf>
  if (ipr->p == NULL) {
 80180f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180f8:	685b      	ldr	r3, [r3, #4]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d116      	bne.n	801812c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80180fe:	4b13      	ldr	r3, [pc, #76]	; (801814c <ip4_reass+0x330>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018104:	429a      	cmp	r2, r3
 8018106:	d006      	beq.n	8018116 <ip4_reass+0x2fa>
 8018108:	4b0d      	ldr	r3, [pc, #52]	; (8018140 <ip4_reass+0x324>)
 801810a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801810e:	4910      	ldr	r1, [pc, #64]	; (8018150 <ip4_reass+0x334>)
 8018110:	480d      	ldr	r0, [pc, #52]	; (8018148 <ip4_reass+0x32c>)
 8018112:	f000 fd91 	bl	8018c38 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018116:	2100      	movs	r1, #0
 8018118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801811a:	f7ff fce7 	bl	8017aec <ip_reass_dequeue_datagram>
 801811e:	e006      	b.n	801812e <ip4_reass+0x312>
    goto nullreturn;
 8018120:	bf00      	nop
 8018122:	e004      	b.n	801812e <ip4_reass+0x312>
    goto nullreturn;
 8018124:	bf00      	nop
 8018126:	e002      	b.n	801812e <ip4_reass+0x312>
      goto nullreturn;
 8018128:	bf00      	nop
 801812a:	e000      	b.n	801812e <ip4_reass+0x312>
  }

nullreturn:
 801812c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7f4 fe50 	bl	800cdd4 <pbuf_free>
  return NULL;
 8018134:	2300      	movs	r3, #0
}
 8018136:	4618      	mov	r0, r3
 8018138:	3738      	adds	r7, #56	; 0x38
 801813a:	46bd      	mov	sp, r7
 801813c:	bd80      	pop	{r7, pc}
 801813e:	bf00      	nop
 8018140:	0801d9f0 	.word	0x0801d9f0
 8018144:	0801db7c 	.word	0x0801db7c
 8018148:	0801da38 	.word	0x0801da38
 801814c:	20011338 	.word	0x20011338
 8018150:	0801db88 	.word	0x0801db88

08018154 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018158:	2005      	movs	r0, #5
 801815a:	f7f3 ff15 	bl	800bf88 <memp_malloc>
 801815e:	4603      	mov	r3, r0
}
 8018160:	4618      	mov	r0, r3
 8018162:	bd80      	pop	{r7, pc}

08018164 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d106      	bne.n	8018180 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018172:	4b07      	ldr	r3, [pc, #28]	; (8018190 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018174:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018178:	4906      	ldr	r1, [pc, #24]	; (8018194 <ip_frag_free_pbuf_custom_ref+0x30>)
 801817a:	4807      	ldr	r0, [pc, #28]	; (8018198 <ip_frag_free_pbuf_custom_ref+0x34>)
 801817c:	f000 fd5c 	bl	8018c38 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018180:	6879      	ldr	r1, [r7, #4]
 8018182:	2005      	movs	r0, #5
 8018184:	f7f3 ff76 	bl	800c074 <memp_free>
}
 8018188:	bf00      	nop
 801818a:	3708      	adds	r7, #8
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	0801d9f0 	.word	0x0801d9f0
 8018194:	0801dba8 	.word	0x0801dba8
 8018198:	0801da38 	.word	0x0801da38

0801819c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b084      	sub	sp, #16
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d106      	bne.n	80181bc <ipfrag_free_pbuf_custom+0x20>
 80181ae:	4b11      	ldr	r3, [pc, #68]	; (80181f4 <ipfrag_free_pbuf_custom+0x58>)
 80181b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80181b4:	4910      	ldr	r1, [pc, #64]	; (80181f8 <ipfrag_free_pbuf_custom+0x5c>)
 80181b6:	4811      	ldr	r0, [pc, #68]	; (80181fc <ipfrag_free_pbuf_custom+0x60>)
 80181b8:	f000 fd3e 	bl	8018c38 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80181bc:	68fa      	ldr	r2, [r7, #12]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d006      	beq.n	80181d2 <ipfrag_free_pbuf_custom+0x36>
 80181c4:	4b0b      	ldr	r3, [pc, #44]	; (80181f4 <ipfrag_free_pbuf_custom+0x58>)
 80181c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80181ca:	490d      	ldr	r1, [pc, #52]	; (8018200 <ipfrag_free_pbuf_custom+0x64>)
 80181cc:	480b      	ldr	r0, [pc, #44]	; (80181fc <ipfrag_free_pbuf_custom+0x60>)
 80181ce:	f000 fd33 	bl	8018c38 <iprintf>
  if (pcr->original != NULL) {
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	695b      	ldr	r3, [r3, #20]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d004      	beq.n	80181e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	695b      	ldr	r3, [r3, #20]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7f4 fdf8 	bl	800cdd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80181e4:	68f8      	ldr	r0, [r7, #12]
 80181e6:	f7ff ffbd 	bl	8018164 <ip_frag_free_pbuf_custom_ref>
}
 80181ea:	bf00      	nop
 80181ec:	3710      	adds	r7, #16
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	0801d9f0 	.word	0x0801d9f0
 80181f8:	0801dbb4 	.word	0x0801dbb4
 80181fc:	0801da38 	.word	0x0801da38
 8018200:	0801dbc0 	.word	0x0801dbc0

08018204 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b094      	sub	sp, #80	; 0x50
 8018208:	af02      	add	r7, sp, #8
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	60b9      	str	r1, [r7, #8]
 801820e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801821a:	3b14      	subs	r3, #20
 801821c:	2b00      	cmp	r3, #0
 801821e:	da00      	bge.n	8018222 <ip4_frag+0x1e>
 8018220:	3307      	adds	r3, #7
 8018222:	10db      	asrs	r3, r3, #3
 8018224:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018226:	2314      	movs	r3, #20
 8018228:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	685b      	ldr	r3, [r3, #4]
 801822e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018232:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018236:	781b      	ldrb	r3, [r3, #0]
 8018238:	f003 030f 	and.w	r3, r3, #15
 801823c:	b2db      	uxtb	r3, r3
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	b2db      	uxtb	r3, r3
 8018242:	2b14      	cmp	r3, #20
 8018244:	d002      	beq.n	801824c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018246:	f06f 0305 	mvn.w	r3, #5
 801824a:	e110      	b.n	801846e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	895b      	ldrh	r3, [r3, #10]
 8018250:	2b13      	cmp	r3, #19
 8018252:	d809      	bhi.n	8018268 <ip4_frag+0x64>
 8018254:	4b88      	ldr	r3, [pc, #544]	; (8018478 <ip4_frag+0x274>)
 8018256:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801825a:	4988      	ldr	r1, [pc, #544]	; (801847c <ip4_frag+0x278>)
 801825c:	4888      	ldr	r0, [pc, #544]	; (8018480 <ip4_frag+0x27c>)
 801825e:	f000 fceb 	bl	8018c38 <iprintf>
 8018262:	f06f 0305 	mvn.w	r3, #5
 8018266:	e102      	b.n	801846e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801826a:	88db      	ldrh	r3, [r3, #6]
 801826c:	b29b      	uxth	r3, r3
 801826e:	4618      	mov	r0, r3
 8018270:	f7f3 f97c 	bl	800b56c <lwip_htons>
 8018274:	4603      	mov	r3, r0
 8018276:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018278:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801827a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801827e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018282:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018288:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	891b      	ldrh	r3, [r3, #8]
 801828e:	3b14      	subs	r3, #20
 8018290:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018294:	e0e1      	b.n	801845a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018296:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018298:	00db      	lsls	r3, r3, #3
 801829a:	b29b      	uxth	r3, r3
 801829c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182a0:	4293      	cmp	r3, r2
 80182a2:	bf28      	it	cs
 80182a4:	4613      	movcs	r3, r2
 80182a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80182a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182ac:	2114      	movs	r1, #20
 80182ae:	200e      	movs	r0, #14
 80182b0:	f7f4 faac 	bl	800c80c <pbuf_alloc>
 80182b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80182b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f000 80d5 	beq.w	8018468 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80182be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c0:	895b      	ldrh	r3, [r3, #10]
 80182c2:	2b13      	cmp	r3, #19
 80182c4:	d806      	bhi.n	80182d4 <ip4_frag+0xd0>
 80182c6:	4b6c      	ldr	r3, [pc, #432]	; (8018478 <ip4_frag+0x274>)
 80182c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80182cc:	496d      	ldr	r1, [pc, #436]	; (8018484 <ip4_frag+0x280>)
 80182ce:	486c      	ldr	r0, [pc, #432]	; (8018480 <ip4_frag+0x27c>)
 80182d0:	f000 fcb2 	bl	8018c38 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80182d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182d6:	685b      	ldr	r3, [r3, #4]
 80182d8:	2214      	movs	r2, #20
 80182da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182dc:	4618      	mov	r0, r3
 80182de:	f000 ff9b 	bl	8019218 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80182e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80182e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80182ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80182ee:	e064      	b.n	80183ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	895a      	ldrh	r2, [r3, #10]
 80182f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	895b      	ldrh	r3, [r3, #10]
 80182fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018300:	429a      	cmp	r2, r3
 8018302:	d906      	bls.n	8018312 <ip4_frag+0x10e>
 8018304:	4b5c      	ldr	r3, [pc, #368]	; (8018478 <ip4_frag+0x274>)
 8018306:	f240 322d 	movw	r2, #813	; 0x32d
 801830a:	495f      	ldr	r1, [pc, #380]	; (8018488 <ip4_frag+0x284>)
 801830c:	485c      	ldr	r0, [pc, #368]	; (8018480 <ip4_frag+0x27c>)
 801830e:	f000 fc93 	bl	8018c38 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018312:	8bfa      	ldrh	r2, [r7, #30]
 8018314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018318:	4293      	cmp	r3, r2
 801831a:	bf28      	it	cs
 801831c:	4613      	movcs	r3, r2
 801831e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018322:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018326:	2b00      	cmp	r3, #0
 8018328:	d105      	bne.n	8018336 <ip4_frag+0x132>
        poff = 0;
 801832a:	2300      	movs	r3, #0
 801832c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	60fb      	str	r3, [r7, #12]
        continue;
 8018334:	e041      	b.n	80183ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018336:	f7ff ff0d 	bl	8018154 <ip_frag_alloc_pbuf_custom_ref>
 801833a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d103      	bne.n	801834a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018344:	f7f4 fd46 	bl	800cdd4 <pbuf_free>
        goto memerr;
 8018348:	e08f      	b.n	801846a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801834a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018352:	4413      	add	r3, r2
 8018354:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018358:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801835c:	9201      	str	r2, [sp, #4]
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	4603      	mov	r3, r0
 8018362:	2241      	movs	r2, #65	; 0x41
 8018364:	2000      	movs	r0, #0
 8018366:	f7f4 fb7b 	bl	800ca60 <pbuf_alloced_custom>
 801836a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d106      	bne.n	8018380 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018372:	69b8      	ldr	r0, [r7, #24]
 8018374:	f7ff fef6 	bl	8018164 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801837a:	f7f4 fd2b 	bl	800cdd4 <pbuf_free>
        goto memerr;
 801837e:	e074      	b.n	801846a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018380:	68f8      	ldr	r0, [r7, #12]
 8018382:	f7f4 fdcd 	bl	800cf20 <pbuf_ref>
      pcr->original = p;
 8018386:	69bb      	ldr	r3, [r7, #24]
 8018388:	68fa      	ldr	r2, [r7, #12]
 801838a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801838c:	69bb      	ldr	r3, [r7, #24]
 801838e:	4a3f      	ldr	r2, [pc, #252]	; (801848c <ip4_frag+0x288>)
 8018390:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018392:	6979      	ldr	r1, [r7, #20]
 8018394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018396:	f7f4 fdeb 	bl	800cf70 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801839a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801839e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183a2:	1ad3      	subs	r3, r2, r3
 80183a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80183a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d004      	beq.n	80183ba <ip4_frag+0x1b6>
        poff = 0;
 80183b0:	2300      	movs	r3, #0
 80183b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80183ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d196      	bne.n	80182f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80183c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80183c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183c8:	4413      	add	r3, r2
 80183ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80183d0:	f1a3 0213 	sub.w	r2, r3, #19
 80183d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183d8:	429a      	cmp	r2, r3
 80183da:	bfcc      	ite	gt
 80183dc:	2301      	movgt	r3, #1
 80183de:	2300      	movle	r3, #0
 80183e0:	b2db      	uxtb	r3, r3
 80183e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80183e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80183e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80183ee:	6a3b      	ldr	r3, [r7, #32]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d002      	beq.n	80183fa <ip4_frag+0x1f6>
 80183f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d003      	beq.n	8018402 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80183fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018400:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018404:	4618      	mov	r0, r3
 8018406:	f7f3 f8b1 	bl	800b56c <lwip_htons>
 801840a:	4603      	mov	r3, r0
 801840c:	461a      	mov	r2, r3
 801840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018410:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018412:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018414:	3314      	adds	r3, #20
 8018416:	b29b      	uxth	r3, r3
 8018418:	4618      	mov	r0, r3
 801841a:	f7f3 f8a7 	bl	800b56c <lwip_htons>
 801841e:	4603      	mov	r3, r0
 8018420:	461a      	mov	r2, r3
 8018422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018424:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018428:	2200      	movs	r2, #0
 801842a:	729a      	strb	r2, [r3, #10]
 801842c:	2200      	movs	r2, #0
 801842e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	695b      	ldr	r3, [r3, #20]
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018438:	68b8      	ldr	r0, [r7, #8]
 801843a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801843c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801843e:	f7f4 fcc9 	bl	800cdd4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018442:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018448:	1ad3      	subs	r3, r2, r3
 801844a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801844e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018452:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018454:	4413      	add	r3, r2
 8018456:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801845a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801845e:	2b00      	cmp	r3, #0
 8018460:	f47f af19 	bne.w	8018296 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018464:	2300      	movs	r3, #0
 8018466:	e002      	b.n	801846e <ip4_frag+0x26a>
      goto memerr;
 8018468:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801846a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801846e:	4618      	mov	r0, r3
 8018470:	3748      	adds	r7, #72	; 0x48
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	0801d9f0 	.word	0x0801d9f0
 801847c:	0801dbcc 	.word	0x0801dbcc
 8018480:	0801da38 	.word	0x0801da38
 8018484:	0801dbe8 	.word	0x0801dbe8
 8018488:	0801dc08 	.word	0x0801dc08
 801848c:	0801819d 	.word	0x0801819d

08018490 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b086      	sub	sp, #24
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801849a:	230e      	movs	r3, #14
 801849c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	895b      	ldrh	r3, [r3, #10]
 80184a2:	2b0e      	cmp	r3, #14
 80184a4:	d96e      	bls.n	8018584 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	7bdb      	ldrb	r3, [r3, #15]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d106      	bne.n	80184bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80184b4:	3301      	adds	r3, #1
 80184b6:	b2da      	uxtb	r2, r3
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	685b      	ldr	r3, [r3, #4]
 80184c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80184c2:	693b      	ldr	r3, [r7, #16]
 80184c4:	7b1a      	ldrb	r2, [r3, #12]
 80184c6:	7b5b      	ldrb	r3, [r3, #13]
 80184c8:	021b      	lsls	r3, r3, #8
 80184ca:	4313      	orrs	r3, r2
 80184cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80184ce:	693b      	ldr	r3, [r7, #16]
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	f003 0301 	and.w	r3, r3, #1
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d023      	beq.n	8018522 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	781b      	ldrb	r3, [r3, #0]
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d10f      	bne.n	8018502 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	785b      	ldrb	r3, [r3, #1]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d11b      	bne.n	8018522 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80184ee:	2b5e      	cmp	r3, #94	; 0x5e
 80184f0:	d117      	bne.n	8018522 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	7b5b      	ldrb	r3, [r3, #13]
 80184f6:	f043 0310 	orr.w	r3, r3, #16
 80184fa:	b2da      	uxtb	r2, r3
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	735a      	strb	r2, [r3, #13]
 8018500:	e00f      	b.n	8018522 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018502:	693b      	ldr	r3, [r7, #16]
 8018504:	2206      	movs	r2, #6
 8018506:	4928      	ldr	r1, [pc, #160]	; (80185a8 <ethernet_input+0x118>)
 8018508:	4618      	mov	r0, r3
 801850a:	f000 fcfb 	bl	8018f04 <memcmp>
 801850e:	4603      	mov	r3, r0
 8018510:	2b00      	cmp	r3, #0
 8018512:	d106      	bne.n	8018522 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	7b5b      	ldrb	r3, [r3, #13]
 8018518:	f043 0308 	orr.w	r3, r3, #8
 801851c:	b2da      	uxtb	r2, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018522:	89fb      	ldrh	r3, [r7, #14]
 8018524:	2b08      	cmp	r3, #8
 8018526:	d003      	beq.n	8018530 <ethernet_input+0xa0>
 8018528:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801852c:	d014      	beq.n	8018558 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801852e:	e032      	b.n	8018596 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018530:	683b      	ldr	r3, [r7, #0]
 8018532:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018536:	f003 0308 	and.w	r3, r3, #8
 801853a:	2b00      	cmp	r3, #0
 801853c:	d024      	beq.n	8018588 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801853e:	8afb      	ldrh	r3, [r7, #22]
 8018540:	4619      	mov	r1, r3
 8018542:	6878      	ldr	r0, [r7, #4]
 8018544:	f7f4 fbc0 	bl	800ccc8 <pbuf_remove_header>
 8018548:	4603      	mov	r3, r0
 801854a:	2b00      	cmp	r3, #0
 801854c:	d11e      	bne.n	801858c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801854e:	6839      	ldr	r1, [r7, #0]
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f7fe ff03 	bl	801735c <ip4_input>
      break;
 8018556:	e013      	b.n	8018580 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801855e:	f003 0308 	and.w	r3, r3, #8
 8018562:	2b00      	cmp	r3, #0
 8018564:	d014      	beq.n	8018590 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018566:	8afb      	ldrh	r3, [r7, #22]
 8018568:	4619      	mov	r1, r3
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f7f4 fbac 	bl	800ccc8 <pbuf_remove_header>
 8018570:	4603      	mov	r3, r0
 8018572:	2b00      	cmp	r3, #0
 8018574:	d10e      	bne.n	8018594 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018576:	6839      	ldr	r1, [r7, #0]
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f7fe f89f 	bl	80166bc <etharp_input>
      break;
 801857e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018580:	2300      	movs	r3, #0
 8018582:	e00c      	b.n	801859e <ethernet_input+0x10e>
    goto free_and_return;
 8018584:	bf00      	nop
 8018586:	e006      	b.n	8018596 <ethernet_input+0x106>
        goto free_and_return;
 8018588:	bf00      	nop
 801858a:	e004      	b.n	8018596 <ethernet_input+0x106>
        goto free_and_return;
 801858c:	bf00      	nop
 801858e:	e002      	b.n	8018596 <ethernet_input+0x106>
        goto free_and_return;
 8018590:	bf00      	nop
 8018592:	e000      	b.n	8018596 <ethernet_input+0x106>
        goto free_and_return;
 8018594:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f7f4 fc1c 	bl	800cdd4 <pbuf_free>
  return ERR_OK;
 801859c:	2300      	movs	r3, #0
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3718      	adds	r7, #24
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	08027f34 	.word	0x08027f34

080185ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b086      	sub	sp, #24
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
 80185b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80185ba:	8c3b      	ldrh	r3, [r7, #32]
 80185bc:	4618      	mov	r0, r3
 80185be:	f7f2 ffd5 	bl	800b56c <lwip_htons>
 80185c2:	4603      	mov	r3, r0
 80185c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80185c6:	210e      	movs	r1, #14
 80185c8:	68b8      	ldr	r0, [r7, #8]
 80185ca:	f7f4 fb6d 	bl	800cca8 <pbuf_add_header>
 80185ce:	4603      	mov	r3, r0
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d125      	bne.n	8018620 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	8afa      	ldrh	r2, [r7, #22]
 80185de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80185e0:	693b      	ldr	r3, [r7, #16]
 80185e2:	2206      	movs	r2, #6
 80185e4:	6839      	ldr	r1, [r7, #0]
 80185e6:	4618      	mov	r0, r3
 80185e8:	f000 fe16 	bl	8019218 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	3306      	adds	r3, #6
 80185f0:	2206      	movs	r2, #6
 80185f2:	6879      	ldr	r1, [r7, #4]
 80185f4:	4618      	mov	r0, r3
 80185f6:	f000 fe0f 	bl	8019218 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018600:	2b06      	cmp	r3, #6
 8018602:	d006      	beq.n	8018612 <ethernet_output+0x66>
 8018604:	4b0a      	ldr	r3, [pc, #40]	; (8018630 <ethernet_output+0x84>)
 8018606:	f44f 7299 	mov.w	r2, #306	; 0x132
 801860a:	490a      	ldr	r1, [pc, #40]	; (8018634 <ethernet_output+0x88>)
 801860c:	480a      	ldr	r0, [pc, #40]	; (8018638 <ethernet_output+0x8c>)
 801860e:	f000 fb13 	bl	8018c38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	699b      	ldr	r3, [r3, #24]
 8018616:	68b9      	ldr	r1, [r7, #8]
 8018618:	68f8      	ldr	r0, [r7, #12]
 801861a:	4798      	blx	r3
 801861c:	4603      	mov	r3, r0
 801861e:	e002      	b.n	8018626 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018620:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018622:	f06f 0301 	mvn.w	r3, #1
}
 8018626:	4618      	mov	r0, r3
 8018628:	3718      	adds	r7, #24
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	0801dc18 	.word	0x0801dc18
 8018634:	0801dc50 	.word	0x0801dc50
 8018638:	0801dc84 	.word	0x0801dc84

0801863c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b086      	sub	sp, #24
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	60bb      	str	r3, [r7, #8]
 801864a:	2304      	movs	r3, #4
 801864c:	60fb      	str	r3, [r7, #12]
 801864e:	2300      	movs	r3, #0
 8018650:	613b      	str	r3, [r7, #16]
 8018652:	2300      	movs	r3, #0
 8018654:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018656:	f107 0308 	add.w	r3, r7, #8
 801865a:	2100      	movs	r1, #0
 801865c:	4618      	mov	r0, r3
 801865e:	f7ec fee2 	bl	8005426 <osMessageCreate>
 8018662:	4602      	mov	r2, r0
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d102      	bne.n	8018676 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018670:	f04f 33ff 	mov.w	r3, #4294967295
 8018674:	e000      	b.n	8018678 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018676:	2300      	movs	r3, #0
}
 8018678:	4618      	mov	r0, r3
 801867a:	3718      	adds	r7, #24
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}

08018680 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b082      	sub	sp, #8
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	4618      	mov	r0, r3
 801868e:	f7ec ffa7 	bl	80055e0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4618      	mov	r0, r3
 8018698:	f7ec ffb8 	bl	800560c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801869c:	bf00      	nop
 801869e:	3708      	adds	r7, #8
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	6839      	ldr	r1, [r7, #0]
 80186b4:	2200      	movs	r2, #0
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7ec fede 	bl	8005478 <osMessagePut>
 80186bc:	4603      	mov	r3, r0
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d102      	bne.n	80186c8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	73fb      	strb	r3, [r7, #15]
 80186c6:	e001      	b.n	80186cc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80186c8:	23ff      	movs	r3, #255	; 0xff
 80186ca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80186cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	3710      	adds	r7, #16
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b08c      	sub	sp, #48	; 0x30
 80186dc:	af00      	add	r7, sp, #0
 80186de:	61f8      	str	r0, [r7, #28]
 80186e0:	61b9      	str	r1, [r7, #24]
 80186e2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80186e4:	f7ec fcca 	bl	800507c <osKernelSysTick>
 80186e8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d017      	beq.n	8018720 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	6819      	ldr	r1, [r3, #0]
 80186f4:	f107 0320 	add.w	r3, r7, #32
 80186f8:	697a      	ldr	r2, [r7, #20]
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7ec fefc 	bl	80054f8 <osMessageGet>

    if(event.status == osEventMessage)
 8018700:	6a3b      	ldr	r3, [r7, #32]
 8018702:	2b10      	cmp	r3, #16
 8018704:	d109      	bne.n	801871a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018708:	461a      	mov	r2, r3
 801870a:	69bb      	ldr	r3, [r7, #24]
 801870c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801870e:	f7ec fcb5 	bl	800507c <osKernelSysTick>
 8018712:	4602      	mov	r2, r0
 8018714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018716:	1ad3      	subs	r3, r2, r3
 8018718:	e019      	b.n	801874e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801871a:	f04f 33ff 	mov.w	r3, #4294967295
 801871e:	e016      	b.n	801874e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018720:	69fb      	ldr	r3, [r7, #28]
 8018722:	6819      	ldr	r1, [r3, #0]
 8018724:	463b      	mov	r3, r7
 8018726:	f04f 32ff 	mov.w	r2, #4294967295
 801872a:	4618      	mov	r0, r3
 801872c:	f7ec fee4 	bl	80054f8 <osMessageGet>
 8018730:	f107 0320 	add.w	r3, r7, #32
 8018734:	463a      	mov	r2, r7
 8018736:	ca07      	ldmia	r2, {r0, r1, r2}
 8018738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873e:	461a      	mov	r2, r3
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018744:	f7ec fc9a 	bl	800507c <osKernelSysTick>
 8018748:	4602      	mov	r2, r0
 801874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801874e:	4618      	mov	r0, r3
 8018750:	3730      	adds	r7, #48	; 0x30
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b086      	sub	sp, #24
 801875a:	af00      	add	r7, sp, #0
 801875c:	6078      	str	r0, [r7, #4]
 801875e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6819      	ldr	r1, [r3, #0]
 8018764:	f107 030c 	add.w	r3, r7, #12
 8018768:	2200      	movs	r2, #0
 801876a:	4618      	mov	r0, r3
 801876c:	f7ec fec4 	bl	80054f8 <osMessageGet>

  if(event.status == osEventMessage)
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	2b10      	cmp	r3, #16
 8018774:	d105      	bne.n	8018782 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018776:	693b      	ldr	r3, [r7, #16]
 8018778:	461a      	mov	r2, r3
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801877e:	2300      	movs	r3, #0
 8018780:	e001      	b.n	8018786 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018782:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018786:	4618      	mov	r0, r3
 8018788:	3718      	adds	r7, #24
 801878a:	46bd      	mov	sp, r7
 801878c:	bd80      	pop	{r7, pc}

0801878e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801878e:	b480      	push	{r7}
 8018790:	b083      	sub	sp, #12
 8018792:	af00      	add	r7, sp, #0
 8018794:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d101      	bne.n	80187a2 <sys_mbox_valid+0x14>
    return 0;
 801879e:	2300      	movs	r3, #0
 80187a0:	e000      	b.n	80187a4 <sys_mbox_valid+0x16>
  else
    return 1;
 80187a2:	2301      	movs	r3, #1
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	370c      	adds	r7, #12
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr

080187b0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80187b0:	b480      	push	{r7}
 80187b2:	b083      	sub	sp, #12
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2200      	movs	r2, #0
 80187bc:	601a      	str	r2, [r3, #0]
}
 80187be:	bf00      	nop
 80187c0:	370c      	adds	r7, #12
 80187c2:	46bd      	mov	sp, r7
 80187c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c8:	4770      	bx	lr

080187ca <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80187ca:	b580      	push	{r7, lr}
 80187cc:	b084      	sub	sp, #16
 80187ce:	af00      	add	r7, sp, #0
 80187d0:	6078      	str	r0, [r7, #4]
 80187d2:	460b      	mov	r3, r1
 80187d4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80187d6:	2300      	movs	r3, #0
 80187d8:	60bb      	str	r3, [r7, #8]
 80187da:	2300      	movs	r3, #0
 80187dc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80187de:	f107 0308 	add.w	r3, r7, #8
 80187e2:	2101      	movs	r1, #1
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7ec fd55 	bl	8005294 <osSemaphoreCreate>
 80187ea:	4602      	mov	r2, r0
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d102      	bne.n	80187fe <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80187f8:	f04f 33ff 	mov.w	r3, #4294967295
 80187fc:	e009      	b.n	8018812 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80187fe:	78fb      	ldrb	r3, [r7, #3]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d105      	bne.n	8018810 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2100      	movs	r1, #0
 801880a:	4618      	mov	r0, r3
 801880c:	f7ec fd74 	bl	80052f8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018810:	2300      	movs	r3, #0
}
 8018812:	4618      	mov	r0, r3
 8018814:	3710      	adds	r7, #16
 8018816:	46bd      	mov	sp, r7
 8018818:	bd80      	pop	{r7, pc}

0801881a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801881a:	b580      	push	{r7, lr}
 801881c:	b084      	sub	sp, #16
 801881e:	af00      	add	r7, sp, #0
 8018820:	6078      	str	r0, [r7, #4]
 8018822:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018824:	f7ec fc2a 	bl	800507c <osKernelSysTick>
 8018828:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d011      	beq.n	8018854 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	6839      	ldr	r1, [r7, #0]
 8018836:	4618      	mov	r0, r3
 8018838:	f7ec fd5e 	bl	80052f8 <osSemaphoreWait>
 801883c:	4603      	mov	r3, r0
 801883e:	2b00      	cmp	r3, #0
 8018840:	d105      	bne.n	801884e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018842:	f7ec fc1b 	bl	800507c <osKernelSysTick>
 8018846:	4602      	mov	r2, r0
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	1ad3      	subs	r3, r2, r3
 801884c:	e012      	b.n	8018874 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801884e:	f04f 33ff 	mov.w	r3, #4294967295
 8018852:	e00f      	b.n	8018874 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018854:	bf00      	nop
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f04f 31ff 	mov.w	r1, #4294967295
 801885e:	4618      	mov	r0, r3
 8018860:	f7ec fd4a 	bl	80052f8 <osSemaphoreWait>
 8018864:	4603      	mov	r3, r0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d1f5      	bne.n	8018856 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801886a:	f7ec fc07 	bl	800507c <osKernelSysTick>
 801886e:	4602      	mov	r2, r0
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018874:	4618      	mov	r0, r3
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b082      	sub	sp, #8
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	4618      	mov	r0, r3
 801888a:	f7ec fd83 	bl	8005394 <osSemaphoreRelease>
}
 801888e:	bf00      	nop
 8018890:	3708      	adds	r7, #8
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}

08018896 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018896:	b580      	push	{r7, lr}
 8018898:	b082      	sub	sp, #8
 801889a:	af00      	add	r7, sp, #0
 801889c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7ec fdac 	bl	8005400 <osSemaphoreDelete>
}
 80188a8:	bf00      	nop
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80188b0:	b480      	push	{r7}
 80188b2:	b083      	sub	sp, #12
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d101      	bne.n	80188c4 <sys_sem_valid+0x14>
    return 0;
 80188c0:	2300      	movs	r3, #0
 80188c2:	e000      	b.n	80188c6 <sys_sem_valid+0x16>
  else
    return 1;
 80188c4:	2301      	movs	r3, #1
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	370c      	adds	r7, #12
 80188ca:	46bd      	mov	sp, r7
 80188cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d0:	4770      	bx	lr

080188d2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80188d2:	b480      	push	{r7}
 80188d4:	b083      	sub	sp, #12
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	2200      	movs	r2, #0
 80188de:	601a      	str	r2, [r3, #0]
}
 80188e0:	bf00      	nop
 80188e2:	370c      	adds	r7, #12
 80188e4:	46bd      	mov	sp, r7
 80188e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ea:	4770      	bx	lr

080188ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80188f0:	4803      	ldr	r0, [pc, #12]	; (8018900 <sys_init+0x14>)
 80188f2:	f7ec fc33 	bl	800515c <osMutexCreate>
 80188f6:	4603      	mov	r3, r0
 80188f8:	4a02      	ldr	r2, [pc, #8]	; (8018904 <sys_init+0x18>)
 80188fa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80188fc:	bf00      	nop
 80188fe:	bd80      	pop	{r7, pc}
 8018900:	08027f44 	.word	0x08027f44
 8018904:	20011340 	.word	0x20011340

08018908 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018910:	2300      	movs	r3, #0
 8018912:	60bb      	str	r3, [r7, #8]
 8018914:	2300      	movs	r3, #0
 8018916:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018918:	f107 0308 	add.w	r3, r7, #8
 801891c:	4618      	mov	r0, r3
 801891e:	f7ec fc1d 	bl	800515c <osMutexCreate>
 8018922:	4602      	mov	r2, r0
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d102      	bne.n	8018936 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018930:	f04f 33ff 	mov.w	r3, #4294967295
 8018934:	e000      	b.n	8018938 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018936:	2300      	movs	r3, #0
}
 8018938:	4618      	mov	r0, r3
 801893a:	3710      	adds	r7, #16
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}

08018940 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	f04f 31ff 	mov.w	r1, #4294967295
 8018950:	4618      	mov	r0, r3
 8018952:	f7ec fc1b 	bl	800518c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018956:	bf00      	nop
 8018958:	3708      	adds	r7, #8
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}

0801895e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801895e:	b580      	push	{r7, lr}
 8018960:	b082      	sub	sp, #8
 8018962:	af00      	add	r7, sp, #0
 8018964:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	4618      	mov	r0, r3
 801896c:	f7ec fc5c 	bl	8005228 <osMutexRelease>
}
 8018970:	bf00      	nop
 8018972:	3708      	adds	r7, #8
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}

08018978 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b08c      	sub	sp, #48	; 0x30
 801897c:	af00      	add	r7, sp, #0
 801897e:	60f8      	str	r0, [r7, #12]
 8018980:	60b9      	str	r1, [r7, #8]
 8018982:	607a      	str	r2, [r7, #4]
 8018984:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018986:	f107 0314 	add.w	r3, r7, #20
 801898a:	2200      	movs	r2, #0
 801898c:	601a      	str	r2, [r3, #0]
 801898e:	605a      	str	r2, [r3, #4]
 8018990:	609a      	str	r2, [r3, #8]
 8018992:	60da      	str	r2, [r3, #12]
 8018994:	611a      	str	r2, [r3, #16]
 8018996:	615a      	str	r2, [r3, #20]
 8018998:	619a      	str	r2, [r3, #24]
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	617b      	str	r3, [r7, #20]
 801899e:	68bb      	ldr	r3, [r7, #8]
 80189a0:	61bb      	str	r3, [r7, #24]
 80189a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189a4:	b21b      	sxth	r3, r3
 80189a6:	83bb      	strh	r3, [r7, #28]
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80189ac:	f107 0314 	add.w	r3, r7, #20
 80189b0:	6879      	ldr	r1, [r7, #4]
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7ec fb72 	bl	800509c <osThreadCreate>
 80189b8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	3730      	adds	r7, #48	; 0x30
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd80      	pop	{r7, pc}
	...

080189c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80189c8:	4b04      	ldr	r3, [pc, #16]	; (80189dc <sys_arch_protect+0x18>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f04f 31ff 	mov.w	r1, #4294967295
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7ec fbdb 	bl	800518c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80189d6:	2301      	movs	r3, #1
}
 80189d8:	4618      	mov	r0, r3
 80189da:	bd80      	pop	{r7, pc}
 80189dc:	20011340 	.word	0x20011340

080189e0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80189e8:	4b04      	ldr	r3, [pc, #16]	; (80189fc <sys_arch_unprotect+0x1c>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7ec fc1b 	bl	8005228 <osMutexRelease>
}
 80189f2:	bf00      	nop
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}
 80189fa:	bf00      	nop
 80189fc:	20011340 	.word	0x20011340

08018a00 <srand>:
 8018a00:	b538      	push	{r3, r4, r5, lr}
 8018a02:	4b10      	ldr	r3, [pc, #64]	; (8018a44 <srand+0x44>)
 8018a04:	681d      	ldr	r5, [r3, #0]
 8018a06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018a08:	4604      	mov	r4, r0
 8018a0a:	b9b3      	cbnz	r3, 8018a3a <srand+0x3a>
 8018a0c:	2018      	movs	r0, #24
 8018a0e:	f000 fc7b 	bl	8019308 <malloc>
 8018a12:	4602      	mov	r2, r0
 8018a14:	6328      	str	r0, [r5, #48]	; 0x30
 8018a16:	b920      	cbnz	r0, 8018a22 <srand+0x22>
 8018a18:	4b0b      	ldr	r3, [pc, #44]	; (8018a48 <srand+0x48>)
 8018a1a:	480c      	ldr	r0, [pc, #48]	; (8018a4c <srand+0x4c>)
 8018a1c:	2146      	movs	r1, #70	; 0x46
 8018a1e:	f000 fc09 	bl	8019234 <__assert_func>
 8018a22:	490b      	ldr	r1, [pc, #44]	; (8018a50 <srand+0x50>)
 8018a24:	4b0b      	ldr	r3, [pc, #44]	; (8018a54 <srand+0x54>)
 8018a26:	e9c0 1300 	strd	r1, r3, [r0]
 8018a2a:	4b0b      	ldr	r3, [pc, #44]	; (8018a58 <srand+0x58>)
 8018a2c:	6083      	str	r3, [r0, #8]
 8018a2e:	230b      	movs	r3, #11
 8018a30:	8183      	strh	r3, [r0, #12]
 8018a32:	2100      	movs	r1, #0
 8018a34:	2001      	movs	r0, #1
 8018a36:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018a3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	611c      	str	r4, [r3, #16]
 8018a40:	615a      	str	r2, [r3, #20]
 8018a42:	bd38      	pop	{r3, r4, r5, pc}
 8018a44:	2000008c 	.word	0x2000008c
 8018a48:	08027f4c 	.word	0x08027f4c
 8018a4c:	08027f63 	.word	0x08027f63
 8018a50:	abcd330e 	.word	0xabcd330e
 8018a54:	e66d1234 	.word	0xe66d1234
 8018a58:	0005deec 	.word	0x0005deec

08018a5c <rand>:
 8018a5c:	4b16      	ldr	r3, [pc, #88]	; (8018ab8 <rand+0x5c>)
 8018a5e:	b510      	push	{r4, lr}
 8018a60:	681c      	ldr	r4, [r3, #0]
 8018a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018a64:	b9b3      	cbnz	r3, 8018a94 <rand+0x38>
 8018a66:	2018      	movs	r0, #24
 8018a68:	f000 fc4e 	bl	8019308 <malloc>
 8018a6c:	4602      	mov	r2, r0
 8018a6e:	6320      	str	r0, [r4, #48]	; 0x30
 8018a70:	b920      	cbnz	r0, 8018a7c <rand+0x20>
 8018a72:	4b12      	ldr	r3, [pc, #72]	; (8018abc <rand+0x60>)
 8018a74:	4812      	ldr	r0, [pc, #72]	; (8018ac0 <rand+0x64>)
 8018a76:	2152      	movs	r1, #82	; 0x52
 8018a78:	f000 fbdc 	bl	8019234 <__assert_func>
 8018a7c:	4911      	ldr	r1, [pc, #68]	; (8018ac4 <rand+0x68>)
 8018a7e:	4b12      	ldr	r3, [pc, #72]	; (8018ac8 <rand+0x6c>)
 8018a80:	e9c0 1300 	strd	r1, r3, [r0]
 8018a84:	4b11      	ldr	r3, [pc, #68]	; (8018acc <rand+0x70>)
 8018a86:	6083      	str	r3, [r0, #8]
 8018a88:	230b      	movs	r3, #11
 8018a8a:	8183      	strh	r3, [r0, #12]
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	2001      	movs	r0, #1
 8018a90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018a94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018a96:	480e      	ldr	r0, [pc, #56]	; (8018ad0 <rand+0x74>)
 8018a98:	690b      	ldr	r3, [r1, #16]
 8018a9a:	694c      	ldr	r4, [r1, #20]
 8018a9c:	4a0d      	ldr	r2, [pc, #52]	; (8018ad4 <rand+0x78>)
 8018a9e:	4358      	muls	r0, r3
 8018aa0:	fb02 0004 	mla	r0, r2, r4, r0
 8018aa4:	fba3 3202 	umull	r3, r2, r3, r2
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	eb40 0002 	adc.w	r0, r0, r2
 8018aae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018ab2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018ab6:	bd10      	pop	{r4, pc}
 8018ab8:	2000008c 	.word	0x2000008c
 8018abc:	08027f4c 	.word	0x08027f4c
 8018ac0:	08027f63 	.word	0x08027f63
 8018ac4:	abcd330e 	.word	0xabcd330e
 8018ac8:	e66d1234 	.word	0xe66d1234
 8018acc:	0005deec 	.word	0x0005deec
 8018ad0:	5851f42d 	.word	0x5851f42d
 8018ad4:	4c957f2d 	.word	0x4c957f2d

08018ad8 <std>:
 8018ad8:	2300      	movs	r3, #0
 8018ada:	b510      	push	{r4, lr}
 8018adc:	4604      	mov	r4, r0
 8018ade:	e9c0 3300 	strd	r3, r3, [r0]
 8018ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018ae6:	6083      	str	r3, [r0, #8]
 8018ae8:	8181      	strh	r1, [r0, #12]
 8018aea:	6643      	str	r3, [r0, #100]	; 0x64
 8018aec:	81c2      	strh	r2, [r0, #14]
 8018aee:	6183      	str	r3, [r0, #24]
 8018af0:	4619      	mov	r1, r3
 8018af2:	2208      	movs	r2, #8
 8018af4:	305c      	adds	r0, #92	; 0x5c
 8018af6:	f000 fa2f 	bl	8018f58 <memset>
 8018afa:	4b05      	ldr	r3, [pc, #20]	; (8018b10 <std+0x38>)
 8018afc:	6263      	str	r3, [r4, #36]	; 0x24
 8018afe:	4b05      	ldr	r3, [pc, #20]	; (8018b14 <std+0x3c>)
 8018b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8018b02:	4b05      	ldr	r3, [pc, #20]	; (8018b18 <std+0x40>)
 8018b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018b06:	4b05      	ldr	r3, [pc, #20]	; (8018b1c <std+0x44>)
 8018b08:	6224      	str	r4, [r4, #32]
 8018b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8018b0c:	bd10      	pop	{r4, pc}
 8018b0e:	bf00      	nop
 8018b10:	08018d55 	.word	0x08018d55
 8018b14:	08018d77 	.word	0x08018d77
 8018b18:	08018daf 	.word	0x08018daf
 8018b1c:	08018dd3 	.word	0x08018dd3

08018b20 <stdio_exit_handler>:
 8018b20:	4a02      	ldr	r2, [pc, #8]	; (8018b2c <stdio_exit_handler+0xc>)
 8018b22:	4903      	ldr	r1, [pc, #12]	; (8018b30 <stdio_exit_handler+0x10>)
 8018b24:	4803      	ldr	r0, [pc, #12]	; (8018b34 <stdio_exit_handler+0x14>)
 8018b26:	f000 b869 	b.w	8018bfc <_fwalk_sglue>
 8018b2a:	bf00      	nop
 8018b2c:	20000034 	.word	0x20000034
 8018b30:	08019dd5 	.word	0x08019dd5
 8018b34:	20000040 	.word	0x20000040

08018b38 <cleanup_stdio>:
 8018b38:	6841      	ldr	r1, [r0, #4]
 8018b3a:	4b0c      	ldr	r3, [pc, #48]	; (8018b6c <cleanup_stdio+0x34>)
 8018b3c:	4299      	cmp	r1, r3
 8018b3e:	b510      	push	{r4, lr}
 8018b40:	4604      	mov	r4, r0
 8018b42:	d001      	beq.n	8018b48 <cleanup_stdio+0x10>
 8018b44:	f001 f946 	bl	8019dd4 <_fflush_r>
 8018b48:	68a1      	ldr	r1, [r4, #8]
 8018b4a:	4b09      	ldr	r3, [pc, #36]	; (8018b70 <cleanup_stdio+0x38>)
 8018b4c:	4299      	cmp	r1, r3
 8018b4e:	d002      	beq.n	8018b56 <cleanup_stdio+0x1e>
 8018b50:	4620      	mov	r0, r4
 8018b52:	f001 f93f 	bl	8019dd4 <_fflush_r>
 8018b56:	68e1      	ldr	r1, [r4, #12]
 8018b58:	4b06      	ldr	r3, [pc, #24]	; (8018b74 <cleanup_stdio+0x3c>)
 8018b5a:	4299      	cmp	r1, r3
 8018b5c:	d004      	beq.n	8018b68 <cleanup_stdio+0x30>
 8018b5e:	4620      	mov	r0, r4
 8018b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b64:	f001 b936 	b.w	8019dd4 <_fflush_r>
 8018b68:	bd10      	pop	{r4, pc}
 8018b6a:	bf00      	nop
 8018b6c:	20011344 	.word	0x20011344
 8018b70:	200113ac 	.word	0x200113ac
 8018b74:	20011414 	.word	0x20011414

08018b78 <global_stdio_init.part.0>:
 8018b78:	b510      	push	{r4, lr}
 8018b7a:	4b0b      	ldr	r3, [pc, #44]	; (8018ba8 <global_stdio_init.part.0+0x30>)
 8018b7c:	4c0b      	ldr	r4, [pc, #44]	; (8018bac <global_stdio_init.part.0+0x34>)
 8018b7e:	4a0c      	ldr	r2, [pc, #48]	; (8018bb0 <global_stdio_init.part.0+0x38>)
 8018b80:	601a      	str	r2, [r3, #0]
 8018b82:	4620      	mov	r0, r4
 8018b84:	2200      	movs	r2, #0
 8018b86:	2104      	movs	r1, #4
 8018b88:	f7ff ffa6 	bl	8018ad8 <std>
 8018b8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018b90:	2201      	movs	r2, #1
 8018b92:	2109      	movs	r1, #9
 8018b94:	f7ff ffa0 	bl	8018ad8 <std>
 8018b98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018b9c:	2202      	movs	r2, #2
 8018b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ba2:	2112      	movs	r1, #18
 8018ba4:	f7ff bf98 	b.w	8018ad8 <std>
 8018ba8:	2001147c 	.word	0x2001147c
 8018bac:	20011344 	.word	0x20011344
 8018bb0:	08018b21 	.word	0x08018b21

08018bb4 <__sfp_lock_acquire>:
 8018bb4:	4801      	ldr	r0, [pc, #4]	; (8018bbc <__sfp_lock_acquire+0x8>)
 8018bb6:	f000 bb2d 	b.w	8019214 <__retarget_lock_acquire_recursive>
 8018bba:	bf00      	nop
 8018bbc:	20011485 	.word	0x20011485

08018bc0 <__sfp_lock_release>:
 8018bc0:	4801      	ldr	r0, [pc, #4]	; (8018bc8 <__sfp_lock_release+0x8>)
 8018bc2:	f000 bb28 	b.w	8019216 <__retarget_lock_release_recursive>
 8018bc6:	bf00      	nop
 8018bc8:	20011485 	.word	0x20011485

08018bcc <__sinit>:
 8018bcc:	b510      	push	{r4, lr}
 8018bce:	4604      	mov	r4, r0
 8018bd0:	f7ff fff0 	bl	8018bb4 <__sfp_lock_acquire>
 8018bd4:	6a23      	ldr	r3, [r4, #32]
 8018bd6:	b11b      	cbz	r3, 8018be0 <__sinit+0x14>
 8018bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bdc:	f7ff bff0 	b.w	8018bc0 <__sfp_lock_release>
 8018be0:	4b04      	ldr	r3, [pc, #16]	; (8018bf4 <__sinit+0x28>)
 8018be2:	6223      	str	r3, [r4, #32]
 8018be4:	4b04      	ldr	r3, [pc, #16]	; (8018bf8 <__sinit+0x2c>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d1f5      	bne.n	8018bd8 <__sinit+0xc>
 8018bec:	f7ff ffc4 	bl	8018b78 <global_stdio_init.part.0>
 8018bf0:	e7f2      	b.n	8018bd8 <__sinit+0xc>
 8018bf2:	bf00      	nop
 8018bf4:	08018b39 	.word	0x08018b39
 8018bf8:	2001147c 	.word	0x2001147c

08018bfc <_fwalk_sglue>:
 8018bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c00:	4607      	mov	r7, r0
 8018c02:	4688      	mov	r8, r1
 8018c04:	4614      	mov	r4, r2
 8018c06:	2600      	movs	r6, #0
 8018c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8018c10:	d505      	bpl.n	8018c1e <_fwalk_sglue+0x22>
 8018c12:	6824      	ldr	r4, [r4, #0]
 8018c14:	2c00      	cmp	r4, #0
 8018c16:	d1f7      	bne.n	8018c08 <_fwalk_sglue+0xc>
 8018c18:	4630      	mov	r0, r6
 8018c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c1e:	89ab      	ldrh	r3, [r5, #12]
 8018c20:	2b01      	cmp	r3, #1
 8018c22:	d907      	bls.n	8018c34 <_fwalk_sglue+0x38>
 8018c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c28:	3301      	adds	r3, #1
 8018c2a:	d003      	beq.n	8018c34 <_fwalk_sglue+0x38>
 8018c2c:	4629      	mov	r1, r5
 8018c2e:	4638      	mov	r0, r7
 8018c30:	47c0      	blx	r8
 8018c32:	4306      	orrs	r6, r0
 8018c34:	3568      	adds	r5, #104	; 0x68
 8018c36:	e7e9      	b.n	8018c0c <_fwalk_sglue+0x10>

08018c38 <iprintf>:
 8018c38:	b40f      	push	{r0, r1, r2, r3}
 8018c3a:	b507      	push	{r0, r1, r2, lr}
 8018c3c:	4906      	ldr	r1, [pc, #24]	; (8018c58 <iprintf+0x20>)
 8018c3e:	ab04      	add	r3, sp, #16
 8018c40:	6808      	ldr	r0, [r1, #0]
 8018c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c46:	6881      	ldr	r1, [r0, #8]
 8018c48:	9301      	str	r3, [sp, #4]
 8018c4a:	f000 fd93 	bl	8019774 <_vfiprintf_r>
 8018c4e:	b003      	add	sp, #12
 8018c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c54:	b004      	add	sp, #16
 8018c56:	4770      	bx	lr
 8018c58:	2000008c 	.word	0x2000008c

08018c5c <_puts_r>:
 8018c5c:	6a03      	ldr	r3, [r0, #32]
 8018c5e:	b570      	push	{r4, r5, r6, lr}
 8018c60:	6884      	ldr	r4, [r0, #8]
 8018c62:	4605      	mov	r5, r0
 8018c64:	460e      	mov	r6, r1
 8018c66:	b90b      	cbnz	r3, 8018c6c <_puts_r+0x10>
 8018c68:	f7ff ffb0 	bl	8018bcc <__sinit>
 8018c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c6e:	07db      	lsls	r3, r3, #31
 8018c70:	d405      	bmi.n	8018c7e <_puts_r+0x22>
 8018c72:	89a3      	ldrh	r3, [r4, #12]
 8018c74:	0598      	lsls	r0, r3, #22
 8018c76:	d402      	bmi.n	8018c7e <_puts_r+0x22>
 8018c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c7a:	f000 facb 	bl	8019214 <__retarget_lock_acquire_recursive>
 8018c7e:	89a3      	ldrh	r3, [r4, #12]
 8018c80:	0719      	lsls	r1, r3, #28
 8018c82:	d513      	bpl.n	8018cac <_puts_r+0x50>
 8018c84:	6923      	ldr	r3, [r4, #16]
 8018c86:	b18b      	cbz	r3, 8018cac <_puts_r+0x50>
 8018c88:	3e01      	subs	r6, #1
 8018c8a:	68a3      	ldr	r3, [r4, #8]
 8018c8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018c90:	3b01      	subs	r3, #1
 8018c92:	60a3      	str	r3, [r4, #8]
 8018c94:	b9e9      	cbnz	r1, 8018cd2 <_puts_r+0x76>
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	da2e      	bge.n	8018cf8 <_puts_r+0x9c>
 8018c9a:	4622      	mov	r2, r4
 8018c9c:	210a      	movs	r1, #10
 8018c9e:	4628      	mov	r0, r5
 8018ca0:	f000 f89b 	bl	8018dda <__swbuf_r>
 8018ca4:	3001      	adds	r0, #1
 8018ca6:	d007      	beq.n	8018cb8 <_puts_r+0x5c>
 8018ca8:	250a      	movs	r5, #10
 8018caa:	e007      	b.n	8018cbc <_puts_r+0x60>
 8018cac:	4621      	mov	r1, r4
 8018cae:	4628      	mov	r0, r5
 8018cb0:	f000 f8d0 	bl	8018e54 <__swsetup_r>
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	d0e7      	beq.n	8018c88 <_puts_r+0x2c>
 8018cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8018cbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018cbe:	07da      	lsls	r2, r3, #31
 8018cc0:	d405      	bmi.n	8018cce <_puts_r+0x72>
 8018cc2:	89a3      	ldrh	r3, [r4, #12]
 8018cc4:	059b      	lsls	r3, r3, #22
 8018cc6:	d402      	bmi.n	8018cce <_puts_r+0x72>
 8018cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cca:	f000 faa4 	bl	8019216 <__retarget_lock_release_recursive>
 8018cce:	4628      	mov	r0, r5
 8018cd0:	bd70      	pop	{r4, r5, r6, pc}
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	da04      	bge.n	8018ce0 <_puts_r+0x84>
 8018cd6:	69a2      	ldr	r2, [r4, #24]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	dc06      	bgt.n	8018cea <_puts_r+0x8e>
 8018cdc:	290a      	cmp	r1, #10
 8018cde:	d004      	beq.n	8018cea <_puts_r+0x8e>
 8018ce0:	6823      	ldr	r3, [r4, #0]
 8018ce2:	1c5a      	adds	r2, r3, #1
 8018ce4:	6022      	str	r2, [r4, #0]
 8018ce6:	7019      	strb	r1, [r3, #0]
 8018ce8:	e7cf      	b.n	8018c8a <_puts_r+0x2e>
 8018cea:	4622      	mov	r2, r4
 8018cec:	4628      	mov	r0, r5
 8018cee:	f000 f874 	bl	8018dda <__swbuf_r>
 8018cf2:	3001      	adds	r0, #1
 8018cf4:	d1c9      	bne.n	8018c8a <_puts_r+0x2e>
 8018cf6:	e7df      	b.n	8018cb8 <_puts_r+0x5c>
 8018cf8:	6823      	ldr	r3, [r4, #0]
 8018cfa:	250a      	movs	r5, #10
 8018cfc:	1c5a      	adds	r2, r3, #1
 8018cfe:	6022      	str	r2, [r4, #0]
 8018d00:	701d      	strb	r5, [r3, #0]
 8018d02:	e7db      	b.n	8018cbc <_puts_r+0x60>

08018d04 <puts>:
 8018d04:	4b02      	ldr	r3, [pc, #8]	; (8018d10 <puts+0xc>)
 8018d06:	4601      	mov	r1, r0
 8018d08:	6818      	ldr	r0, [r3, #0]
 8018d0a:	f7ff bfa7 	b.w	8018c5c <_puts_r>
 8018d0e:	bf00      	nop
 8018d10:	2000008c 	.word	0x2000008c

08018d14 <siprintf>:
 8018d14:	b40e      	push	{r1, r2, r3}
 8018d16:	b500      	push	{lr}
 8018d18:	b09c      	sub	sp, #112	; 0x70
 8018d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8018d1c:	9002      	str	r0, [sp, #8]
 8018d1e:	9006      	str	r0, [sp, #24]
 8018d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018d24:	4809      	ldr	r0, [pc, #36]	; (8018d4c <siprintf+0x38>)
 8018d26:	9107      	str	r1, [sp, #28]
 8018d28:	9104      	str	r1, [sp, #16]
 8018d2a:	4909      	ldr	r1, [pc, #36]	; (8018d50 <siprintf+0x3c>)
 8018d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d30:	9105      	str	r1, [sp, #20]
 8018d32:	6800      	ldr	r0, [r0, #0]
 8018d34:	9301      	str	r3, [sp, #4]
 8018d36:	a902      	add	r1, sp, #8
 8018d38:	f000 fbf4 	bl	8019524 <_svfiprintf_r>
 8018d3c:	9b02      	ldr	r3, [sp, #8]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	701a      	strb	r2, [r3, #0]
 8018d42:	b01c      	add	sp, #112	; 0x70
 8018d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d48:	b003      	add	sp, #12
 8018d4a:	4770      	bx	lr
 8018d4c:	2000008c 	.word	0x2000008c
 8018d50:	ffff0208 	.word	0xffff0208

08018d54 <__sread>:
 8018d54:	b510      	push	{r4, lr}
 8018d56:	460c      	mov	r4, r1
 8018d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d5c:	f000 fa12 	bl	8019184 <_read_r>
 8018d60:	2800      	cmp	r0, #0
 8018d62:	bfab      	itete	ge
 8018d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d66:	89a3      	ldrhlt	r3, [r4, #12]
 8018d68:	181b      	addge	r3, r3, r0
 8018d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d6e:	bfac      	ite	ge
 8018d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d72:	81a3      	strhlt	r3, [r4, #12]
 8018d74:	bd10      	pop	{r4, pc}

08018d76 <__swrite>:
 8018d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d7a:	461f      	mov	r7, r3
 8018d7c:	898b      	ldrh	r3, [r1, #12]
 8018d7e:	05db      	lsls	r3, r3, #23
 8018d80:	4605      	mov	r5, r0
 8018d82:	460c      	mov	r4, r1
 8018d84:	4616      	mov	r6, r2
 8018d86:	d505      	bpl.n	8018d94 <__swrite+0x1e>
 8018d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d8c:	2302      	movs	r3, #2
 8018d8e:	2200      	movs	r2, #0
 8018d90:	f000 f9e6 	bl	8019160 <_lseek_r>
 8018d94:	89a3      	ldrh	r3, [r4, #12]
 8018d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d9e:	81a3      	strh	r3, [r4, #12]
 8018da0:	4632      	mov	r2, r6
 8018da2:	463b      	mov	r3, r7
 8018da4:	4628      	mov	r0, r5
 8018da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018daa:	f000 b9fd 	b.w	80191a8 <_write_r>

08018dae <__sseek>:
 8018dae:	b510      	push	{r4, lr}
 8018db0:	460c      	mov	r4, r1
 8018db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018db6:	f000 f9d3 	bl	8019160 <_lseek_r>
 8018dba:	1c43      	adds	r3, r0, #1
 8018dbc:	89a3      	ldrh	r3, [r4, #12]
 8018dbe:	bf15      	itete	ne
 8018dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8018dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018dca:	81a3      	strheq	r3, [r4, #12]
 8018dcc:	bf18      	it	ne
 8018dce:	81a3      	strhne	r3, [r4, #12]
 8018dd0:	bd10      	pop	{r4, pc}

08018dd2 <__sclose>:
 8018dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dd6:	f000 b95d 	b.w	8019094 <_close_r>

08018dda <__swbuf_r>:
 8018dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ddc:	460e      	mov	r6, r1
 8018dde:	4614      	mov	r4, r2
 8018de0:	4605      	mov	r5, r0
 8018de2:	b118      	cbz	r0, 8018dec <__swbuf_r+0x12>
 8018de4:	6a03      	ldr	r3, [r0, #32]
 8018de6:	b90b      	cbnz	r3, 8018dec <__swbuf_r+0x12>
 8018de8:	f7ff fef0 	bl	8018bcc <__sinit>
 8018dec:	69a3      	ldr	r3, [r4, #24]
 8018dee:	60a3      	str	r3, [r4, #8]
 8018df0:	89a3      	ldrh	r3, [r4, #12]
 8018df2:	071a      	lsls	r2, r3, #28
 8018df4:	d525      	bpl.n	8018e42 <__swbuf_r+0x68>
 8018df6:	6923      	ldr	r3, [r4, #16]
 8018df8:	b31b      	cbz	r3, 8018e42 <__swbuf_r+0x68>
 8018dfa:	6823      	ldr	r3, [r4, #0]
 8018dfc:	6922      	ldr	r2, [r4, #16]
 8018dfe:	1a98      	subs	r0, r3, r2
 8018e00:	6963      	ldr	r3, [r4, #20]
 8018e02:	b2f6      	uxtb	r6, r6
 8018e04:	4283      	cmp	r3, r0
 8018e06:	4637      	mov	r7, r6
 8018e08:	dc04      	bgt.n	8018e14 <__swbuf_r+0x3a>
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f000 ffe1 	bl	8019dd4 <_fflush_r>
 8018e12:	b9e0      	cbnz	r0, 8018e4e <__swbuf_r+0x74>
 8018e14:	68a3      	ldr	r3, [r4, #8]
 8018e16:	3b01      	subs	r3, #1
 8018e18:	60a3      	str	r3, [r4, #8]
 8018e1a:	6823      	ldr	r3, [r4, #0]
 8018e1c:	1c5a      	adds	r2, r3, #1
 8018e1e:	6022      	str	r2, [r4, #0]
 8018e20:	701e      	strb	r6, [r3, #0]
 8018e22:	6962      	ldr	r2, [r4, #20]
 8018e24:	1c43      	adds	r3, r0, #1
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d004      	beq.n	8018e34 <__swbuf_r+0x5a>
 8018e2a:	89a3      	ldrh	r3, [r4, #12]
 8018e2c:	07db      	lsls	r3, r3, #31
 8018e2e:	d506      	bpl.n	8018e3e <__swbuf_r+0x64>
 8018e30:	2e0a      	cmp	r6, #10
 8018e32:	d104      	bne.n	8018e3e <__swbuf_r+0x64>
 8018e34:	4621      	mov	r1, r4
 8018e36:	4628      	mov	r0, r5
 8018e38:	f000 ffcc 	bl	8019dd4 <_fflush_r>
 8018e3c:	b938      	cbnz	r0, 8018e4e <__swbuf_r+0x74>
 8018e3e:	4638      	mov	r0, r7
 8018e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e42:	4621      	mov	r1, r4
 8018e44:	4628      	mov	r0, r5
 8018e46:	f000 f805 	bl	8018e54 <__swsetup_r>
 8018e4a:	2800      	cmp	r0, #0
 8018e4c:	d0d5      	beq.n	8018dfa <__swbuf_r+0x20>
 8018e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8018e52:	e7f4      	b.n	8018e3e <__swbuf_r+0x64>

08018e54 <__swsetup_r>:
 8018e54:	b538      	push	{r3, r4, r5, lr}
 8018e56:	4b2a      	ldr	r3, [pc, #168]	; (8018f00 <__swsetup_r+0xac>)
 8018e58:	4605      	mov	r5, r0
 8018e5a:	6818      	ldr	r0, [r3, #0]
 8018e5c:	460c      	mov	r4, r1
 8018e5e:	b118      	cbz	r0, 8018e68 <__swsetup_r+0x14>
 8018e60:	6a03      	ldr	r3, [r0, #32]
 8018e62:	b90b      	cbnz	r3, 8018e68 <__swsetup_r+0x14>
 8018e64:	f7ff feb2 	bl	8018bcc <__sinit>
 8018e68:	89a3      	ldrh	r3, [r4, #12]
 8018e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018e6e:	0718      	lsls	r0, r3, #28
 8018e70:	d422      	bmi.n	8018eb8 <__swsetup_r+0x64>
 8018e72:	06d9      	lsls	r1, r3, #27
 8018e74:	d407      	bmi.n	8018e86 <__swsetup_r+0x32>
 8018e76:	2309      	movs	r3, #9
 8018e78:	602b      	str	r3, [r5, #0]
 8018e7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018e7e:	81a3      	strh	r3, [r4, #12]
 8018e80:	f04f 30ff 	mov.w	r0, #4294967295
 8018e84:	e034      	b.n	8018ef0 <__swsetup_r+0x9c>
 8018e86:	0758      	lsls	r0, r3, #29
 8018e88:	d512      	bpl.n	8018eb0 <__swsetup_r+0x5c>
 8018e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e8c:	b141      	cbz	r1, 8018ea0 <__swsetup_r+0x4c>
 8018e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e92:	4299      	cmp	r1, r3
 8018e94:	d002      	beq.n	8018e9c <__swsetup_r+0x48>
 8018e96:	4628      	mov	r0, r5
 8018e98:	f000 f9ea 	bl	8019270 <_free_r>
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8018ea0:	89a3      	ldrh	r3, [r4, #12]
 8018ea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ea6:	81a3      	strh	r3, [r4, #12]
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	6063      	str	r3, [r4, #4]
 8018eac:	6923      	ldr	r3, [r4, #16]
 8018eae:	6023      	str	r3, [r4, #0]
 8018eb0:	89a3      	ldrh	r3, [r4, #12]
 8018eb2:	f043 0308 	orr.w	r3, r3, #8
 8018eb6:	81a3      	strh	r3, [r4, #12]
 8018eb8:	6923      	ldr	r3, [r4, #16]
 8018eba:	b94b      	cbnz	r3, 8018ed0 <__swsetup_r+0x7c>
 8018ebc:	89a3      	ldrh	r3, [r4, #12]
 8018ebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ec6:	d003      	beq.n	8018ed0 <__swsetup_r+0x7c>
 8018ec8:	4621      	mov	r1, r4
 8018eca:	4628      	mov	r0, r5
 8018ecc:	f000 ffe2 	bl	8019e94 <__smakebuf_r>
 8018ed0:	89a0      	ldrh	r0, [r4, #12]
 8018ed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ed6:	f010 0301 	ands.w	r3, r0, #1
 8018eda:	d00a      	beq.n	8018ef2 <__swsetup_r+0x9e>
 8018edc:	2300      	movs	r3, #0
 8018ede:	60a3      	str	r3, [r4, #8]
 8018ee0:	6963      	ldr	r3, [r4, #20]
 8018ee2:	425b      	negs	r3, r3
 8018ee4:	61a3      	str	r3, [r4, #24]
 8018ee6:	6923      	ldr	r3, [r4, #16]
 8018ee8:	b943      	cbnz	r3, 8018efc <__swsetup_r+0xa8>
 8018eea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018eee:	d1c4      	bne.n	8018e7a <__swsetup_r+0x26>
 8018ef0:	bd38      	pop	{r3, r4, r5, pc}
 8018ef2:	0781      	lsls	r1, r0, #30
 8018ef4:	bf58      	it	pl
 8018ef6:	6963      	ldrpl	r3, [r4, #20]
 8018ef8:	60a3      	str	r3, [r4, #8]
 8018efa:	e7f4      	b.n	8018ee6 <__swsetup_r+0x92>
 8018efc:	2000      	movs	r0, #0
 8018efe:	e7f7      	b.n	8018ef0 <__swsetup_r+0x9c>
 8018f00:	2000008c 	.word	0x2000008c

08018f04 <memcmp>:
 8018f04:	b510      	push	{r4, lr}
 8018f06:	3901      	subs	r1, #1
 8018f08:	4402      	add	r2, r0
 8018f0a:	4290      	cmp	r0, r2
 8018f0c:	d101      	bne.n	8018f12 <memcmp+0xe>
 8018f0e:	2000      	movs	r0, #0
 8018f10:	e005      	b.n	8018f1e <memcmp+0x1a>
 8018f12:	7803      	ldrb	r3, [r0, #0]
 8018f14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018f18:	42a3      	cmp	r3, r4
 8018f1a:	d001      	beq.n	8018f20 <memcmp+0x1c>
 8018f1c:	1b18      	subs	r0, r3, r4
 8018f1e:	bd10      	pop	{r4, pc}
 8018f20:	3001      	adds	r0, #1
 8018f22:	e7f2      	b.n	8018f0a <memcmp+0x6>

08018f24 <memmove>:
 8018f24:	4288      	cmp	r0, r1
 8018f26:	b510      	push	{r4, lr}
 8018f28:	eb01 0402 	add.w	r4, r1, r2
 8018f2c:	d902      	bls.n	8018f34 <memmove+0x10>
 8018f2e:	4284      	cmp	r4, r0
 8018f30:	4623      	mov	r3, r4
 8018f32:	d807      	bhi.n	8018f44 <memmove+0x20>
 8018f34:	1e43      	subs	r3, r0, #1
 8018f36:	42a1      	cmp	r1, r4
 8018f38:	d008      	beq.n	8018f4c <memmove+0x28>
 8018f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f42:	e7f8      	b.n	8018f36 <memmove+0x12>
 8018f44:	4402      	add	r2, r0
 8018f46:	4601      	mov	r1, r0
 8018f48:	428a      	cmp	r2, r1
 8018f4a:	d100      	bne.n	8018f4e <memmove+0x2a>
 8018f4c:	bd10      	pop	{r4, pc}
 8018f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f56:	e7f7      	b.n	8018f48 <memmove+0x24>

08018f58 <memset>:
 8018f58:	4402      	add	r2, r0
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	4293      	cmp	r3, r2
 8018f5e:	d100      	bne.n	8018f62 <memset+0xa>
 8018f60:	4770      	bx	lr
 8018f62:	f803 1b01 	strb.w	r1, [r3], #1
 8018f66:	e7f9      	b.n	8018f5c <memset+0x4>

08018f68 <strcasecmp>:
 8018f68:	b530      	push	{r4, r5, lr}
 8018f6a:	4d0b      	ldr	r5, [pc, #44]	; (8018f98 <strcasecmp+0x30>)
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f72:	5cea      	ldrb	r2, [r5, r3]
 8018f74:	f002 0203 	and.w	r2, r2, #3
 8018f78:	2a01      	cmp	r2, #1
 8018f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f7e:	5ca8      	ldrb	r0, [r5, r2]
 8018f80:	f000 0003 	and.w	r0, r0, #3
 8018f84:	bf08      	it	eq
 8018f86:	3320      	addeq	r3, #32
 8018f88:	2801      	cmp	r0, #1
 8018f8a:	bf08      	it	eq
 8018f8c:	3220      	addeq	r2, #32
 8018f8e:	1a98      	subs	r0, r3, r2
 8018f90:	d101      	bne.n	8018f96 <strcasecmp+0x2e>
 8018f92:	2a00      	cmp	r2, #0
 8018f94:	d1eb      	bne.n	8018f6e <strcasecmp+0x6>
 8018f96:	bd30      	pop	{r4, r5, pc}
 8018f98:	08027fbc 	.word	0x08027fbc

08018f9c <strchr>:
 8018f9c:	b2c9      	uxtb	r1, r1
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fa4:	b11a      	cbz	r2, 8018fae <strchr+0x12>
 8018fa6:	428a      	cmp	r2, r1
 8018fa8:	d1f9      	bne.n	8018f9e <strchr+0x2>
 8018faa:	4618      	mov	r0, r3
 8018fac:	4770      	bx	lr
 8018fae:	2900      	cmp	r1, #0
 8018fb0:	bf18      	it	ne
 8018fb2:	2300      	movne	r3, #0
 8018fb4:	e7f9      	b.n	8018faa <strchr+0xe>

08018fb6 <strncmp>:
 8018fb6:	b510      	push	{r4, lr}
 8018fb8:	b16a      	cbz	r2, 8018fd6 <strncmp+0x20>
 8018fba:	3901      	subs	r1, #1
 8018fbc:	1884      	adds	r4, r0, r2
 8018fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018fc6:	429a      	cmp	r2, r3
 8018fc8:	d103      	bne.n	8018fd2 <strncmp+0x1c>
 8018fca:	42a0      	cmp	r0, r4
 8018fcc:	d001      	beq.n	8018fd2 <strncmp+0x1c>
 8018fce:	2a00      	cmp	r2, #0
 8018fd0:	d1f5      	bne.n	8018fbe <strncmp+0x8>
 8018fd2:	1ad0      	subs	r0, r2, r3
 8018fd4:	bd10      	pop	{r4, pc}
 8018fd6:	4610      	mov	r0, r2
 8018fd8:	e7fc      	b.n	8018fd4 <strncmp+0x1e>
	...

08018fdc <strtok>:
 8018fdc:	4b16      	ldr	r3, [pc, #88]	; (8019038 <strtok+0x5c>)
 8018fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fe0:	681e      	ldr	r6, [r3, #0]
 8018fe2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8018fe4:	4605      	mov	r5, r0
 8018fe6:	b9fc      	cbnz	r4, 8019028 <strtok+0x4c>
 8018fe8:	2050      	movs	r0, #80	; 0x50
 8018fea:	9101      	str	r1, [sp, #4]
 8018fec:	f000 f98c 	bl	8019308 <malloc>
 8018ff0:	9901      	ldr	r1, [sp, #4]
 8018ff2:	6470      	str	r0, [r6, #68]	; 0x44
 8018ff4:	4602      	mov	r2, r0
 8018ff6:	b920      	cbnz	r0, 8019002 <strtok+0x26>
 8018ff8:	4b10      	ldr	r3, [pc, #64]	; (801903c <strtok+0x60>)
 8018ffa:	4811      	ldr	r0, [pc, #68]	; (8019040 <strtok+0x64>)
 8018ffc:	215b      	movs	r1, #91	; 0x5b
 8018ffe:	f000 f919 	bl	8019234 <__assert_func>
 8019002:	e9c0 4400 	strd	r4, r4, [r0]
 8019006:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801900a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801900e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8019012:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8019016:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801901a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801901e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8019022:	6184      	str	r4, [r0, #24]
 8019024:	7704      	strb	r4, [r0, #28]
 8019026:	6244      	str	r4, [r0, #36]	; 0x24
 8019028:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801902a:	2301      	movs	r3, #1
 801902c:	4628      	mov	r0, r5
 801902e:	b002      	add	sp, #8
 8019030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019034:	f000 b806 	b.w	8019044 <__strtok_r>
 8019038:	2000008c 	.word	0x2000008c
 801903c:	08027f4c 	.word	0x08027f4c
 8019040:	080280bc 	.word	0x080280bc

08019044 <__strtok_r>:
 8019044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019046:	b908      	cbnz	r0, 801904c <__strtok_r+0x8>
 8019048:	6810      	ldr	r0, [r2, #0]
 801904a:	b188      	cbz	r0, 8019070 <__strtok_r+0x2c>
 801904c:	4604      	mov	r4, r0
 801904e:	4620      	mov	r0, r4
 8019050:	f814 5b01 	ldrb.w	r5, [r4], #1
 8019054:	460f      	mov	r7, r1
 8019056:	f817 6b01 	ldrb.w	r6, [r7], #1
 801905a:	b91e      	cbnz	r6, 8019064 <__strtok_r+0x20>
 801905c:	b965      	cbnz	r5, 8019078 <__strtok_r+0x34>
 801905e:	6015      	str	r5, [r2, #0]
 8019060:	4628      	mov	r0, r5
 8019062:	e005      	b.n	8019070 <__strtok_r+0x2c>
 8019064:	42b5      	cmp	r5, r6
 8019066:	d1f6      	bne.n	8019056 <__strtok_r+0x12>
 8019068:	2b00      	cmp	r3, #0
 801906a:	d1f0      	bne.n	801904e <__strtok_r+0xa>
 801906c:	6014      	str	r4, [r2, #0]
 801906e:	7003      	strb	r3, [r0, #0]
 8019070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019072:	461c      	mov	r4, r3
 8019074:	e00c      	b.n	8019090 <__strtok_r+0x4c>
 8019076:	b915      	cbnz	r5, 801907e <__strtok_r+0x3a>
 8019078:	f814 3b01 	ldrb.w	r3, [r4], #1
 801907c:	460e      	mov	r6, r1
 801907e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8019082:	42ab      	cmp	r3, r5
 8019084:	d1f7      	bne.n	8019076 <__strtok_r+0x32>
 8019086:	2b00      	cmp	r3, #0
 8019088:	d0f3      	beq.n	8019072 <__strtok_r+0x2e>
 801908a:	2300      	movs	r3, #0
 801908c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019090:	6014      	str	r4, [r2, #0]
 8019092:	e7ed      	b.n	8019070 <__strtok_r+0x2c>

08019094 <_close_r>:
 8019094:	b538      	push	{r3, r4, r5, lr}
 8019096:	4d06      	ldr	r5, [pc, #24]	; (80190b0 <_close_r+0x1c>)
 8019098:	2300      	movs	r3, #0
 801909a:	4604      	mov	r4, r0
 801909c:	4608      	mov	r0, r1
 801909e:	602b      	str	r3, [r5, #0]
 80190a0:	f7e7 fe0f 	bl	8000cc2 <_close>
 80190a4:	1c43      	adds	r3, r0, #1
 80190a6:	d102      	bne.n	80190ae <_close_r+0x1a>
 80190a8:	682b      	ldr	r3, [r5, #0]
 80190aa:	b103      	cbz	r3, 80190ae <_close_r+0x1a>
 80190ac:	6023      	str	r3, [r4, #0]
 80190ae:	bd38      	pop	{r3, r4, r5, pc}
 80190b0:	20011480 	.word	0x20011480

080190b4 <_reclaim_reent>:
 80190b4:	4b29      	ldr	r3, [pc, #164]	; (801915c <_reclaim_reent+0xa8>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	4283      	cmp	r3, r0
 80190ba:	b570      	push	{r4, r5, r6, lr}
 80190bc:	4604      	mov	r4, r0
 80190be:	d04b      	beq.n	8019158 <_reclaim_reent+0xa4>
 80190c0:	69c3      	ldr	r3, [r0, #28]
 80190c2:	b143      	cbz	r3, 80190d6 <_reclaim_reent+0x22>
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d144      	bne.n	8019154 <_reclaim_reent+0xa0>
 80190ca:	69e3      	ldr	r3, [r4, #28]
 80190cc:	6819      	ldr	r1, [r3, #0]
 80190ce:	b111      	cbz	r1, 80190d6 <_reclaim_reent+0x22>
 80190d0:	4620      	mov	r0, r4
 80190d2:	f000 f8cd 	bl	8019270 <_free_r>
 80190d6:	6961      	ldr	r1, [r4, #20]
 80190d8:	b111      	cbz	r1, 80190e0 <_reclaim_reent+0x2c>
 80190da:	4620      	mov	r0, r4
 80190dc:	f000 f8c8 	bl	8019270 <_free_r>
 80190e0:	69e1      	ldr	r1, [r4, #28]
 80190e2:	b111      	cbz	r1, 80190ea <_reclaim_reent+0x36>
 80190e4:	4620      	mov	r0, r4
 80190e6:	f000 f8c3 	bl	8019270 <_free_r>
 80190ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190ec:	b111      	cbz	r1, 80190f4 <_reclaim_reent+0x40>
 80190ee:	4620      	mov	r0, r4
 80190f0:	f000 f8be 	bl	8019270 <_free_r>
 80190f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190f6:	b111      	cbz	r1, 80190fe <_reclaim_reent+0x4a>
 80190f8:	4620      	mov	r0, r4
 80190fa:	f000 f8b9 	bl	8019270 <_free_r>
 80190fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019100:	b111      	cbz	r1, 8019108 <_reclaim_reent+0x54>
 8019102:	4620      	mov	r0, r4
 8019104:	f000 f8b4 	bl	8019270 <_free_r>
 8019108:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801910a:	b111      	cbz	r1, 8019112 <_reclaim_reent+0x5e>
 801910c:	4620      	mov	r0, r4
 801910e:	f000 f8af 	bl	8019270 <_free_r>
 8019112:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019114:	b111      	cbz	r1, 801911c <_reclaim_reent+0x68>
 8019116:	4620      	mov	r0, r4
 8019118:	f000 f8aa 	bl	8019270 <_free_r>
 801911c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801911e:	b111      	cbz	r1, 8019126 <_reclaim_reent+0x72>
 8019120:	4620      	mov	r0, r4
 8019122:	f000 f8a5 	bl	8019270 <_free_r>
 8019126:	6a23      	ldr	r3, [r4, #32]
 8019128:	b1b3      	cbz	r3, 8019158 <_reclaim_reent+0xa4>
 801912a:	4620      	mov	r0, r4
 801912c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019130:	4718      	bx	r3
 8019132:	5949      	ldr	r1, [r1, r5]
 8019134:	b941      	cbnz	r1, 8019148 <_reclaim_reent+0x94>
 8019136:	3504      	adds	r5, #4
 8019138:	69e3      	ldr	r3, [r4, #28]
 801913a:	2d80      	cmp	r5, #128	; 0x80
 801913c:	68d9      	ldr	r1, [r3, #12]
 801913e:	d1f8      	bne.n	8019132 <_reclaim_reent+0x7e>
 8019140:	4620      	mov	r0, r4
 8019142:	f000 f895 	bl	8019270 <_free_r>
 8019146:	e7c0      	b.n	80190ca <_reclaim_reent+0x16>
 8019148:	680e      	ldr	r6, [r1, #0]
 801914a:	4620      	mov	r0, r4
 801914c:	f000 f890 	bl	8019270 <_free_r>
 8019150:	4631      	mov	r1, r6
 8019152:	e7ef      	b.n	8019134 <_reclaim_reent+0x80>
 8019154:	2500      	movs	r5, #0
 8019156:	e7ef      	b.n	8019138 <_reclaim_reent+0x84>
 8019158:	bd70      	pop	{r4, r5, r6, pc}
 801915a:	bf00      	nop
 801915c:	2000008c 	.word	0x2000008c

08019160 <_lseek_r>:
 8019160:	b538      	push	{r3, r4, r5, lr}
 8019162:	4d07      	ldr	r5, [pc, #28]	; (8019180 <_lseek_r+0x20>)
 8019164:	4604      	mov	r4, r0
 8019166:	4608      	mov	r0, r1
 8019168:	4611      	mov	r1, r2
 801916a:	2200      	movs	r2, #0
 801916c:	602a      	str	r2, [r5, #0]
 801916e:	461a      	mov	r2, r3
 8019170:	f7e7 fdce 	bl	8000d10 <_lseek>
 8019174:	1c43      	adds	r3, r0, #1
 8019176:	d102      	bne.n	801917e <_lseek_r+0x1e>
 8019178:	682b      	ldr	r3, [r5, #0]
 801917a:	b103      	cbz	r3, 801917e <_lseek_r+0x1e>
 801917c:	6023      	str	r3, [r4, #0]
 801917e:	bd38      	pop	{r3, r4, r5, pc}
 8019180:	20011480 	.word	0x20011480

08019184 <_read_r>:
 8019184:	b538      	push	{r3, r4, r5, lr}
 8019186:	4d07      	ldr	r5, [pc, #28]	; (80191a4 <_read_r+0x20>)
 8019188:	4604      	mov	r4, r0
 801918a:	4608      	mov	r0, r1
 801918c:	4611      	mov	r1, r2
 801918e:	2200      	movs	r2, #0
 8019190:	602a      	str	r2, [r5, #0]
 8019192:	461a      	mov	r2, r3
 8019194:	f7e7 fd5c 	bl	8000c50 <_read>
 8019198:	1c43      	adds	r3, r0, #1
 801919a:	d102      	bne.n	80191a2 <_read_r+0x1e>
 801919c:	682b      	ldr	r3, [r5, #0]
 801919e:	b103      	cbz	r3, 80191a2 <_read_r+0x1e>
 80191a0:	6023      	str	r3, [r4, #0]
 80191a2:	bd38      	pop	{r3, r4, r5, pc}
 80191a4:	20011480 	.word	0x20011480

080191a8 <_write_r>:
 80191a8:	b538      	push	{r3, r4, r5, lr}
 80191aa:	4d07      	ldr	r5, [pc, #28]	; (80191c8 <_write_r+0x20>)
 80191ac:	4604      	mov	r4, r0
 80191ae:	4608      	mov	r0, r1
 80191b0:	4611      	mov	r1, r2
 80191b2:	2200      	movs	r2, #0
 80191b4:	602a      	str	r2, [r5, #0]
 80191b6:	461a      	mov	r2, r3
 80191b8:	f7e7 fd67 	bl	8000c8a <_write>
 80191bc:	1c43      	adds	r3, r0, #1
 80191be:	d102      	bne.n	80191c6 <_write_r+0x1e>
 80191c0:	682b      	ldr	r3, [r5, #0]
 80191c2:	b103      	cbz	r3, 80191c6 <_write_r+0x1e>
 80191c4:	6023      	str	r3, [r4, #0]
 80191c6:	bd38      	pop	{r3, r4, r5, pc}
 80191c8:	20011480 	.word	0x20011480

080191cc <__libc_init_array>:
 80191cc:	b570      	push	{r4, r5, r6, lr}
 80191ce:	4d0d      	ldr	r5, [pc, #52]	; (8019204 <__libc_init_array+0x38>)
 80191d0:	4c0d      	ldr	r4, [pc, #52]	; (8019208 <__libc_init_array+0x3c>)
 80191d2:	1b64      	subs	r4, r4, r5
 80191d4:	10a4      	asrs	r4, r4, #2
 80191d6:	2600      	movs	r6, #0
 80191d8:	42a6      	cmp	r6, r4
 80191da:	d109      	bne.n	80191f0 <__libc_init_array+0x24>
 80191dc:	4d0b      	ldr	r5, [pc, #44]	; (801920c <__libc_init_array+0x40>)
 80191de:	4c0c      	ldr	r4, [pc, #48]	; (8019210 <__libc_init_array+0x44>)
 80191e0:	f000 ff48 	bl	801a074 <_init>
 80191e4:	1b64      	subs	r4, r4, r5
 80191e6:	10a4      	asrs	r4, r4, #2
 80191e8:	2600      	movs	r6, #0
 80191ea:	42a6      	cmp	r6, r4
 80191ec:	d105      	bne.n	80191fa <__libc_init_array+0x2e>
 80191ee:	bd70      	pop	{r4, r5, r6, pc}
 80191f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80191f4:	4798      	blx	r3
 80191f6:	3601      	adds	r6, #1
 80191f8:	e7ee      	b.n	80191d8 <__libc_init_array+0xc>
 80191fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80191fe:	4798      	blx	r3
 8019200:	3601      	adds	r6, #1
 8019202:	e7f2      	b.n	80191ea <__libc_init_array+0x1e>
 8019204:	08028190 	.word	0x08028190
 8019208:	08028190 	.word	0x08028190
 801920c:	08028190 	.word	0x08028190
 8019210:	08028194 	.word	0x08028194

08019214 <__retarget_lock_acquire_recursive>:
 8019214:	4770      	bx	lr

08019216 <__retarget_lock_release_recursive>:
 8019216:	4770      	bx	lr

08019218 <memcpy>:
 8019218:	440a      	add	r2, r1
 801921a:	4291      	cmp	r1, r2
 801921c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019220:	d100      	bne.n	8019224 <memcpy+0xc>
 8019222:	4770      	bx	lr
 8019224:	b510      	push	{r4, lr}
 8019226:	f811 4b01 	ldrb.w	r4, [r1], #1
 801922a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801922e:	4291      	cmp	r1, r2
 8019230:	d1f9      	bne.n	8019226 <memcpy+0xe>
 8019232:	bd10      	pop	{r4, pc}

08019234 <__assert_func>:
 8019234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019236:	4614      	mov	r4, r2
 8019238:	461a      	mov	r2, r3
 801923a:	4b09      	ldr	r3, [pc, #36]	; (8019260 <__assert_func+0x2c>)
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	4605      	mov	r5, r0
 8019240:	68d8      	ldr	r0, [r3, #12]
 8019242:	b14c      	cbz	r4, 8019258 <__assert_func+0x24>
 8019244:	4b07      	ldr	r3, [pc, #28]	; (8019264 <__assert_func+0x30>)
 8019246:	9100      	str	r1, [sp, #0]
 8019248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801924c:	4906      	ldr	r1, [pc, #24]	; (8019268 <__assert_func+0x34>)
 801924e:	462b      	mov	r3, r5
 8019250:	f000 fde8 	bl	8019e24 <fiprintf>
 8019254:	f000 fe8c 	bl	8019f70 <abort>
 8019258:	4b04      	ldr	r3, [pc, #16]	; (801926c <__assert_func+0x38>)
 801925a:	461c      	mov	r4, r3
 801925c:	e7f3      	b.n	8019246 <__assert_func+0x12>
 801925e:	bf00      	nop
 8019260:	2000008c 	.word	0x2000008c
 8019264:	08028116 	.word	0x08028116
 8019268:	08028123 	.word	0x08028123
 801926c:	08028151 	.word	0x08028151

08019270 <_free_r>:
 8019270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019272:	2900      	cmp	r1, #0
 8019274:	d044      	beq.n	8019300 <_free_r+0x90>
 8019276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801927a:	9001      	str	r0, [sp, #4]
 801927c:	2b00      	cmp	r3, #0
 801927e:	f1a1 0404 	sub.w	r4, r1, #4
 8019282:	bfb8      	it	lt
 8019284:	18e4      	addlt	r4, r4, r3
 8019286:	f000 f8e7 	bl	8019458 <__malloc_lock>
 801928a:	4a1e      	ldr	r2, [pc, #120]	; (8019304 <_free_r+0x94>)
 801928c:	9801      	ldr	r0, [sp, #4]
 801928e:	6813      	ldr	r3, [r2, #0]
 8019290:	b933      	cbnz	r3, 80192a0 <_free_r+0x30>
 8019292:	6063      	str	r3, [r4, #4]
 8019294:	6014      	str	r4, [r2, #0]
 8019296:	b003      	add	sp, #12
 8019298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801929c:	f000 b8e2 	b.w	8019464 <__malloc_unlock>
 80192a0:	42a3      	cmp	r3, r4
 80192a2:	d908      	bls.n	80192b6 <_free_r+0x46>
 80192a4:	6825      	ldr	r5, [r4, #0]
 80192a6:	1961      	adds	r1, r4, r5
 80192a8:	428b      	cmp	r3, r1
 80192aa:	bf01      	itttt	eq
 80192ac:	6819      	ldreq	r1, [r3, #0]
 80192ae:	685b      	ldreq	r3, [r3, #4]
 80192b0:	1949      	addeq	r1, r1, r5
 80192b2:	6021      	streq	r1, [r4, #0]
 80192b4:	e7ed      	b.n	8019292 <_free_r+0x22>
 80192b6:	461a      	mov	r2, r3
 80192b8:	685b      	ldr	r3, [r3, #4]
 80192ba:	b10b      	cbz	r3, 80192c0 <_free_r+0x50>
 80192bc:	42a3      	cmp	r3, r4
 80192be:	d9fa      	bls.n	80192b6 <_free_r+0x46>
 80192c0:	6811      	ldr	r1, [r2, #0]
 80192c2:	1855      	adds	r5, r2, r1
 80192c4:	42a5      	cmp	r5, r4
 80192c6:	d10b      	bne.n	80192e0 <_free_r+0x70>
 80192c8:	6824      	ldr	r4, [r4, #0]
 80192ca:	4421      	add	r1, r4
 80192cc:	1854      	adds	r4, r2, r1
 80192ce:	42a3      	cmp	r3, r4
 80192d0:	6011      	str	r1, [r2, #0]
 80192d2:	d1e0      	bne.n	8019296 <_free_r+0x26>
 80192d4:	681c      	ldr	r4, [r3, #0]
 80192d6:	685b      	ldr	r3, [r3, #4]
 80192d8:	6053      	str	r3, [r2, #4]
 80192da:	440c      	add	r4, r1
 80192dc:	6014      	str	r4, [r2, #0]
 80192de:	e7da      	b.n	8019296 <_free_r+0x26>
 80192e0:	d902      	bls.n	80192e8 <_free_r+0x78>
 80192e2:	230c      	movs	r3, #12
 80192e4:	6003      	str	r3, [r0, #0]
 80192e6:	e7d6      	b.n	8019296 <_free_r+0x26>
 80192e8:	6825      	ldr	r5, [r4, #0]
 80192ea:	1961      	adds	r1, r4, r5
 80192ec:	428b      	cmp	r3, r1
 80192ee:	bf04      	itt	eq
 80192f0:	6819      	ldreq	r1, [r3, #0]
 80192f2:	685b      	ldreq	r3, [r3, #4]
 80192f4:	6063      	str	r3, [r4, #4]
 80192f6:	bf04      	itt	eq
 80192f8:	1949      	addeq	r1, r1, r5
 80192fa:	6021      	streq	r1, [r4, #0]
 80192fc:	6054      	str	r4, [r2, #4]
 80192fe:	e7ca      	b.n	8019296 <_free_r+0x26>
 8019300:	b003      	add	sp, #12
 8019302:	bd30      	pop	{r4, r5, pc}
 8019304:	20011488 	.word	0x20011488

08019308 <malloc>:
 8019308:	4b02      	ldr	r3, [pc, #8]	; (8019314 <malloc+0xc>)
 801930a:	4601      	mov	r1, r0
 801930c:	6818      	ldr	r0, [r3, #0]
 801930e:	f000 b823 	b.w	8019358 <_malloc_r>
 8019312:	bf00      	nop
 8019314:	2000008c 	.word	0x2000008c

08019318 <sbrk_aligned>:
 8019318:	b570      	push	{r4, r5, r6, lr}
 801931a:	4e0e      	ldr	r6, [pc, #56]	; (8019354 <sbrk_aligned+0x3c>)
 801931c:	460c      	mov	r4, r1
 801931e:	6831      	ldr	r1, [r6, #0]
 8019320:	4605      	mov	r5, r0
 8019322:	b911      	cbnz	r1, 801932a <sbrk_aligned+0x12>
 8019324:	f000 fe14 	bl	8019f50 <_sbrk_r>
 8019328:	6030      	str	r0, [r6, #0]
 801932a:	4621      	mov	r1, r4
 801932c:	4628      	mov	r0, r5
 801932e:	f000 fe0f 	bl	8019f50 <_sbrk_r>
 8019332:	1c43      	adds	r3, r0, #1
 8019334:	d00a      	beq.n	801934c <sbrk_aligned+0x34>
 8019336:	1cc4      	adds	r4, r0, #3
 8019338:	f024 0403 	bic.w	r4, r4, #3
 801933c:	42a0      	cmp	r0, r4
 801933e:	d007      	beq.n	8019350 <sbrk_aligned+0x38>
 8019340:	1a21      	subs	r1, r4, r0
 8019342:	4628      	mov	r0, r5
 8019344:	f000 fe04 	bl	8019f50 <_sbrk_r>
 8019348:	3001      	adds	r0, #1
 801934a:	d101      	bne.n	8019350 <sbrk_aligned+0x38>
 801934c:	f04f 34ff 	mov.w	r4, #4294967295
 8019350:	4620      	mov	r0, r4
 8019352:	bd70      	pop	{r4, r5, r6, pc}
 8019354:	2001148c 	.word	0x2001148c

08019358 <_malloc_r>:
 8019358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801935c:	1ccd      	adds	r5, r1, #3
 801935e:	f025 0503 	bic.w	r5, r5, #3
 8019362:	3508      	adds	r5, #8
 8019364:	2d0c      	cmp	r5, #12
 8019366:	bf38      	it	cc
 8019368:	250c      	movcc	r5, #12
 801936a:	2d00      	cmp	r5, #0
 801936c:	4607      	mov	r7, r0
 801936e:	db01      	blt.n	8019374 <_malloc_r+0x1c>
 8019370:	42a9      	cmp	r1, r5
 8019372:	d905      	bls.n	8019380 <_malloc_r+0x28>
 8019374:	230c      	movs	r3, #12
 8019376:	603b      	str	r3, [r7, #0]
 8019378:	2600      	movs	r6, #0
 801937a:	4630      	mov	r0, r6
 801937c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019380:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019454 <_malloc_r+0xfc>
 8019384:	f000 f868 	bl	8019458 <__malloc_lock>
 8019388:	f8d8 3000 	ldr.w	r3, [r8]
 801938c:	461c      	mov	r4, r3
 801938e:	bb5c      	cbnz	r4, 80193e8 <_malloc_r+0x90>
 8019390:	4629      	mov	r1, r5
 8019392:	4638      	mov	r0, r7
 8019394:	f7ff ffc0 	bl	8019318 <sbrk_aligned>
 8019398:	1c43      	adds	r3, r0, #1
 801939a:	4604      	mov	r4, r0
 801939c:	d155      	bne.n	801944a <_malloc_r+0xf2>
 801939e:	f8d8 4000 	ldr.w	r4, [r8]
 80193a2:	4626      	mov	r6, r4
 80193a4:	2e00      	cmp	r6, #0
 80193a6:	d145      	bne.n	8019434 <_malloc_r+0xdc>
 80193a8:	2c00      	cmp	r4, #0
 80193aa:	d048      	beq.n	801943e <_malloc_r+0xe6>
 80193ac:	6823      	ldr	r3, [r4, #0]
 80193ae:	4631      	mov	r1, r6
 80193b0:	4638      	mov	r0, r7
 80193b2:	eb04 0903 	add.w	r9, r4, r3
 80193b6:	f000 fdcb 	bl	8019f50 <_sbrk_r>
 80193ba:	4581      	cmp	r9, r0
 80193bc:	d13f      	bne.n	801943e <_malloc_r+0xe6>
 80193be:	6821      	ldr	r1, [r4, #0]
 80193c0:	1a6d      	subs	r5, r5, r1
 80193c2:	4629      	mov	r1, r5
 80193c4:	4638      	mov	r0, r7
 80193c6:	f7ff ffa7 	bl	8019318 <sbrk_aligned>
 80193ca:	3001      	adds	r0, #1
 80193cc:	d037      	beq.n	801943e <_malloc_r+0xe6>
 80193ce:	6823      	ldr	r3, [r4, #0]
 80193d0:	442b      	add	r3, r5
 80193d2:	6023      	str	r3, [r4, #0]
 80193d4:	f8d8 3000 	ldr.w	r3, [r8]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d038      	beq.n	801944e <_malloc_r+0xf6>
 80193dc:	685a      	ldr	r2, [r3, #4]
 80193de:	42a2      	cmp	r2, r4
 80193e0:	d12b      	bne.n	801943a <_malloc_r+0xe2>
 80193e2:	2200      	movs	r2, #0
 80193e4:	605a      	str	r2, [r3, #4]
 80193e6:	e00f      	b.n	8019408 <_malloc_r+0xb0>
 80193e8:	6822      	ldr	r2, [r4, #0]
 80193ea:	1b52      	subs	r2, r2, r5
 80193ec:	d41f      	bmi.n	801942e <_malloc_r+0xd6>
 80193ee:	2a0b      	cmp	r2, #11
 80193f0:	d917      	bls.n	8019422 <_malloc_r+0xca>
 80193f2:	1961      	adds	r1, r4, r5
 80193f4:	42a3      	cmp	r3, r4
 80193f6:	6025      	str	r5, [r4, #0]
 80193f8:	bf18      	it	ne
 80193fa:	6059      	strne	r1, [r3, #4]
 80193fc:	6863      	ldr	r3, [r4, #4]
 80193fe:	bf08      	it	eq
 8019400:	f8c8 1000 	streq.w	r1, [r8]
 8019404:	5162      	str	r2, [r4, r5]
 8019406:	604b      	str	r3, [r1, #4]
 8019408:	4638      	mov	r0, r7
 801940a:	f104 060b 	add.w	r6, r4, #11
 801940e:	f000 f829 	bl	8019464 <__malloc_unlock>
 8019412:	f026 0607 	bic.w	r6, r6, #7
 8019416:	1d23      	adds	r3, r4, #4
 8019418:	1af2      	subs	r2, r6, r3
 801941a:	d0ae      	beq.n	801937a <_malloc_r+0x22>
 801941c:	1b9b      	subs	r3, r3, r6
 801941e:	50a3      	str	r3, [r4, r2]
 8019420:	e7ab      	b.n	801937a <_malloc_r+0x22>
 8019422:	42a3      	cmp	r3, r4
 8019424:	6862      	ldr	r2, [r4, #4]
 8019426:	d1dd      	bne.n	80193e4 <_malloc_r+0x8c>
 8019428:	f8c8 2000 	str.w	r2, [r8]
 801942c:	e7ec      	b.n	8019408 <_malloc_r+0xb0>
 801942e:	4623      	mov	r3, r4
 8019430:	6864      	ldr	r4, [r4, #4]
 8019432:	e7ac      	b.n	801938e <_malloc_r+0x36>
 8019434:	4634      	mov	r4, r6
 8019436:	6876      	ldr	r6, [r6, #4]
 8019438:	e7b4      	b.n	80193a4 <_malloc_r+0x4c>
 801943a:	4613      	mov	r3, r2
 801943c:	e7cc      	b.n	80193d8 <_malloc_r+0x80>
 801943e:	230c      	movs	r3, #12
 8019440:	603b      	str	r3, [r7, #0]
 8019442:	4638      	mov	r0, r7
 8019444:	f000 f80e 	bl	8019464 <__malloc_unlock>
 8019448:	e797      	b.n	801937a <_malloc_r+0x22>
 801944a:	6025      	str	r5, [r4, #0]
 801944c:	e7dc      	b.n	8019408 <_malloc_r+0xb0>
 801944e:	605b      	str	r3, [r3, #4]
 8019450:	deff      	udf	#255	; 0xff
 8019452:	bf00      	nop
 8019454:	20011488 	.word	0x20011488

08019458 <__malloc_lock>:
 8019458:	4801      	ldr	r0, [pc, #4]	; (8019460 <__malloc_lock+0x8>)
 801945a:	f7ff bedb 	b.w	8019214 <__retarget_lock_acquire_recursive>
 801945e:	bf00      	nop
 8019460:	20011484 	.word	0x20011484

08019464 <__malloc_unlock>:
 8019464:	4801      	ldr	r0, [pc, #4]	; (801946c <__malloc_unlock+0x8>)
 8019466:	f7ff bed6 	b.w	8019216 <__retarget_lock_release_recursive>
 801946a:	bf00      	nop
 801946c:	20011484 	.word	0x20011484

08019470 <__ssputs_r>:
 8019470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019474:	688e      	ldr	r6, [r1, #8]
 8019476:	461f      	mov	r7, r3
 8019478:	42be      	cmp	r6, r7
 801947a:	680b      	ldr	r3, [r1, #0]
 801947c:	4682      	mov	sl, r0
 801947e:	460c      	mov	r4, r1
 8019480:	4690      	mov	r8, r2
 8019482:	d82c      	bhi.n	80194de <__ssputs_r+0x6e>
 8019484:	898a      	ldrh	r2, [r1, #12]
 8019486:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801948a:	d026      	beq.n	80194da <__ssputs_r+0x6a>
 801948c:	6965      	ldr	r5, [r4, #20]
 801948e:	6909      	ldr	r1, [r1, #16]
 8019490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019494:	eba3 0901 	sub.w	r9, r3, r1
 8019498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801949c:	1c7b      	adds	r3, r7, #1
 801949e:	444b      	add	r3, r9
 80194a0:	106d      	asrs	r5, r5, #1
 80194a2:	429d      	cmp	r5, r3
 80194a4:	bf38      	it	cc
 80194a6:	461d      	movcc	r5, r3
 80194a8:	0553      	lsls	r3, r2, #21
 80194aa:	d527      	bpl.n	80194fc <__ssputs_r+0x8c>
 80194ac:	4629      	mov	r1, r5
 80194ae:	f7ff ff53 	bl	8019358 <_malloc_r>
 80194b2:	4606      	mov	r6, r0
 80194b4:	b360      	cbz	r0, 8019510 <__ssputs_r+0xa0>
 80194b6:	6921      	ldr	r1, [r4, #16]
 80194b8:	464a      	mov	r2, r9
 80194ba:	f7ff fead 	bl	8019218 <memcpy>
 80194be:	89a3      	ldrh	r3, [r4, #12]
 80194c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80194c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194c8:	81a3      	strh	r3, [r4, #12]
 80194ca:	6126      	str	r6, [r4, #16]
 80194cc:	6165      	str	r5, [r4, #20]
 80194ce:	444e      	add	r6, r9
 80194d0:	eba5 0509 	sub.w	r5, r5, r9
 80194d4:	6026      	str	r6, [r4, #0]
 80194d6:	60a5      	str	r5, [r4, #8]
 80194d8:	463e      	mov	r6, r7
 80194da:	42be      	cmp	r6, r7
 80194dc:	d900      	bls.n	80194e0 <__ssputs_r+0x70>
 80194de:	463e      	mov	r6, r7
 80194e0:	6820      	ldr	r0, [r4, #0]
 80194e2:	4632      	mov	r2, r6
 80194e4:	4641      	mov	r1, r8
 80194e6:	f7ff fd1d 	bl	8018f24 <memmove>
 80194ea:	68a3      	ldr	r3, [r4, #8]
 80194ec:	1b9b      	subs	r3, r3, r6
 80194ee:	60a3      	str	r3, [r4, #8]
 80194f0:	6823      	ldr	r3, [r4, #0]
 80194f2:	4433      	add	r3, r6
 80194f4:	6023      	str	r3, [r4, #0]
 80194f6:	2000      	movs	r0, #0
 80194f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194fc:	462a      	mov	r2, r5
 80194fe:	f000 fd3e 	bl	8019f7e <_realloc_r>
 8019502:	4606      	mov	r6, r0
 8019504:	2800      	cmp	r0, #0
 8019506:	d1e0      	bne.n	80194ca <__ssputs_r+0x5a>
 8019508:	6921      	ldr	r1, [r4, #16]
 801950a:	4650      	mov	r0, sl
 801950c:	f7ff feb0 	bl	8019270 <_free_r>
 8019510:	230c      	movs	r3, #12
 8019512:	f8ca 3000 	str.w	r3, [sl]
 8019516:	89a3      	ldrh	r3, [r4, #12]
 8019518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801951c:	81a3      	strh	r3, [r4, #12]
 801951e:	f04f 30ff 	mov.w	r0, #4294967295
 8019522:	e7e9      	b.n	80194f8 <__ssputs_r+0x88>

08019524 <_svfiprintf_r>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	4698      	mov	r8, r3
 801952a:	898b      	ldrh	r3, [r1, #12]
 801952c:	061b      	lsls	r3, r3, #24
 801952e:	b09d      	sub	sp, #116	; 0x74
 8019530:	4607      	mov	r7, r0
 8019532:	460d      	mov	r5, r1
 8019534:	4614      	mov	r4, r2
 8019536:	d50e      	bpl.n	8019556 <_svfiprintf_r+0x32>
 8019538:	690b      	ldr	r3, [r1, #16]
 801953a:	b963      	cbnz	r3, 8019556 <_svfiprintf_r+0x32>
 801953c:	2140      	movs	r1, #64	; 0x40
 801953e:	f7ff ff0b 	bl	8019358 <_malloc_r>
 8019542:	6028      	str	r0, [r5, #0]
 8019544:	6128      	str	r0, [r5, #16]
 8019546:	b920      	cbnz	r0, 8019552 <_svfiprintf_r+0x2e>
 8019548:	230c      	movs	r3, #12
 801954a:	603b      	str	r3, [r7, #0]
 801954c:	f04f 30ff 	mov.w	r0, #4294967295
 8019550:	e0d0      	b.n	80196f4 <_svfiprintf_r+0x1d0>
 8019552:	2340      	movs	r3, #64	; 0x40
 8019554:	616b      	str	r3, [r5, #20]
 8019556:	2300      	movs	r3, #0
 8019558:	9309      	str	r3, [sp, #36]	; 0x24
 801955a:	2320      	movs	r3, #32
 801955c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019560:	f8cd 800c 	str.w	r8, [sp, #12]
 8019564:	2330      	movs	r3, #48	; 0x30
 8019566:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801970c <_svfiprintf_r+0x1e8>
 801956a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801956e:	f04f 0901 	mov.w	r9, #1
 8019572:	4623      	mov	r3, r4
 8019574:	469a      	mov	sl, r3
 8019576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801957a:	b10a      	cbz	r2, 8019580 <_svfiprintf_r+0x5c>
 801957c:	2a25      	cmp	r2, #37	; 0x25
 801957e:	d1f9      	bne.n	8019574 <_svfiprintf_r+0x50>
 8019580:	ebba 0b04 	subs.w	fp, sl, r4
 8019584:	d00b      	beq.n	801959e <_svfiprintf_r+0x7a>
 8019586:	465b      	mov	r3, fp
 8019588:	4622      	mov	r2, r4
 801958a:	4629      	mov	r1, r5
 801958c:	4638      	mov	r0, r7
 801958e:	f7ff ff6f 	bl	8019470 <__ssputs_r>
 8019592:	3001      	adds	r0, #1
 8019594:	f000 80a9 	beq.w	80196ea <_svfiprintf_r+0x1c6>
 8019598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801959a:	445a      	add	r2, fp
 801959c:	9209      	str	r2, [sp, #36]	; 0x24
 801959e:	f89a 3000 	ldrb.w	r3, [sl]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	f000 80a1 	beq.w	80196ea <_svfiprintf_r+0x1c6>
 80195a8:	2300      	movs	r3, #0
 80195aa:	f04f 32ff 	mov.w	r2, #4294967295
 80195ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195b2:	f10a 0a01 	add.w	sl, sl, #1
 80195b6:	9304      	str	r3, [sp, #16]
 80195b8:	9307      	str	r3, [sp, #28]
 80195ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195be:	931a      	str	r3, [sp, #104]	; 0x68
 80195c0:	4654      	mov	r4, sl
 80195c2:	2205      	movs	r2, #5
 80195c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195c8:	4850      	ldr	r0, [pc, #320]	; (801970c <_svfiprintf_r+0x1e8>)
 80195ca:	f7e6 fe29 	bl	8000220 <memchr>
 80195ce:	9a04      	ldr	r2, [sp, #16]
 80195d0:	b9d8      	cbnz	r0, 801960a <_svfiprintf_r+0xe6>
 80195d2:	06d0      	lsls	r0, r2, #27
 80195d4:	bf44      	itt	mi
 80195d6:	2320      	movmi	r3, #32
 80195d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195dc:	0711      	lsls	r1, r2, #28
 80195de:	bf44      	itt	mi
 80195e0:	232b      	movmi	r3, #43	; 0x2b
 80195e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195e6:	f89a 3000 	ldrb.w	r3, [sl]
 80195ea:	2b2a      	cmp	r3, #42	; 0x2a
 80195ec:	d015      	beq.n	801961a <_svfiprintf_r+0xf6>
 80195ee:	9a07      	ldr	r2, [sp, #28]
 80195f0:	4654      	mov	r4, sl
 80195f2:	2000      	movs	r0, #0
 80195f4:	f04f 0c0a 	mov.w	ip, #10
 80195f8:	4621      	mov	r1, r4
 80195fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195fe:	3b30      	subs	r3, #48	; 0x30
 8019600:	2b09      	cmp	r3, #9
 8019602:	d94d      	bls.n	80196a0 <_svfiprintf_r+0x17c>
 8019604:	b1b0      	cbz	r0, 8019634 <_svfiprintf_r+0x110>
 8019606:	9207      	str	r2, [sp, #28]
 8019608:	e014      	b.n	8019634 <_svfiprintf_r+0x110>
 801960a:	eba0 0308 	sub.w	r3, r0, r8
 801960e:	fa09 f303 	lsl.w	r3, r9, r3
 8019612:	4313      	orrs	r3, r2
 8019614:	9304      	str	r3, [sp, #16]
 8019616:	46a2      	mov	sl, r4
 8019618:	e7d2      	b.n	80195c0 <_svfiprintf_r+0x9c>
 801961a:	9b03      	ldr	r3, [sp, #12]
 801961c:	1d19      	adds	r1, r3, #4
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	9103      	str	r1, [sp, #12]
 8019622:	2b00      	cmp	r3, #0
 8019624:	bfbb      	ittet	lt
 8019626:	425b      	neglt	r3, r3
 8019628:	f042 0202 	orrlt.w	r2, r2, #2
 801962c:	9307      	strge	r3, [sp, #28]
 801962e:	9307      	strlt	r3, [sp, #28]
 8019630:	bfb8      	it	lt
 8019632:	9204      	strlt	r2, [sp, #16]
 8019634:	7823      	ldrb	r3, [r4, #0]
 8019636:	2b2e      	cmp	r3, #46	; 0x2e
 8019638:	d10c      	bne.n	8019654 <_svfiprintf_r+0x130>
 801963a:	7863      	ldrb	r3, [r4, #1]
 801963c:	2b2a      	cmp	r3, #42	; 0x2a
 801963e:	d134      	bne.n	80196aa <_svfiprintf_r+0x186>
 8019640:	9b03      	ldr	r3, [sp, #12]
 8019642:	1d1a      	adds	r2, r3, #4
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	9203      	str	r2, [sp, #12]
 8019648:	2b00      	cmp	r3, #0
 801964a:	bfb8      	it	lt
 801964c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019650:	3402      	adds	r4, #2
 8019652:	9305      	str	r3, [sp, #20]
 8019654:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801971c <_svfiprintf_r+0x1f8>
 8019658:	7821      	ldrb	r1, [r4, #0]
 801965a:	2203      	movs	r2, #3
 801965c:	4650      	mov	r0, sl
 801965e:	f7e6 fddf 	bl	8000220 <memchr>
 8019662:	b138      	cbz	r0, 8019674 <_svfiprintf_r+0x150>
 8019664:	9b04      	ldr	r3, [sp, #16]
 8019666:	eba0 000a 	sub.w	r0, r0, sl
 801966a:	2240      	movs	r2, #64	; 0x40
 801966c:	4082      	lsls	r2, r0
 801966e:	4313      	orrs	r3, r2
 8019670:	3401      	adds	r4, #1
 8019672:	9304      	str	r3, [sp, #16]
 8019674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019678:	4825      	ldr	r0, [pc, #148]	; (8019710 <_svfiprintf_r+0x1ec>)
 801967a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801967e:	2206      	movs	r2, #6
 8019680:	f7e6 fdce 	bl	8000220 <memchr>
 8019684:	2800      	cmp	r0, #0
 8019686:	d038      	beq.n	80196fa <_svfiprintf_r+0x1d6>
 8019688:	4b22      	ldr	r3, [pc, #136]	; (8019714 <_svfiprintf_r+0x1f0>)
 801968a:	bb1b      	cbnz	r3, 80196d4 <_svfiprintf_r+0x1b0>
 801968c:	9b03      	ldr	r3, [sp, #12]
 801968e:	3307      	adds	r3, #7
 8019690:	f023 0307 	bic.w	r3, r3, #7
 8019694:	3308      	adds	r3, #8
 8019696:	9303      	str	r3, [sp, #12]
 8019698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801969a:	4433      	add	r3, r6
 801969c:	9309      	str	r3, [sp, #36]	; 0x24
 801969e:	e768      	b.n	8019572 <_svfiprintf_r+0x4e>
 80196a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80196a4:	460c      	mov	r4, r1
 80196a6:	2001      	movs	r0, #1
 80196a8:	e7a6      	b.n	80195f8 <_svfiprintf_r+0xd4>
 80196aa:	2300      	movs	r3, #0
 80196ac:	3401      	adds	r4, #1
 80196ae:	9305      	str	r3, [sp, #20]
 80196b0:	4619      	mov	r1, r3
 80196b2:	f04f 0c0a 	mov.w	ip, #10
 80196b6:	4620      	mov	r0, r4
 80196b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196bc:	3a30      	subs	r2, #48	; 0x30
 80196be:	2a09      	cmp	r2, #9
 80196c0:	d903      	bls.n	80196ca <_svfiprintf_r+0x1a6>
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d0c6      	beq.n	8019654 <_svfiprintf_r+0x130>
 80196c6:	9105      	str	r1, [sp, #20]
 80196c8:	e7c4      	b.n	8019654 <_svfiprintf_r+0x130>
 80196ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80196ce:	4604      	mov	r4, r0
 80196d0:	2301      	movs	r3, #1
 80196d2:	e7f0      	b.n	80196b6 <_svfiprintf_r+0x192>
 80196d4:	ab03      	add	r3, sp, #12
 80196d6:	9300      	str	r3, [sp, #0]
 80196d8:	462a      	mov	r2, r5
 80196da:	4b0f      	ldr	r3, [pc, #60]	; (8019718 <_svfiprintf_r+0x1f4>)
 80196dc:	a904      	add	r1, sp, #16
 80196de:	4638      	mov	r0, r7
 80196e0:	f3af 8000 	nop.w
 80196e4:	1c42      	adds	r2, r0, #1
 80196e6:	4606      	mov	r6, r0
 80196e8:	d1d6      	bne.n	8019698 <_svfiprintf_r+0x174>
 80196ea:	89ab      	ldrh	r3, [r5, #12]
 80196ec:	065b      	lsls	r3, r3, #25
 80196ee:	f53f af2d 	bmi.w	801954c <_svfiprintf_r+0x28>
 80196f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196f4:	b01d      	add	sp, #116	; 0x74
 80196f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fa:	ab03      	add	r3, sp, #12
 80196fc:	9300      	str	r3, [sp, #0]
 80196fe:	462a      	mov	r2, r5
 8019700:	4b05      	ldr	r3, [pc, #20]	; (8019718 <_svfiprintf_r+0x1f4>)
 8019702:	a904      	add	r1, sp, #16
 8019704:	4638      	mov	r0, r7
 8019706:	f000 f9bd 	bl	8019a84 <_printf_i>
 801970a:	e7eb      	b.n	80196e4 <_svfiprintf_r+0x1c0>
 801970c:	08028152 	.word	0x08028152
 8019710:	0802815c 	.word	0x0802815c
 8019714:	00000000 	.word	0x00000000
 8019718:	08019471 	.word	0x08019471
 801971c:	08028158 	.word	0x08028158

08019720 <__sfputc_r>:
 8019720:	6893      	ldr	r3, [r2, #8]
 8019722:	3b01      	subs	r3, #1
 8019724:	2b00      	cmp	r3, #0
 8019726:	b410      	push	{r4}
 8019728:	6093      	str	r3, [r2, #8]
 801972a:	da08      	bge.n	801973e <__sfputc_r+0x1e>
 801972c:	6994      	ldr	r4, [r2, #24]
 801972e:	42a3      	cmp	r3, r4
 8019730:	db01      	blt.n	8019736 <__sfputc_r+0x16>
 8019732:	290a      	cmp	r1, #10
 8019734:	d103      	bne.n	801973e <__sfputc_r+0x1e>
 8019736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801973a:	f7ff bb4e 	b.w	8018dda <__swbuf_r>
 801973e:	6813      	ldr	r3, [r2, #0]
 8019740:	1c58      	adds	r0, r3, #1
 8019742:	6010      	str	r0, [r2, #0]
 8019744:	7019      	strb	r1, [r3, #0]
 8019746:	4608      	mov	r0, r1
 8019748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974c:	4770      	bx	lr

0801974e <__sfputs_r>:
 801974e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019750:	4606      	mov	r6, r0
 8019752:	460f      	mov	r7, r1
 8019754:	4614      	mov	r4, r2
 8019756:	18d5      	adds	r5, r2, r3
 8019758:	42ac      	cmp	r4, r5
 801975a:	d101      	bne.n	8019760 <__sfputs_r+0x12>
 801975c:	2000      	movs	r0, #0
 801975e:	e007      	b.n	8019770 <__sfputs_r+0x22>
 8019760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019764:	463a      	mov	r2, r7
 8019766:	4630      	mov	r0, r6
 8019768:	f7ff ffda 	bl	8019720 <__sfputc_r>
 801976c:	1c43      	adds	r3, r0, #1
 801976e:	d1f3      	bne.n	8019758 <__sfputs_r+0xa>
 8019770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019774 <_vfiprintf_r>:
 8019774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019778:	460d      	mov	r5, r1
 801977a:	b09d      	sub	sp, #116	; 0x74
 801977c:	4614      	mov	r4, r2
 801977e:	4698      	mov	r8, r3
 8019780:	4606      	mov	r6, r0
 8019782:	b118      	cbz	r0, 801978c <_vfiprintf_r+0x18>
 8019784:	6a03      	ldr	r3, [r0, #32]
 8019786:	b90b      	cbnz	r3, 801978c <_vfiprintf_r+0x18>
 8019788:	f7ff fa20 	bl	8018bcc <__sinit>
 801978c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801978e:	07d9      	lsls	r1, r3, #31
 8019790:	d405      	bmi.n	801979e <_vfiprintf_r+0x2a>
 8019792:	89ab      	ldrh	r3, [r5, #12]
 8019794:	059a      	lsls	r2, r3, #22
 8019796:	d402      	bmi.n	801979e <_vfiprintf_r+0x2a>
 8019798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801979a:	f7ff fd3b 	bl	8019214 <__retarget_lock_acquire_recursive>
 801979e:	89ab      	ldrh	r3, [r5, #12]
 80197a0:	071b      	lsls	r3, r3, #28
 80197a2:	d501      	bpl.n	80197a8 <_vfiprintf_r+0x34>
 80197a4:	692b      	ldr	r3, [r5, #16]
 80197a6:	b99b      	cbnz	r3, 80197d0 <_vfiprintf_r+0x5c>
 80197a8:	4629      	mov	r1, r5
 80197aa:	4630      	mov	r0, r6
 80197ac:	f7ff fb52 	bl	8018e54 <__swsetup_r>
 80197b0:	b170      	cbz	r0, 80197d0 <_vfiprintf_r+0x5c>
 80197b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197b4:	07dc      	lsls	r4, r3, #31
 80197b6:	d504      	bpl.n	80197c2 <_vfiprintf_r+0x4e>
 80197b8:	f04f 30ff 	mov.w	r0, #4294967295
 80197bc:	b01d      	add	sp, #116	; 0x74
 80197be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197c2:	89ab      	ldrh	r3, [r5, #12]
 80197c4:	0598      	lsls	r0, r3, #22
 80197c6:	d4f7      	bmi.n	80197b8 <_vfiprintf_r+0x44>
 80197c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197ca:	f7ff fd24 	bl	8019216 <__retarget_lock_release_recursive>
 80197ce:	e7f3      	b.n	80197b8 <_vfiprintf_r+0x44>
 80197d0:	2300      	movs	r3, #0
 80197d2:	9309      	str	r3, [sp, #36]	; 0x24
 80197d4:	2320      	movs	r3, #32
 80197d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197da:	f8cd 800c 	str.w	r8, [sp, #12]
 80197de:	2330      	movs	r3, #48	; 0x30
 80197e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019994 <_vfiprintf_r+0x220>
 80197e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197e8:	f04f 0901 	mov.w	r9, #1
 80197ec:	4623      	mov	r3, r4
 80197ee:	469a      	mov	sl, r3
 80197f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197f4:	b10a      	cbz	r2, 80197fa <_vfiprintf_r+0x86>
 80197f6:	2a25      	cmp	r2, #37	; 0x25
 80197f8:	d1f9      	bne.n	80197ee <_vfiprintf_r+0x7a>
 80197fa:	ebba 0b04 	subs.w	fp, sl, r4
 80197fe:	d00b      	beq.n	8019818 <_vfiprintf_r+0xa4>
 8019800:	465b      	mov	r3, fp
 8019802:	4622      	mov	r2, r4
 8019804:	4629      	mov	r1, r5
 8019806:	4630      	mov	r0, r6
 8019808:	f7ff ffa1 	bl	801974e <__sfputs_r>
 801980c:	3001      	adds	r0, #1
 801980e:	f000 80a9 	beq.w	8019964 <_vfiprintf_r+0x1f0>
 8019812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019814:	445a      	add	r2, fp
 8019816:	9209      	str	r2, [sp, #36]	; 0x24
 8019818:	f89a 3000 	ldrb.w	r3, [sl]
 801981c:	2b00      	cmp	r3, #0
 801981e:	f000 80a1 	beq.w	8019964 <_vfiprintf_r+0x1f0>
 8019822:	2300      	movs	r3, #0
 8019824:	f04f 32ff 	mov.w	r2, #4294967295
 8019828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801982c:	f10a 0a01 	add.w	sl, sl, #1
 8019830:	9304      	str	r3, [sp, #16]
 8019832:	9307      	str	r3, [sp, #28]
 8019834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019838:	931a      	str	r3, [sp, #104]	; 0x68
 801983a:	4654      	mov	r4, sl
 801983c:	2205      	movs	r2, #5
 801983e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019842:	4854      	ldr	r0, [pc, #336]	; (8019994 <_vfiprintf_r+0x220>)
 8019844:	f7e6 fcec 	bl	8000220 <memchr>
 8019848:	9a04      	ldr	r2, [sp, #16]
 801984a:	b9d8      	cbnz	r0, 8019884 <_vfiprintf_r+0x110>
 801984c:	06d1      	lsls	r1, r2, #27
 801984e:	bf44      	itt	mi
 8019850:	2320      	movmi	r3, #32
 8019852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019856:	0713      	lsls	r3, r2, #28
 8019858:	bf44      	itt	mi
 801985a:	232b      	movmi	r3, #43	; 0x2b
 801985c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019860:	f89a 3000 	ldrb.w	r3, [sl]
 8019864:	2b2a      	cmp	r3, #42	; 0x2a
 8019866:	d015      	beq.n	8019894 <_vfiprintf_r+0x120>
 8019868:	9a07      	ldr	r2, [sp, #28]
 801986a:	4654      	mov	r4, sl
 801986c:	2000      	movs	r0, #0
 801986e:	f04f 0c0a 	mov.w	ip, #10
 8019872:	4621      	mov	r1, r4
 8019874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019878:	3b30      	subs	r3, #48	; 0x30
 801987a:	2b09      	cmp	r3, #9
 801987c:	d94d      	bls.n	801991a <_vfiprintf_r+0x1a6>
 801987e:	b1b0      	cbz	r0, 80198ae <_vfiprintf_r+0x13a>
 8019880:	9207      	str	r2, [sp, #28]
 8019882:	e014      	b.n	80198ae <_vfiprintf_r+0x13a>
 8019884:	eba0 0308 	sub.w	r3, r0, r8
 8019888:	fa09 f303 	lsl.w	r3, r9, r3
 801988c:	4313      	orrs	r3, r2
 801988e:	9304      	str	r3, [sp, #16]
 8019890:	46a2      	mov	sl, r4
 8019892:	e7d2      	b.n	801983a <_vfiprintf_r+0xc6>
 8019894:	9b03      	ldr	r3, [sp, #12]
 8019896:	1d19      	adds	r1, r3, #4
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	9103      	str	r1, [sp, #12]
 801989c:	2b00      	cmp	r3, #0
 801989e:	bfbb      	ittet	lt
 80198a0:	425b      	neglt	r3, r3
 80198a2:	f042 0202 	orrlt.w	r2, r2, #2
 80198a6:	9307      	strge	r3, [sp, #28]
 80198a8:	9307      	strlt	r3, [sp, #28]
 80198aa:	bfb8      	it	lt
 80198ac:	9204      	strlt	r2, [sp, #16]
 80198ae:	7823      	ldrb	r3, [r4, #0]
 80198b0:	2b2e      	cmp	r3, #46	; 0x2e
 80198b2:	d10c      	bne.n	80198ce <_vfiprintf_r+0x15a>
 80198b4:	7863      	ldrb	r3, [r4, #1]
 80198b6:	2b2a      	cmp	r3, #42	; 0x2a
 80198b8:	d134      	bne.n	8019924 <_vfiprintf_r+0x1b0>
 80198ba:	9b03      	ldr	r3, [sp, #12]
 80198bc:	1d1a      	adds	r2, r3, #4
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	9203      	str	r2, [sp, #12]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	bfb8      	it	lt
 80198c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80198ca:	3402      	adds	r4, #2
 80198cc:	9305      	str	r3, [sp, #20]
 80198ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80199a4 <_vfiprintf_r+0x230>
 80198d2:	7821      	ldrb	r1, [r4, #0]
 80198d4:	2203      	movs	r2, #3
 80198d6:	4650      	mov	r0, sl
 80198d8:	f7e6 fca2 	bl	8000220 <memchr>
 80198dc:	b138      	cbz	r0, 80198ee <_vfiprintf_r+0x17a>
 80198de:	9b04      	ldr	r3, [sp, #16]
 80198e0:	eba0 000a 	sub.w	r0, r0, sl
 80198e4:	2240      	movs	r2, #64	; 0x40
 80198e6:	4082      	lsls	r2, r0
 80198e8:	4313      	orrs	r3, r2
 80198ea:	3401      	adds	r4, #1
 80198ec:	9304      	str	r3, [sp, #16]
 80198ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198f2:	4829      	ldr	r0, [pc, #164]	; (8019998 <_vfiprintf_r+0x224>)
 80198f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198f8:	2206      	movs	r2, #6
 80198fa:	f7e6 fc91 	bl	8000220 <memchr>
 80198fe:	2800      	cmp	r0, #0
 8019900:	d03f      	beq.n	8019982 <_vfiprintf_r+0x20e>
 8019902:	4b26      	ldr	r3, [pc, #152]	; (801999c <_vfiprintf_r+0x228>)
 8019904:	bb1b      	cbnz	r3, 801994e <_vfiprintf_r+0x1da>
 8019906:	9b03      	ldr	r3, [sp, #12]
 8019908:	3307      	adds	r3, #7
 801990a:	f023 0307 	bic.w	r3, r3, #7
 801990e:	3308      	adds	r3, #8
 8019910:	9303      	str	r3, [sp, #12]
 8019912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019914:	443b      	add	r3, r7
 8019916:	9309      	str	r3, [sp, #36]	; 0x24
 8019918:	e768      	b.n	80197ec <_vfiprintf_r+0x78>
 801991a:	fb0c 3202 	mla	r2, ip, r2, r3
 801991e:	460c      	mov	r4, r1
 8019920:	2001      	movs	r0, #1
 8019922:	e7a6      	b.n	8019872 <_vfiprintf_r+0xfe>
 8019924:	2300      	movs	r3, #0
 8019926:	3401      	adds	r4, #1
 8019928:	9305      	str	r3, [sp, #20]
 801992a:	4619      	mov	r1, r3
 801992c:	f04f 0c0a 	mov.w	ip, #10
 8019930:	4620      	mov	r0, r4
 8019932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019936:	3a30      	subs	r2, #48	; 0x30
 8019938:	2a09      	cmp	r2, #9
 801993a:	d903      	bls.n	8019944 <_vfiprintf_r+0x1d0>
 801993c:	2b00      	cmp	r3, #0
 801993e:	d0c6      	beq.n	80198ce <_vfiprintf_r+0x15a>
 8019940:	9105      	str	r1, [sp, #20]
 8019942:	e7c4      	b.n	80198ce <_vfiprintf_r+0x15a>
 8019944:	fb0c 2101 	mla	r1, ip, r1, r2
 8019948:	4604      	mov	r4, r0
 801994a:	2301      	movs	r3, #1
 801994c:	e7f0      	b.n	8019930 <_vfiprintf_r+0x1bc>
 801994e:	ab03      	add	r3, sp, #12
 8019950:	9300      	str	r3, [sp, #0]
 8019952:	462a      	mov	r2, r5
 8019954:	4b12      	ldr	r3, [pc, #72]	; (80199a0 <_vfiprintf_r+0x22c>)
 8019956:	a904      	add	r1, sp, #16
 8019958:	4630      	mov	r0, r6
 801995a:	f3af 8000 	nop.w
 801995e:	4607      	mov	r7, r0
 8019960:	1c78      	adds	r0, r7, #1
 8019962:	d1d6      	bne.n	8019912 <_vfiprintf_r+0x19e>
 8019964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019966:	07d9      	lsls	r1, r3, #31
 8019968:	d405      	bmi.n	8019976 <_vfiprintf_r+0x202>
 801996a:	89ab      	ldrh	r3, [r5, #12]
 801996c:	059a      	lsls	r2, r3, #22
 801996e:	d402      	bmi.n	8019976 <_vfiprintf_r+0x202>
 8019970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019972:	f7ff fc50 	bl	8019216 <__retarget_lock_release_recursive>
 8019976:	89ab      	ldrh	r3, [r5, #12]
 8019978:	065b      	lsls	r3, r3, #25
 801997a:	f53f af1d 	bmi.w	80197b8 <_vfiprintf_r+0x44>
 801997e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019980:	e71c      	b.n	80197bc <_vfiprintf_r+0x48>
 8019982:	ab03      	add	r3, sp, #12
 8019984:	9300      	str	r3, [sp, #0]
 8019986:	462a      	mov	r2, r5
 8019988:	4b05      	ldr	r3, [pc, #20]	; (80199a0 <_vfiprintf_r+0x22c>)
 801998a:	a904      	add	r1, sp, #16
 801998c:	4630      	mov	r0, r6
 801998e:	f000 f879 	bl	8019a84 <_printf_i>
 8019992:	e7e4      	b.n	801995e <_vfiprintf_r+0x1ea>
 8019994:	08028152 	.word	0x08028152
 8019998:	0802815c 	.word	0x0802815c
 801999c:	00000000 	.word	0x00000000
 80199a0:	0801974f 	.word	0x0801974f
 80199a4:	08028158 	.word	0x08028158

080199a8 <_printf_common>:
 80199a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199ac:	4616      	mov	r6, r2
 80199ae:	4699      	mov	r9, r3
 80199b0:	688a      	ldr	r2, [r1, #8]
 80199b2:	690b      	ldr	r3, [r1, #16]
 80199b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199b8:	4293      	cmp	r3, r2
 80199ba:	bfb8      	it	lt
 80199bc:	4613      	movlt	r3, r2
 80199be:	6033      	str	r3, [r6, #0]
 80199c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199c4:	4607      	mov	r7, r0
 80199c6:	460c      	mov	r4, r1
 80199c8:	b10a      	cbz	r2, 80199ce <_printf_common+0x26>
 80199ca:	3301      	adds	r3, #1
 80199cc:	6033      	str	r3, [r6, #0]
 80199ce:	6823      	ldr	r3, [r4, #0]
 80199d0:	0699      	lsls	r1, r3, #26
 80199d2:	bf42      	ittt	mi
 80199d4:	6833      	ldrmi	r3, [r6, #0]
 80199d6:	3302      	addmi	r3, #2
 80199d8:	6033      	strmi	r3, [r6, #0]
 80199da:	6825      	ldr	r5, [r4, #0]
 80199dc:	f015 0506 	ands.w	r5, r5, #6
 80199e0:	d106      	bne.n	80199f0 <_printf_common+0x48>
 80199e2:	f104 0a19 	add.w	sl, r4, #25
 80199e6:	68e3      	ldr	r3, [r4, #12]
 80199e8:	6832      	ldr	r2, [r6, #0]
 80199ea:	1a9b      	subs	r3, r3, r2
 80199ec:	42ab      	cmp	r3, r5
 80199ee:	dc26      	bgt.n	8019a3e <_printf_common+0x96>
 80199f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80199f4:	1e13      	subs	r3, r2, #0
 80199f6:	6822      	ldr	r2, [r4, #0]
 80199f8:	bf18      	it	ne
 80199fa:	2301      	movne	r3, #1
 80199fc:	0692      	lsls	r2, r2, #26
 80199fe:	d42b      	bmi.n	8019a58 <_printf_common+0xb0>
 8019a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a04:	4649      	mov	r1, r9
 8019a06:	4638      	mov	r0, r7
 8019a08:	47c0      	blx	r8
 8019a0a:	3001      	adds	r0, #1
 8019a0c:	d01e      	beq.n	8019a4c <_printf_common+0xa4>
 8019a0e:	6823      	ldr	r3, [r4, #0]
 8019a10:	6922      	ldr	r2, [r4, #16]
 8019a12:	f003 0306 	and.w	r3, r3, #6
 8019a16:	2b04      	cmp	r3, #4
 8019a18:	bf02      	ittt	eq
 8019a1a:	68e5      	ldreq	r5, [r4, #12]
 8019a1c:	6833      	ldreq	r3, [r6, #0]
 8019a1e:	1aed      	subeq	r5, r5, r3
 8019a20:	68a3      	ldr	r3, [r4, #8]
 8019a22:	bf0c      	ite	eq
 8019a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a28:	2500      	movne	r5, #0
 8019a2a:	4293      	cmp	r3, r2
 8019a2c:	bfc4      	itt	gt
 8019a2e:	1a9b      	subgt	r3, r3, r2
 8019a30:	18ed      	addgt	r5, r5, r3
 8019a32:	2600      	movs	r6, #0
 8019a34:	341a      	adds	r4, #26
 8019a36:	42b5      	cmp	r5, r6
 8019a38:	d11a      	bne.n	8019a70 <_printf_common+0xc8>
 8019a3a:	2000      	movs	r0, #0
 8019a3c:	e008      	b.n	8019a50 <_printf_common+0xa8>
 8019a3e:	2301      	movs	r3, #1
 8019a40:	4652      	mov	r2, sl
 8019a42:	4649      	mov	r1, r9
 8019a44:	4638      	mov	r0, r7
 8019a46:	47c0      	blx	r8
 8019a48:	3001      	adds	r0, #1
 8019a4a:	d103      	bne.n	8019a54 <_printf_common+0xac>
 8019a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a54:	3501      	adds	r5, #1
 8019a56:	e7c6      	b.n	80199e6 <_printf_common+0x3e>
 8019a58:	18e1      	adds	r1, r4, r3
 8019a5a:	1c5a      	adds	r2, r3, #1
 8019a5c:	2030      	movs	r0, #48	; 0x30
 8019a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a62:	4422      	add	r2, r4
 8019a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a6c:	3302      	adds	r3, #2
 8019a6e:	e7c7      	b.n	8019a00 <_printf_common+0x58>
 8019a70:	2301      	movs	r3, #1
 8019a72:	4622      	mov	r2, r4
 8019a74:	4649      	mov	r1, r9
 8019a76:	4638      	mov	r0, r7
 8019a78:	47c0      	blx	r8
 8019a7a:	3001      	adds	r0, #1
 8019a7c:	d0e6      	beq.n	8019a4c <_printf_common+0xa4>
 8019a7e:	3601      	adds	r6, #1
 8019a80:	e7d9      	b.n	8019a36 <_printf_common+0x8e>
	...

08019a84 <_printf_i>:
 8019a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a88:	7e0f      	ldrb	r7, [r1, #24]
 8019a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019a8c:	2f78      	cmp	r7, #120	; 0x78
 8019a8e:	4691      	mov	r9, r2
 8019a90:	4680      	mov	r8, r0
 8019a92:	460c      	mov	r4, r1
 8019a94:	469a      	mov	sl, r3
 8019a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019a9a:	d807      	bhi.n	8019aac <_printf_i+0x28>
 8019a9c:	2f62      	cmp	r7, #98	; 0x62
 8019a9e:	d80a      	bhi.n	8019ab6 <_printf_i+0x32>
 8019aa0:	2f00      	cmp	r7, #0
 8019aa2:	f000 80d4 	beq.w	8019c4e <_printf_i+0x1ca>
 8019aa6:	2f58      	cmp	r7, #88	; 0x58
 8019aa8:	f000 80c0 	beq.w	8019c2c <_printf_i+0x1a8>
 8019aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ab4:	e03a      	b.n	8019b2c <_printf_i+0xa8>
 8019ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019aba:	2b15      	cmp	r3, #21
 8019abc:	d8f6      	bhi.n	8019aac <_printf_i+0x28>
 8019abe:	a101      	add	r1, pc, #4	; (adr r1, 8019ac4 <_printf_i+0x40>)
 8019ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ac4:	08019b1d 	.word	0x08019b1d
 8019ac8:	08019b31 	.word	0x08019b31
 8019acc:	08019aad 	.word	0x08019aad
 8019ad0:	08019aad 	.word	0x08019aad
 8019ad4:	08019aad 	.word	0x08019aad
 8019ad8:	08019aad 	.word	0x08019aad
 8019adc:	08019b31 	.word	0x08019b31
 8019ae0:	08019aad 	.word	0x08019aad
 8019ae4:	08019aad 	.word	0x08019aad
 8019ae8:	08019aad 	.word	0x08019aad
 8019aec:	08019aad 	.word	0x08019aad
 8019af0:	08019c35 	.word	0x08019c35
 8019af4:	08019b5d 	.word	0x08019b5d
 8019af8:	08019bef 	.word	0x08019bef
 8019afc:	08019aad 	.word	0x08019aad
 8019b00:	08019aad 	.word	0x08019aad
 8019b04:	08019c57 	.word	0x08019c57
 8019b08:	08019aad 	.word	0x08019aad
 8019b0c:	08019b5d 	.word	0x08019b5d
 8019b10:	08019aad 	.word	0x08019aad
 8019b14:	08019aad 	.word	0x08019aad
 8019b18:	08019bf7 	.word	0x08019bf7
 8019b1c:	682b      	ldr	r3, [r5, #0]
 8019b1e:	1d1a      	adds	r2, r3, #4
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	602a      	str	r2, [r5, #0]
 8019b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	e09f      	b.n	8019c70 <_printf_i+0x1ec>
 8019b30:	6820      	ldr	r0, [r4, #0]
 8019b32:	682b      	ldr	r3, [r5, #0]
 8019b34:	0607      	lsls	r7, r0, #24
 8019b36:	f103 0104 	add.w	r1, r3, #4
 8019b3a:	6029      	str	r1, [r5, #0]
 8019b3c:	d501      	bpl.n	8019b42 <_printf_i+0xbe>
 8019b3e:	681e      	ldr	r6, [r3, #0]
 8019b40:	e003      	b.n	8019b4a <_printf_i+0xc6>
 8019b42:	0646      	lsls	r6, r0, #25
 8019b44:	d5fb      	bpl.n	8019b3e <_printf_i+0xba>
 8019b46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019b4a:	2e00      	cmp	r6, #0
 8019b4c:	da03      	bge.n	8019b56 <_printf_i+0xd2>
 8019b4e:	232d      	movs	r3, #45	; 0x2d
 8019b50:	4276      	negs	r6, r6
 8019b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b56:	485a      	ldr	r0, [pc, #360]	; (8019cc0 <_printf_i+0x23c>)
 8019b58:	230a      	movs	r3, #10
 8019b5a:	e012      	b.n	8019b82 <_printf_i+0xfe>
 8019b5c:	682b      	ldr	r3, [r5, #0]
 8019b5e:	6820      	ldr	r0, [r4, #0]
 8019b60:	1d19      	adds	r1, r3, #4
 8019b62:	6029      	str	r1, [r5, #0]
 8019b64:	0605      	lsls	r5, r0, #24
 8019b66:	d501      	bpl.n	8019b6c <_printf_i+0xe8>
 8019b68:	681e      	ldr	r6, [r3, #0]
 8019b6a:	e002      	b.n	8019b72 <_printf_i+0xee>
 8019b6c:	0641      	lsls	r1, r0, #25
 8019b6e:	d5fb      	bpl.n	8019b68 <_printf_i+0xe4>
 8019b70:	881e      	ldrh	r6, [r3, #0]
 8019b72:	4853      	ldr	r0, [pc, #332]	; (8019cc0 <_printf_i+0x23c>)
 8019b74:	2f6f      	cmp	r7, #111	; 0x6f
 8019b76:	bf0c      	ite	eq
 8019b78:	2308      	moveq	r3, #8
 8019b7a:	230a      	movne	r3, #10
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b82:	6865      	ldr	r5, [r4, #4]
 8019b84:	60a5      	str	r5, [r4, #8]
 8019b86:	2d00      	cmp	r5, #0
 8019b88:	bfa2      	ittt	ge
 8019b8a:	6821      	ldrge	r1, [r4, #0]
 8019b8c:	f021 0104 	bicge.w	r1, r1, #4
 8019b90:	6021      	strge	r1, [r4, #0]
 8019b92:	b90e      	cbnz	r6, 8019b98 <_printf_i+0x114>
 8019b94:	2d00      	cmp	r5, #0
 8019b96:	d04b      	beq.n	8019c30 <_printf_i+0x1ac>
 8019b98:	4615      	mov	r5, r2
 8019b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8019ba2:	5dc7      	ldrb	r7, [r0, r7]
 8019ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ba8:	4637      	mov	r7, r6
 8019baa:	42bb      	cmp	r3, r7
 8019bac:	460e      	mov	r6, r1
 8019bae:	d9f4      	bls.n	8019b9a <_printf_i+0x116>
 8019bb0:	2b08      	cmp	r3, #8
 8019bb2:	d10b      	bne.n	8019bcc <_printf_i+0x148>
 8019bb4:	6823      	ldr	r3, [r4, #0]
 8019bb6:	07de      	lsls	r6, r3, #31
 8019bb8:	d508      	bpl.n	8019bcc <_printf_i+0x148>
 8019bba:	6923      	ldr	r3, [r4, #16]
 8019bbc:	6861      	ldr	r1, [r4, #4]
 8019bbe:	4299      	cmp	r1, r3
 8019bc0:	bfde      	ittt	le
 8019bc2:	2330      	movle	r3, #48	; 0x30
 8019bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019bcc:	1b52      	subs	r2, r2, r5
 8019bce:	6122      	str	r2, [r4, #16]
 8019bd0:	f8cd a000 	str.w	sl, [sp]
 8019bd4:	464b      	mov	r3, r9
 8019bd6:	aa03      	add	r2, sp, #12
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4640      	mov	r0, r8
 8019bdc:	f7ff fee4 	bl	80199a8 <_printf_common>
 8019be0:	3001      	adds	r0, #1
 8019be2:	d14a      	bne.n	8019c7a <_printf_i+0x1f6>
 8019be4:	f04f 30ff 	mov.w	r0, #4294967295
 8019be8:	b004      	add	sp, #16
 8019bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bee:	6823      	ldr	r3, [r4, #0]
 8019bf0:	f043 0320 	orr.w	r3, r3, #32
 8019bf4:	6023      	str	r3, [r4, #0]
 8019bf6:	4833      	ldr	r0, [pc, #204]	; (8019cc4 <_printf_i+0x240>)
 8019bf8:	2778      	movs	r7, #120	; 0x78
 8019bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019bfe:	6823      	ldr	r3, [r4, #0]
 8019c00:	6829      	ldr	r1, [r5, #0]
 8019c02:	061f      	lsls	r7, r3, #24
 8019c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8019c08:	d402      	bmi.n	8019c10 <_printf_i+0x18c>
 8019c0a:	065f      	lsls	r7, r3, #25
 8019c0c:	bf48      	it	mi
 8019c0e:	b2b6      	uxthmi	r6, r6
 8019c10:	07df      	lsls	r7, r3, #31
 8019c12:	bf48      	it	mi
 8019c14:	f043 0320 	orrmi.w	r3, r3, #32
 8019c18:	6029      	str	r1, [r5, #0]
 8019c1a:	bf48      	it	mi
 8019c1c:	6023      	strmi	r3, [r4, #0]
 8019c1e:	b91e      	cbnz	r6, 8019c28 <_printf_i+0x1a4>
 8019c20:	6823      	ldr	r3, [r4, #0]
 8019c22:	f023 0320 	bic.w	r3, r3, #32
 8019c26:	6023      	str	r3, [r4, #0]
 8019c28:	2310      	movs	r3, #16
 8019c2a:	e7a7      	b.n	8019b7c <_printf_i+0xf8>
 8019c2c:	4824      	ldr	r0, [pc, #144]	; (8019cc0 <_printf_i+0x23c>)
 8019c2e:	e7e4      	b.n	8019bfa <_printf_i+0x176>
 8019c30:	4615      	mov	r5, r2
 8019c32:	e7bd      	b.n	8019bb0 <_printf_i+0x12c>
 8019c34:	682b      	ldr	r3, [r5, #0]
 8019c36:	6826      	ldr	r6, [r4, #0]
 8019c38:	6961      	ldr	r1, [r4, #20]
 8019c3a:	1d18      	adds	r0, r3, #4
 8019c3c:	6028      	str	r0, [r5, #0]
 8019c3e:	0635      	lsls	r5, r6, #24
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	d501      	bpl.n	8019c48 <_printf_i+0x1c4>
 8019c44:	6019      	str	r1, [r3, #0]
 8019c46:	e002      	b.n	8019c4e <_printf_i+0x1ca>
 8019c48:	0670      	lsls	r0, r6, #25
 8019c4a:	d5fb      	bpl.n	8019c44 <_printf_i+0x1c0>
 8019c4c:	8019      	strh	r1, [r3, #0]
 8019c4e:	2300      	movs	r3, #0
 8019c50:	6123      	str	r3, [r4, #16]
 8019c52:	4615      	mov	r5, r2
 8019c54:	e7bc      	b.n	8019bd0 <_printf_i+0x14c>
 8019c56:	682b      	ldr	r3, [r5, #0]
 8019c58:	1d1a      	adds	r2, r3, #4
 8019c5a:	602a      	str	r2, [r5, #0]
 8019c5c:	681d      	ldr	r5, [r3, #0]
 8019c5e:	6862      	ldr	r2, [r4, #4]
 8019c60:	2100      	movs	r1, #0
 8019c62:	4628      	mov	r0, r5
 8019c64:	f7e6 fadc 	bl	8000220 <memchr>
 8019c68:	b108      	cbz	r0, 8019c6e <_printf_i+0x1ea>
 8019c6a:	1b40      	subs	r0, r0, r5
 8019c6c:	6060      	str	r0, [r4, #4]
 8019c6e:	6863      	ldr	r3, [r4, #4]
 8019c70:	6123      	str	r3, [r4, #16]
 8019c72:	2300      	movs	r3, #0
 8019c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c78:	e7aa      	b.n	8019bd0 <_printf_i+0x14c>
 8019c7a:	6923      	ldr	r3, [r4, #16]
 8019c7c:	462a      	mov	r2, r5
 8019c7e:	4649      	mov	r1, r9
 8019c80:	4640      	mov	r0, r8
 8019c82:	47d0      	blx	sl
 8019c84:	3001      	adds	r0, #1
 8019c86:	d0ad      	beq.n	8019be4 <_printf_i+0x160>
 8019c88:	6823      	ldr	r3, [r4, #0]
 8019c8a:	079b      	lsls	r3, r3, #30
 8019c8c:	d413      	bmi.n	8019cb6 <_printf_i+0x232>
 8019c8e:	68e0      	ldr	r0, [r4, #12]
 8019c90:	9b03      	ldr	r3, [sp, #12]
 8019c92:	4298      	cmp	r0, r3
 8019c94:	bfb8      	it	lt
 8019c96:	4618      	movlt	r0, r3
 8019c98:	e7a6      	b.n	8019be8 <_printf_i+0x164>
 8019c9a:	2301      	movs	r3, #1
 8019c9c:	4632      	mov	r2, r6
 8019c9e:	4649      	mov	r1, r9
 8019ca0:	4640      	mov	r0, r8
 8019ca2:	47d0      	blx	sl
 8019ca4:	3001      	adds	r0, #1
 8019ca6:	d09d      	beq.n	8019be4 <_printf_i+0x160>
 8019ca8:	3501      	adds	r5, #1
 8019caa:	68e3      	ldr	r3, [r4, #12]
 8019cac:	9903      	ldr	r1, [sp, #12]
 8019cae:	1a5b      	subs	r3, r3, r1
 8019cb0:	42ab      	cmp	r3, r5
 8019cb2:	dcf2      	bgt.n	8019c9a <_printf_i+0x216>
 8019cb4:	e7eb      	b.n	8019c8e <_printf_i+0x20a>
 8019cb6:	2500      	movs	r5, #0
 8019cb8:	f104 0619 	add.w	r6, r4, #25
 8019cbc:	e7f5      	b.n	8019caa <_printf_i+0x226>
 8019cbe:	bf00      	nop
 8019cc0:	08028163 	.word	0x08028163
 8019cc4:	08028174 	.word	0x08028174

08019cc8 <__sflush_r>:
 8019cc8:	898a      	ldrh	r2, [r1, #12]
 8019cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cce:	4605      	mov	r5, r0
 8019cd0:	0710      	lsls	r0, r2, #28
 8019cd2:	460c      	mov	r4, r1
 8019cd4:	d458      	bmi.n	8019d88 <__sflush_r+0xc0>
 8019cd6:	684b      	ldr	r3, [r1, #4]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	dc05      	bgt.n	8019ce8 <__sflush_r+0x20>
 8019cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	dc02      	bgt.n	8019ce8 <__sflush_r+0x20>
 8019ce2:	2000      	movs	r0, #0
 8019ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019cea:	2e00      	cmp	r6, #0
 8019cec:	d0f9      	beq.n	8019ce2 <__sflush_r+0x1a>
 8019cee:	2300      	movs	r3, #0
 8019cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019cf4:	682f      	ldr	r7, [r5, #0]
 8019cf6:	6a21      	ldr	r1, [r4, #32]
 8019cf8:	602b      	str	r3, [r5, #0]
 8019cfa:	d032      	beq.n	8019d62 <__sflush_r+0x9a>
 8019cfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019cfe:	89a3      	ldrh	r3, [r4, #12]
 8019d00:	075a      	lsls	r2, r3, #29
 8019d02:	d505      	bpl.n	8019d10 <__sflush_r+0x48>
 8019d04:	6863      	ldr	r3, [r4, #4]
 8019d06:	1ac0      	subs	r0, r0, r3
 8019d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d0a:	b10b      	cbz	r3, 8019d10 <__sflush_r+0x48>
 8019d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d0e:	1ac0      	subs	r0, r0, r3
 8019d10:	2300      	movs	r3, #0
 8019d12:	4602      	mov	r2, r0
 8019d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d16:	6a21      	ldr	r1, [r4, #32]
 8019d18:	4628      	mov	r0, r5
 8019d1a:	47b0      	blx	r6
 8019d1c:	1c43      	adds	r3, r0, #1
 8019d1e:	89a3      	ldrh	r3, [r4, #12]
 8019d20:	d106      	bne.n	8019d30 <__sflush_r+0x68>
 8019d22:	6829      	ldr	r1, [r5, #0]
 8019d24:	291d      	cmp	r1, #29
 8019d26:	d82b      	bhi.n	8019d80 <__sflush_r+0xb8>
 8019d28:	4a29      	ldr	r2, [pc, #164]	; (8019dd0 <__sflush_r+0x108>)
 8019d2a:	410a      	asrs	r2, r1
 8019d2c:	07d6      	lsls	r6, r2, #31
 8019d2e:	d427      	bmi.n	8019d80 <__sflush_r+0xb8>
 8019d30:	2200      	movs	r2, #0
 8019d32:	6062      	str	r2, [r4, #4]
 8019d34:	04d9      	lsls	r1, r3, #19
 8019d36:	6922      	ldr	r2, [r4, #16]
 8019d38:	6022      	str	r2, [r4, #0]
 8019d3a:	d504      	bpl.n	8019d46 <__sflush_r+0x7e>
 8019d3c:	1c42      	adds	r2, r0, #1
 8019d3e:	d101      	bne.n	8019d44 <__sflush_r+0x7c>
 8019d40:	682b      	ldr	r3, [r5, #0]
 8019d42:	b903      	cbnz	r3, 8019d46 <__sflush_r+0x7e>
 8019d44:	6560      	str	r0, [r4, #84]	; 0x54
 8019d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d48:	602f      	str	r7, [r5, #0]
 8019d4a:	2900      	cmp	r1, #0
 8019d4c:	d0c9      	beq.n	8019ce2 <__sflush_r+0x1a>
 8019d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d52:	4299      	cmp	r1, r3
 8019d54:	d002      	beq.n	8019d5c <__sflush_r+0x94>
 8019d56:	4628      	mov	r0, r5
 8019d58:	f7ff fa8a 	bl	8019270 <_free_r>
 8019d5c:	2000      	movs	r0, #0
 8019d5e:	6360      	str	r0, [r4, #52]	; 0x34
 8019d60:	e7c0      	b.n	8019ce4 <__sflush_r+0x1c>
 8019d62:	2301      	movs	r3, #1
 8019d64:	4628      	mov	r0, r5
 8019d66:	47b0      	blx	r6
 8019d68:	1c41      	adds	r1, r0, #1
 8019d6a:	d1c8      	bne.n	8019cfe <__sflush_r+0x36>
 8019d6c:	682b      	ldr	r3, [r5, #0]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d0c5      	beq.n	8019cfe <__sflush_r+0x36>
 8019d72:	2b1d      	cmp	r3, #29
 8019d74:	d001      	beq.n	8019d7a <__sflush_r+0xb2>
 8019d76:	2b16      	cmp	r3, #22
 8019d78:	d101      	bne.n	8019d7e <__sflush_r+0xb6>
 8019d7a:	602f      	str	r7, [r5, #0]
 8019d7c:	e7b1      	b.n	8019ce2 <__sflush_r+0x1a>
 8019d7e:	89a3      	ldrh	r3, [r4, #12]
 8019d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d84:	81a3      	strh	r3, [r4, #12]
 8019d86:	e7ad      	b.n	8019ce4 <__sflush_r+0x1c>
 8019d88:	690f      	ldr	r7, [r1, #16]
 8019d8a:	2f00      	cmp	r7, #0
 8019d8c:	d0a9      	beq.n	8019ce2 <__sflush_r+0x1a>
 8019d8e:	0793      	lsls	r3, r2, #30
 8019d90:	680e      	ldr	r6, [r1, #0]
 8019d92:	bf08      	it	eq
 8019d94:	694b      	ldreq	r3, [r1, #20]
 8019d96:	600f      	str	r7, [r1, #0]
 8019d98:	bf18      	it	ne
 8019d9a:	2300      	movne	r3, #0
 8019d9c:	eba6 0807 	sub.w	r8, r6, r7
 8019da0:	608b      	str	r3, [r1, #8]
 8019da2:	f1b8 0f00 	cmp.w	r8, #0
 8019da6:	dd9c      	ble.n	8019ce2 <__sflush_r+0x1a>
 8019da8:	6a21      	ldr	r1, [r4, #32]
 8019daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019dac:	4643      	mov	r3, r8
 8019dae:	463a      	mov	r2, r7
 8019db0:	4628      	mov	r0, r5
 8019db2:	47b0      	blx	r6
 8019db4:	2800      	cmp	r0, #0
 8019db6:	dc06      	bgt.n	8019dc6 <__sflush_r+0xfe>
 8019db8:	89a3      	ldrh	r3, [r4, #12]
 8019dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dbe:	81a3      	strh	r3, [r4, #12]
 8019dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8019dc4:	e78e      	b.n	8019ce4 <__sflush_r+0x1c>
 8019dc6:	4407      	add	r7, r0
 8019dc8:	eba8 0800 	sub.w	r8, r8, r0
 8019dcc:	e7e9      	b.n	8019da2 <__sflush_r+0xda>
 8019dce:	bf00      	nop
 8019dd0:	dfbffffe 	.word	0xdfbffffe

08019dd4 <_fflush_r>:
 8019dd4:	b538      	push	{r3, r4, r5, lr}
 8019dd6:	690b      	ldr	r3, [r1, #16]
 8019dd8:	4605      	mov	r5, r0
 8019dda:	460c      	mov	r4, r1
 8019ddc:	b913      	cbnz	r3, 8019de4 <_fflush_r+0x10>
 8019dde:	2500      	movs	r5, #0
 8019de0:	4628      	mov	r0, r5
 8019de2:	bd38      	pop	{r3, r4, r5, pc}
 8019de4:	b118      	cbz	r0, 8019dee <_fflush_r+0x1a>
 8019de6:	6a03      	ldr	r3, [r0, #32]
 8019de8:	b90b      	cbnz	r3, 8019dee <_fflush_r+0x1a>
 8019dea:	f7fe feef 	bl	8018bcc <__sinit>
 8019dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d0f3      	beq.n	8019dde <_fflush_r+0xa>
 8019df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019df8:	07d0      	lsls	r0, r2, #31
 8019dfa:	d404      	bmi.n	8019e06 <_fflush_r+0x32>
 8019dfc:	0599      	lsls	r1, r3, #22
 8019dfe:	d402      	bmi.n	8019e06 <_fflush_r+0x32>
 8019e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e02:	f7ff fa07 	bl	8019214 <__retarget_lock_acquire_recursive>
 8019e06:	4628      	mov	r0, r5
 8019e08:	4621      	mov	r1, r4
 8019e0a:	f7ff ff5d 	bl	8019cc8 <__sflush_r>
 8019e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e10:	07da      	lsls	r2, r3, #31
 8019e12:	4605      	mov	r5, r0
 8019e14:	d4e4      	bmi.n	8019de0 <_fflush_r+0xc>
 8019e16:	89a3      	ldrh	r3, [r4, #12]
 8019e18:	059b      	lsls	r3, r3, #22
 8019e1a:	d4e1      	bmi.n	8019de0 <_fflush_r+0xc>
 8019e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e1e:	f7ff f9fa 	bl	8019216 <__retarget_lock_release_recursive>
 8019e22:	e7dd      	b.n	8019de0 <_fflush_r+0xc>

08019e24 <fiprintf>:
 8019e24:	b40e      	push	{r1, r2, r3}
 8019e26:	b503      	push	{r0, r1, lr}
 8019e28:	4601      	mov	r1, r0
 8019e2a:	ab03      	add	r3, sp, #12
 8019e2c:	4805      	ldr	r0, [pc, #20]	; (8019e44 <fiprintf+0x20>)
 8019e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e32:	6800      	ldr	r0, [r0, #0]
 8019e34:	9301      	str	r3, [sp, #4]
 8019e36:	f7ff fc9d 	bl	8019774 <_vfiprintf_r>
 8019e3a:	b002      	add	sp, #8
 8019e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e40:	b003      	add	sp, #12
 8019e42:	4770      	bx	lr
 8019e44:	2000008c 	.word	0x2000008c

08019e48 <__swhatbuf_r>:
 8019e48:	b570      	push	{r4, r5, r6, lr}
 8019e4a:	460c      	mov	r4, r1
 8019e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e50:	2900      	cmp	r1, #0
 8019e52:	b096      	sub	sp, #88	; 0x58
 8019e54:	4615      	mov	r5, r2
 8019e56:	461e      	mov	r6, r3
 8019e58:	da0d      	bge.n	8019e76 <__swhatbuf_r+0x2e>
 8019e5a:	89a3      	ldrh	r3, [r4, #12]
 8019e5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019e60:	f04f 0100 	mov.w	r1, #0
 8019e64:	bf0c      	ite	eq
 8019e66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019e6a:	2340      	movne	r3, #64	; 0x40
 8019e6c:	2000      	movs	r0, #0
 8019e6e:	6031      	str	r1, [r6, #0]
 8019e70:	602b      	str	r3, [r5, #0]
 8019e72:	b016      	add	sp, #88	; 0x58
 8019e74:	bd70      	pop	{r4, r5, r6, pc}
 8019e76:	466a      	mov	r2, sp
 8019e78:	f000 f848 	bl	8019f0c <_fstat_r>
 8019e7c:	2800      	cmp	r0, #0
 8019e7e:	dbec      	blt.n	8019e5a <__swhatbuf_r+0x12>
 8019e80:	9901      	ldr	r1, [sp, #4]
 8019e82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019e86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019e8a:	4259      	negs	r1, r3
 8019e8c:	4159      	adcs	r1, r3
 8019e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e92:	e7eb      	b.n	8019e6c <__swhatbuf_r+0x24>

08019e94 <__smakebuf_r>:
 8019e94:	898b      	ldrh	r3, [r1, #12]
 8019e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019e98:	079d      	lsls	r5, r3, #30
 8019e9a:	4606      	mov	r6, r0
 8019e9c:	460c      	mov	r4, r1
 8019e9e:	d507      	bpl.n	8019eb0 <__smakebuf_r+0x1c>
 8019ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ea4:	6023      	str	r3, [r4, #0]
 8019ea6:	6123      	str	r3, [r4, #16]
 8019ea8:	2301      	movs	r3, #1
 8019eaa:	6163      	str	r3, [r4, #20]
 8019eac:	b002      	add	sp, #8
 8019eae:	bd70      	pop	{r4, r5, r6, pc}
 8019eb0:	ab01      	add	r3, sp, #4
 8019eb2:	466a      	mov	r2, sp
 8019eb4:	f7ff ffc8 	bl	8019e48 <__swhatbuf_r>
 8019eb8:	9900      	ldr	r1, [sp, #0]
 8019eba:	4605      	mov	r5, r0
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	f7ff fa4b 	bl	8019358 <_malloc_r>
 8019ec2:	b948      	cbnz	r0, 8019ed8 <__smakebuf_r+0x44>
 8019ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ec8:	059a      	lsls	r2, r3, #22
 8019eca:	d4ef      	bmi.n	8019eac <__smakebuf_r+0x18>
 8019ecc:	f023 0303 	bic.w	r3, r3, #3
 8019ed0:	f043 0302 	orr.w	r3, r3, #2
 8019ed4:	81a3      	strh	r3, [r4, #12]
 8019ed6:	e7e3      	b.n	8019ea0 <__smakebuf_r+0xc>
 8019ed8:	89a3      	ldrh	r3, [r4, #12]
 8019eda:	6020      	str	r0, [r4, #0]
 8019edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ee0:	81a3      	strh	r3, [r4, #12]
 8019ee2:	9b00      	ldr	r3, [sp, #0]
 8019ee4:	6163      	str	r3, [r4, #20]
 8019ee6:	9b01      	ldr	r3, [sp, #4]
 8019ee8:	6120      	str	r0, [r4, #16]
 8019eea:	b15b      	cbz	r3, 8019f04 <__smakebuf_r+0x70>
 8019eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ef0:	4630      	mov	r0, r6
 8019ef2:	f000 f81d 	bl	8019f30 <_isatty_r>
 8019ef6:	b128      	cbz	r0, 8019f04 <__smakebuf_r+0x70>
 8019ef8:	89a3      	ldrh	r3, [r4, #12]
 8019efa:	f023 0303 	bic.w	r3, r3, #3
 8019efe:	f043 0301 	orr.w	r3, r3, #1
 8019f02:	81a3      	strh	r3, [r4, #12]
 8019f04:	89a3      	ldrh	r3, [r4, #12]
 8019f06:	431d      	orrs	r5, r3
 8019f08:	81a5      	strh	r5, [r4, #12]
 8019f0a:	e7cf      	b.n	8019eac <__smakebuf_r+0x18>

08019f0c <_fstat_r>:
 8019f0c:	b538      	push	{r3, r4, r5, lr}
 8019f0e:	4d07      	ldr	r5, [pc, #28]	; (8019f2c <_fstat_r+0x20>)
 8019f10:	2300      	movs	r3, #0
 8019f12:	4604      	mov	r4, r0
 8019f14:	4608      	mov	r0, r1
 8019f16:	4611      	mov	r1, r2
 8019f18:	602b      	str	r3, [r5, #0]
 8019f1a:	f7e6 fede 	bl	8000cda <_fstat>
 8019f1e:	1c43      	adds	r3, r0, #1
 8019f20:	d102      	bne.n	8019f28 <_fstat_r+0x1c>
 8019f22:	682b      	ldr	r3, [r5, #0]
 8019f24:	b103      	cbz	r3, 8019f28 <_fstat_r+0x1c>
 8019f26:	6023      	str	r3, [r4, #0]
 8019f28:	bd38      	pop	{r3, r4, r5, pc}
 8019f2a:	bf00      	nop
 8019f2c:	20011480 	.word	0x20011480

08019f30 <_isatty_r>:
 8019f30:	b538      	push	{r3, r4, r5, lr}
 8019f32:	4d06      	ldr	r5, [pc, #24]	; (8019f4c <_isatty_r+0x1c>)
 8019f34:	2300      	movs	r3, #0
 8019f36:	4604      	mov	r4, r0
 8019f38:	4608      	mov	r0, r1
 8019f3a:	602b      	str	r3, [r5, #0]
 8019f3c:	f7e6 fedd 	bl	8000cfa <_isatty>
 8019f40:	1c43      	adds	r3, r0, #1
 8019f42:	d102      	bne.n	8019f4a <_isatty_r+0x1a>
 8019f44:	682b      	ldr	r3, [r5, #0]
 8019f46:	b103      	cbz	r3, 8019f4a <_isatty_r+0x1a>
 8019f48:	6023      	str	r3, [r4, #0]
 8019f4a:	bd38      	pop	{r3, r4, r5, pc}
 8019f4c:	20011480 	.word	0x20011480

08019f50 <_sbrk_r>:
 8019f50:	b538      	push	{r3, r4, r5, lr}
 8019f52:	4d06      	ldr	r5, [pc, #24]	; (8019f6c <_sbrk_r+0x1c>)
 8019f54:	2300      	movs	r3, #0
 8019f56:	4604      	mov	r4, r0
 8019f58:	4608      	mov	r0, r1
 8019f5a:	602b      	str	r3, [r5, #0]
 8019f5c:	f7e6 fee6 	bl	8000d2c <_sbrk>
 8019f60:	1c43      	adds	r3, r0, #1
 8019f62:	d102      	bne.n	8019f6a <_sbrk_r+0x1a>
 8019f64:	682b      	ldr	r3, [r5, #0]
 8019f66:	b103      	cbz	r3, 8019f6a <_sbrk_r+0x1a>
 8019f68:	6023      	str	r3, [r4, #0]
 8019f6a:	bd38      	pop	{r3, r4, r5, pc}
 8019f6c:	20011480 	.word	0x20011480

08019f70 <abort>:
 8019f70:	b508      	push	{r3, lr}
 8019f72:	2006      	movs	r0, #6
 8019f74:	f000 f85a 	bl	801a02c <raise>
 8019f78:	2001      	movs	r0, #1
 8019f7a:	f7e6 fe5f 	bl	8000c3c <_exit>

08019f7e <_realloc_r>:
 8019f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f82:	4680      	mov	r8, r0
 8019f84:	4614      	mov	r4, r2
 8019f86:	460e      	mov	r6, r1
 8019f88:	b921      	cbnz	r1, 8019f94 <_realloc_r+0x16>
 8019f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f8e:	4611      	mov	r1, r2
 8019f90:	f7ff b9e2 	b.w	8019358 <_malloc_r>
 8019f94:	b92a      	cbnz	r2, 8019fa2 <_realloc_r+0x24>
 8019f96:	f7ff f96b 	bl	8019270 <_free_r>
 8019f9a:	4625      	mov	r5, r4
 8019f9c:	4628      	mov	r0, r5
 8019f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fa2:	f000 f85f 	bl	801a064 <_malloc_usable_size_r>
 8019fa6:	4284      	cmp	r4, r0
 8019fa8:	4607      	mov	r7, r0
 8019faa:	d802      	bhi.n	8019fb2 <_realloc_r+0x34>
 8019fac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019fb0:	d812      	bhi.n	8019fd8 <_realloc_r+0x5a>
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	4640      	mov	r0, r8
 8019fb6:	f7ff f9cf 	bl	8019358 <_malloc_r>
 8019fba:	4605      	mov	r5, r0
 8019fbc:	2800      	cmp	r0, #0
 8019fbe:	d0ed      	beq.n	8019f9c <_realloc_r+0x1e>
 8019fc0:	42bc      	cmp	r4, r7
 8019fc2:	4622      	mov	r2, r4
 8019fc4:	4631      	mov	r1, r6
 8019fc6:	bf28      	it	cs
 8019fc8:	463a      	movcs	r2, r7
 8019fca:	f7ff f925 	bl	8019218 <memcpy>
 8019fce:	4631      	mov	r1, r6
 8019fd0:	4640      	mov	r0, r8
 8019fd2:	f7ff f94d 	bl	8019270 <_free_r>
 8019fd6:	e7e1      	b.n	8019f9c <_realloc_r+0x1e>
 8019fd8:	4635      	mov	r5, r6
 8019fda:	e7df      	b.n	8019f9c <_realloc_r+0x1e>

08019fdc <_raise_r>:
 8019fdc:	291f      	cmp	r1, #31
 8019fde:	b538      	push	{r3, r4, r5, lr}
 8019fe0:	4604      	mov	r4, r0
 8019fe2:	460d      	mov	r5, r1
 8019fe4:	d904      	bls.n	8019ff0 <_raise_r+0x14>
 8019fe6:	2316      	movs	r3, #22
 8019fe8:	6003      	str	r3, [r0, #0]
 8019fea:	f04f 30ff 	mov.w	r0, #4294967295
 8019fee:	bd38      	pop	{r3, r4, r5, pc}
 8019ff0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019ff2:	b112      	cbz	r2, 8019ffa <_raise_r+0x1e>
 8019ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ff8:	b94b      	cbnz	r3, 801a00e <_raise_r+0x32>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f000 f830 	bl	801a060 <_getpid_r>
 801a000:	462a      	mov	r2, r5
 801a002:	4601      	mov	r1, r0
 801a004:	4620      	mov	r0, r4
 801a006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a00a:	f000 b817 	b.w	801a03c <_kill_r>
 801a00e:	2b01      	cmp	r3, #1
 801a010:	d00a      	beq.n	801a028 <_raise_r+0x4c>
 801a012:	1c59      	adds	r1, r3, #1
 801a014:	d103      	bne.n	801a01e <_raise_r+0x42>
 801a016:	2316      	movs	r3, #22
 801a018:	6003      	str	r3, [r0, #0]
 801a01a:	2001      	movs	r0, #1
 801a01c:	e7e7      	b.n	8019fee <_raise_r+0x12>
 801a01e:	2400      	movs	r4, #0
 801a020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a024:	4628      	mov	r0, r5
 801a026:	4798      	blx	r3
 801a028:	2000      	movs	r0, #0
 801a02a:	e7e0      	b.n	8019fee <_raise_r+0x12>

0801a02c <raise>:
 801a02c:	4b02      	ldr	r3, [pc, #8]	; (801a038 <raise+0xc>)
 801a02e:	4601      	mov	r1, r0
 801a030:	6818      	ldr	r0, [r3, #0]
 801a032:	f7ff bfd3 	b.w	8019fdc <_raise_r>
 801a036:	bf00      	nop
 801a038:	2000008c 	.word	0x2000008c

0801a03c <_kill_r>:
 801a03c:	b538      	push	{r3, r4, r5, lr}
 801a03e:	4d07      	ldr	r5, [pc, #28]	; (801a05c <_kill_r+0x20>)
 801a040:	2300      	movs	r3, #0
 801a042:	4604      	mov	r4, r0
 801a044:	4608      	mov	r0, r1
 801a046:	4611      	mov	r1, r2
 801a048:	602b      	str	r3, [r5, #0]
 801a04a:	f7e6 fde5 	bl	8000c18 <_kill>
 801a04e:	1c43      	adds	r3, r0, #1
 801a050:	d102      	bne.n	801a058 <_kill_r+0x1c>
 801a052:	682b      	ldr	r3, [r5, #0]
 801a054:	b103      	cbz	r3, 801a058 <_kill_r+0x1c>
 801a056:	6023      	str	r3, [r4, #0]
 801a058:	bd38      	pop	{r3, r4, r5, pc}
 801a05a:	bf00      	nop
 801a05c:	20011480 	.word	0x20011480

0801a060 <_getpid_r>:
 801a060:	f7e6 bdd2 	b.w	8000c08 <_getpid>

0801a064 <_malloc_usable_size_r>:
 801a064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a068:	1f18      	subs	r0, r3, #4
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	bfbc      	itt	lt
 801a06e:	580b      	ldrlt	r3, [r1, r0]
 801a070:	18c0      	addlt	r0, r0, r3
 801a072:	4770      	bx	lr

0801a074 <_init>:
 801a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a076:	bf00      	nop
 801a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a07a:	bc08      	pop	{r3}
 801a07c:	469e      	mov	lr, r3
 801a07e:	4770      	bx	lr

0801a080 <_fini>:
 801a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a082:	bf00      	nop
 801a084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a086:	bc08      	pop	{r3}
 801a088:	469e      	mov	lr, r3
 801a08a:	4770      	bx	lr
