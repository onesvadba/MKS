
cvic12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018124  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b94  080182d4  080182d4  000282d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be68  0801be68  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801be68  0801be68  0002be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be70  0801be70  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be70  0801be70  0002be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be74  0801be74  0002be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801be78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00010b6c  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20010bfc  20010bfc  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000320aa  00000000  00000000  00030103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007d56  00000000  00000000  000621ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023e0  00000000  00000000  00069f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c76  00000000  00000000  0006c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00035fa6  00000000  00000000  0006df5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039bb7  00000000  00000000  000a3f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101255  00000000  00000000  000ddabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009c70  00000000  00000000  001ded10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001e8980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080182bc 	.word	0x080182bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080182bc 	.word	0x080182bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000ac 	.word	0x200000ac
 80005bc:	2000014c 	.word	0x2000014c

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fd99 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f81d 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8af 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f883 	bl	80006dc <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x40>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fa81 	bl	8004af4 <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <main+0x44>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f004 fa65 	bl	8004ac6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x3c>
 80005fe:	bf00      	nop
 8000600:	080182e0 	.word	0x080182e0
 8000604:	20000390 	.word	0x20000390

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f016 ff4f 	bl	80174ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fa93 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f936 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fcf4 	bl	80030a8 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f91f 	bl	8000908 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f003 f9c8 	bl	8003aa8 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8f3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000034c 	.word	0x2000034c
 800072c:	40004800 	.word	0x40004800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <MX_GPIO_Init+0x188>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a5a      	ldr	r2, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x188>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a3e      	ldr	r2, [pc, #248]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_GPIO_Init+0x18c>)
 80007f6:	f002 f9c5 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x190>)
 8000800:	f002 f9c0 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	482a      	ldr	r0, [pc, #168]	; (80008c4 <MX_GPIO_Init+0x194>)
 800081c:	f002 f806 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4820      	ldr	r0, [pc, #128]	; (80008bc <MX_GPIO_Init+0x18c>)
 800083a:	f001 fff7 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x190>)
 8000856:	f001 ffe9 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x190>)
 800086e:	f001 ffdd 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000872:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000884:	230a      	movs	r3, #10
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x198>)
 8000890:	f001 ffcc 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_GPIO_Init+0x198>)
 80008aa:	f001 ffbf 	bl	800282c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <StartDefaultTask>:
  */


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008d4:	f003 fbaa 	bl	800402c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Initialize tcp echo server */
  tcpecho_init();
 80008d8:	f000 fa72 	bl	8000dc0 <tcpecho_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f004 f955 	bl	8004b8c <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartDefaultTask+0x10>

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 fc23 	bl	8001140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40002000 	.word	0x40002000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_MspInit+0x54>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_MspInit+0x54>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fced 	bl	8001338 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e4:	f001 ff22 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004800 	.word	0x40004800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020c00 	.word	0x40020c00

080009fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	; 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_InitTick+0xe4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fd58 	bl	80034e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a42:	f002 fd29 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8000a46:	6378      	str	r0, [r7, #52]	; 0x34
 8000a48:	e004      	b.n	8000a54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a4a:	f002 fd25 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_InitTick+0xe8>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	0c9b      	lsrs	r3, r3, #18
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_InitTick+0xf0>)
 8000a66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a88:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a8a:	f002 fd5f 	bl	800354c <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d11b      	bne.n	8000ad4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_InitTick+0xec>)
 8000a9e:	f002 fdaf 	bl	8003600 <HAL_TIM_Base_Start_IT>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d111      	bne.n	8000ad4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ab0:	202d      	movs	r0, #45	; 0x2d
 8000ab2:	f000 fc5d 	bl	8001370 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d808      	bhi.n	8000ace <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	202d      	movs	r0, #45	; 0x2d
 8000ac2:	f000 fc39 	bl	8001338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_InitTick+0xf4>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e002      	b.n	8000ad4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20000394 	.word	0x20000394
 8000aec:	40002000 	.word	0x40002000
 8000af0:	20000004 	.word	0x20000004

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b26:	f002 fddb 	bl	80036e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000394 	.word	0x20000394

08000b34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <ETH_IRQHandler+0x10>)
 8000b3a:	f000 ffa1 	bl	8001a80 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20004efc 	.word	0x20004efc

08000b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return 1;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_kill>:

int _kill(int pid, int sig)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <_kill+0x20>)
 8000b64:	2216      	movs	r2, #22
 8000b66:	601a      	str	r2, [r3, #0]
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20010bec 	.word	0x20010bec

08000b7c <_exit>:

void _exit (int status)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ffe5 	bl	8000b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b8e:	e7fe      	b.n	8000b8e <_exit+0x12>

08000b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
  }
  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d205      	bcs.n	8000ca8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <_sbrk+0x6c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20030000 	.word	0x20030000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	200003dc 	.word	0x200003dc
 8000cd4:	20010c00 	.word	0x20010c00
 8000cd8:	20010bec 	.word	0x20010bec

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f006 fec3 	bl	8007a98 <netconn_new_with_proto_and_callback>
 8000d12:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d04e      	beq.n	8000db8 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	69f8      	ldr	r0, [r7, #28]
 8000d20:	f006 ff74 	bl	8007c0c <netconn_bind>
 8000d24:	4603      	mov	r3, r0
 8000d26:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d28:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d13f      	bne.n	8000db0 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d30:	21ff      	movs	r1, #255	; 0xff
 8000d32:	69f8      	ldr	r0, [r7, #28]
 8000d34:	f006 ffa2 	bl	8007c7c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	69f8      	ldr	r0, [r7, #28]
 8000d40:	f006 ffc8 	bl	8007cd4 <netconn_accept>
 8000d44:	4603      	mov	r3, r0
 8000d46:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f3      	bne.n	8000d38 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d50:	e01b      	b.n	8000d8a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	f107 020a 	add.w	r2, r7, #10
 8000d58:	f107 010c 	add.w	r1, r7, #12
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 ff5b 	bl	8009c18 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	897b      	ldrh	r3, [r7, #10]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f007 fa32 	bl	80081d8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 ff98 	bl	8009cac <netbuf_next>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dae7      	bge.n	8000d52 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f008 ff27 	bl	8009bd8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 f9a6 	bl	80080e4 <netconn_recv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0d9      	beq.n	8000d52 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f007 fb1b 	bl	80083dc <netconn_close>
          netconn_delete(newconn);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 ff13 	bl	8007bd4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000dae:	e7c3      	b.n	8000d38 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 ff0e 	bl	8007bd4 <netconn_delete>
    }
  }
}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4903      	ldr	r1, [pc, #12]	; (8000de0 <tcpecho_init+0x20>)
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <tcpecho_init+0x24>)
 8000dd4:	f016 f9da 	bl	801718c <sys_thread_new>
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	08000d01 	.word	0x08000d01
 8000de4:	080182fc 	.word	0x080182fc

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ff63 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f016 fbf5 	bl	8017604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fbd1 	bl	80005c0 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e2c:	0801be78 	.word	0x0801be78
  ldr r2, =_sbss
 8000e30:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e34:	20010bfc 	.word	0x20010bfc

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00b      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e014      	b.n	8000e92 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d17c      	bne.n	8000fb8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e01c      	b.n	8000f12 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f107 0208 	add.w	r2, r7, #8
 8000ee0:	2112      	movs	r1, #18
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	4798      	blx	r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	da03      	bge.n	8000ef4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000eec:	f06f 0304 	mvn.w	r3, #4
 8000ef0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ef2:	e00b      	b.n	8000f0c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d105      	bne.n	8000f0c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
         break;
 8000f0a:	e005      	b.n	8000f18 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b1f      	cmp	r3, #31
 8000f16:	d9df      	bls.n	8000ed8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b1f      	cmp	r3, #31
 8000f1e:	d902      	bls.n	8000f26 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f20:	f06f 0302 	mvn.w	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d145      	bne.n	8000fb8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6810      	ldr	r0, [r2, #0]
 8000f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4798      	blx	r3
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db37      	blt.n	8000fb2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4798      	blx	r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db28      	blt.n	8000faa <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f62:	e01c      	b.n	8000f9e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4798      	blx	r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f76:	d80e      	bhi.n	8000f96 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	f107 0208 	add.w	r2, r7, #8
 8000f84:	2100      	movs	r1, #0
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da07      	bge.n	8000f9e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f8e:	f06f 0304 	mvn.w	r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
                 break;
 8000f94:	e010      	b.n	8000fb8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f96:	f06f 0301 	mvn.w	r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
               break;
 8000f9c:	e00c      	b.n	8000fb8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1dd      	bne.n	8000f64 <LAN8742_Init+0xc6>
 8000fa8:	e006      	b.n	8000fb8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000faa:	f06f 0304 	mvn.w	r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e002      	b.n	8000fb8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fb2:	f06f 0303 	mvn.w	r3, #3
 8000fb6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d112      	bne.n	8000fe4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4798      	blx	r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fc8:	bf00      	nop
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4798      	blx	r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fdc:	d9f5      	bls.n	8000fca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 }
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6810      	ldr	r0, [r2, #0]
 8001002:	f107 020c 	add.w	r2, r7, #12
 8001006:	2101      	movs	r1, #1
 8001008:	4798      	blx	r3
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	da02      	bge.n	8001016 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001010:	f06f 0304 	mvn.w	r3, #4
 8001014:	e06e      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	2101      	movs	r1, #1
 8001024:	4798      	blx	r3
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	da02      	bge.n	8001032 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800102c:	f06f 0304 	mvn.w	r3, #4
 8001030:	e060      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800103c:	2301      	movs	r3, #1
 800103e:	e059      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6810      	ldr	r0, [r2, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	2100      	movs	r1, #0
 800104e:	4798      	blx	r3
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	da02      	bge.n	800105c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001056:	f06f 0304 	mvn.w	r3, #4
 800105a:	e04b      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11b      	bne.n	800109e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <LAN8742_GetLinkState+0x90>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800107a:	2302      	movs	r3, #2
 800107c:	e03a      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001088:	2303      	movs	r3, #3
 800108a:	e033      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001096:	2304      	movs	r3, #4
 8001098:	e02c      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800109a:	2305      	movs	r3, #5
 800109c:	e02a      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6810      	ldr	r0, [r2, #0]
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	211f      	movs	r1, #31
 80010ac:	4798      	blx	r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da02      	bge.n	80010ba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010b4:	f06f 0304 	mvn.w	r3, #4
 80010b8:	e01c      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010c4:	2306      	movs	r3, #6
 80010c6:	e015      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 031c 	and.w	r3, r3, #28
 80010ce:	2b18      	cmp	r3, #24
 80010d0:	d101      	bne.n	80010d6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010d2:	2302      	movs	r3, #2
 80010d4:	e00e      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 031c 	and.w	r3, r3, #28
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d101      	bne.n	80010e4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e007      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 031c 	and.w	r3, r3, #28
 80010ea:	2b14      	cmp	r3, #20
 80010ec:	d101      	bne.n	80010f2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010ee:	2304      	movs	r3, #4
 80010f0:	e000      	b.n	80010f4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010f2:	2305      	movs	r3, #5
    }				
  }
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f8fc 	bl	8001322 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f7ff fc66 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fbf0 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	200003e0 	.word	0x200003e0

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200003e0 	.word	0x200003e0

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	; (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db0b      	blt.n	8001256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <__NVIC_EnableIRQ+0x38>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff4c 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134a:	f7ff ff61 	bl	8001210 <__NVIC_GetPriorityGrouping>
 800134e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	6978      	ldr	r0, [r7, #20]
 8001356:	f7ff ffb1 	bl	80012bc <NVIC_EncodePriority>
 800135a:	4602      	mov	r2, r0
 800135c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff80 	bl	8001268 <__NVIC_SetPriority>
}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff54 	bl	800122c <__NVIC_EnableIRQ>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06c      	b.n	8001478 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2223      	movs	r2, #35	; 0x23
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f003 f939 	bl	8004628 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_ETH_Init+0xf4>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <HAL_ETH_Init+0xf4>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_ETH_Init+0xf4>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <HAL_ETH_Init+0xf8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <HAL_ETH_Init+0xf8>)
 80013d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <HAL_ETH_Init+0xf8>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4927      	ldr	r1, [pc, #156]	; (8001484 <HAL_ETH_Init+0xf8>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <HAL_ETH_Init+0xf8>)
 80013ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001406:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff feae 	bl	8001168 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800140e:	e011      	b.n	8001434 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001410:	f7ff feaa 	bl	8001168 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800141e:	d909      	bls.n	8001434 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2204      	movs	r2, #4
 8001424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	22e0      	movs	r2, #224	; 0xe0
 800142c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e021      	b.n	8001478 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1e4      	bne.n	8001410 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 ff4a 	bl	80022e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fff1 	bl	8002434 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f001 f847 	bl	80024e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	461a      	mov	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 ffaf 	bl	80023c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2210      	movs	r2, #16
 8001472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800

08001488 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001496:	2b10      	cmp	r3, #16
 8001498:	d17f      	bne.n	800159a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2223      	movs	r2, #35	; 0x23
 800149e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80014e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2204      	movs	r2, #4
 80014e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f9f8 	bl	80018e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0208 	orr.w	r2, r2, #8
 80014fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff fe39 	bl	8001180 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0204 	orr.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fe26 	bl	8001180 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fd70 	bl	8002022 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001558:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001570:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001584:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001588:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2223      	movs	r2, #35	; 0x23
 8001592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b2:	2b23      	cmp	r3, #35	; 0x23
 80015b4:	d170      	bne.n	8001698 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2223      	movs	r2, #35	; 0x23
 80015ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80015d0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80015d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015f0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f023 0302 	bic.w	r3, r3, #2
 8001604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001608:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0204 	bic.w	r2, r2, #4
 8001618:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fdac 	bl	8001180 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fcf6 	bl	8002022 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fd96 	bl	8001180 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00e      	b.n	8001680 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	3212      	adds	r2, #18
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d9ed      	bls.n	8001662 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2210      	movs	r2, #16
 8001690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	e000      	b.n	800169a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e045      	b.n	8001752 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016cc:	2b23      	cmp	r3, #35	; 0x23
 80016ce:	d13f      	bne.n	8001750 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80016d8:	2201      	movs	r2, #1
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 ff6f 	bl	80025c0 <ETH_Prepare_Tx_Descriptors>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	f043 0202 	orr.w	r2, r3, #2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e02a      	b.n	8001752 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016fc:	f3bf 8f4f 	dsb	sy
}
 8001700:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b03      	cmp	r3, #3
 8001712:	d904      	bls.n	800171e <HAL_ETH_Transmit_IT+0x7c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	1f1a      	subs	r2, r3, #4
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00d      	beq.n	800174c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	461a      	mov	r2, r3
 800173a:	2304      	movs	r3, #4
 800173c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001746:	461a      	mov	r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b088      	sub	sp, #32
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0a8      	b.n	80018d8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178c:	2b23      	cmp	r3, #35	; 0x23
 800178e:	d001      	beq.n	8001794 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0a1      	b.n	80018d8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	3212      	adds	r2, #18
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017aa:	f1c3 0304 	rsb	r3, r3, #4
 80017ae:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017b0:	e06a      	b.n	8001888 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_ETH_ReadData+0x88>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d040      	beq.n	8001864 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001816:	3b04      	subs	r3, #4
 8001818:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800183e:	461a      	mov	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f003 f8ca 	bl	80049dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	441a      	add	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d902      	bls.n	8001876 <HAL_ETH_ReadData+0x11c>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3b04      	subs	r3, #4
 8001874:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	3212      	adds	r2, #18
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800188c:	2b00      	cmp	r3, #0
 800188e:	db06      	blt.n	800189e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	429a      	cmp	r2, r3
 8001896:	d202      	bcs.n	800189e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d089      	beq.n	80017b2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	441a      	add	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f814 	bl	80018e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80018ec:	2301      	movs	r3, #1
 80018ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	3212      	adds	r2, #18
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001906:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001908:	e040      	b.n	800198c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d112      	bne.n	8001938 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f830 	bl	800497c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	74fb      	strb	r3, [r7, #19]
 8001926:	e007      	b.n	8001938 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	461a      	mov	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	461a      	mov	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001938:	7cfb      	ldrb	r3, [r7, #19]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d026      	beq.n	800198c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <ETH_UpdateDescriptor+0xe4>)
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	e003      	b.n	8001956 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001954:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001956:	f3bf 8f5f 	dmb	sy
}
 800195a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d902      	bls.n	800197a <ETH_UpdateDescriptor+0x9a>
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3b04      	subs	r3, #4
 8001978:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	3212      	adds	r2, #18
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	617b      	str	r3, [r7, #20]
      desccount--;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3b01      	subs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <ETH_UpdateDescriptor+0xb8>
 8001992:	7cfb      	ldrb	r3, [r7, #19]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1b8      	bne.n	800190a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00c      	beq.n	80019bc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	80004600 	.word	0x80004600

080019c8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3318      	adds	r3, #24
 80019d4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019e6:	e03f      	b.n	8001a68 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3304      	adds	r3, #4
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	3301      	adds	r3, #1
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d028      	beq.n	8001a68 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db1b      	blt.n	8001a64 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3304      	adds	r3, #4
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f80f 	bl	8004a5c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3304      	adds	r3, #4
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a62:	e001      	b.n	8001a68 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_ETH_ReleaseTxPacket+0xac>
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1b9      	bne.n	80019e8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b40      	cmp	r3, #64	; 0x40
 8001a98:	d112      	bne.n	8001ac0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_ETH_IRQHandler+0x178>)
 8001ab8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f002 fb18 	bl	80040f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d113      	bne.n	8001afa <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10a      	bne.n	8001afa <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aec:	461a      	mov	r2, r3
 8001aee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001af2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f002 fb0b 	bl	8004110 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0c:	d14c      	bne.n	8001ba8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b20:	d142      	bne.n	8001ba8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b28:	f043 0208 	orr.w	r2, r3, #8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b44:	d11a      	bne.n	8001b7c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_ETH_IRQHandler+0x17c>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b70:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	22e0      	movs	r2, #224	; 0xe0
 8001b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b7a:	e012      	b.n	8001ba2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ba0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f002 fac4 	bl	8004130 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f81c 	bl	8001c04 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_ETH_IRQHandler+0x180>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_ETH_IRQHandler+0x180>)
 8001be2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001be6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f815 	bl	8001c18 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	00010040 	.word	0x00010040
 8001bfc:	007e2000 	.word	0x007e2000
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 031c 	and.w	r3, r3, #28
 8001c48:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	02db      	lsls	r3, r3, #11
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0302 	bic.w	r3, r3, #2
 8001c6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c7c:	f7ff fa74 	bl	8001168 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c82:	e00d      	b.n	8001ca0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c84:	f7ff fa70 	bl	8001168 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d301      	bcc.n	8001c98 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e010      	b.n	8001cba <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ec      	bne.n	8001c84 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 031c 	and.w	r3, r3, #28
 8001cde:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	02db      	lsls	r3, r3, #11
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff fa24 	bl	8001168 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d22:	e00d      	b.n	8001d40 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d24:	f7ff fa20 	bl	8001168 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d301      	bcc.n	8001d38 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e009      	b.n	8001d4c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ec      	bne.n	8001d24 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0d9      	b.n	8001f1c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf0c      	ite	eq
 8001e26:	2301      	moveq	r3, #1
 8001e28:	2300      	movne	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	0c1b      	lsrs	r3, r3, #16
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e00b      	b.n	8001f54 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d105      	bne.n	8001f52 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f46:	6839      	ldr	r1, [r7, #0]
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f88f 	bl	800206c <ETH_SetMACConfig>

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 031c 	bic.w	r3, r3, #28
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f74:	f001 fa84 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 8001f78:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d908      	bls.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x38>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d804      	bhi.n	8001f94 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e027      	b.n	8001fe4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d908      	bls.n	8001fae <HAL_ETH_SetMDIOClockRange+0x52>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d204      	bcs.n	8001fae <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f043 030c 	orr.w	r3, r3, #12
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e01a      	b.n	8001fe4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d303      	bcc.n	8001fbe <HAL_ETH_SetMDIOClockRange+0x62>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d911      	bls.n	8001fe2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d908      	bls.n	8001fd8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d804      	bhi.n	8001fd8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e005      	b.n	8001fe4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e000      	b.n	8001fe4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fe2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	611a      	str	r2, [r3, #16]
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	01312cff 	.word	0x01312cff
 8001ff8:	02160ebf 	.word	0x02160ebf
 8001ffc:	03938700 	.word	0x03938700
 8002000:	05f5e0ff 	.word	0x05f5e0ff
 8002004:	08f0d17f 	.word	0x08f0d17f

08002008 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002044:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff f894 	bl	8001180 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002062:	6193      	str	r3, [r2, #24]
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <ETH_SetMACConfig+0x15c>)
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7c1b      	ldrb	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <ETH_SetMACConfig+0x28>
 800208e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002092:	e000      	b.n	8002096 <ETH_SetMACConfig+0x2a>
 8002094:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7c5b      	ldrb	r3, [r3, #17]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <ETH_SetMACConfig+0x38>
 800209e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a2:	e000      	b.n	80020a6 <ETH_SetMACConfig+0x3a>
 80020a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	7fdb      	ldrb	r3, [r3, #31]
 80020b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	7f92      	ldrb	r2, [r2, #30]
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d102      	bne.n	80020ca <ETH_SetMACConfig+0x5e>
 80020c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c8:	e000      	b.n	80020cc <ETH_SetMACConfig+0x60>
 80020ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7f1b      	ldrb	r3, [r3, #28]
 80020d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d102      	bne.n	80020f4 <ETH_SetMACConfig+0x88>
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	e000      	b.n	80020f6 <ETH_SetMACConfig+0x8a>
 80020f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	7bdb      	ldrb	r3, [r3, #15]
 80020fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002104:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800210c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800210e:	4313      	orrs	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff f82a 	bl	8001180 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002152:	2a00      	cmp	r2, #0
 8002154:	d101      	bne.n	800215a <ETH_SetMACConfig+0xee>
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	e000      	b.n	800215c <ETH_SetMACConfig+0xf0>
 800215a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800215c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002162:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800216a:	2a01      	cmp	r2, #1
 800216c:	d101      	bne.n	8002172 <ETH_SetMACConfig+0x106>
 800216e:	2208      	movs	r2, #8
 8002170:	e000      	b.n	8002174 <ETH_SetMACConfig+0x108>
 8002172:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002174:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800217c:	2a01      	cmp	r2, #1
 800217e:	d101      	bne.n	8002184 <ETH_SetMACConfig+0x118>
 8002180:	2204      	movs	r2, #4
 8002182:	e000      	b.n	8002186 <ETH_SetMACConfig+0x11a>
 8002184:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800218e:	2a01      	cmp	r2, #1
 8002190:	d101      	bne.n	8002196 <ETH_SetMACConfig+0x12a>
 8002192:	2202      	movs	r2, #2
 8002194:	e000      	b.n	8002198 <ETH_SetMACConfig+0x12c>
 8002196:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002198:	4313      	orrs	r3, r2
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b0:	2001      	movs	r0, #1
 80021b2:	f7fe ffe5 	bl	8001180 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	ff20810f 	.word	0xff20810f

080021cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <ETH_SetDMAConfig+0x110>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7b1b      	ldrb	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <ETH_SetDMAConfig+0x2c>
 80021f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021f6:	e000      	b.n	80021fa <ETH_SetDMAConfig+0x2e>
 80021f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002200:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	7f52      	ldrb	r2, [r2, #29]
 8002206:	2a00      	cmp	r2, #0
 8002208:	d102      	bne.n	8002210 <ETH_SetDMAConfig+0x44>
 800220a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800220e:	e000      	b.n	8002212 <ETH_SetDMAConfig+0x46>
 8002210:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002212:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	7b9b      	ldrb	r3, [r3, #14]
 8002218:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800221a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002220:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	7f1b      	ldrb	r3, [r3, #28]
 8002226:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002228:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	7f9b      	ldrb	r3, [r3, #30]
 800222e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002230:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002236:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002240:	4313      	orrs	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002262:	2001      	movs	r0, #1
 8002264:	f7fe ff8c 	bl	8001180 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002280:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002286:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800228c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002294:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002296:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800229e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7fe ff5d 	bl	8001180 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f8de3f23 	.word	0xf8de3f23

080022e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a6      	sub	sp, #152	; 0x98
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800231c:	2300      	movs	r3, #0
 800231e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002326:	2300      	movs	r3, #0
 8002328:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002342:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fe86 	bl	800206c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002360:	2301      	movs	r3, #1
 8002362:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800236e:	2301      	movs	r3, #1
 8002370:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002396:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800239a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800239c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff08 	bl	80021cc <ETH_SetDMAConfig>
}
 80023bc:	bf00      	nop
 80023be:	3798      	adds	r7, #152	; 0x98
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3305      	adds	r3, #5
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	3204      	adds	r2, #4
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <ETH_MACAddressConfig+0x68>)
 80023e6:	4413      	add	r3, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3303      	adds	r3, #3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	061a      	lsls	r2, r3, #24
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3302      	adds	r3, #2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3301      	adds	r3, #1
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	4313      	orrs	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <ETH_MACAddressConfig+0x6c>)
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6013      	str	r3, [r2, #0]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40028040 	.word	0x40028040
 8002430:	40028044 	.word	0x40028044

08002434 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e03e      	b.n	80024c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	3206      	adds	r2, #6
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d80c      	bhi.n	80024a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68d9      	ldr	r1, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	e004      	b.n	80024ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d9bd      	bls.n	8002442 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d8:	611a      	str	r2, [r3, #16]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e046      	b.n	8002582 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002530:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002538:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3212      	adds	r2, #18
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d80c      	bhi.n	8002572 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6919      	ldr	r1, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e004      	b.n	800257c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d9b5      	bls.n	80024f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b2:	60da      	str	r2, [r3, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b08d      	sub	sp, #52	; 0x34
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3318      	adds	r3, #24
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002602:	d007      	beq.n	8002614 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	3304      	adds	r3, #4
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e103      	b.n	8002820 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3301      	adds	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002630:	f023 031f 	bic.w	r3, r3, #31
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	6852      	ldr	r2, [r2, #4]
 8002638:	431a      	orrs	r2, r3
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	431a      	orrs	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	431a      	orrs	r2, r3
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800269e:	f3bf 8f5f 	dmb	sy
}
 80026a2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026b0:	e084      	b.n	80027bc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e005      	b.n	80026de <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	3301      	adds	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d902      	bls.n	80026f0 <ETH_Prepare_Tx_Descriptors+0x130>
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	3b04      	subs	r3, #4
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800270e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002712:	d007      	beq.n	8002724 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	3304      	adds	r3, #4
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d029      	beq.n	8002778 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002732:	2300      	movs	r3, #0
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	e019      	b.n	800276c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002738:	f3bf 8f5f 	dmb	sy
}
 800273c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3301      	adds	r3, #1
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	2b03      	cmp	r3, #3
 8002754:	d902      	bls.n	800275c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	3b04      	subs	r3, #4
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	3301      	adds	r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
 800276c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	429a      	cmp	r2, r3
 8002772:	d3e1      	bcc.n	8002738 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002774:	2302      	movs	r3, #2
 8002776:	e053      	b.n	8002820 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3301      	adds	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002796:	f023 031f 	bic.w	r3, r3, #31
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	6852      	ldr	r2, [r2, #4]
 800279e:	431a      	orrs	r2, r3
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027aa:	f3bf 8f5f 	dmb	sy
}
 80027ae:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f af76 	bne.w	80026b2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e005      	b.n	80027e6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f6:	6979      	ldr	r1, [r7, #20]
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	3304      	adds	r3, #4
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4413      	add	r3, r2
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800281a:	b662      	cpsie	i
}
 800281c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3734      	adds	r7, #52	; 0x34
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e177      	b.n	8002b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8166 	bne.w	8002b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80c0 	beq.w	8002b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_GPIO_Init+0x324>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <HAL_GPIO_Init+0x328>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d037      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a57      	ldr	r2, [pc, #348]	; (8002b5c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a56      	ldr	r2, [pc, #344]	; (8002b60 <HAL_GPIO_Init+0x334>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_GPIO_Init+0x340>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x344>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_GPIO_Init+0x348>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x21e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4f      	ldr	r2, [pc, #316]	; (8002b7c <HAL_GPIO_Init+0x350>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x21a>
 8002a42:	2309      	movs	r3, #9
 8002a44:	e012      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a46:	230a      	movs	r3, #10
 8002a48:	e010      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e00e      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x328>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a34      	ldr	r2, [pc, #208]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae84 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021c00 	.word	0x40021c00
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022400 	.word	0x40022400
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e267      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d075      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd6:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d00c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d112      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bee:	4b82      	ldr	r3, [pc, #520]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfa:	d10b      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05b      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x108>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d157      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e242      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_OscConfig+0x74>
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01d      	b.n	8002c68 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x98>
 8002c36:	4b70      	ldr	r3, [pc, #448]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6f      	ldr	r2, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6c      	ldr	r2, [pc, #432]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0xb0>
 8002c50:	4b69      	ldr	r3, [pc, #420]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a68      	ldr	r2, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fa7a 	bl	8001168 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fa76 	bl	8001168 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e207      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0xc0>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fa66 	bl	8001168 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fa62 	bl	8001168 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1f3      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xe8>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d063      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x152>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1c7      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4937      	ldr	r1, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e03a      	b.n	8002d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCC_OscConfig+0x244>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fa1b 	bl	8001168 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe fa17 	bl	8001168 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1a8      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4925      	ldr	r1, [pc, #148]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_OscConfig+0x244>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f9fa 	bl	8001168 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe f9f6 	bl	8001168 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e187      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x248>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe f9da 	bl	8001168 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe f9d6 	bl	8001168 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e167      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x200>
 8002dd6:	e01b      	b.n	8002e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RCC_OscConfig+0x248>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe f9c3 	bl	8001168 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	e00e      	b.n	8002e04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe f9bf 	bl	8001168 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d907      	bls.n	8002e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e150      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	42470000 	.word	0x42470000
 8002e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b88      	ldr	r3, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ea      	bne.n	8002de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8097 	beq.w	8002f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	4b7d      	ldr	r3, [pc, #500]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a7c      	ldr	r2, [pc, #496]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b77      	ldr	r3, [pc, #476]	; (800302c <HAL_RCC_OscConfig+0x474>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b74      	ldr	r3, [pc, #464]	; (800302c <HAL_RCC_OscConfig+0x474>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a73      	ldr	r2, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x474>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f97f 	bl	8001168 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f97b 	bl	8001168 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e10c      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x474>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2ea>
 8002e94:	4b64      	ldr	r3, [pc, #400]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a63      	ldr	r2, [pc, #396]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	e01c      	b.n	8002edc <HAL_RCC_OscConfig+0x324>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x30c>
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a5e      	ldr	r2, [pc, #376]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a5b      	ldr	r2, [pc, #364]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0x324>
 8002ec4:	4b58      	ldr	r3, [pc, #352]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a57      	ldr	r2, [pc, #348]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	4b55      	ldr	r3, [pc, #340]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a54      	ldr	r2, [pc, #336]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f940 	bl	8001168 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f93c 	bl	8001168 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0cb      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	4b49      	ldr	r3, [pc, #292]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ee      	beq.n	8002eec <HAL_RCC_OscConfig+0x334>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f10:	f7fe f92a 	bl	8001168 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe f926 	bl	8001168 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0b5      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ee      	bne.n	8002f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a38      	ldr	r2, [pc, #224]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a1 	beq.w	8003098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d05c      	beq.n	800301c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d141      	bne.n	8002fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_OscConfig+0x478>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe f8fa 	bl	8001168 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe f8f6 	bl	8001168 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e087      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	491b      	ldr	r1, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_OscConfig+0x478>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f8cf 	bl	8001168 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe f8cb 	bl	8001168 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e05c      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x416>
 8002fec:	e054      	b.n	8003098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_RCC_OscConfig+0x478>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f8b8 	bl	8001168 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe f8b4 	bl	8001168 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e045      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_OscConfig+0x470>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x444>
 800301a:	e03d      	b.n	8003098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e038      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
 8003028:	40023800 	.word	0x40023800
 800302c:	40007000 	.word	0x40007000
 8003030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x4ec>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d028      	beq.n	8003094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d121      	bne.n	8003094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d11a      	bne.n	8003094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800306a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306c:	4293      	cmp	r3, r2
 800306e:	d111      	bne.n	8003094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800

080030a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0cc      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b68      	ldr	r3, [pc, #416]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d90c      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b65      	ldr	r3, [pc, #404]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	4b59      	ldr	r3, [pc, #356]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800311e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d044      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d119      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d003      	beq.n	8003166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	2b03      	cmp	r3, #3
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	4b3f      	ldr	r3, [pc, #252]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e067      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4934      	ldr	r1, [pc, #208]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003198:	f7fd ffe6 	bl	8001168 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fd ffe2 	bl	8001168 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e04f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d20c      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800322e:	f000 f821 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8003232:	4602      	mov	r2, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	490a      	ldr	r1, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	5ccb      	ldrb	r3, [r1, r3]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fbd4 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023c00 	.word	0x40023c00
 8003264:	40023800 	.word	0x40023800
 8003268:	0801bc20 	.word	0x0801bc20
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b094      	sub	sp, #80	; 0x50
 800327a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
 8003280:	2300      	movs	r3, #0
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	2300      	movs	r3, #0
 8003286:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800328c:	4b79      	ldr	r3, [pc, #484]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d00d      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003298:	2b08      	cmp	r3, #8
 800329a:	f200 80e1 	bhi.w	8003460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x34>
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x3a>
 80032a6:	e0db      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_GetSysClockFreq+0x204>)
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032ac:	e0db      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ae:	4b73      	ldr	r3, [pc, #460]	; (800347c <HAL_RCC_GetSysClockFreq+0x208>)
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b2:	e0d8      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ca:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	099b      	lsrs	r3, r3, #6
 80032d0:	2200      	movs	r2, #0
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
 80032de:	2300      	movs	r3, #0
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
 80032e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032e6:	4622      	mov	r2, r4
 80032e8:	462b      	mov	r3, r5
 80032ea:	f04f 0000 	mov.w	r0, #0
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	0159      	lsls	r1, r3, #5
 80032f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f8:	0150      	lsls	r0, r2, #5
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4621      	mov	r1, r4
 8003300:	1a51      	subs	r1, r2, r1
 8003302:	6139      	str	r1, [r7, #16]
 8003304:	4629      	mov	r1, r5
 8003306:	eb63 0301 	sbc.w	r3, r3, r1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003318:	4659      	mov	r1, fp
 800331a:	018b      	lsls	r3, r1, #6
 800331c:	4651      	mov	r1, sl
 800331e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003322:	4651      	mov	r1, sl
 8003324:	018a      	lsls	r2, r1, #6
 8003326:	4651      	mov	r1, sl
 8003328:	ebb2 0801 	subs.w	r8, r2, r1
 800332c:	4659      	mov	r1, fp
 800332e:	eb63 0901 	sbc.w	r9, r3, r1
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003346:	4690      	mov	r8, r2
 8003348:	4699      	mov	r9, r3
 800334a:	4623      	mov	r3, r4
 800334c:	eb18 0303 	adds.w	r3, r8, r3
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	462b      	mov	r3, r5
 8003354:	eb49 0303 	adc.w	r3, r9, r3
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003366:	4629      	mov	r1, r5
 8003368:	024b      	lsls	r3, r1, #9
 800336a:	4621      	mov	r1, r4
 800336c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003370:	4621      	mov	r1, r4
 8003372:	024a      	lsls	r2, r1, #9
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	2200      	movs	r2, #0
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003384:	f7fc ff84 	bl	8000290 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003390:	e058      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	4618      	mov	r0, r3
 800339c:	4611      	mov	r1, r2
 800339e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0159      	lsls	r1, r3, #5
 80033ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033be:	0150      	lsls	r0, r2, #5
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4641      	mov	r1, r8
 80033c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ca:	4649      	mov	r1, r9
 80033cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e4:	ebb2 040a 	subs.w	r4, r2, sl
 80033e8:	eb63 050b 	sbc.w	r5, r3, fp
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	00eb      	lsls	r3, r5, #3
 80033f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fa:	00e2      	lsls	r2, r4, #3
 80033fc:	4614      	mov	r4, r2
 80033fe:	461d      	mov	r5, r3
 8003400:	4643      	mov	r3, r8
 8003402:	18e3      	adds	r3, r4, r3
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	464b      	mov	r3, r9
 8003408:	eb45 0303 	adc.w	r3, r5, r3
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800341a:	4629      	mov	r1, r5
 800341c:	028b      	lsls	r3, r1, #10
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003424:	4621      	mov	r1, r4
 8003426:	028a      	lsls	r2, r1, #10
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342e:	2200      	movs	r2, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	61fa      	str	r2, [r7, #28]
 8003434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003438:	f7fc ff2a 	bl	8000290 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_GetSysClockFreq+0x200>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	3301      	adds	r3, #1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345e:	e002      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetSysClockFreq+0x204>)
 8003462:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003468:	4618      	mov	r0, r3
 800346a:	3750      	adds	r7, #80	; 0x50
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a9b      	lsrs	r3, r3, #10
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	0801bc30 	.word	0x0801bc30

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034c4:	f7ff ffdc 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0b5b      	lsrs	r3, r3, #13
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	0801bc30 	.word	0x0801bc30

080034e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	220f      	movs	r2, #15
 80034f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCC_GetClockConfig+0x60>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40023c00 	.word	0x40023c00

0800354c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e041      	b.n	80035e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f839 	bl	80035ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 f9d8 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e04e      	b.n	80036b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d022      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d01d      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d018      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_TIM_Base_Start_IT+0xdc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d111      	bne.n	80036a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b06      	cmp	r3, #6
 8003690:	d010      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	e007      	b.n	80036b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0202 	mvn.w	r2, #2
 800370c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8ee 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8e0 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8f1 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b04      	cmp	r3, #4
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0204 	mvn.w	r2, #4
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8c4 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8b6 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8c7 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0208 	mvn.w	r2, #8
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2204      	movs	r2, #4
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f89a 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f88c 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f89d 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0210 	mvn.w	r2, #16
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2208      	movs	r2, #8
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f870 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f862 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f873 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0201 	mvn.w	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd f840 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	2b80      	cmp	r3, #128	; 0x80
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f902 	bl	8003a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f838 	bl	800392c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0220 	mvn.w	r2, #32
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8cc 	bl	8003a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d027      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d023      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d017      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <TIM_Base_SetConfig+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <TIM_Base_SetConfig+0x138>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <TIM_Base_SetConfig+0x13c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40001800 	.word	0x40001800
 8003a78:	40001c00 	.word	0x40001c00
 8003a7c:	40002000 	.word	0x40002000

08003a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e03f      	b.n	8003b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc ff4c 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f829 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b0c0      	sub	sp, #256	; 0x100
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	68d9      	ldr	r1, [r3, #12]
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	ea40 0301 	orr.w	r3, r0, r1
 8003b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b9c:	f021 010c 	bic.w	r1, r1, #12
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003baa:	430b      	orrs	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	6999      	ldr	r1, [r3, #24]
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	ea40 0301 	orr.w	r3, r0, r1
 8003bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <UART_SetConfig+0x2cc>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <UART_SetConfig+0xa0>
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <UART_SetConfig+0x2d0>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d104      	bne.n	8003bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7ff fc6c 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 8003be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bec:	e003      	b.n	8003bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bee:	f7ff fc53 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	f040 810c 	bne.w	8003e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c26:	4621      	mov	r1, r4
 8003c28:	eb12 0801 	adds.w	r8, r2, r1
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb43 0901 	adc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c54:	462b      	mov	r3, r5
 8003c56:	eb49 0303 	adc.w	r3, r9, r3
 8003c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c72:	460b      	mov	r3, r1
 8003c74:	18db      	adds	r3, r3, r3
 8003c76:	653b      	str	r3, [r7, #80]	; 0x50
 8003c78:	4613      	mov	r3, r2
 8003c7a:	eb42 0303 	adc.w	r3, r2, r3
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c88:	f7fc fb02 	bl	8000290 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003c92:	fba3 2302 	umull	r2, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	011c      	lsls	r4, r3, #4
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cdc:	4692      	mov	sl, r2
 8003cde:	469b      	mov	fp, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cea:	464b      	mov	r3, r9
 8003cec:	eb4b 0303 	adc.w	r3, fp, r3
 8003cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
 8003d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d1e:	f7fc fab7 	bl	8000290 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2264      	movs	r2, #100	; 0x64
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	1acb      	subs	r3, r1, r3
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003d40:	fba3 2302 	umull	r2, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d70:	4641      	mov	r1, r8
 8003d72:	1851      	adds	r1, r2, r1
 8003d74:	6339      	str	r1, [r7, #48]	; 0x30
 8003d76:	4649      	mov	r1, r9
 8003d78:	414b      	adcs	r3, r1
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d88:	4659      	mov	r1, fp
 8003d8a:	00cb      	lsls	r3, r1, #3
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d92:	4651      	mov	r1, sl
 8003d94:	00ca      	lsls	r2, r1, #3
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	464b      	mov	r3, r9
 8003da6:	460a      	mov	r2, r1
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	18db      	adds	r3, r3, r3
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dca:	4613      	mov	r3, r2
 8003dcc:	eb42 0303 	adc.w	r3, r2, r3
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dda:	f7fc fa59 	bl	8000290 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a08      	ldr	r2, [pc, #32]	; (8003e18 <UART_SetConfig+0x2d4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4422      	add	r2, r4
 8003e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e0c:	e106      	b.n	800401c <UART_SetConfig+0x4d8>
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e2e:	4642      	mov	r2, r8
 8003e30:	464b      	mov	r3, r9
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6239      	str	r1, [r7, #32]
 8003e36:	415b      	adcs	r3, r3
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e3e:	4641      	mov	r1, r8
 8003e40:	1854      	adds	r4, r2, r1
 8003e42:	4649      	mov	r1, r9
 8003e44:	eb43 0501 	adc.w	r5, r3, r1
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	00eb      	lsls	r3, r5, #3
 8003e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e56:	00e2      	lsls	r2, r4, #3
 8003e58:	4614      	mov	r4, r2
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	18e3      	adds	r3, r4, r3
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e64:	464b      	mov	r3, r9
 8003e66:	eb45 0303 	adc.w	r3, r5, r3
 8003e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	4621      	mov	r1, r4
 8003e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e94:	4621      	mov	r1, r4
 8003e96:	008a      	lsls	r2, r1, #2
 8003e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e9c:	f7fc f9f8 	bl	8000290 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4b60      	ldr	r3, [pc, #384]	; (8004028 <UART_SetConfig+0x4e4>)
 8003ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	011c      	lsls	r4, r3, #4
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	61b9      	str	r1, [r7, #24]
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6139      	str	r1, [r7, #16]
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f28:	4649      	mov	r1, r9
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f32:	4641      	mov	r1, r8
 8003f34:	008a      	lsls	r2, r1, #2
 8003f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f3a:	f7fc f9a9 	bl	8000290 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	4b38      	ldr	r3, [pc, #224]	; (8004028 <UART_SetConfig+0x4e4>)
 8003f46:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2264      	movs	r2, #100	; 0x64
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	1acb      	subs	r3, r1, r3
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	3332      	adds	r3, #50	; 0x32
 8003f58:	4a33      	ldr	r2, [pc, #204]	; (8004028 <UART_SetConfig+0x4e4>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003f6e:	677a      	str	r2, [r7, #116]	; 0x74
 8003f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1851      	adds	r1, r2, r1
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	414b      	adcs	r3, r1
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	00cb      	lsls	r3, r1, #3
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	00ca      	lsls	r2, r1, #3
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	460a      	mov	r2, r1
 8003fba:	eb42 0303 	adc.w	r3, r2, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fca:	667a      	str	r2, [r7, #100]	; 0x64
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fd8:	4649      	mov	r1, r9
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fea:	f7fc f951 	bl	8000290 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <UART_SetConfig+0x4e4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a08      	ldr	r2, [pc, #32]	; (8004028 <UART_SetConfig+0x4e4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4422      	add	r2, r4
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004022:	46bd      	mov	sp, r7
 8004024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004028:	51eb851f 	.word	0x51eb851f

0800402c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f005 ffd7 	bl	8009fe8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <MX_LWIP_Init+0x90>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <MX_LWIP_Init+0x94>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004046:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <MX_LWIP_Init+0x98>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <MX_LWIP_Init+0x9c>)
 800404e:	9302      	str	r3, [sp, #8]
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <MX_LWIP_Init+0xa0>)
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	2300      	movs	r3, #0
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <MX_LWIP_Init+0x98>)
 800405a:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <MX_LWIP_Init+0x94>)
 800405c:	4917      	ldr	r1, [pc, #92]	; (80040bc <MX_LWIP_Init+0x90>)
 800405e:	481c      	ldr	r0, [pc, #112]	; (80040d0 <MX_LWIP_Init+0xa4>)
 8004060:	f006 fd8c 	bl	800ab7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004064:	481a      	ldr	r0, [pc, #104]	; (80040d0 <MX_LWIP_Init+0xa4>)
 8004066:	f006 ff43 	bl	800aef0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <MX_LWIP_Init+0xa4>)
 800406c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800407c:	4814      	ldr	r0, [pc, #80]	; (80040d0 <MX_LWIP_Init+0xa4>)
 800407e:	f006 ff47 	bl	800af10 <netif_set_up>
 8004082:	e002      	b.n	800408a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004084:	4812      	ldr	r0, [pc, #72]	; (80040d0 <MX_LWIP_Init+0xa4>)
 8004086:	f006 ffaf 	bl	800afe8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800408a:	4912      	ldr	r1, [pc, #72]	; (80040d4 <MX_LWIP_Init+0xa8>)
 800408c:	4810      	ldr	r0, [pc, #64]	; (80040d0 <MX_LWIP_Init+0xa4>)
 800408e:	f007 f845 	bl	800b11c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <MX_LWIP_Init+0xac>)
 8004094:	1d3c      	adds	r4, r7, #4
 8004096:	461d      	mov	r5, r3
 8004098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800409c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	490a      	ldr	r1, [pc, #40]	; (80040d0 <MX_LWIP_Init+0xa4>)
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fd23 	bl	8004af4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80040ae:	4808      	ldr	r0, [pc, #32]	; (80040d0 <MX_LWIP_Init+0xa4>)
 80040b0:	f00f f8d0 	bl	8013254 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040b4:	bf00      	nop
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bdb0      	pop	{r4, r5, r7, pc}
 80040bc:	2000041c 	.word	0x2000041c
 80040c0:	20000420 	.word	0x20000420
 80040c4:	20000424 	.word	0x20000424
 80040c8:	08009ef9 	.word	0x08009ef9
 80040cc:	0800457d 	.word	0x0800457d
 80040d0:	200003e4 	.word	0x200003e4
 80040d4:	080040dd 	.word	0x080040dd
 80040d8:	08018314 	.word	0x08018314

080040dc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_ETH_RxCpltCallback+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fe75 	bl	8004dec <osSemaphoreRelease>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20004ef4 	.word	0x20004ef4

08004110 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_ETH_TxCpltCallback+0x1c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fe65 	bl	8004dec <osSemaphoreRelease>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20004ef8 	.word	0x20004ef8

08004130 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fd ff65 	bl	8002008 <HAL_ETH_GetDMAError>
 800413e:	4603      	mov	r3, r0
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d104      	bne.n	8004152 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_ETH_ErrorCallback+0x2c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fe4d 	bl	8004dec <osSemaphoreRelease>
  }
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20004ef4 	.word	0x20004ef4

08004160 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b0a8      	sub	sp, #160	; 0xa0
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800417a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800417e:	2264      	movs	r2, #100	; 0x64
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f013 f999 	bl	80174ba <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004188:	4b85      	ldr	r3, [pc, #532]	; (80043a0 <low_level_init+0x240>)
 800418a:	4a86      	ldr	r2, [pc, #536]	; (80043a4 <low_level_init+0x244>)
 800418c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800419a:	23e1      	movs	r3, #225	; 0xe1
 800419c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 80041a0:	23fe      	movs	r3, #254	; 0xfe
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80041a6:	23ec      	movs	r3, #236	; 0xec
 80041a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x71;
 80041ac:	2371      	movs	r3, #113	; 0x71
 80041ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80041b2:	4a7b      	ldr	r2, [pc, #492]	; (80043a0 <low_level_init+0x240>)
 80041b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80041ba:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <low_level_init+0x240>)
 80041bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041c0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041c2:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <low_level_init+0x240>)
 80041c4:	4a78      	ldr	r2, [pc, #480]	; (80043a8 <low_level_init+0x248>)
 80041c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <low_level_init+0x240>)
 80041ca:	4a78      	ldr	r2, [pc, #480]	; (80043ac <low_level_init+0x24c>)
 80041cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80041ce:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <low_level_init+0x240>)
 80041d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80041d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80041d6:	4872      	ldr	r0, [pc, #456]	; (80043a0 <low_level_init+0x240>)
 80041d8:	f7fd f8d8 	bl	800138c <HAL_ETH_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80041e2:	2238      	movs	r2, #56	; 0x38
 80041e4:	2100      	movs	r1, #0
 80041e6:	4872      	ldr	r0, [pc, #456]	; (80043b0 <low_level_init+0x250>)
 80041e8:	f013 f967 	bl	80174ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80041ec:	4b70      	ldr	r3, [pc, #448]	; (80043b0 <low_level_init+0x250>)
 80041ee:	2221      	movs	r2, #33	; 0x21
 80041f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80041f2:	4b6f      	ldr	r3, [pc, #444]	; (80043b0 <low_level_init+0x250>)
 80041f4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80041f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80041fa:	4b6d      	ldr	r3, [pc, #436]	; (80043b0 <low_level_init+0x250>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004200:	486c      	ldr	r0, [pc, #432]	; (80043b4 <low_level_init+0x254>)
 8004202:	f006 fb75 	bl	800a8f0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2206      	movs	r2, #6
 800420a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800420e:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <low_level_init+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <low_level_init+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	785a      	ldrb	r2, [r3, #1]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004226:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <low_level_init+0x240>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	789a      	ldrb	r2, [r3, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004232:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <low_level_init+0x240>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	78da      	ldrb	r2, [r3, #3]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800423e:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <low_level_init+0x240>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	791a      	ldrb	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800424a:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <low_level_init+0x240>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	795a      	ldrb	r2, [r3, #5]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004264:	f043 030a 	orr.w	r3, r3, #10
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004270:	2203      	movs	r2, #3
 8004272:	2100      	movs	r1, #0
 8004274:	2001      	movs	r0, #1
 8004276:	f001 f89d 	bl	80053b4 <xQueueGenericCreate>
 800427a:	4603      	mov	r3, r0
 800427c:	4a4e      	ldr	r2, [pc, #312]	; (80043b8 <low_level_init+0x258>)
 800427e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004280:	2203      	movs	r2, #3
 8004282:	2100      	movs	r1, #0
 8004284:	2001      	movs	r0, #1
 8004286:	f001 f895 	bl	80053b4 <xQueueGenericCreate>
 800428a:	4603      	mov	r3, r0
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <low_level_init+0x25c>)
 800428e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004290:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <low_level_init+0x260>)
 8004292:	f107 0408 	add.w	r4, r7, #8
 8004296:	461d      	mov	r5, r3
 8004298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800429a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800429c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80042a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80042a4:	f107 0308 	add.w	r3, r7, #8
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fc22 	bl	8004af4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80042b0:	4944      	ldr	r1, [pc, #272]	; (80043c4 <low_level_init+0x264>)
 80042b2:	4845      	ldr	r0, [pc, #276]	; (80043c8 <low_level_init+0x268>)
 80042b4:	f7fc fdc1 	bl	8000e3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80042b8:	4843      	ldr	r0, [pc, #268]	; (80043c8 <low_level_init+0x268>)
 80042ba:	f7fc fdf0 	bl	8000e9e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80042be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d165      	bne.n	8004392 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80042c6:	4840      	ldr	r0, [pc, #256]	; (80043c8 <low_level_init+0x268>)
 80042c8:	f7fc fe91 	bl	8000fee <LAN8742_GetLinkState>
 80042cc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	dc06      	bgt.n	80042e6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f006 feef 	bl	800b0bc <netif_set_link_down>
      netif_set_down(netif);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f006 fe82 	bl	800afe8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80042e4:	e057      	b.n	8004396 <low_level_init+0x236>
      switch (PHYLinkState)
 80042e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ea:	3b02      	subs	r3, #2
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d82b      	bhi.n	8004348 <low_level_init+0x1e8>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <low_level_init+0x198>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	0800431b 	.word	0x0800431b
 8004300:	0800432b 	.word	0x0800432b
 8004304:	0800433b 	.word	0x0800433b
        duplex = ETH_FULLDUPLEX_MODE;
 8004308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800430c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004318:	e01f      	b.n	800435a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004328:	e017      	b.n	800435a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800432a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800432e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004338:	e00f      	b.n	800435a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004346:	e008      	b.n	800435a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004358:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800435a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800435e:	4619      	mov	r1, r3
 8004360:	480f      	ldr	r0, [pc, #60]	; (80043a0 <low_level_init+0x240>)
 8004362:	f7fd fcf7 	bl	8001d54 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800436a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800436c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004370:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004376:	4619      	mov	r1, r3
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <low_level_init+0x240>)
 800437a:	f7fd fdd5 	bl	8001f28 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800437e:	4808      	ldr	r0, [pc, #32]	; (80043a0 <low_level_init+0x240>)
 8004380:	f7fd f882 	bl	8001488 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f006 fdc3 	bl	800af10 <netif_set_up>
    netif_set_link_up(netif);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f006 fe5e 	bl	800b04c <netif_set_link_up>
}
 8004390:	e001      	b.n	8004396 <low_level_init+0x236>
    Error_Handler();
 8004392:	f7fc fab9 	bl	8000908 <Error_Handler>
}
 8004396:	bf00      	nop
 8004398:	37a0      	adds	r7, #160	; 0xa0
 800439a:	46bd      	mov	sp, r7
 800439c:	bdb0      	pop	{r4, r5, r7, pc}
 800439e:	bf00      	nop
 80043a0:	20004efc 	.word	0x20004efc
 80043a4:	40028000 	.word	0x40028000
 80043a8:	20004e54 	.word	0x20004e54
 80043ac:	20004db4 	.word	0x20004db4
 80043b0:	20004fac 	.word	0x20004fac
 80043b4:	0801bc38 	.word	0x0801bc38
 80043b8:	20004ef4 	.word	0x20004ef4
 80043bc:	20004ef8 	.word	0x20004ef8
 80043c0:	08018338 	.word	0x08018338
 80043c4:	2000000c 	.word	0x2000000c
 80043c8:	20004fe4 	.word	0x20004fe4

080043cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b092      	sub	sp, #72	; 0x48
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80043e4:	f107 030c 	add.w	r3, r7, #12
 80043e8:	2230      	movs	r2, #48	; 0x30
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f013 f864 	bl	80174ba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	2230      	movs	r2, #48	; 0x30
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f013 f85d 	bl	80174ba <memset>

  for(q = p; q != NULL; q = q->next)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
 8004404:	e045      	b.n	8004492 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004408:	2b03      	cmp	r3, #3
 800440a:	d902      	bls.n	8004412 <low_level_output+0x46>
      return ERR_IF;
 800440c:	f06f 030b 	mvn.w	r3, #11
 8004410:	e065      	b.n	80044de <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	3348      	adds	r3, #72	; 0x48
 8004422:	443b      	add	r3, r7
 8004424:	3b3c      	subs	r3, #60	; 0x3c
 8004426:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442a:	895b      	ldrh	r3, [r3, #10]
 800442c:	4619      	mov	r1, r3
 800442e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	3348      	adds	r3, #72	; 0x48
 800443a:	443b      	add	r3, r7
 800443c:	3b38      	subs	r3, #56	; 0x38
 800443e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004442:	2b00      	cmp	r3, #0
 8004444:	d011      	beq.n	800446a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	f107 000c 	add.w	r0, r7, #12
 800444e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004450:	460b      	mov	r3, r1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	440b      	add	r3, r1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	18c1      	adds	r1, r0, r3
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	3348      	adds	r3, #72	; 0x48
 8004464:	443b      	add	r3, r7
 8004466:	3b34      	subs	r3, #52	; 0x34
 8004468:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	3348      	adds	r3, #72	; 0x48
 800447e:	443b      	add	r3, r7
 8004480:	3b34      	subs	r3, #52	; 0x34
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004488:	3301      	adds	r3, #1
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1b6      	bne.n	8004406 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	891b      	ldrh	r3, [r3, #8]
 800449c:	461a      	mov	r2, r3
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <low_level_output+0x11c>)
 80044a0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80044a2:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <low_level_output+0x11c>)
 80044a4:	f107 030c 	add.w	r3, r7, #12
 80044a8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80044aa:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <low_level_output+0x11c>)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80044b0:	6838      	ldr	r0, [r7, #0]
 80044b2:	f007 fa87 	bl	800b9c4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80044b6:	490c      	ldr	r1, [pc, #48]	; (80044e8 <low_level_output+0x11c>)
 80044b8:	480c      	ldr	r0, [pc, #48]	; (80044ec <low_level_output+0x120>)
 80044ba:	f7fd f8f2 	bl	80016a2 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80044be:	bf00      	nop
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <low_level_output+0x124>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f04f 31ff 	mov.w	r1, #4294967295
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fc41 	bl	8004d50 <osSemaphoreWait>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f5      	bne.n	80044c0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80044d4:	4805      	ldr	r0, [pc, #20]	; (80044ec <low_level_output+0x120>)
 80044d6:	f7fd fa77 	bl	80019c8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80044da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3748      	adds	r7, #72	; 0x48
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20004fac 	.word	0x20004fac
 80044ec:	20004efc 	.word	0x20004efc
 80044f0:	20004ef8 	.word	0x20004ef8

080044f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <low_level_input+0x2c>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d105      	bne.n	8004514 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	4619      	mov	r1, r3
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <low_level_input+0x30>)
 8004510:	f7fd f923 	bl	800175a <HAL_ETH_ReadData>
  }

  return p;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20004db0 	.word	0x20004db0
 8004524:	20004efc 	.word	0x20004efc

08004528 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <ethernetif_input+0x50>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f04f 31ff 	mov.w	r1, #4294967295
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fc05 	bl	8004d50 <osSemaphoreWait>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f5      	bne.n	8004538 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800454c:	68b8      	ldr	r0, [r7, #8]
 800454e:	f7ff ffd1 	bl	80044f4 <low_level_input>
 8004552:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	4798      	blx	r3
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f007 f984 	bl	800b878 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ea      	bne.n	800454c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004576:	e7df      	b.n	8004538 <ethernetif_input+0x10>
 8004578:	20004ef4 	.word	0x20004ef4

0800457c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <ethernetif_init+0x1c>
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <ethernetif_init+0x48>)
 800458c:	f240 12df 	movw	r2, #479	; 0x1df
 8004590:	490d      	ldr	r1, [pc, #52]	; (80045c8 <ethernetif_init+0x4c>)
 8004592:	480e      	ldr	r0, [pc, #56]	; (80045cc <ethernetif_init+0x50>)
 8004594:	f012 ff2c 	bl	80173f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2273      	movs	r2, #115	; 0x73
 800459c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2274      	movs	r2, #116	; 0x74
 80045a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <ethernetif_init+0x54>)
 80045ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <ethernetif_init+0x58>)
 80045b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fdd3 	bl	8004160 <low_level_init>

  return ERR_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08018354 	.word	0x08018354
 80045c8:	08018370 	.word	0x08018370
 80045cc:	08018380 	.word	0x08018380
 80045d0:	08015121 	.word	0x08015121
 80045d4:	080043cd 	.word	0x080043cd

080045d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	4809      	ldr	r0, [pc, #36]	; (800460c <pbuf_free_custom+0x34>)
 80045e8:	f006 fa72 	bl	800aad0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <pbuf_free_custom+0x38>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <pbuf_free_custom+0x38>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <pbuf_free_custom+0x3c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fbf4 	bl	8004dec <osSemaphoreRelease>
  }
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	0801bc38 	.word	0x0801bc38
 8004610:	20004db0 	.word	0x20004db0
 8004614:	20004ef4 	.word	0x20004ef4

08004618 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800461c:	f7fc fda4 	bl	8001168 <HAL_GetTick>
 8004620:	4603      	mov	r3, r0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08e      	sub	sp, #56	; 0x38
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a59      	ldr	r2, [pc, #356]	; (80047ac <HAL_ETH_MspInit+0x184>)
 8004646:	4293      	cmp	r3, r2
 8004648:	f040 80ac 	bne.w	80047a4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800464c:	2300      	movs	r3, #0
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	4a56      	ldr	r2, [pc, #344]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 8004656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800465a:	6313      	str	r3, [r2, #48]	; 0x30
 800465c:	4b54      	ldr	r3, [pc, #336]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	4b50      	ldr	r3, [pc, #320]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	4a4f      	ldr	r2, [pc, #316]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 8004672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004676:	6313      	str	r3, [r2, #48]	; 0x30
 8004678:	4b4d      	ldr	r3, [pc, #308]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4a48      	ldr	r2, [pc, #288]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 800468e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004692:	6313      	str	r3, [r2, #48]	; 0x30
 8004694:	4b46      	ldr	r3, [pc, #280]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	4a41      	ldr	r2, [pc, #260]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	6313      	str	r3, [r2, #48]	; 0x30
 80046b0:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6313      	str	r3, [r2, #48]	; 0x30
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 80046fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004702:	6313      	str	r3, [r2, #48]	; 0x30
 8004704:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_ETH_MspInit+0x188>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004710:	2332      	movs	r3, #50	; 0x32
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471c:	2303      	movs	r3, #3
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004720:	230b      	movs	r3, #11
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004728:	4619      	mov	r1, r3
 800472a:	4822      	ldr	r0, [pc, #136]	; (80047b4 <HAL_ETH_MspInit+0x18c>)
 800472c:	f7fe f87e 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004730:	2386      	movs	r3, #134	; 0x86
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473c:	2303      	movs	r3, #3
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004740:	230b      	movs	r3, #11
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	481b      	ldr	r0, [pc, #108]	; (80047b8 <HAL_ETH_MspInit+0x190>)
 800474c:	f7fe f86e 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004762:	230b      	movs	r3, #11
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800476a:	4619      	mov	r1, r3
 800476c:	4813      	ldr	r0, [pc, #76]	; (80047bc <HAL_ETH_MspInit+0x194>)
 800476e:	f7fe f85d 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004772:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004784:	230b      	movs	r3, #11
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478c:	4619      	mov	r1, r3
 800478e:	480c      	ldr	r0, [pc, #48]	; (80047c0 <HAL_ETH_MspInit+0x198>)
 8004790:	f7fe f84c 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2105      	movs	r1, #5
 8004798:	203d      	movs	r0, #61	; 0x3d
 800479a:	f7fc fdcd 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800479e:	203d      	movs	r0, #61	; 0x3d
 80047a0:	f7fc fde6 	bl	8001370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80047a4:	bf00      	nop
 80047a6:	3738      	adds	r7, #56	; 0x38
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40028000 	.word	0x40028000
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40020400 	.word	0x40020400
 80047c0:	40021800 	.word	0x40021800

080047c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80047c8:	4802      	ldr	r0, [pc, #8]	; (80047d4 <ETH_PHY_IO_Init+0x10>)
 80047ca:	f7fd fbc7 	bl	8001f5c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20004efc 	.word	0x20004efc

080047d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return 0;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	4807      	ldr	r0, [pc, #28]	; (8004818 <ETH_PHY_IO_ReadReg+0x30>)
 80047fc:	f7fd fa16 	bl	8001c2c <HAL_ETH_ReadPHYRegister>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e000      	b.n	800480e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20004efc 	.word	0x20004efc

0800481c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	4807      	ldr	r0, [pc, #28]	; (800484c <ETH_PHY_IO_WriteReg+0x30>)
 8004830:	f7fd fa47 	bl	8001cc2 <HAL_ETH_WritePHYRegister>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	e000      	b.n	8004842 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20004efc 	.word	0x20004efc

08004850 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004854:	f7fc fc88 	bl	8001168 <HAL_GetTick>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b0a0      	sub	sp, #128	; 0x80
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	2264      	movs	r2, #100	; 0x64
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f012 fe22 	bl	80174ba <memset>
  int32_t PHYLinkState = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800487e:	2300      	movs	r3, #0
 8004880:	67bb      	str	r3, [r7, #120]	; 0x78
 8004882:	2300      	movs	r3, #0
 8004884:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800488a:	483a      	ldr	r0, [pc, #232]	; (8004974 <ethernet_link_thread+0x114>)
 800488c:	f7fc fbaf 	bl	8000fee <LAN8742_GetLinkState>
 8004890:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <ethernet_link_thread+0x5e>
 80048a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	dc09      	bgt.n	80048be <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80048aa:	4833      	ldr	r0, [pc, #204]	; (8004978 <ethernet_link_thread+0x118>)
 80048ac:	f7fc fe7a 	bl	80015a4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80048b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048b2:	f006 fb99 	bl	800afe8 <netif_set_down>
    netif_set_link_down(netif);
 80048b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048b8:	f006 fc00 	bl	800b0bc <netif_set_link_down>
 80048bc:	e055      	b.n	800496a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d14e      	bne.n	800496a <ethernet_link_thread+0x10a>
 80048cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	dd4b      	ble.n	800496a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80048d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d4:	3b02      	subs	r3, #2
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d82a      	bhi.n	8004930 <ethernet_link_thread+0xd0>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <ethernet_link_thread+0x80>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004903 	.word	0x08004903
 80048e8:	08004913 	.word	0x08004913
 80048ec:	08004923 	.word	0x08004923
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80048f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048fc:	2301      	movs	r3, #1
 80048fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004900:	e017      	b.n	8004932 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004902:	2300      	movs	r3, #0
 8004904:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800490a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800490c:	2301      	movs	r3, #1
 800490e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004910:	e00f      	b.n	8004932 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004916:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004918:	2300      	movs	r3, #0
 800491a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800491c:	2301      	movs	r3, #1
 800491e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004920:	e007      	b.n	8004932 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004922:	2300      	movs	r3, #0
 8004924:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004926:	2300      	movs	r3, #0
 8004928:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800492e:	e000      	b.n	8004932 <ethernet_link_thread+0xd2>
    default:
      break;
 8004930:	bf00      	nop
    }

    if(linkchanged)
 8004932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d018      	beq.n	800496a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004938:	f107 0308 	add.w	r3, r7, #8
 800493c:	4619      	mov	r1, r3
 800493e:	480e      	ldr	r0, [pc, #56]	; (8004978 <ethernet_link_thread+0x118>)
 8004940:	f7fd fa08 	bl	8001d54 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004946:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800494c:	f107 0308 	add.w	r3, r7, #8
 8004950:	4619      	mov	r1, r3
 8004952:	4809      	ldr	r0, [pc, #36]	; (8004978 <ethernet_link_thread+0x118>)
 8004954:	f7fd fae8 	bl	8001f28 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004958:	4807      	ldr	r0, [pc, #28]	; (8004978 <ethernet_link_thread+0x118>)
 800495a:	f7fc fd95 	bl	8001488 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800495e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004960:	f006 fad6 	bl	800af10 <netif_set_up>
      netif_set_link_up(netif);
 8004964:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004966:	f006 fb71 	bl	800b04c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800496a:	2064      	movs	r0, #100	; 0x64
 800496c:	f000 f90e 	bl	8004b8c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004970:	e78b      	b.n	800488a <ethernet_link_thread+0x2a>
 8004972:	bf00      	nop
 8004974:	20004fe4 	.word	0x20004fe4
 8004978:	20004efc 	.word	0x20004efc

0800497c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004984:	4812      	ldr	r0, [pc, #72]	; (80049d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004986:	f006 f82f 	bl	800a9e8 <memp_malloc_pool>
 800498a:	60f8      	str	r0, [r7, #12]
  if (p)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f103 0220 	add.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80049a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80049aa:	9201      	str	r2, [sp, #4]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2241      	movs	r2, #65	; 0x41
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f006 fda5 	bl	800b504 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80049ba:	e005      	b.n	80049c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	0801bc38 	.word	0x0801bc38
 80049d4:	080045d9 	.word	0x080045d9
 80049d8:	20004db0 	.word	0x20004db0

080049dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80049dc:	b480      	push	{r7}
 80049de:	b089      	sub	sp, #36	; 0x24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3b20      	subs	r3, #32
 80049fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2200      	movs	r2, #0
 8004a06:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e003      	b.n	8004a26 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e009      	b.n	8004a48 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	891a      	ldrh	r2, [r3, #8]
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f2      	bne.n	8004a34 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	3724      	adds	r7, #36	; 0x24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f006 ff07 	bl	800b878 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a84:	2b84      	cmp	r3, #132	; 0x84
 8004a86:	d005      	beq.n	8004a94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3303      	adds	r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa8:	f3ef 8305 	mrs	r3, IPSR
 8004aac:	607b      	str	r3, [r7, #4]
  return(result);
 8004aae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004aca:	f001 fd3b 	bl	8006544 <vTaskStartScheduler>
  
  return osOK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004ad8:	f7ff ffe3 	bl	8004aa2 <inHandlerMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004ae2:	f001 fe53 	bl	800678c <xTaskGetTickCountFromISR>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	e002      	b.n	8004af0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004aea:	f001 fe3f 	bl	800676c <xTaskGetTickCount>
 8004aee:	4603      	mov	r3, r0
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af04      	add	r7, sp, #16
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <osThreadCreate+0x54>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01c      	beq.n	8004b48 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685c      	ldr	r4, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691e      	ldr	r6, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ffa6 	bl	8004a72 <makeFreeRtosPriority>
 8004b26:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b30:	9202      	str	r2, [sp, #8]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	9100      	str	r1, [sp, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	4632      	mov	r2, r6
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f001 fb23 	bl	8006188 <xTaskCreateStatic>
 8004b42:	4603      	mov	r3, r0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e01c      	b.n	8004b82 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685c      	ldr	r4, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b54:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff88 	bl	8004a72 <makeFreeRtosPriority>
 8004b62:	4602      	mov	r2, r0
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	9200      	str	r2, [sp, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f001 fb65 	bl	8006242 <xTaskCreate>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d001      	beq.n	8004b82 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b8c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <osDelay+0x16>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	e000      	b.n	8004ba4 <osDelay+0x18>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fc99 	bl	80064dc <vTaskDelay>
  
  return osOK;
 8004baa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f000 fc7d 	bl	80054ca <xQueueCreateMutexStatic>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	e003      	b.n	8004bdc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f000 fc60 	bl	800549a <xQueueCreateMutex>
 8004bda:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <osMutexWait+0x18>
    return osErrorParameter;
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	e03a      	b.n	8004c72 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d103      	bne.n	8004c10 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e009      	b.n	8004c24 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <osMutexWait+0x40>
      ticks = 1;
 8004c20:	2301      	movs	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c24:	f7ff ff3d 	bl	8004aa2 <inHandlerMode>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	461a      	mov	r2, r3
 8004c34:	2100      	movs	r1, #0
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 f874 	bl	8005d24 <xQueueReceiveFromISR>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <osMutexWait+0x62>
      return osErrorOS;
 8004c42:	23ff      	movs	r3, #255	; 0xff
 8004c44:	e015      	b.n	8004c72 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d011      	beq.n	8004c70 <osMutexWait+0x8c>
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <osMutexWait+0x98>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	e008      	b.n	8004c70 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 ff53 	bl	8005b0c <xQueueSemaphoreTake>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d001      	beq.n	8004c70 <osMutexWait+0x8c>
    return osErrorOS;
 8004c6c:	23ff      	movs	r3, #255	; 0xff
 8004c6e:	e000      	b.n	8004c72 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004c90:	f7ff ff07 	bl	8004aa2 <inHandlerMode>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fdc6 	bl	8005832 <xQueueGiveFromISR>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d001      	beq.n	8004cb0 <osMutexRelease+0x30>
      return osErrorOS;
 8004cac:	23ff      	movs	r3, #255	; 0xff
 8004cae:	e017      	b.n	8004ce0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d013      	beq.n	8004cde <osMutexRelease+0x5e>
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <osMutexRelease+0x68>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	e00a      	b.n	8004cde <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2100      	movs	r1, #0
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fc16 	bl	8005500 <xQueueGenericSend>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004cda:	23ff      	movs	r3, #255	; 0xff
 8004cdc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10a      	bne.n	8004d1a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	9200      	str	r2, [sp, #0]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2001      	movs	r0, #1
 8004d12:	f000 fad7 	bl	80052c4 <xQueueGenericCreateStatic>
 8004d16:	4603      	mov	r3, r0
 8004d18:	e016      	b.n	8004d48 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e014      	b.n	8004d48 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d110      	bne.n	8004d46 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004d24:	2203      	movs	r2, #3
 8004d26:	2100      	movs	r1, #0
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f000 fb43 	bl	80053b4 <xQueueGenericCreate>
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <osSemaphoreCreate+0x56>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fbdf 	bl	8005500 <xQueueGenericSend>
      return sema;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	e000      	b.n	8004d48 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004d46:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	e03a      	b.n	8004dde <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d103      	bne.n	8004d7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004d74:	f04f 33ff 	mov.w	r3, #4294967295
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e009      	b.n	8004d90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <osSemaphoreWait+0x40>
      ticks = 1;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d90:	f7ff fe87 	bl	8004aa2 <inHandlerMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d9a:	f107 0308 	add.w	r3, r7, #8
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2100      	movs	r1, #0
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ffbe 	bl	8005d24 <xQueueReceiveFromISR>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d001      	beq.n	8004db2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004dae:	23ff      	movs	r3, #255	; 0xff
 8004db0:	e015      	b.n	8004dde <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d011      	beq.n	8004ddc <osSemaphoreWait+0x8c>
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <osSemaphoreWait+0x98>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	e008      	b.n	8004ddc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fe9d 	bl	8005b0c <xQueueSemaphoreTake>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d001      	beq.n	8004ddc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004dd8:	23ff      	movs	r3, #255	; 0xff
 8004dda:	e000      	b.n	8004dde <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004dfc:	f7ff fe51 	bl	8004aa2 <inHandlerMode>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e06:	f107 0308 	add.w	r3, r7, #8
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fd10 	bl	8005832 <xQueueGiveFromISR>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004e18:	23ff      	movs	r3, #255	; 0xff
 8004e1a:	e017      	b.n	8004e4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d013      	beq.n	8004e4a <osSemaphoreRelease+0x5e>
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <osSemaphoreRelease+0x68>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	e00a      	b.n	8004e4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fb60 	bl	8005500 <xQueueGenericSend>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004e46:	23ff      	movs	r3, #255	; 0xff
 8004e48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004e60:	f7ff fe1f 	bl	8004aa2 <inHandlerMode>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004e6a:	2382      	movs	r3, #130	; 0x82
 8004e6c:	e003      	b.n	8004e76 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 f814 	bl	8005e9c <vQueueDelete>

  return osOK; 
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004e7e:	b590      	push	{r4, r7, lr}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d011      	beq.n	8004eb4 <osMessageCreate+0x36>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6859      	ldr	r1, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2400      	movs	r4, #0
 8004eaa:	9400      	str	r4, [sp, #0]
 8004eac:	f000 fa0a 	bl	80052c4 <xQueueGenericCreateStatic>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	e008      	b.n	8004ec6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f000 fa78 	bl	80053b4 <xQueueGenericCreate>
 8004ec4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd90      	pop	{r4, r7, pc}
	...

08004ed0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <osMessagePut+0x1e>
    ticks = 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004eee:	f7ff fdd8 	bl	8004aa2 <inHandlerMode>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d018      	beq.n	8004f2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004ef8:	f107 0210 	add.w	r2, r7, #16
 8004efc:	f107 0108 	add.w	r1, r7, #8
 8004f00:	2300      	movs	r3, #0
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fbfa 	bl	80056fc <xQueueGenericSendFromISR>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d001      	beq.n	8004f12 <osMessagePut+0x42>
      return osErrorOS;
 8004f0e:	23ff      	movs	r3, #255	; 0xff
 8004f10:	e018      	b.n	8004f44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d014      	beq.n	8004f42 <osMessagePut+0x72>
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <osMessagePut+0x7c>)
 8004f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	e00b      	b.n	8004f42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004f2a:	f107 0108 	add.w	r1, r7, #8
 8004f2e:	2300      	movs	r3, #0
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fae4 	bl	8005500 <xQueueGenericSend>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <osMessagePut+0x72>
      return osErrorOS;
 8004f3e:	23ff      	movs	r3, #255	; 0xff
 8004f40:	e000      	b.n	8004f44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b08b      	sub	sp, #44	; 0x2c
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	617b      	str	r3, [r7, #20]
    return event;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	461c      	mov	r4, r3
 8004f72:	f107 0314 	add.w	r3, r7, #20
 8004f76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f7e:	e054      	b.n	800502a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d103      	bne.n	8004f98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	e009      	b.n	8004fac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <osMessageGet+0x5c>
      ticks = 1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004fac:	f7ff fd79 	bl	8004aa2 <inHandlerMode>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01c      	beq.n	8004ff0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004fb6:	f107 0220 	add.w	r2, r7, #32
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68b8      	ldr	r0, [r7, #8]
 8004fc4:	f000 feae 	bl	8005d24 <xQueueReceiveFromISR>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004fce:	2310      	movs	r3, #16
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e001      	b.n	8004fd8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01d      	beq.n	800501a <osMessageGet+0xca>
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <osMessageGet+0xe4>)
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e014      	b.n	800501a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004ff0:	f107 0314 	add.w	r3, r7, #20
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	68b8      	ldr	r0, [r7, #8]
 8004ffc:	f000 fca6 	bl	800594c <xQueueReceive>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d102      	bne.n	800500c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005006:	2310      	movs	r3, #16
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e006      	b.n	800501a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <osMessageGet+0xc6>
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <osMessageGet+0xc8>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	461c      	mov	r4, r3
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	372c      	adds	r7, #44	; 0x2c
 800502e:	46bd      	mov	sp, r7
 8005030:	bd90      	pop	{r4, r7, pc}
 8005032:	bf00      	nop
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005040:	f7ff fd2f 	bl	8004aa2 <inHandlerMode>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 ff08 	bl	8005e60 <uxQueueMessagesWaitingFromISR>
 8005050:	4603      	mov	r3, r0
 8005052:	e003      	b.n	800505c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fee5 	bl	8005e24 <uxQueueMessagesWaiting>
 800505a:	4603      	mov	r3, r0
  }
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800506c:	f7ff fd19 	bl	8004aa2 <inHandlerMode>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <osMessageDelete+0x16>
    return osErrorISR;
 8005076:	2382      	movs	r3, #130	; 0x82
 8005078:	e003      	b.n	8005082 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 ff0e 	bl	8005e9c <vQueueDelete>

  return osOK; 
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f04f 32ff 	mov.w	r2, #4294967295
 80050a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f103 0208 	add.w	r2, r3, #8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f103 0208 	add.w	r2, r3, #8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d103      	bne.n	800514c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e00c      	b.n	8005166 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3308      	adds	r3, #8
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e002      	b.n	800515a <vListInsert+0x2e>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	d2f6      	bcs.n	8005154 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6852      	ldr	r2, [r2, #4]
 80051be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d103      	bne.n	80051d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1e5a      	subs	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800521e:	f002 f911 	bl	8007444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	68f9      	ldr	r1, [r7, #12]
 800522c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	3b01      	subs	r3, #1
 8005250:	68f9      	ldr	r1, [r7, #12]
 8005252:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	441a      	add	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	22ff      	movs	r2, #255	; 0xff
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d114      	bne.n	800529e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01a      	beq.n	80052b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3310      	adds	r3, #16
 8005280:	4618      	mov	r0, r3
 8005282:	f001 fbd3 	bl	8006a2c <xTaskRemoveFromEventList>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d012      	beq.n	80052b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <xQueueGenericReset+0xcc>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	e009      	b.n	80052b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3310      	adds	r3, #16
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fef1 	bl	800508a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3324      	adds	r3, #36	; 0x24
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff feec 	bl	800508a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052b2:	f002 f8f7 	bl	80074a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052b6:	2301      	movs	r3, #1
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	; 0x38
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <xQueueGenericCreateStatic+0x52>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <xQueueGenericCreateStatic+0x56>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <xQueueGenericCreateStatic+0x58>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	623b      	str	r3, [r7, #32]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <xQueueGenericCreateStatic+0x7e>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueGenericCreateStatic+0x82>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueGenericCreateStatic+0x84>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005362:	2348      	movs	r3, #72	; 0x48
 8005364:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b48      	cmp	r3, #72	; 0x48
 800536a:	d00a      	beq.n	8005382 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	61bb      	str	r3, [r7, #24]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005382:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005396:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f83f 	bl	8005428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueGenericCreate+0x2a>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	613b      	str	r3, [r7, #16]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	3348      	adds	r3, #72	; 0x48
 80053ec:	4618      	mov	r0, r3
 80053ee:	f002 f94b 	bl	8007688 <pvPortMalloc>
 80053f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d011      	beq.n	800541e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3348      	adds	r3, #72	; 0x48
 8005402:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800540c:	79fa      	ldrb	r2, [r7, #7]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f805 	bl	8005428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800541e:	69bb      	ldr	r3, [r7, #24]
	}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e002      	b.n	800544a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005456:	2101      	movs	r1, #1
 8005458:	69b8      	ldr	r0, [r7, #24]
 800545a:	f7ff fecb 	bl	80051f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005486:	2300      	movs	r3, #0
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f837 	bl	8005500 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800549a:	b580      	push	{r7, lr}
 800549c:	b086      	sub	sp, #24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6939      	ldr	r1, [r7, #16]
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7ff ff7e 	bl	80053b4 <xQueueGenericCreate>
 80054b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff ffd3 	bl	8005466 <prvInitialiseMutex>

		return xNewQueue;
 80054c0:	68fb      	ldr	r3, [r7, #12]
	}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b088      	sub	sp, #32
 80054ce:	af02      	add	r7, sp, #8
 80054d0:	4603      	mov	r3, r0
 80054d2:	6039      	str	r1, [r7, #0]
 80054d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054d6:	2301      	movs	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2200      	movs	r2, #0
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f7ff feeb 	bl	80052c4 <xQueueGenericCreateStatic>
 80054ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff ffb8 	bl	8005466 <prvInitialiseMutex>

		return xNewQueue;
 80054f6:	68fb      	ldr	r3, [r7, #12]
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08e      	sub	sp, #56	; 0x38
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800550e:	2300      	movs	r3, #0
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGenericSend+0x32>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <xQueueGenericSend+0x40>
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <xQueueGenericSend+0x44>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <xQueueGenericSend+0x46>
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <xQueueGenericSend+0x60>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x6e>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <xQueueGenericSend+0x72>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueGenericSend+0x74>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericSend+0x8e>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	623b      	str	r3, [r7, #32]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800558e:	f001 fc0d 	bl	8006dac <xTaskGetSchedulerState>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <xQueueGenericSend+0x9e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueGenericSend+0xa2>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericSend+0xa4>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueGenericSend+0xbe>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055be:	f001 ff41 	bl	8007444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <xQueueGenericSend+0xd4>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d129      	bne.n	8005628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055da:	f000 fc9a 	bl	8005f12 <prvCopyDataToQueue>
 80055de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 fa1d 	bl	8006a2c <xTaskRemoveFromEventList>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055f8:	4b3f      	ldr	r3, [pc, #252]	; (80056f8 <xQueueGenericSend+0x1f8>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	e00a      	b.n	8005620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005610:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <xQueueGenericSend+0x1f8>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005620:	f001 ff40 	bl	80074a4 <vPortExitCritical>
				return pdPASS;
 8005624:	2301      	movs	r3, #1
 8005626:	e063      	b.n	80056f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800562e:	f001 ff39 	bl	80074a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005632:	2300      	movs	r3, #0
 8005634:	e05c      	b.n	80056f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fa55 	bl	8006af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005646:	2301      	movs	r3, #1
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800564a:	f001 ff2b 	bl	80074a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800564e:	f000 ffe3 	bl	8006618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005652:	f001 fef7 	bl	8007444 <vPortEnterCritical>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565c:	b25b      	sxtb	r3, r3
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d103      	bne.n	800566c <xQueueGenericSend+0x16c>
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005672:	b25b      	sxtb	r3, r3
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d103      	bne.n	8005682 <xQueueGenericSend+0x182>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005682:	f001 ff0f 	bl	80074a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005686:	1d3a      	adds	r2, r7, #4
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fa44 	bl	8006b1c <xTaskCheckForTimeOut>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d124      	bne.n	80056e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800569a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800569c:	f000 fd31 	bl	8006102 <prvIsQueueFull>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d018      	beq.n	80056d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	3310      	adds	r3, #16
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 f998 	bl	80069e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b6:	f000 fcbc 	bl	8006032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ba:	f000 ffbb 	bl	8006634 <xTaskResumeAll>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f af7c 	bne.w	80055be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <xQueueGenericSend+0x1f8>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	e772      	b.n	80055be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056da:	f000 fcaa 	bl	8006032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056de:	f000 ffa9 	bl	8006634 <xTaskResumeAll>
 80056e2:	e76c      	b.n	80055be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e6:	f000 fca4 	bl	8006032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ea:	f000 ffa3 	bl	8006634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3738      	adds	r7, #56	; 0x38
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b090      	sub	sp, #64	; 0x40
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <xQueueGenericSendFromISR+0x3c>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <xQueueGenericSendFromISR+0x40>
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <xQueueGenericSendFromISR+0x42>
 800573c:	2300      	movs	r3, #0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d103      	bne.n	8005766 <xQueueGenericSendFromISR+0x6a>
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <xQueueGenericSendFromISR+0x6e>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <xQueueGenericSendFromISR+0x70>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	623b      	str	r3, [r7, #32]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005786:	f001 ff3f 	bl	8007608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800578a:	f3ef 8211 	mrs	r2, BASEPRI
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	61fa      	str	r2, [r7, #28]
 80057a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <xQueueGenericSendFromISR+0xbc>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d12f      	bne.n	8005818 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057ce:	f000 fba0 	bl	8005f12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d112      	bne.n	8005802 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d016      	beq.n	8005812 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	3324      	adds	r3, #36	; 0x24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f91f 	bl	8006a2c <xTaskRemoveFromEventList>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e007      	b.n	8005812 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005806:	3301      	adds	r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	b25a      	sxtb	r2, r3
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005812:	2301      	movs	r3, #1
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005816:	e001      	b.n	800581c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005818:	2300      	movs	r3, #0
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005826:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800582a:	4618      	mov	r0, r3
 800582c:	3740      	adds	r7, #64	; 0x40
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08e      	sub	sp, #56	; 0x38
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	623b      	str	r3, [r7, #32]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	61fb      	str	r3, [r7, #28]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueGiveFromISR+0x58>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueGiveFromISR+0x5c>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGiveFromISR+0x5e>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGiveFromISR+0x78>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	61bb      	str	r3, [r7, #24]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058aa:	f001 fead 	bl	8007608 <vPortValidateInterruptPriority>
	__asm volatile
 80058ae:	f3ef 8211 	mrs	r2, BASEPRI
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	617a      	str	r2, [r7, #20]
 80058c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d22b      	bcs.n	8005932 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d112      	bne.n	800591c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	4618      	mov	r0, r3
 8005904:	f001 f892 	bl	8006a2c <xTaskRemoveFromEventList>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e007      	b.n	800592c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800591c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005920:	3301      	adds	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	b25a      	sxtb	r2, r3
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800592c:	2301      	movs	r3, #1
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
 8005930:	e001      	b.n	8005936 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f383 8811 	msr	BASEPRI, r3
}
 8005940:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005944:	4618      	mov	r0, r3
 8005946:	3738      	adds	r7, #56	; 0x38
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <xQueueReceive+0x30>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	623b      	str	r3, [r7, #32]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <xQueueReceive+0x3e>
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <xQueueReceive+0x42>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <xQueueReceive+0x44>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <xQueueReceive+0x5e>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	61fb      	str	r3, [r7, #28]
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059aa:	f001 f9ff 	bl	8006dac <xTaskGetSchedulerState>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <xQueueReceive+0x6e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <xQueueReceive+0x72>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueReceive+0x74>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xQueueReceive+0x8e>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	61bb      	str	r3, [r7, #24]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059da:	f001 fd33 	bl	8007444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01f      	beq.n	8005a2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f000 fafa 	bl	8005fe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00f      	beq.n	8005a22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	3310      	adds	r3, #16
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f810 	bl	8006a2c <xTaskRemoveFromEventList>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a12:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <xQueueReceive+0x1bc>)
 8005a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a22:	f001 fd3f 	bl	80074a4 <vPortExitCritical>
				return pdPASS;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e069      	b.n	8005afe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a30:	f001 fd38 	bl	80074a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e062      	b.n	8005afe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 f854 	bl	8006af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a4c:	f001 fd2a 	bl	80074a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a50:	f000 fde2 	bl	8006618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a54:	f001 fcf6 	bl	8007444 <vPortEnterCritical>
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <xQueueReceive+0x122>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a74:	b25b      	sxtb	r3, r3
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d103      	bne.n	8005a84 <xQueueReceive+0x138>
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a84:	f001 fd0e 	bl	80074a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a88:	1d3a      	adds	r2, r7, #4
 8005a8a:	f107 0310 	add.w	r3, r7, #16
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f843 	bl	8006b1c <xTaskCheckForTimeOut>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d123      	bne.n	8005ae4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9e:	f000 fb1a 	bl	80060d6 <prvIsQueueEmpty>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d017      	beq.n	8005ad8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	3324      	adds	r3, #36	; 0x24
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 ff97 	bl	80069e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab8:	f000 fabb 	bl	8006032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005abc:	f000 fdba 	bl	8006634 <xTaskResumeAll>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d189      	bne.n	80059da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <xQueueReceive+0x1bc>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e780      	b.n	80059da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ada:	f000 faaa 	bl	8006032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ade:	f000 fda9 	bl	8006634 <xTaskResumeAll>
 8005ae2:	e77a      	b.n	80059da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae6:	f000 faa4 	bl	8006032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aea:	f000 fda3 	bl	8006634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af0:	f000 faf1 	bl	80060d6 <prvIsQueueEmpty>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f43f af6f 	beq.w	80059da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005afc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3730      	adds	r7, #48	; 0x30
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	623b      	str	r3, [r7, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	61fb      	str	r3, [r7, #28]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b5c:	f001 f926 	bl	8006dac <xTaskGetSchedulerState>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <xQueueSemaphoreTake+0x60>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueSemaphoreTake+0x64>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <xQueueSemaphoreTake+0x66>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61bb      	str	r3, [r7, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b8c:	f001 fc5a 	bl	8007444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d024      	beq.n	8005be6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bac:	f001 faa6 	bl	80070fc <pvTaskIncrementMutexHeldCount>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 ff32 	bl	8006a2c <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b54      	ldr	r3, [pc, #336]	; (8005d20 <xQueueSemaphoreTake+0x214>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bde:	f001 fc61 	bl	80074a4 <vPortExitCritical>
				return pdPASS;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e097      	b.n	8005d16 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d111      	bne.n	8005c10 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c08:	f001 fc4c 	bl	80074a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e082      	b.n	8005d16 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 ff68 	bl	8006af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c24:	f001 fc3e 	bl	80074a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c28:	f000 fcf6 	bl	8006618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c2c:	f001 fc0a 	bl	8007444 <vPortEnterCritical>
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d103      	bne.n	8005c46 <xQueueSemaphoreTake+0x13a>
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d103      	bne.n	8005c5c <xQueueSemaphoreTake+0x150>
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5c:	f001 fc22 	bl	80074a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c60:	463a      	mov	r2, r7
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 ff57 	bl	8006b1c <xTaskCheckForTimeOut>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d132      	bne.n	8005cda <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c76:	f000 fa2e 	bl	80060d6 <prvIsQueueEmpty>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d026      	beq.n	8005cce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005c88:	f001 fbdc 	bl	8007444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f8a9 	bl	8006de8 <xTaskPriorityInherit>
 8005c96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c98:	f001 fc04 	bl	80074a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fe9d 	bl	80069e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cac:	f000 f9c1 	bl	8006032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb0:	f000 fcc0 	bl	8006634 <xTaskResumeAll>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f47f af68 	bne.w	8005b8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005cbc:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <xQueueSemaphoreTake+0x214>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	e75e      	b.n	8005b8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd0:	f000 f9af 	bl	8006032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd4:	f000 fcae 	bl	8006634 <xTaskResumeAll>
 8005cd8:	e758      	b.n	8005b8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cdc:	f000 f9a9 	bl	8006032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce0:	f000 fca8 	bl	8006634 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce6:	f000 f9f6 	bl	80060d6 <prvIsQueueEmpty>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f43f af4d 	beq.w	8005b8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00d      	beq.n	8005d14 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005cf8:	f001 fba4 	bl	8007444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cfe:	f000 f8f0 	bl	8005ee2 <prvGetDisinheritPriorityAfterTimeout>
 8005d02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 f968 	bl	8006fe0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d10:	f001 fbc8 	bl	80074a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3738      	adds	r7, #56	; 0x38
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	; 0x38
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	623b      	str	r3, [r7, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <xQueueReceiveFromISR+0x3a>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <xQueueReceiveFromISR+0x3e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueReceiveFromISR+0x40>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	61fb      	str	r3, [r7, #28]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7e:	f001 fc43 	bl	8007608 <vPortValidateInterruptPriority>
	__asm volatile
 8005d82:	f3ef 8211 	mrs	r2, BASEPRI
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	61ba      	str	r2, [r7, #24]
 8005d98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02f      	beq.n	8005e0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db8:	f000 f915 	bl	8005fe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d112      	bne.n	8005df4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3310      	adds	r3, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe26 	bl	8006a2c <xTaskRemoveFromEventList>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e007      	b.n	8005e04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	b25a      	sxtb	r2, r3
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e04:	2301      	movs	r3, #1
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	e001      	b.n	8005e0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f383 8811 	msr	BASEPRI, r3
}
 8005e18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3738      	adds	r7, #56	; 0x38
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60bb      	str	r3, [r7, #8]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e48:	f001 fafc 	bl	8007444 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e52:	f001 fb27 	bl	80074a4 <vPortExitCritical>

	return uxReturn;
 8005e56:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e8e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vQueueDelete+0x28>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60bb      	str	r3, [r7, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f935 	bl	8006134 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f001 fca3 	bl	8007820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1c3 0307 	rsb	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e001      	b.n	8005f04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f04:	68fb      	ldr	r3, [r7, #12]
	}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10d      	bne.n	8005f4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d14d      	bne.n	8005fd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 ffc9 	bl	8006ed4 <xTaskPriorityDisinherit>
 8005f42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
 8005f4a:	e043      	b.n	8005fd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d119      	bne.n	8005f86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6858      	ldr	r0, [r3, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	f011 fb77 	bl	8017650 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d32b      	bcc.n	8005fd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	e026      	b.n	8005fd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68d8      	ldr	r0, [r3, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	f011 fb5d 	bl	8017650 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	425b      	negs	r3, r3
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d207      	bcs.n	8005fc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	425b      	negs	r3, r3
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d105      	bne.n	8005fd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fdc:	697b      	ldr	r3, [r7, #20]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d018      	beq.n	800602a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	441a      	add	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	d303      	bcc.n	800601a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68d9      	ldr	r1, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	461a      	mov	r2, r3
 8006024:	6838      	ldr	r0, [r7, #0]
 8006026:	f011 fb13 	bl	8017650 <memcpy>
	}
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b084      	sub	sp, #16
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800603a:	f001 fa03 	bl	8007444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006046:	e011      	b.n	800606c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3324      	adds	r3, #36	; 0x24
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fce9 	bl	8006a2c <xTaskRemoveFromEventList>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006060:	f000 fdbe 	bl	8006be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	3b01      	subs	r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800606c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006070:	2b00      	cmp	r3, #0
 8006072:	dce9      	bgt.n	8006048 <prvUnlockQueue+0x16>
 8006074:	e000      	b.n	8006078 <prvUnlockQueue+0x46>
					break;
 8006076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	22ff      	movs	r2, #255	; 0xff
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006080:	f001 fa10 	bl	80074a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006084:	f001 f9de 	bl	8007444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800608e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006090:	e011      	b.n	80060b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d012      	beq.n	80060c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fcc4 	bl	8006a2c <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060aa:	f000 fd99 	bl	8006be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dce9      	bgt.n	8006092 <prvUnlockQueue+0x60>
 80060be:	e000      	b.n	80060c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060ca:	f001 f9eb 	bl	80074a4 <vPortExitCritical>
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060de:	f001 f9b1 	bl	8007444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e001      	b.n	80060f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f4:	f001 f9d6 	bl	80074a4 <vPortExitCritical>

	return xReturn;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b084      	sub	sp, #16
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610a:	f001 f99b 	bl	8007444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	429a      	cmp	r2, r3
 8006118:	d102      	bne.n	8006120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800611a:	2301      	movs	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e001      	b.n	8006124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006124:	f001 f9be 	bl	80074a4 <vPortExitCritical>

	return xReturn;
 8006128:	68fb      	ldr	r3, [r7, #12]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e016      	b.n	8006170 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <vQueueUnregisterQueue+0x50>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d10b      	bne.n	800616a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006152:	4a0c      	ldr	r2, [pc, #48]	; (8006184 <vQueueUnregisterQueue+0x50>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2100      	movs	r1, #0
 8006158:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <vQueueUnregisterQueue+0x50>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
				break;
 8006168:	e006      	b.n	8006178 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b07      	cmp	r3, #7
 8006174:	d9e5      	bls.n	8006142 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	20005004 	.word	0x20005004

08006188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af04      	add	r7, sp, #16
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xTaskCreateStatic+0x46>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	61fb      	str	r3, [r7, #28]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061ce:	23a0      	movs	r3, #160	; 0xa0
 80061d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2ba0      	cmp	r3, #160	; 0xa0
 80061d6:	d00a      	beq.n	80061ee <xTaskCreateStatic+0x66>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	61bb      	str	r3, [r7, #24]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01e      	beq.n	8006234 <xTaskCreateStatic+0xac>
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	2202      	movs	r2, #2
 800620a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800620e:	2300      	movs	r3, #0
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	9302      	str	r3, [sp, #8]
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f850 	bl	80062cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800622c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800622e:	f000 f8eb 	bl	8006408 <prvAddNewTaskToReadyList>
 8006232:	e001      	b.n	8006238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006238:	697b      	ldr	r3, [r7, #20]
	}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006242:	b580      	push	{r7, lr}
 8006244:	b08c      	sub	sp, #48	; 0x30
 8006246:	af04      	add	r7, sp, #16
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	603b      	str	r3, [r7, #0]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fa16 	bl	8007688 <pvPortMalloc>
 800625c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006264:	20a0      	movs	r0, #160	; 0xa0
 8006266:	f001 fa0f 	bl	8007688 <pvPortMalloc>
 800626a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
 8006278:	e005      	b.n	8006286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800627a:	6978      	ldr	r0, [r7, #20]
 800627c:	f001 fad0 	bl	8007820 <vPortFree>
 8006280:	e001      	b.n	8006286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	2300      	movs	r3, #0
 8006298:	9303      	str	r3, [sp, #12]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f80e 	bl	80062cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062b0:	69f8      	ldr	r0, [r7, #28]
 80062b2:	f000 f8a9 	bl	8006408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b6:	2301      	movs	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e002      	b.n	80062c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062bc:	f04f 33ff 	mov.w	r3, #4294967295
 80062c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062c2:	69bb      	ldr	r3, [r7, #24]
	}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062e4:	3b01      	subs	r3, #1
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f023 0307 	bic.w	r3, r3, #7
 80062f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <prvInitialiseNewTask+0x48>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01f      	beq.n	800635a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e012      	b.n	8006346 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	7819      	ldrb	r1, [r3, #0]
 8006328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	3334      	adds	r3, #52	; 0x34
 8006330:	460a      	mov	r2, r1
 8006332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3301      	adds	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b0f      	cmp	r3, #15
 800634a:	d9e9      	bls.n	8006320 <prvInitialiseNewTask+0x54>
 800634c:	e000      	b.n	8006350 <prvInitialiseNewTask+0x84>
			{
				break;
 800634e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006358:	e003      	b.n	8006362 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2b06      	cmp	r3, #6
 8006366:	d901      	bls.n	800636c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006368:	2306      	movs	r3, #6
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006376:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	2200      	movs	r2, #0
 800637c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fea1 	bl	80050ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	3318      	adds	r3, #24
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe9c 	bl	80050ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	f1c3 0207 	rsb	r2, r3, #7
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	334c      	adds	r3, #76	; 0x4c
 80063bc:	224c      	movs	r2, #76	; 0x4c
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f011 f87a 	bl	80174ba <memset>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <prvInitialiseNewTask+0x130>)
 80063ca:	651a      	str	r2, [r3, #80]	; 0x50
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	4a0c      	ldr	r2, [pc, #48]	; (8006400 <prvInitialiseNewTask+0x134>)
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	4a0b      	ldr	r2, [pc, #44]	; (8006404 <prvInitialiseNewTask+0x138>)
 80063d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	69b8      	ldr	r0, [r7, #24]
 80063de:	f000 ff07 	bl	80071f0 <pxPortInitialiseStack>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f4:	bf00      	nop
 80063f6:	3720      	adds	r7, #32
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20010ab0 	.word	0x20010ab0
 8006400:	20010b18 	.word	0x20010b18
 8006404:	20010b80 	.word	0x20010b80

08006408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006410:	f001 f818 	bl	8007444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006414:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <prvAddNewTaskToReadyList+0xb8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <prvAddNewTaskToReadyList+0xb8>)
 800641c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <prvAddNewTaskToReadyList+0xbc>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006426:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <prvAddNewTaskToReadyList+0xbc>)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <prvAddNewTaskToReadyList+0xb8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006434:	f000 fbf8 	bl	8006c28 <prvInitialiseTaskLists>
 8006438:	e00d      	b.n	8006456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800643a:	4b23      	ldr	r3, [pc, #140]	; (80064c8 <prvAddNewTaskToReadyList+0xc0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006442:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <prvAddNewTaskToReadyList+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	429a      	cmp	r2, r3
 800644e:	d802      	bhi.n	8006456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <prvAddNewTaskToReadyList+0xbc>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006456:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <prvAddNewTaskToReadyList+0xc4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <prvAddNewTaskToReadyList+0xc4>)
 800645e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	2201      	movs	r2, #1
 8006466:	409a      	lsls	r2, r3
 8006468:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <prvAddNewTaskToReadyList+0xc8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4313      	orrs	r3, r2
 800646e:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <prvAddNewTaskToReadyList+0xc8>)
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <prvAddNewTaskToReadyList+0xcc>)
 8006480:	441a      	add	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fe fe2b 	bl	80050e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800648e:	f001 f809 	bl	80074a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <prvAddNewTaskToReadyList+0xc0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00e      	beq.n	80064b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <prvAddNewTaskToReadyList+0xbc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d207      	bcs.n	80064b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <prvAddNewTaskToReadyList+0xd0>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20005144 	.word	0x20005144
 80064c4:	20005044 	.word	0x20005044
 80064c8:	20005150 	.word	0x20005150
 80064cc:	20005160 	.word	0x20005160
 80064d0:	2000514c 	.word	0x2000514c
 80064d4:	20005048 	.word	0x20005048
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <vTaskDelay+0x60>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <vTaskDelay+0x30>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800650c:	f000 f884 	bl	8006618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006510:	2100      	movs	r1, #0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fe06 	bl	8007124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006518:	f000 f88c 	bl	8006634 <xTaskResumeAll>
 800651c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <vTaskDelay+0x64>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	2000516c 	.word	0x2000516c
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006552:	463a      	mov	r2, r7
 8006554:	1d39      	adds	r1, r7, #4
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa f816 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	460a      	mov	r2, r1
 8006572:	4921      	ldr	r1, [pc, #132]	; (80065f8 <vTaskStartScheduler+0xb4>)
 8006574:	4821      	ldr	r0, [pc, #132]	; (80065fc <vTaskStartScheduler+0xb8>)
 8006576:	f7ff fe07 	bl	8006188 <xTaskCreateStatic>
 800657a:	4603      	mov	r3, r0
 800657c:	4a20      	ldr	r2, [pc, #128]	; (8006600 <vTaskStartScheduler+0xbc>)
 800657e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006580:	4b1f      	ldr	r3, [pc, #124]	; (8006600 <vTaskStartScheduler+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e001      	b.n	8006592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d11b      	bne.n	80065d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	613b      	str	r3, [r7, #16]
}
 80065aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <vTaskStartScheduler+0xc0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	334c      	adds	r3, #76	; 0x4c
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <vTaskStartScheduler+0xc4>)
 80065b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <vTaskStartScheduler+0xc8>)
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295
 80065bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <vTaskStartScheduler+0xcc>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <vTaskStartScheduler+0xd0>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ca:	f000 fe99 	bl	8007300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ce:	e00e      	b.n	80065ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d6:	d10a      	bne.n	80065ee <vTaskStartScheduler+0xaa>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60fb      	str	r3, [r7, #12]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <vTaskStartScheduler+0xa8>
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	080183a8 	.word	0x080183a8
 80065fc:	08006bf9 	.word	0x08006bf9
 8006600:	20005168 	.word	0x20005168
 8006604:	20005044 	.word	0x20005044
 8006608:	2000008c 	.word	0x2000008c
 800660c:	20005164 	.word	0x20005164
 8006610:	20005150 	.word	0x20005150
 8006614:	20005148 	.word	0x20005148

08006618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <vTaskSuspendAll+0x18>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a03      	ldr	r2, [pc, #12]	; (8006630 <vTaskSuspendAll+0x18>)
 8006624:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	2000516c 	.word	0x2000516c

08006634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006642:	4b41      	ldr	r3, [pc, #260]	; (8006748 <xTaskResumeAll+0x114>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <xTaskResumeAll+0x2c>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	603b      	str	r3, [r7, #0]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006660:	f000 fef0 	bl	8007444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006664:	4b38      	ldr	r3, [pc, #224]	; (8006748 <xTaskResumeAll+0x114>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	4a37      	ldr	r2, [pc, #220]	; (8006748 <xTaskResumeAll+0x114>)
 800666c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <xTaskResumeAll+0x114>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d161      	bne.n	800673a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006676:	4b35      	ldr	r3, [pc, #212]	; (800674c <xTaskResumeAll+0x118>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d05d      	beq.n	800673a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800667e:	e02e      	b.n	80066de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006680:	4b33      	ldr	r3, [pc, #204]	; (8006750 <xTaskResumeAll+0x11c>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3318      	adds	r3, #24
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe fd86 	bl	800519e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fd81 	bl	800519e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	2201      	movs	r2, #1
 80066a2:	409a      	lsls	r2, r3
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <xTaskResumeAll+0x120>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	4a2a      	ldr	r2, [pc, #168]	; (8006754 <xTaskResumeAll+0x120>)
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4a27      	ldr	r2, [pc, #156]	; (8006758 <xTaskResumeAll+0x124>)
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7fe fd0d 	bl	80050e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	4b23      	ldr	r3, [pc, #140]	; (800675c <xTaskResumeAll+0x128>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066d8:	4b21      	ldr	r3, [pc, #132]	; (8006760 <xTaskResumeAll+0x12c>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <xTaskResumeAll+0x11c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1cc      	bne.n	8006680 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ec:	f000 fb3e 	bl	8006d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066f0:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <xTaskResumeAll+0x130>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d010      	beq.n	800671e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066fc:	f000 f858 	bl	80067b0 <xTaskIncrementTick>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <xTaskResumeAll+0x12c>)
 8006708:	2201      	movs	r2, #1
 800670a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3b01      	subs	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f1      	bne.n	80066fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <xTaskResumeAll+0x130>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800671e:	4b10      	ldr	r3, [pc, #64]	; (8006760 <xTaskResumeAll+0x12c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006726:	2301      	movs	r3, #1
 8006728:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <xTaskResumeAll+0x134>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800673a:	f000 feb3 	bl	80074a4 <vPortExitCritical>

	return xAlreadyYielded;
 800673e:	68bb      	ldr	r3, [r7, #8]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000516c 	.word	0x2000516c
 800674c:	20005144 	.word	0x20005144
 8006750:	20005104 	.word	0x20005104
 8006754:	2000514c 	.word	0x2000514c
 8006758:	20005048 	.word	0x20005048
 800675c:	20005044 	.word	0x20005044
 8006760:	20005158 	.word	0x20005158
 8006764:	20005154 	.word	0x20005154
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <xTaskGetTickCount+0x1c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006778:	687b      	ldr	r3, [r7, #4]
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20005148 	.word	0x20005148

0800678c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006792:	f000 ff39 	bl	8007608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <xTaskGetTickCountFromISR+0x20>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a0:	683b      	ldr	r3, [r7, #0]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20005148 	.word	0x20005148

080067b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ba:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <xTaskIncrementTick+0x144>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 808e 	bne.w	80068e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067c4:	4b4c      	ldr	r3, [pc, #304]	; (80068f8 <xTaskIncrementTick+0x148>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067cc:	4a4a      	ldr	r2, [pc, #296]	; (80068f8 <xTaskIncrementTick+0x148>)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d120      	bne.n	800681a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067d8:	4b48      	ldr	r3, [pc, #288]	; (80068fc <xTaskIncrementTick+0x14c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	603b      	str	r3, [r7, #0]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <xTaskIncrementTick+0x46>
 80067f8:	4b40      	ldr	r3, [pc, #256]	; (80068fc <xTaskIncrementTick+0x14c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	4b40      	ldr	r3, [pc, #256]	; (8006900 <xTaskIncrementTick+0x150>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a3e      	ldr	r2, [pc, #248]	; (80068fc <xTaskIncrementTick+0x14c>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	4a3e      	ldr	r2, [pc, #248]	; (8006900 <xTaskIncrementTick+0x150>)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	4b3d      	ldr	r3, [pc, #244]	; (8006904 <xTaskIncrementTick+0x154>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a3c      	ldr	r2, [pc, #240]	; (8006904 <xTaskIncrementTick+0x154>)
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	f000 faa9 	bl	8006d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <xTaskIncrementTick+0x158>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	429a      	cmp	r2, r3
 8006822:	d348      	bcc.n	80068b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006824:	4b35      	ldr	r3, [pc, #212]	; (80068fc <xTaskIncrementTick+0x14c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682e:	4b36      	ldr	r3, [pc, #216]	; (8006908 <xTaskIncrementTick+0x158>)
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	601a      	str	r2, [r3, #0]
					break;
 8006836:	e03e      	b.n	80068b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006838:	4b30      	ldr	r3, [pc, #192]	; (80068fc <xTaskIncrementTick+0x14c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d203      	bcs.n	8006858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006850:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <xTaskIncrementTick+0x158>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006856:	e02e      	b.n	80068b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3304      	adds	r3, #4
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fc9e 	bl	800519e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	3318      	adds	r3, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fc95 	bl	800519e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	2201      	movs	r2, #1
 800687a:	409a      	lsls	r2, r3
 800687c:	4b23      	ldr	r3, [pc, #140]	; (800690c <xTaskIncrementTick+0x15c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	4a22      	ldr	r2, [pc, #136]	; (800690c <xTaskIncrementTick+0x15c>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <xTaskIncrementTick+0x160>)
 8006894:	441a      	add	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7fe fc21 	bl	80050e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <xTaskIncrementTick+0x164>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3b9      	bcc.n	8006824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b4:	e7b6      	b.n	8006824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068b6:	4b17      	ldr	r3, [pc, #92]	; (8006914 <xTaskIncrementTick+0x164>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4914      	ldr	r1, [pc, #80]	; (8006910 <xTaskIncrementTick+0x160>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d901      	bls.n	80068d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <xTaskIncrementTick+0x168>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e004      	b.n	80068ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068e0:	4b0e      	ldr	r3, [pc, #56]	; (800691c <xTaskIncrementTick+0x16c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a0d      	ldr	r2, [pc, #52]	; (800691c <xTaskIncrementTick+0x16c>)
 80068e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ea:	697b      	ldr	r3, [r7, #20]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	2000516c 	.word	0x2000516c
 80068f8:	20005148 	.word	0x20005148
 80068fc:	200050fc 	.word	0x200050fc
 8006900:	20005100 	.word	0x20005100
 8006904:	2000515c 	.word	0x2000515c
 8006908:	20005164 	.word	0x20005164
 800690c:	2000514c 	.word	0x2000514c
 8006910:	20005048 	.word	0x20005048
 8006914:	20005044 	.word	0x20005044
 8006918:	20005158 	.word	0x20005158
 800691c:	20005154 	.word	0x20005154

08006920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <vTaskSwitchContext+0xac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800692e:	4b28      	ldr	r3, [pc, #160]	; (80069d0 <vTaskSwitchContext+0xb0>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006934:	e044      	b.n	80069c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <vTaskSwitchContext+0xb0>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <vTaskSwitchContext+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	fab3 f383 	clz	r3, r3
 8006948:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	f1c3 031f 	rsb	r3, r3, #31
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	4921      	ldr	r1, [pc, #132]	; (80069d8 <vTaskSwitchContext+0xb8>)
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	607b      	str	r3, [r7, #4]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <vTaskSwitchContext+0x5a>
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <vTaskSwitchContext+0xb8>)
 8006988:	4413      	add	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3308      	adds	r3, #8
 800699e:	429a      	cmp	r2, r3
 80069a0:	d104      	bne.n	80069ac <vTaskSwitchContext+0x8c>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <vTaskSwitchContext+0xbc>)
 80069b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <vTaskSwitchContext+0xbc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	334c      	adds	r3, #76	; 0x4c
 80069bc:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <vTaskSwitchContext+0xc0>)
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	2000516c 	.word	0x2000516c
 80069d0:	20005158 	.word	0x20005158
 80069d4:	2000514c 	.word	0x2000514c
 80069d8:	20005048 	.word	0x20005048
 80069dc:	20005044 	.word	0x20005044
 80069e0:	2000008c 	.word	0x2000008c

080069e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <vTaskPlaceOnEventList+0x44>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fe fb8a 	bl	800512c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a18:	2101      	movs	r1, #1
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f000 fb82 	bl	8007124 <prvAddCurrentTaskToDelayedList>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20005044 	.word	0x20005044

08006a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60fb      	str	r3, [r7, #12]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe fb9e 	bl	800519e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a62:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <xTaskRemoveFromEventList+0xac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d11c      	bne.n	8006aa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fb95 	bl	800519e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	2201      	movs	r2, #1
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	4b17      	ldr	r3, [pc, #92]	; (8006adc <xTaskRemoveFromEventList+0xb0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <xTaskRemoveFromEventList+0xb0>)
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a13      	ldr	r2, [pc, #76]	; (8006ae0 <xTaskRemoveFromEventList+0xb4>)
 8006a94:	441a      	add	r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7fe fb21 	bl	80050e4 <vListInsertEnd>
 8006aa2:	e005      	b.n	8006ab0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	480e      	ldr	r0, [pc, #56]	; (8006ae4 <xTaskRemoveFromEventList+0xb8>)
 8006aac:	f7fe fb1a 	bl	80050e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <xTaskRemoveFromEventList+0xbc>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d905      	bls.n	8006aca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <xTaskRemoveFromEventList+0xc0>)
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e001      	b.n	8006ace <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ace:	697b      	ldr	r3, [r7, #20]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	2000516c 	.word	0x2000516c
 8006adc:	2000514c 	.word	0x2000514c
 8006ae0:	20005048 	.word	0x20005048
 8006ae4:	20005104 	.word	0x20005104
 8006ae8:	20005044 	.word	0x20005044
 8006aec:	20005158 	.word	0x20005158

08006af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <vTaskInternalSetTimeOutState+0x24>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <vTaskInternalSetTimeOutState+0x28>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	2000515c 	.word	0x2000515c
 8006b18:	20005148 	.word	0x20005148

08006b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	613b      	str	r3, [r7, #16]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b5e:	f000 fc71 	bl	8007444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <xTaskCheckForTimeOut+0xbc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d102      	bne.n	8006b82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e023      	b.n	8006bca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <xTaskCheckForTimeOut+0xc0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d007      	beq.n	8006b9e <xTaskCheckForTimeOut+0x82>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	e015      	b.n	8006bca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d20b      	bcs.n	8006bc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff9b 	bl	8006af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	e004      	b.n	8006bca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bca:	f000 fc6b 	bl	80074a4 <vPortExitCritical>

	return xReturn;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20005148 	.word	0x20005148
 8006bdc:	2000515c 	.word	0x2000515c

08006be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006be4:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <vTaskMissedYield+0x14>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20005158 	.word	0x20005158

08006bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c00:	f000 f852 	bl	8006ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <prvIdleTask+0x28>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d9f9      	bls.n	8006c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <prvIdleTask+0x2c>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c1c:	e7f0      	b.n	8006c00 <prvIdleTask+0x8>
 8006c1e:	bf00      	nop
 8006c20:	20005048 	.word	0x20005048
 8006c24:	e000ed04 	.word	0xe000ed04

08006c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	e00c      	b.n	8006c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <prvInitialiseTaskLists+0x60>)
 8006c40:	4413      	add	r3, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fa21 	bl	800508a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b06      	cmp	r3, #6
 8006c52:	d9ef      	bls.n	8006c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c54:	480d      	ldr	r0, [pc, #52]	; (8006c8c <prvInitialiseTaskLists+0x64>)
 8006c56:	f7fe fa18 	bl	800508a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c5a:	480d      	ldr	r0, [pc, #52]	; (8006c90 <prvInitialiseTaskLists+0x68>)
 8006c5c:	f7fe fa15 	bl	800508a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c60:	480c      	ldr	r0, [pc, #48]	; (8006c94 <prvInitialiseTaskLists+0x6c>)
 8006c62:	f7fe fa12 	bl	800508a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c66:	480c      	ldr	r0, [pc, #48]	; (8006c98 <prvInitialiseTaskLists+0x70>)
 8006c68:	f7fe fa0f 	bl	800508a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c6c:	480b      	ldr	r0, [pc, #44]	; (8006c9c <prvInitialiseTaskLists+0x74>)
 8006c6e:	f7fe fa0c 	bl	800508a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <prvInitialiseTaskLists+0x78>)
 8006c74:	4a05      	ldr	r2, [pc, #20]	; (8006c8c <prvInitialiseTaskLists+0x64>)
 8006c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <prvInitialiseTaskLists+0x7c>)
 8006c7a:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <prvInitialiseTaskLists+0x68>)
 8006c7c:	601a      	str	r2, [r3, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20005048 	.word	0x20005048
 8006c8c:	200050d4 	.word	0x200050d4
 8006c90:	200050e8 	.word	0x200050e8
 8006c94:	20005104 	.word	0x20005104
 8006c98:	20005118 	.word	0x20005118
 8006c9c:	20005130 	.word	0x20005130
 8006ca0:	200050fc 	.word	0x200050fc
 8006ca4:	20005100 	.word	0x20005100

08006ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cae:	e019      	b.n	8006ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cb0:	f000 fbc8 	bl	8007444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb4:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <prvCheckTasksWaitingTermination+0x50>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fa6c 	bl	800519e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <prvCheckTasksWaitingTermination+0x54>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <prvCheckTasksWaitingTermination+0x54>)
 8006cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <prvCheckTasksWaitingTermination+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <prvCheckTasksWaitingTermination+0x58>)
 8006cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cda:	f000 fbe3 	bl	80074a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f810 	bl	8006d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <prvCheckTasksWaitingTermination+0x58>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e1      	bne.n	8006cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20005118 	.word	0x20005118
 8006cfc:	20005144 	.word	0x20005144
 8006d00:	2000512c 	.word	0x2000512c

08006d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	334c      	adds	r3, #76	; 0x4c
 8006d10:	4618      	mov	r0, r3
 8006d12:	f010 fbeb 	bl	80174ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d108      	bne.n	8006d32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fd7b 	bl	8007820 <vPortFree>
				vPortFree( pxTCB );
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fd78 	bl	8007820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d30:	e018      	b.n	8006d64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d103      	bne.n	8006d44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fd6f 	bl	8007820 <vPortFree>
	}
 8006d42:	e00f      	b.n	8006d64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d00a      	beq.n	8006d64 <prvDeleteTCB+0x60>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60fb      	str	r3, [r7, #12]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <prvDeleteTCB+0x5e>
	}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <prvResetNextTaskUnblockTime+0x38>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d84:	e008      	b.n	8006d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <prvResetNextTaskUnblockTime+0x38>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	200050fc 	.word	0x200050fc
 8006da8:	20005164 	.word	0x20005164

08006dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006db2:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <xTaskGetSchedulerState+0x34>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	e008      	b.n	8006dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <xTaskGetSchedulerState+0x38>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	e001      	b.n	8006dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dd2:	687b      	ldr	r3, [r7, #4]
	}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20005150 	.word	0x20005150
 8006de4:	2000516c 	.word	0x2000516c

08006de8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d05e      	beq.n	8006ebc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e02:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <xTaskPriorityInherit+0xe0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d24e      	bcs.n	8006eaa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	db06      	blt.n	8006e22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e14:	4b2c      	ldr	r3, [pc, #176]	; (8006ec8 <xTaskPriorityInherit+0xe0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f1c3 0207 	rsb	r2, r3, #7
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6959      	ldr	r1, [r3, #20]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4a26      	ldr	r2, [pc, #152]	; (8006ecc <xTaskPriorityInherit+0xe4>)
 8006e34:	4413      	add	r3, r2
 8006e36:	4299      	cmp	r1, r3
 8006e38:	d12f      	bne.n	8006e9a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe f9ad 	bl	800519e <uxListRemove>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	2201      	movs	r2, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	43da      	mvns	r2, r3
 8006e56:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <xTaskPriorityInherit+0xe8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <xTaskPriorityInherit+0xe8>)
 8006e5e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <xTaskPriorityInherit+0xe0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	2201      	movs	r2, #1
 8006e70:	409a      	lsls	r2, r3
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <xTaskPriorityInherit+0xe8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <xTaskPriorityInherit+0xe8>)
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <xTaskPriorityInherit+0xe4>)
 8006e8a:	441a      	add	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f7fe f926 	bl	80050e4 <vListInsertEnd>
 8006e98:	e004      	b.n	8006ea4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <xTaskPriorityInherit+0xe0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e008      	b.n	8006ebc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eae:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <xTaskPriorityInherit+0xe0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d201      	bcs.n	8006ebc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
	}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20005044 	.word	0x20005044
 8006ecc:	20005048 	.word	0x20005048
 8006ed0:	2000514c 	.word	0x2000514c

08006ed4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d06e      	beq.n	8006fc8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eea:	4b3a      	ldr	r3, [pc, #232]	; (8006fd4 <xTaskPriorityDisinherit+0x100>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d00a      	beq.n	8006f0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60bb      	str	r3, [r7, #8]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	1e5a      	subs	r2, r3, #1
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d044      	beq.n	8006fc8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d140      	bne.n	8006fc8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f927 	bl	800519e <uxListRemove>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d115      	bne.n	8006f82 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	491f      	ldr	r1, [pc, #124]	; (8006fd8 <xTaskPriorityDisinherit+0x104>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskPriorityDisinherit+0xae>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	2201      	movs	r2, #1
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43da      	mvns	r2, r3
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <xTaskPriorityDisinherit+0x108>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <xTaskPriorityDisinherit+0x108>)
 8006f80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f1c3 0207 	rsb	r2, r3, #7
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <xTaskPriorityDisinherit+0x108>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <xTaskPriorityDisinherit+0x108>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <xTaskPriorityDisinherit+0x104>)
 8006fb6:	441a      	add	r2, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fe f890 	bl	80050e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fc8:	697b      	ldr	r3, [r7, #20]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20005044 	.word	0x20005044
 8006fd8:	20005048 	.word	0x20005048
 8006fdc:	2000514c 	.word	0x2000514c

08006fe0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d077      	beq.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d902      	bls.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e002      	b.n	800702c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	429a      	cmp	r2, r3
 8007034:	d058      	beq.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	429a      	cmp	r2, r3
 800703e:	d153      	bne.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007040:	4b2b      	ldr	r3, [pc, #172]	; (80070f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	429a      	cmp	r2, r3
 8007048:	d10a      	bne.n	8007060 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db04      	blt.n	800707e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f1c3 0207 	rsb	r2, r3, #7
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	6959      	ldr	r1, [r3, #20]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800708e:	4413      	add	r3, r2
 8007090:	4299      	cmp	r1, r3
 8007092:	d129      	bne.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe f880 	bl	800519e <uxListRemove>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	2201      	movs	r2, #1
 80070aa:	fa02 f303 	lsl.w	r3, r2, r3
 80070ae:	43da      	mvns	r2, r3
 80070b0:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4013      	ands	r3, r2
 80070b6:	4a10      	ldr	r2, [pc, #64]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	4a0b      	ldr	r2, [pc, #44]	; (80070f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a06      	ldr	r2, [pc, #24]	; (80070f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80070da:	441a      	add	r2, r3
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fd fffe 	bl	80050e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20005044 	.word	0x20005044
 80070f4:	20005048 	.word	0x20005048
 80070f8:	2000514c 	.word	0x2000514c

080070fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800710e:	3201      	adds	r2, #1
 8007110:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007112:	4b03      	ldr	r3, [pc, #12]	; (8007120 <pvTaskIncrementMutexHeldCount+0x24>)
 8007114:	681b      	ldr	r3, [r3, #0]
	}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20005044 	.word	0x20005044

08007124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800712e:	4b29      	ldr	r3, [pc, #164]	; (80071d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe f82f 	bl	800519e <uxListRemove>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10b      	bne.n	800715e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	2201      	movs	r2, #1
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43da      	mvns	r2, r3
 8007154:	4b21      	ldr	r3, [pc, #132]	; (80071dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4013      	ands	r3, r2
 800715a:	4a20      	ldr	r2, [pc, #128]	; (80071dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800715c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d10a      	bne.n	800717c <prvAddCurrentTaskToDelayedList+0x58>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	481a      	ldr	r0, [pc, #104]	; (80071e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007176:	f7fd ffb5 	bl	80050e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800717a:	e026      	b.n	80071ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007184:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d209      	bcs.n	80071a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007194:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7fd ffc3 	bl	800512c <vListInsert>
}
 80071a6:	e010      	b.n	80071ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7fd ffb9 	bl	800512c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d202      	bcs.n	80071ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6013      	str	r3, [r2, #0]
}
 80071ca:	bf00      	nop
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20005148 	.word	0x20005148
 80071d8:	20005044 	.word	0x20005044
 80071dc:	2000514c 	.word	0x2000514c
 80071e0:	20005130 	.word	0x20005130
 80071e4:	20005100 	.word	0x20005100
 80071e8:	200050fc 	.word	0x200050fc
 80071ec:	20005164 	.word	0x20005164

080071f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3b04      	subs	r3, #4
 8007200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3b04      	subs	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3b04      	subs	r3, #4
 800721e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007220:	4a0c      	ldr	r2, [pc, #48]	; (8007254 <pxPortInitialiseStack+0x64>)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3b14      	subs	r3, #20
 800722a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3b04      	subs	r3, #4
 8007236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f06f 0202 	mvn.w	r2, #2
 800723e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3b20      	subs	r3, #32
 8007244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	08007259 	.word	0x08007259

08007258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <prvTaskExitError+0x54>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d00a      	beq.n	8007282 <prvTaskExitError+0x2a>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	60fb      	str	r3, [r7, #12]
}
 800727e:	bf00      	nop
 8007280:	e7fe      	b.n	8007280 <prvTaskExitError+0x28>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60bb      	str	r3, [r7, #8]
}
 8007294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007296:	bf00      	nop
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0fc      	beq.n	8007298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000020 	.word	0x20000020

080072b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072b0:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <pxCurrentTCBConst2>)
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	6808      	ldr	r0, [r1, #0]
 80072b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	f380 8809 	msr	PSP, r0
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f04f 0000 	mov.w	r0, #0
 80072c6:	f380 8811 	msr	BASEPRI, r0
 80072ca:	4770      	bx	lr
 80072cc:	f3af 8000 	nop.w

080072d0 <pxCurrentTCBConst2>:
 80072d0:	20005044 	.word	0x20005044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072d8:	4808      	ldr	r0, [pc, #32]	; (80072fc <prvPortStartFirstTask+0x24>)
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f380 8808 	msr	MSP, r0
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8814 	msr	CONTROL, r0
 80072ea:	b662      	cpsie	i
 80072ec:	b661      	cpsie	f
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	df00      	svc	0
 80072f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072fa:	bf00      	nop
 80072fc:	e000ed08 	.word	0xe000ed08

08007300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007306:	4b46      	ldr	r3, [pc, #280]	; (8007420 <xPortStartScheduler+0x120>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a46      	ldr	r2, [pc, #280]	; (8007424 <xPortStartScheduler+0x124>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d10a      	bne.n	8007326 <xPortStartScheduler+0x26>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007326:	4b3e      	ldr	r3, [pc, #248]	; (8007420 <xPortStartScheduler+0x120>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a3f      	ldr	r2, [pc, #252]	; (8007428 <xPortStartScheduler+0x128>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10a      	bne.n	8007346 <xPortStartScheduler+0x46>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60fb      	str	r3, [r7, #12]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007346:	4b39      	ldr	r3, [pc, #228]	; (800742c <xPortStartScheduler+0x12c>)
 8007348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	22ff      	movs	r2, #255	; 0xff
 8007356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007368:	b2da      	uxtb	r2, r3
 800736a:	4b31      	ldr	r3, [pc, #196]	; (8007430 <xPortStartScheduler+0x130>)
 800736c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800736e:	4b31      	ldr	r3, [pc, #196]	; (8007434 <xPortStartScheduler+0x134>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007374:	e009      	b.n	800738a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007376:	4b2f      	ldr	r3, [pc, #188]	; (8007434 <xPortStartScheduler+0x134>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a2d      	ldr	r2, [pc, #180]	; (8007434 <xPortStartScheduler+0x134>)
 800737e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d0ef      	beq.n	8007376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007396:	4b27      	ldr	r3, [pc, #156]	; (8007434 <xPortStartScheduler+0x134>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1c3 0307 	rsb	r3, r3, #7
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d00a      	beq.n	80073b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	60bb      	str	r3, [r7, #8]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073b8:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <xPortStartScheduler+0x134>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <xPortStartScheduler+0x134>)
 80073c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073c2:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <xPortStartScheduler+0x134>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <xPortStartScheduler+0x134>)
 80073cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073d6:	4b18      	ldr	r3, [pc, #96]	; (8007438 <xPortStartScheduler+0x138>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <xPortStartScheduler+0x138>)
 80073dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073e2:	4b15      	ldr	r3, [pc, #84]	; (8007438 <xPortStartScheduler+0x138>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a14      	ldr	r2, [pc, #80]	; (8007438 <xPortStartScheduler+0x138>)
 80073e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073ee:	f000 f8dd 	bl	80075ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <xPortStartScheduler+0x13c>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073f8:	f000 f8fc 	bl	80075f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073fc:	4b10      	ldr	r3, [pc, #64]	; (8007440 <xPortStartScheduler+0x140>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0f      	ldr	r2, [pc, #60]	; (8007440 <xPortStartScheduler+0x140>)
 8007402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007408:	f7ff ff66 	bl	80072d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800740c:	f7ff fa88 	bl	8006920 <vTaskSwitchContext>
	prvTaskExitError();
 8007410:	f7ff ff22 	bl	8007258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	e000ed00 	.word	0xe000ed00
 8007424:	410fc271 	.word	0x410fc271
 8007428:	410fc270 	.word	0x410fc270
 800742c:	e000e400 	.word	0xe000e400
 8007430:	20005170 	.word	0x20005170
 8007434:	20005174 	.word	0x20005174
 8007438:	e000ed20 	.word	0xe000ed20
 800743c:	20000020 	.word	0x20000020
 8007440:	e000ef34 	.word	0xe000ef34

08007444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	607b      	str	r3, [r7, #4]
}
 800745c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <vPortEnterCritical+0x58>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <vPortEnterCritical+0x58>)
 8007466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <vPortEnterCritical+0x58>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d10f      	bne.n	8007490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <vPortEnterCritical+0x5c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <vPortEnterCritical+0x4c>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	603b      	str	r3, [r7, #0]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <vPortEnterCritical+0x4a>
	}
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000020 	.word	0x20000020
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074aa:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <vPortExitCritical+0x50>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <vPortExitCritical+0x24>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	607b      	str	r3, [r7, #4]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <vPortExitCritical+0x50>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <vPortExitCritical+0x50>)
 80074d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074d2:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <vPortExitCritical+0x50>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <vPortExitCritical+0x42>
 80074da:	2300      	movs	r3, #0
 80074dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f383 8811 	msr	BASEPRI, r3
}
 80074e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000020 	.word	0x20000020
	...

08007500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007500:	f3ef 8009 	mrs	r0, PSP
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <pxCurrentTCBConst>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	f01e 0f10 	tst.w	lr, #16
 8007510:	bf08      	it	eq
 8007512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007524:	f380 8811 	msr	BASEPRI, r0
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f7ff f9f6 	bl	8006920 <vTaskSwitchContext>
 8007534:	f04f 0000 	mov.w	r0, #0
 8007538:	f380 8811 	msr	BASEPRI, r0
 800753c:	bc09      	pop	{r0, r3}
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007546:	f01e 0f10 	tst.w	lr, #16
 800754a:	bf08      	it	eq
 800754c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007550:	f380 8809 	msr	PSP, r0
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst>:
 8007560:	20005044 	.word	0x20005044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007582:	f7ff f915 	bl	80067b0 <xTaskIncrementTick>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <SysTick_Handler+0x40>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f383 8811 	msr	BASEPRI, r3
}
 800759e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <vPortSetupTimerInterrupt+0x34>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075b6:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <vPortSetupTimerInterrupt+0x38>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <vPortSetupTimerInterrupt+0x3c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <vPortSetupTimerInterrupt+0x40>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <vPortSetupTimerInterrupt+0x44>)
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ce:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <vPortSetupTimerInterrupt+0x34>)
 80075d0:	2207      	movs	r2, #7
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	e000e010 	.word	0xe000e010
 80075e4:	e000e018 	.word	0xe000e018
 80075e8:	20000000 	.word	0x20000000
 80075ec:	10624dd3 	.word	0x10624dd3
 80075f0:	e000e014 	.word	0xe000e014

080075f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007604 <vPortEnableVFP+0x10>
 80075f8:	6801      	ldr	r1, [r0, #0]
 80075fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075fe:	6001      	str	r1, [r0, #0]
 8007600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007602:	bf00      	nop
 8007604:	e000ed88 	.word	0xe000ed88

08007608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800760e:	f3ef 8305 	mrs	r3, IPSR
 8007612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b0f      	cmp	r3, #15
 8007618:	d914      	bls.n	8007644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <vPortValidateInterruptPriority+0x70>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007624:	4b15      	ldr	r3, [pc, #84]	; (800767c <vPortValidateInterruptPriority+0x74>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	7afa      	ldrb	r2, [r7, #11]
 800762a:	429a      	cmp	r2, r3
 800762c:	d20a      	bcs.n	8007644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007644:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <vPortValidateInterruptPriority+0x78>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <vPortValidateInterruptPriority+0x7c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d90a      	bls.n	800766a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	603b      	str	r3, [r7, #0]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <vPortValidateInterruptPriority+0x60>
	}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	e000e3f0 	.word	0xe000e3f0
 800767c:	20005170 	.word	0x20005170
 8007680:	e000ed0c 	.word	0xe000ed0c
 8007684:	20005174 	.word	0x20005174

08007688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007694:	f7fe ffc0 	bl	8006618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007698:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <pvPortMalloc+0x180>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076a0:	f000 f920 	bl	80078e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <pvPortMalloc+0x184>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 8093 	bne.w	80077d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01d      	beq.n	80076f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <pvPortMalloc+0x6c>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	617b      	str	r3, [r7, #20]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d06e      	beq.n	80077d8 <pvPortMalloc+0x150>
 80076fa:	4b45      	ldr	r3, [pc, #276]	; (8007810 <pvPortMalloc+0x188>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d869      	bhi.n	80077d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007704:	4b43      	ldr	r3, [pc, #268]	; (8007814 <pvPortMalloc+0x18c>)
 8007706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007708:	4b42      	ldr	r3, [pc, #264]	; (8007814 <pvPortMalloc+0x18c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	e004      	b.n	800771a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <pvPortMalloc+0xa4>
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f1      	bne.n	8007710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <pvPortMalloc+0x180>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	429a      	cmp	r2, r3
 8007734:	d050      	beq.n	80077d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	4413      	add	r3, r2
 800773e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	429a      	cmp	r2, r3
 8007756:	d91f      	bls.n	8007798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <pvPortMalloc+0xf8>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	613b      	str	r3, [r7, #16]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007792:	69b8      	ldr	r0, [r7, #24]
 8007794:	f000 f908 	bl	80079a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <pvPortMalloc+0x188>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <pvPortMalloc+0x188>)
 80077a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <pvPortMalloc+0x188>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <pvPortMalloc+0x190>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d203      	bcs.n	80077ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <pvPortMalloc+0x188>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <pvPortMalloc+0x190>)
 80077b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x184>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <pvPortMalloc+0x194>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a11      	ldr	r2, [pc, #68]	; (800781c <pvPortMalloc+0x194>)
 80077d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077d8:	f7fe ff2c 	bl	8006634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <pvPortMalloc+0x174>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <pvPortMalloc+0x172>
	return pvReturn;
 80077fc:	69fb      	ldr	r3, [r7, #28]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	2000d180 	.word	0x2000d180
 800780c:	2000d194 	.word	0x2000d194
 8007810:	2000d184 	.word	0x2000d184
 8007814:	2000d178 	.word	0x2000d178
 8007818:	2000d188 	.word	0x2000d188
 800781c:	2000d18c 	.word	0x2000d18c

08007820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04d      	beq.n	80078ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007832:	2308      	movs	r3, #8
 8007834:	425b      	negs	r3, r3
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <vPortFree+0xb8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <vPortFree+0x44>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <vPortFree+0x62>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60bb      	str	r3, [r7, #8]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <vPortFree+0xb8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01e      	beq.n	80078ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11a      	bne.n	80078ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <vPortFree+0xb8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078a8:	f7fe feb6 	bl	8006618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <vPortFree+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <vPortFree+0xbc>)
 80078b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f000 f874 	bl	80079a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <vPortFree+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vPortFree+0xc0>)
 80078c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ca:	f7fe feb3 	bl	8006634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2000d194 	.word	0x2000d194
 80078dc:	2000d184 	.word	0x2000d184
 80078e0:	2000d190 	.word	0x2000d190

080078e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <prvHeapInit+0xac>)
 80078f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <prvHeapInit+0xac>)
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <prvHeapInit+0xb0>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <prvHeapInit+0xb0>)
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007930:	2208      	movs	r2, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <prvHeapInit+0xb4>)
 8007944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <prvHeapInit+0xb4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <prvHeapInit+0xb4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvHeapInit+0xb4>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <prvHeapInit+0xb8>)
 8007972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <prvHeapInit+0xbc>)
 800797a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <prvHeapInit+0xc0>)
 800797e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20005178 	.word	0x20005178
 8007994:	2000d178 	.word	0x2000d178
 8007998:	2000d180 	.word	0x2000d180
 800799c:	2000d188 	.word	0x2000d188
 80079a0:	2000d184 	.word	0x2000d184
 80079a4:	2000d194 	.word	0x2000d194

080079a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <prvInsertBlockIntoFreeList+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <prvInsertBlockIntoFreeList+0x14>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d8f7      	bhi.n	80079b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d108      	bne.n	80079ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d118      	bne.n	8007a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d00d      	beq.n	8007a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e008      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000d178 	.word	0x2000d178
 8007a58:	2000d180 	.word	0x2000d180

08007a5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 faa3 	bl	8009fbc <tcpip_send_msg_wait_sem>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007a88:	e001      	b.n	8007a8e <netconn_apimsg+0x32>
  }
  return err;
 8007a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08c      	sub	sp, #48	; 0x30
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	603a      	str	r2, [r7, #0]
 8007aa2:	71fb      	strb	r3, [r7, #7]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 f923 	bl	8008cf8 <netconn_alloc>
 8007ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d054      	beq.n	8007b64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007aba:	79bb      	ldrb	r3, [r7, #6]
 8007abc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007ac2:	f107 0308 	add.w	r3, r7, #8
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4829      	ldr	r0, [pc, #164]	; (8007b70 <netconn_new_with_proto_and_callback+0xd8>)
 8007aca:	f7ff ffc7 	bl	8007a5c <netconn_apimsg>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007ad4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d043      	beq.n	8007b64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <netconn_new_with_proto_and_callback+0x58>
 8007ae4:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <netconn_new_with_proto_and_callback+0xdc>)
 8007ae6:	22a3      	movs	r2, #163	; 0xa3
 8007ae8:	4923      	ldr	r1, [pc, #140]	; (8007b78 <netconn_new_with_proto_and_callback+0xe0>)
 8007aea:	4824      	ldr	r0, [pc, #144]	; (8007b7c <netconn_new_with_proto_and_callback+0xe4>)
 8007aec:	f00f fc80 	bl	80173f0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	3310      	adds	r3, #16
 8007af4:	4618      	mov	r0, r3
 8007af6:	f00f fa54 	bl	8016fa2 <sys_mbox_valid>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <netconn_new_with_proto_and_callback+0x74>
 8007b00:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <netconn_new_with_proto_and_callback+0xdc>)
 8007b02:	22a4      	movs	r2, #164	; 0xa4
 8007b04:	491e      	ldr	r1, [pc, #120]	; (8007b80 <netconn_new_with_proto_and_callback+0xe8>)
 8007b06:	481d      	ldr	r0, [pc, #116]	; (8007b7c <netconn_new_with_proto_and_callback+0xe4>)
 8007b08:	f00f fc72 	bl	80173f0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	3314      	adds	r3, #20
 8007b10:	4618      	mov	r0, r3
 8007b12:	f00f fa46 	bl	8016fa2 <sys_mbox_valid>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <netconn_new_with_proto_and_callback+0x90>
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <netconn_new_with_proto_and_callback+0xdc>)
 8007b1e:	22a6      	movs	r2, #166	; 0xa6
 8007b20:	4918      	ldr	r1, [pc, #96]	; (8007b84 <netconn_new_with_proto_and_callback+0xec>)
 8007b22:	4816      	ldr	r0, [pc, #88]	; (8007b7c <netconn_new_with_proto_and_callback+0xe4>)
 8007b24:	f00f fc64 	bl	80173f0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f00f fac9 	bl	80170c4 <sys_sem_valid>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <netconn_new_with_proto_and_callback+0xac>
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <netconn_new_with_proto_and_callback+0xdc>)
 8007b3a:	22a9      	movs	r2, #169	; 0xa9
 8007b3c:	4912      	ldr	r1, [pc, #72]	; (8007b88 <netconn_new_with_proto_and_callback+0xf0>)
 8007b3e:	480f      	ldr	r0, [pc, #60]	; (8007b7c <netconn_new_with_proto_and_callback+0xe4>)
 8007b40:	f00f fc56 	bl	80173f0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	330c      	adds	r3, #12
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f00f faae 	bl	80170aa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	3310      	adds	r3, #16
 8007b52:	4618      	mov	r0, r3
 8007b54:	f00f f99e 	bl	8016e94 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b5a:	2007      	movs	r0, #7
 8007b5c:	f002 ffdc 	bl	800ab18 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e000      	b.n	8007b66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3730      	adds	r7, #48	; 0x30
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	08008ccd 	.word	0x08008ccd
 8007b74:	080183b0 	.word	0x080183b0
 8007b78:	080183e4 	.word	0x080183e4
 8007b7c:	08018408 	.word	0x08018408
 8007b80:	08018430 	.word	0x08018430
 8007b84:	08018448 	.word	0x08018448
 8007b88:	0801846c 	.word	0x0801846c

08007b8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	; 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e014      	b.n	8007bc8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007ba2:	2329      	movs	r3, #41	; 0x29
 8007ba4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	4619      	mov	r1, r3
 8007bac:	4808      	ldr	r0, [pc, #32]	; (8007bd0 <netconn_prepare_delete+0x44>)
 8007bae:	f7ff ff55 	bl	8007a5c <netconn_apimsg>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007bb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <netconn_prepare_delete+0x3a>
    return err;
 8007bc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bc4:	e000      	b.n	8007bc8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3730      	adds	r7, #48	; 0x30
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	08009239 	.word	0x08009239

08007bd4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <netconn_delete+0x12>
    return ERR_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e00d      	b.n	8007c02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff ffd0 	bl	8007b8c <netconn_prepare_delete>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <netconn_delete+0x2a>
    netconn_free(conn);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 f8eb 	bl	8008dd4 <netconn_free>
  }
  return err;
 8007bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08e      	sub	sp, #56	; 0x38
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <netconn_bind+0x28>
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <netconn_bind+0x5c>)
 8007c22:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007c26:	4911      	ldr	r1, [pc, #68]	; (8007c6c <netconn_bind+0x60>)
 8007c28:	4811      	ldr	r0, [pc, #68]	; (8007c70 <netconn_bind+0x64>)
 8007c2a:	f00f fbe1 	bl	80173f0 <iprintf>
 8007c2e:	f06f 030f 	mvn.w	r3, #15
 8007c32:	e015      	b.n	8007c60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <netconn_bind+0x68>)
 8007c3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007c4a:	f107 0314 	add.w	r3, r7, #20
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4809      	ldr	r0, [pc, #36]	; (8007c78 <netconn_bind+0x6c>)
 8007c52:	f7ff ff03 	bl	8007a5c <netconn_apimsg>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007c5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3738      	adds	r7, #56	; 0x38
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	080183b0 	.word	0x080183b0
 8007c6c:	080184e8 	.word	0x080184e8
 8007c70:	08018408 	.word	0x08018408
 8007c74:	0801bd68 	.word	0x0801bd68
 8007c78:	08009401 	.word	0x08009401

08007c7c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <netconn_listen_with_backlog+0x26>
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <netconn_listen_with_backlog+0x48>)
 8007c90:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007c94:	490c      	ldr	r1, [pc, #48]	; (8007cc8 <netconn_listen_with_backlog+0x4c>)
 8007c96:	480d      	ldr	r0, [pc, #52]	; (8007ccc <netconn_listen_with_backlog+0x50>)
 8007c98:	f00f fbaa 	bl	80173f0 <iprintf>
 8007c9c:	f06f 030f 	mvn.w	r3, #15
 8007ca0:	e00c      	b.n	8007cbc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007ca6:	f107 030c 	add.w	r3, r7, #12
 8007caa:	4619      	mov	r1, r3
 8007cac:	4808      	ldr	r0, [pc, #32]	; (8007cd0 <netconn_listen_with_backlog+0x54>)
 8007cae:	f7ff fed5 	bl	8007a5c <netconn_apimsg>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3730      	adds	r7, #48	; 0x30
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	080183b0 	.word	0x080183b0
 8007cc8:	08018568 	.word	0x08018568
 8007ccc:	08018408 	.word	0x08018408
 8007cd0:	08009475 	.word	0x08009475

08007cd4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <netconn_accept+0x24>
 8007ce4:	4b3d      	ldr	r3, [pc, #244]	; (8007ddc <netconn_accept+0x108>)
 8007ce6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007cea:	493d      	ldr	r1, [pc, #244]	; (8007de0 <netconn_accept+0x10c>)
 8007cec:	483d      	ldr	r0, [pc, #244]	; (8007de4 <netconn_accept+0x110>)
 8007cee:	f00f fb7f 	bl	80173f0 <iprintf>
 8007cf2:	f06f 030f 	mvn.w	r3, #15
 8007cf6:	e06c      	b.n	8007dd2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <netconn_accept+0x44>
 8007d04:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <netconn_accept+0x108>)
 8007d06:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007d0a:	4937      	ldr	r1, [pc, #220]	; (8007de8 <netconn_accept+0x114>)
 8007d0c:	4835      	ldr	r0, [pc, #212]	; (8007de4 <netconn_accept+0x110>)
 8007d0e:	f00f fb6f 	bl	80173f0 <iprintf>
 8007d12:	f06f 030f 	mvn.w	r3, #15
 8007d16:	e05c      	b.n	8007dd2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fb6c 	bl	80083f6 <netconn_err>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d2e:	e050      	b.n	8007dd2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3314      	adds	r3, #20
 8007d34:	4618      	mov	r0, r3
 8007d36:	f00f f934 	bl	8016fa2 <sys_mbox_valid>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <netconn_accept+0x78>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7f1b      	ldrb	r3, [r3, #28]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007d4c:	f06f 030e 	mvn.w	r3, #14
 8007d50:	e03f      	b.n	8007dd2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7f1b      	ldrb	r3, [r3, #28]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3314      	adds	r3, #20
 8007d62:	f107 020c 	add.w	r2, r7, #12
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f00f f8fe 	bl	8016f6a <sys_arch_mbox_tryfetch>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d10a      	bne.n	8007d8c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007d76:	f06f 0306 	mvn.w	r3, #6
 8007d7a:	e02a      	b.n	8007dd2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	f107 010c 	add.w	r1, r7, #12
 8007d84:	2200      	movs	r2, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f00f f8b0 	bl	8016eec <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <netconn_accept+0xcc>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f107 0213 	add.w	r2, r7, #19
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fb75 	bl	8008498 <lwip_netconn_is_err_msg>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007db8:	e00b      	b.n	8007dd2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007dc0:	f06f 030e 	mvn.w	r3, #14
 8007dc4:	e005      	b.n	8007dd2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007dd0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	080183b0 	.word	0x080183b0
 8007de0:	08018588 	.word	0x08018588
 8007de4:	08018408 	.word	0x08018408
 8007de8:	080185a8 	.word	0x080185a8

08007dec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <netconn_recv_data+0x2c>
 8007e04:	4b58      	ldr	r3, [pc, #352]	; (8007f68 <netconn_recv_data+0x17c>)
 8007e06:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007e0a:	4958      	ldr	r1, [pc, #352]	; (8007f6c <netconn_recv_data+0x180>)
 8007e0c:	4858      	ldr	r0, [pc, #352]	; (8007f70 <netconn_recv_data+0x184>)
 8007e0e:	f00f faef 	bl	80173f0 <iprintf>
 8007e12:	f06f 030f 	mvn.w	r3, #15
 8007e16:	e0a2      	b.n	8007f5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <netconn_recv_data+0x4c>
 8007e24:	4b50      	ldr	r3, [pc, #320]	; (8007f68 <netconn_recv_data+0x17c>)
 8007e26:	f240 224a 	movw	r2, #586	; 0x24a
 8007e2a:	4952      	ldr	r1, [pc, #328]	; (8007f74 <netconn_recv_data+0x188>)
 8007e2c:	4850      	ldr	r0, [pc, #320]	; (8007f70 <netconn_recv_data+0x184>)
 8007e2e:	f00f fadf 	bl	80173f0 <iprintf>
 8007e32:	f06f 030f 	mvn.w	r3, #15
 8007e36:	e092      	b.n	8007f5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f00f f8b0 	bl	8016fa2 <sys_mbox_valid>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10e      	bne.n	8007e66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fad4 	bl	80083f6 <netconn_err>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007e52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007e5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007e5e:	e07e      	b.n	8007f5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007e60:	f06f 030a 	mvn.w	r3, #10
 8007e64:	e07b      	b.n	8007f5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	7f1b      	ldrb	r3, [r3, #28]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10f      	bne.n	8007e92 <netconn_recv_data+0xa6>
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	7f1b      	ldrb	r3, [r3, #28]
 8007e80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d023      	beq.n	8007eda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3310      	adds	r3, #16
 8007e96:	f107 0218 	add.w	r2, r7, #24
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f00f f864 	bl	8016f6a <sys_arch_mbox_tryfetch>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d11f      	bne.n	8007eea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 faa3 	bl	80083f6 <netconn_err>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007eb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007ebc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007ec0:	e04d      	b.n	8007f5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	7f1b      	ldrb	r3, [r3, #28]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007ece:	f06f 030a 	mvn.w	r3, #10
 8007ed2:	e044      	b.n	8007f5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007ed4:	f06f 0306 	mvn.w	r3, #6
 8007ed8:	e041      	b.n	8007f5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3310      	adds	r3, #16
 8007ede:	f107 0118 	add.w	r1, r7, #24
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f00f f801 	bl	8016eec <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d117      	bne.n	8007f26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f107 0217 	add.w	r2, r7, #23
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 faca 	bl	8008498 <lwip_netconn_is_err_msg>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d009      	beq.n	8007f1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f0e:	f113 0f0f 	cmn.w	r3, #15
 8007f12:	d101      	bne.n	8007f18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e022      	b.n	8007f5e <netconn_recv_data+0x172>
      }
      return err;
 8007f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f1c:	e01f      	b.n	8007f5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	891b      	ldrh	r3, [r3, #8]
 8007f22:	83fb      	strh	r3, [r7, #30]
 8007f24:	e00d      	b.n	8007f42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <netconn_recv_data+0x14e>
 8007f2c:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <netconn_recv_data+0x17c>)
 8007f2e:	f240 2291 	movw	r2, #657	; 0x291
 8007f32:	4911      	ldr	r1, [pc, #68]	; (8007f78 <netconn_recv_data+0x18c>)
 8007f34:	480e      	ldr	r0, [pc, #56]	; (8007f70 <netconn_recv_data+0x184>)
 8007f36:	f00f fa5b 	bl	80173f0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	891b      	ldrh	r3, [r3, #8]
 8007f40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <netconn_recv_data+0x16a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	8bfa      	ldrh	r2, [r7, #30]
 8007f50:	2101      	movs	r1, #1
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	080183b0 	.word	0x080183b0
 8007f6c:	080185c8 	.word	0x080185c8
 8007f70:	08018408 	.word	0x08018408
 8007f74:	080185e8 	.word	0x080185e8
 8007f78:	08018604 	.word	0x08018604

08007f7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <netconn_tcp_recvd_msg+0x1e>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d009      	beq.n	8007fae <netconn_tcp_recvd_msg+0x32>
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <netconn_tcp_recvd_msg+0x50>)
 8007f9c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007fa0:	490b      	ldr	r1, [pc, #44]	; (8007fd0 <netconn_tcp_recvd_msg+0x54>)
 8007fa2:	480c      	ldr	r0, [pc, #48]	; (8007fd4 <netconn_tcp_recvd_msg+0x58>)
 8007fa4:	f00f fa24 	bl	80173f0 <iprintf>
 8007fa8:	f06f 030f 	mvn.w	r3, #15
 8007fac:	e00a      	b.n	8007fc4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4806      	ldr	r0, [pc, #24]	; (8007fd8 <netconn_tcp_recvd_msg+0x5c>)
 8007fbe:	f7ff fd4d 	bl	8007a5c <netconn_apimsg>
 8007fc2:	4603      	mov	r3, r0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	080183b0 	.word	0x080183b0
 8007fd0:	08018610 	.word	0x08018610
 8007fd4:	08018408 	.word	0x08018408
 8007fd8:	080095a5 	.word	0x080095a5

08007fdc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b090      	sub	sp, #64	; 0x40
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3310      	adds	r3, #16
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f00e ffd7 	bl	8016fa2 <sys_mbox_valid>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007ffa:	f06f 030a 	mvn.w	r3, #10
 8007ffe:	e06d      	b.n	80080dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	7f1b      	ldrb	r3, [r3, #28]
 8008004:	b25b      	sxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	da07      	bge.n	800801a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	7f1b      	ldrb	r3, [r3, #28]
 800800e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008012:	b2da      	uxtb	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008018:	e039      	b.n	800808e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	461a      	mov	r2, r3
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fee3 	bl	8007dec <netconn_recv_data>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800802c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008034:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008038:	e050      	b.n	80080dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10e      	bne.n	8008068 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <netconn_recv_data_tcp+0x7a>
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	891b      	ldrh	r3, [r3, #8]
 8008054:	e000      	b.n	8008058 <netconn_recv_data_tcp+0x7c>
 8008056:	2301      	movs	r3, #1
 8008058:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800805a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800805c:	f107 0214 	add.w	r2, r7, #20
 8008060:	4619      	mov	r1, r3
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f7ff ff8a 	bl	8007f7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	2b00      	cmp	r3, #0
 800806c:	d134      	bne.n	80080d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	7f1b      	ldrb	r3, [r3, #28]
 800807c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008080:	b2da      	uxtb	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008086:	f06f 0306 	mvn.w	r3, #6
 800808a:	e027      	b.n	80080dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800808c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <netconn_recv_data_tcp+0xc6>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2200      	movs	r2, #0
 800809c:	2101      	movs	r1, #1
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10f      	bne.n	80080ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f9a3 	bl	80083f6 <netconn_err>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80080b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <netconn_recv_data_tcp+0xe8>
          return err;
 80080be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080c2:	e00b      	b.n	80080dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80080c4:	f06f 030d 	mvn.w	r3, #13
 80080c8:	e008      	b.n	80080dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80080ca:	2101      	movs	r1, #1
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f955 	bl	800837c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80080d2:	f06f 030e 	mvn.w	r3, #14
 80080d6:	e001      	b.n	80080dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80080d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3740      	adds	r7, #64	; 0x40
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d109      	bne.n	800810c <netconn_recv+0x28>
 80080f8:	4b32      	ldr	r3, [pc, #200]	; (80081c4 <netconn_recv+0xe0>)
 80080fa:	f240 3263 	movw	r2, #867	; 0x363
 80080fe:	4932      	ldr	r1, [pc, #200]	; (80081c8 <netconn_recv+0xe4>)
 8008100:	4832      	ldr	r0, [pc, #200]	; (80081cc <netconn_recv+0xe8>)
 8008102:	f00f f975 	bl	80173f0 <iprintf>
 8008106:	f06f 030f 	mvn.w	r3, #15
 800810a:	e056      	b.n	80081ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <netconn_recv+0x48>
 8008118:	4b2a      	ldr	r3, [pc, #168]	; (80081c4 <netconn_recv+0xe0>)
 800811a:	f240 3265 	movw	r2, #869	; 0x365
 800811e:	492c      	ldr	r1, [pc, #176]	; (80081d0 <netconn_recv+0xec>)
 8008120:	482a      	ldr	r0, [pc, #168]	; (80081cc <netconn_recv+0xe8>)
 8008122:	f00f f965 	bl	80173f0 <iprintf>
 8008126:	f06f 030f 	mvn.w	r3, #15
 800812a:	e046      	b.n	80081ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008134:	2b10      	cmp	r3, #16
 8008136:	d13a      	bne.n	80081ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800813c:	2006      	movs	r0, #6
 800813e:	f002 fc75 	bl	800aa2c <memp_malloc>
 8008142:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <netconn_recv+0x6c>
      return ERR_MEM;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	e034      	b.n	80081ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008150:	f107 030c 	add.w	r3, r7, #12
 8008154:	2200      	movs	r2, #0
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ff3f 	bl	8007fdc <netconn_recv_data_tcp>
 800815e:	4603      	mov	r3, r0
 8008160:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008162:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d006      	beq.n	8008178 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	2006      	movs	r0, #6
 800816e:	f002 fcd3 	bl	800ab18 <memp_free>
      return err;
 8008172:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008176:	e020      	b.n	80081ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <netconn_recv+0xa8>
 800817e:	4b11      	ldr	r3, [pc, #68]	; (80081c4 <netconn_recv+0xe0>)
 8008180:	f240 3279 	movw	r2, #889	; 0x379
 8008184:	4913      	ldr	r1, [pc, #76]	; (80081d4 <netconn_recv+0xf0>)
 8008186:	4811      	ldr	r0, [pc, #68]	; (80081cc <netconn_recv+0xe8>)
 8008188:	f00f f932 	bl	80173f0 <iprintf>

    buf->p = p;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2200      	movs	r2, #0
 800819c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e005      	b.n	80081ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff fe1a 	bl	8007dec <netconn_recv_data>
 80081b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	080183b0 	.word	0x080183b0
 80081c8:	080185c8 	.word	0x080185c8
 80081cc:	08018408 	.word	0x08018408
 80081d0:	080185e8 	.word	0x080185e8
 80081d4:	08018660 	.word	0x08018660

080081d8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	f107 0110 	add.w	r1, r7, #16
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	2201      	movs	r2, #1
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f805 	bl	800820c <netconn_write_vectors_partly>
 8008202:	4603      	mov	r3, r0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b092      	sub	sp, #72	; 0x48
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4611      	mov	r1, r2
 8008218:	461a      	mov	r2, r3
 800821a:	460b      	mov	r3, r1
 800821c:	80fb      	strh	r3, [r7, #6]
 800821e:	4613      	mov	r3, r2
 8008220:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <netconn_write_vectors_partly+0x30>
 8008228:	4b4e      	ldr	r3, [pc, #312]	; (8008364 <netconn_write_vectors_partly+0x158>)
 800822a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800822e:	494e      	ldr	r1, [pc, #312]	; (8008368 <netconn_write_vectors_partly+0x15c>)
 8008230:	484e      	ldr	r0, [pc, #312]	; (800836c <netconn_write_vectors_partly+0x160>)
 8008232:	f00f f8dd 	bl	80173f0 <iprintf>
 8008236:	f06f 030f 	mvn.w	r3, #15
 800823a:	e08e      	b.n	800835a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008244:	2b10      	cmp	r3, #16
 8008246:	d009      	beq.n	800825c <netconn_write_vectors_partly+0x50>
 8008248:	4b46      	ldr	r3, [pc, #280]	; (8008364 <netconn_write_vectors_partly+0x158>)
 800824a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800824e:	4948      	ldr	r1, [pc, #288]	; (8008370 <netconn_write_vectors_partly+0x164>)
 8008250:	4846      	ldr	r0, [pc, #280]	; (800836c <netconn_write_vectors_partly+0x160>)
 8008252:	f00f f8cd 	bl	80173f0 <iprintf>
 8008256:	f06f 0305 	mvn.w	r3, #5
 800825a:	e07e      	b.n	800835a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	7f1b      	ldrb	r3, [r3, #28]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <netconn_write_vectors_partly+0x66>
 8008268:	797b      	ldrb	r3, [r7, #5]
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <netconn_write_vectors_partly+0x6a>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <netconn_write_vectors_partly+0x6c>
 8008276:	2300      	movs	r3, #0
 8008278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800827c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <netconn_write_vectors_partly+0x84>
 8008284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800828a:	f06f 0305 	mvn.w	r3, #5
 800828e:	e064      	b.n	800835a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008294:	2300      	movs	r3, #0
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
 8008298:	e015      	b.n	80082c6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800829a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a6:	4413      	add	r3, r2
 80082a8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80082aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d202      	bcs.n	80082c0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80082ba:	f06f 0305 	mvn.w	r3, #5
 80082be:	e04c      	b.n	800835a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	3301      	adds	r3, #1
 80082c4:	643b      	str	r3, [r7, #64]	; 0x40
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ca:	429a      	cmp	r2, r3
 80082cc:	dbe5      	blt.n	800829a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80082ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e040      	b.n	800835a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80082d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da0a      	bge.n	80082f4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80082de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80082e4:	f06f 0305 	mvn.w	r3, #5
 80082e8:	e037      	b.n	800835a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80082ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80082ee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008304:	797b      	ldrb	r3, [r7, #5]
 8008306:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800830a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	4619      	mov	r1, r3
 8008318:	4816      	ldr	r0, [pc, #88]	; (8008374 <netconn_write_vectors_partly+0x168>)
 800831a:	f7ff fb9f 	bl	8007a5c <netconn_apimsg>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008324:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008328:	2b00      	cmp	r3, #0
 800832a:	d114      	bne.n	8008356 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800832c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008336:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008338:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008344:	429a      	cmp	r2, r3
 8008346:	d006      	beq.n	8008356 <netconn_write_vectors_partly+0x14a>
 8008348:	4b06      	ldr	r3, [pc, #24]	; (8008364 <netconn_write_vectors_partly+0x158>)
 800834a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800834e:	490a      	ldr	r1, [pc, #40]	; (8008378 <netconn_write_vectors_partly+0x16c>)
 8008350:	4806      	ldr	r0, [pc, #24]	; (800836c <netconn_write_vectors_partly+0x160>)
 8008352:	f00f f84d 	bl	80173f0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008356:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800835a:	4618      	mov	r0, r3
 800835c:	3748      	adds	r7, #72	; 0x48
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	080183b0 	.word	0x080183b0
 8008368:	08018688 	.word	0x08018688
 800836c:	08018408 	.word	0x08018408
 8008370:	080186a4 	.word	0x080186a4
 8008374:	080099a9 	.word	0x080099a9
 8008378:	080186c8 	.word	0x080186c8

0800837c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08c      	sub	sp, #48	; 0x30
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <netconn_close_shutdown+0x26>
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <netconn_close_shutdown+0x50>)
 8008390:	f240 4247 	movw	r2, #1095	; 0x447
 8008394:	490e      	ldr	r1, [pc, #56]	; (80083d0 <netconn_close_shutdown+0x54>)
 8008396:	480f      	ldr	r0, [pc, #60]	; (80083d4 <netconn_close_shutdown+0x58>)
 8008398:	f00f f82a 	bl	80173f0 <iprintf>
 800839c:	f06f 030f 	mvn.w	r3, #15
 80083a0:	e010      	b.n	80083c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80083aa:	2329      	movs	r3, #41	; 0x29
 80083ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80083ae:	f107 030c 	add.w	r3, r7, #12
 80083b2:	4619      	mov	r1, r3
 80083b4:	4808      	ldr	r0, [pc, #32]	; (80083d8 <netconn_close_shutdown+0x5c>)
 80083b6:	f7ff fb51 	bl	8007a5c <netconn_apimsg>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80083c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3730      	adds	r7, #48	; 0x30
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	080183b0 	.word	0x080183b0
 80083d0:	080186ec 	.word	0x080186ec
 80083d4:	08018408 	.word	0x08018408
 80083d8:	08009ac1 	.word	0x08009ac1

080083dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80083e4:	2103      	movs	r1, #3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff ffc8 	bl	800837c <netconn_close_shutdown>
 80083ec:	4603      	mov	r3, r0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <netconn_err+0x12>
    return ERR_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e00d      	b.n	8008424 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008408:	f00e fee6 	bl	80171d8 <sys_arch_protect>
 800840c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7a1b      	ldrb	r3, [r3, #8]
 8008412:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f00e feea 	bl	80171f4 <sys_arch_unprotect>
  return err;
 8008420:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843a:	f113 0f0d 	cmn.w	r3, #13
 800843e:	d009      	beq.n	8008454 <lwip_netconn_err_to_msg+0x28>
 8008440:	f113 0f0d 	cmn.w	r3, #13
 8008444:	dc0c      	bgt.n	8008460 <lwip_netconn_err_to_msg+0x34>
 8008446:	f113 0f0f 	cmn.w	r3, #15
 800844a:	d007      	beq.n	800845c <lwip_netconn_err_to_msg+0x30>
 800844c:	f113 0f0e 	cmn.w	r3, #14
 8008450:	d002      	beq.n	8008458 <lwip_netconn_err_to_msg+0x2c>
 8008452:	e005      	b.n	8008460 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <lwip_netconn_err_to_msg+0x54>)
 8008456:	e00e      	b.n	8008476 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <lwip_netconn_err_to_msg+0x58>)
 800845a:	e00c      	b.n	8008476 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <lwip_netconn_err_to_msg+0x5c>)
 800845e:	e00a      	b.n	8008476 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <lwip_netconn_err_to_msg+0x48>
 8008468:	4b08      	ldr	r3, [pc, #32]	; (800848c <lwip_netconn_err_to_msg+0x60>)
 800846a:	227d      	movs	r2, #125	; 0x7d
 800846c:	4908      	ldr	r1, [pc, #32]	; (8008490 <lwip_netconn_err_to_msg+0x64>)
 800846e:	4809      	ldr	r0, [pc, #36]	; (8008494 <lwip_netconn_err_to_msg+0x68>)
 8008470:	f00e ffbe 	bl	80173f0 <iprintf>
      return NULL;
 8008474:	2300      	movs	r3, #0
  }
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	0801bc44 	.word	0x0801bc44
 8008484:	0801bc45 	.word	0x0801bc45
 8008488:	0801bc46 	.word	0x0801bc46
 800848c:	08018708 	.word	0x08018708
 8008490:	0801873c 	.word	0x0801873c
 8008494:	0801874c 	.word	0x0801874c

08008498 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <lwip_netconn_is_err_msg+0x1c>
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <lwip_netconn_is_err_msg+0x5c>)
 80084aa:	2285      	movs	r2, #133	; 0x85
 80084ac:	4912      	ldr	r1, [pc, #72]	; (80084f8 <lwip_netconn_is_err_msg+0x60>)
 80084ae:	4813      	ldr	r0, [pc, #76]	; (80084fc <lwip_netconn_is_err_msg+0x64>)
 80084b0:	f00e ff9e 	bl	80173f0 <iprintf>

  if (msg == &netconn_aborted) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a12      	ldr	r2, [pc, #72]	; (8008500 <lwip_netconn_is_err_msg+0x68>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d104      	bne.n	80084c6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	22f3      	movs	r2, #243	; 0xf3
 80084c0:	701a      	strb	r2, [r3, #0]
    return 1;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e012      	b.n	80084ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a0e      	ldr	r2, [pc, #56]	; (8008504 <lwip_netconn_is_err_msg+0x6c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d104      	bne.n	80084d8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	22f2      	movs	r2, #242	; 0xf2
 80084d2:	701a      	strb	r2, [r3, #0]
    return 1;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e009      	b.n	80084ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <lwip_netconn_is_err_msg+0x70>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d104      	bne.n	80084ea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	22f1      	movs	r2, #241	; 0xf1
 80084e4:	701a      	strb	r2, [r3, #0]
    return 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	08018708 	.word	0x08018708
 80084f8:	08018774 	.word	0x08018774
 80084fc:	0801874c 	.word	0x0801874c
 8008500:	0801bc44 	.word	0x0801bc44
 8008504:	0801bc45 	.word	0x0801bc45
 8008508:	0801bc46 	.word	0x0801bc46

0800850c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d105      	bne.n	800852c <recv_udp+0x20>
 8008520:	4b34      	ldr	r3, [pc, #208]	; (80085f4 <recv_udp+0xe8>)
 8008522:	22e5      	movs	r2, #229	; 0xe5
 8008524:	4934      	ldr	r1, [pc, #208]	; (80085f8 <recv_udp+0xec>)
 8008526:	4835      	ldr	r0, [pc, #212]	; (80085fc <recv_udp+0xf0>)
 8008528:	f00e ff62 	bl	80173f0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d105      	bne.n	800853e <recv_udp+0x32>
 8008532:	4b30      	ldr	r3, [pc, #192]	; (80085f4 <recv_udp+0xe8>)
 8008534:	22e6      	movs	r2, #230	; 0xe6
 8008536:	4932      	ldr	r1, [pc, #200]	; (8008600 <recv_udp+0xf4>)
 8008538:	4830      	ldr	r0, [pc, #192]	; (80085fc <recv_udp+0xf0>)
 800853a:	f00e ff59 	bl	80173f0 <iprintf>
  conn = (struct netconn *)arg;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <recv_udp+0x44>
    pbuf_free(p);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f003 f995 	bl	800b878 <pbuf_free>
    return;
 800854e:	e04d      	b.n	80085ec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	d005      	beq.n	8008566 <recv_udp+0x5a>
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <recv_udp+0xe8>)
 800855c:	22ee      	movs	r2, #238	; 0xee
 800855e:	4929      	ldr	r1, [pc, #164]	; (8008604 <recv_udp+0xf8>)
 8008560:	4826      	ldr	r0, [pc, #152]	; (80085fc <recv_udp+0xf0>)
 8008562:	f00e ff45 	bl	80173f0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3310      	adds	r3, #16
 800856a:	4618      	mov	r0, r3
 800856c:	f00e fd19 	bl	8016fa2 <sys_mbox_valid>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d103      	bne.n	800857e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f003 f97e 	bl	800b878 <pbuf_free>
    return;
 800857c:	e036      	b.n	80085ec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800857e:	2006      	movs	r0, #6
 8008580:	f002 fa54 	bl	800aa2c <memp_malloc>
 8008584:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d103      	bne.n	8008594 <recv_udp+0x88>
    pbuf_free(p);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f003 f973 	bl	800b878 <pbuf_free>
    return;
 8008592:	e02b      	b.n	80085ec <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <recv_udp+0xa0>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	e000      	b.n	80085ae <recv_udp+0xa2>
 80085ac:	2300      	movs	r3, #0
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80085b6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	891b      	ldrh	r3, [r3, #8]
 80085bc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	3310      	adds	r3, #16
 80085c2:	69b9      	ldr	r1, [r7, #24]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f00e fc77 	bl	8016eb8 <sys_mbox_trypost>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80085d0:	69b8      	ldr	r0, [r7, #24]
 80085d2:	f001 fb01 	bl	8009bd8 <netbuf_delete>
    return;
 80085d6:	e009      	b.n	80085ec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <recv_udp+0xe0>
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	8afa      	ldrh	r2, [r7, #22]
 80085e6:	2100      	movs	r1, #0
 80085e8:	69f8      	ldr	r0, [r7, #28]
 80085ea:	4798      	blx	r3
  }
}
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	08018708 	.word	0x08018708
 80085f8:	08018780 	.word	0x08018780
 80085fc:	0801874c 	.word	0x0801874c
 8008600:	080187a4 	.word	0x080187a4
 8008604:	080187c4 	.word	0x080187c4

08008608 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d106      	bne.n	800862a <recv_tcp+0x22>
 800861c:	4b36      	ldr	r3, [pc, #216]	; (80086f8 <recv_tcp+0xf0>)
 800861e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008622:	4936      	ldr	r1, [pc, #216]	; (80086fc <recv_tcp+0xf4>)
 8008624:	4836      	ldr	r0, [pc, #216]	; (8008700 <recv_tcp+0xf8>)
 8008626:	f00e fee3 	bl	80173f0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <recv_tcp+0x36>
 8008630:	4b31      	ldr	r3, [pc, #196]	; (80086f8 <recv_tcp+0xf0>)
 8008632:	f240 122d 	movw	r2, #301	; 0x12d
 8008636:	4933      	ldr	r1, [pc, #204]	; (8008704 <recv_tcp+0xfc>)
 8008638:	4831      	ldr	r0, [pc, #196]	; (8008700 <recv_tcp+0xf8>)
 800863a:	f00e fed9 	bl	80173f0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800863e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d006      	beq.n	8008654 <recv_tcp+0x4c>
 8008646:	4b2c      	ldr	r3, [pc, #176]	; (80086f8 <recv_tcp+0xf0>)
 8008648:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800864c:	492e      	ldr	r1, [pc, #184]	; (8008708 <recv_tcp+0x100>)
 800864e:	482c      	ldr	r0, [pc, #176]	; (8008700 <recv_tcp+0xf8>)
 8008650:	f00e fece 	bl	80173f0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <recv_tcp+0x5c>
    return ERR_VAL;
 800865e:	f06f 0305 	mvn.w	r3, #5
 8008662:	e045      	b.n	80086f0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	429a      	cmp	r2, r3
 800866c:	d006      	beq.n	800867c <recv_tcp+0x74>
 800866e:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <recv_tcp+0xf0>)
 8008670:	f240 1235 	movw	r2, #309	; 0x135
 8008674:	4925      	ldr	r1, [pc, #148]	; (800870c <recv_tcp+0x104>)
 8008676:	4822      	ldr	r0, [pc, #136]	; (8008700 <recv_tcp+0xf8>)
 8008678:	f00e feba 	bl	80173f0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	3310      	adds	r3, #16
 8008680:	4618      	mov	r0, r3
 8008682:	f00e fc8e 	bl	8016fa2 <sys_mbox_valid>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10d      	bne.n	80086a8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d008      	beq.n	80086a4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	891b      	ldrh	r3, [r3, #8]
 8008696:	4619      	mov	r1, r3
 8008698:	68b8      	ldr	r0, [r7, #8]
 800869a:	f004 f8b5 	bl	800c808 <tcp_recved>
      pbuf_free(p);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f003 f8ea 	bl	800b878 <pbuf_free>
    }
    return ERR_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e023      	b.n	80086f0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <recv_tcp+0xb2>
    msg = p;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	891b      	ldrh	r3, [r3, #8]
 80086b6:	83fb      	strh	r3, [r7, #30]
 80086b8:	e003      	b.n	80086c2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <recv_tcp+0x108>)
 80086bc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	3310      	adds	r3, #16
 80086c6:	69b9      	ldr	r1, [r7, #24]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f00e fbf5 	bl	8016eb8 <sys_mbox_trypost>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295
 80086d8:	e00a      	b.n	80086f0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <recv_tcp+0xe6>
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	8bfa      	ldrh	r2, [r7, #30]
 80086e8:	2100      	movs	r1, #0
 80086ea:	6978      	ldr	r0, [r7, #20]
 80086ec:	4798      	blx	r3
  }

  return ERR_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3720      	adds	r7, #32
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	08018708 	.word	0x08018708
 80086fc:	080187e4 	.word	0x080187e4
 8008700:	0801874c 	.word	0x0801874c
 8008704:	08018808 	.word	0x08018808
 8008708:	08018828 	.word	0x08018828
 800870c:	08018840 	.word	0x08018840
 8008710:	0801bc46 	.word	0x0801bc46

08008714 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <poll_tcp+0x22>
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <poll_tcp+0xbc>)
 800872a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800872e:	4929      	ldr	r1, [pc, #164]	; (80087d4 <poll_tcp+0xc0>)
 8008730:	4829      	ldr	r0, [pc, #164]	; (80087d8 <poll_tcp+0xc4>)
 8008732:	f00e fe5d 	bl	80173f0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d104      	bne.n	8008748 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800873e:	2101      	movs	r1, #1
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 ff65 	bl	8009610 <lwip_netconn_do_writemore>
 8008746:	e016      	b.n	8008776 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b04      	cmp	r3, #4
 800874e:	d112      	bne.n	8008776 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <poll_tcp+0x5a>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	7a5b      	ldrb	r3, [r3, #9]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	7a5a      	ldrb	r2, [r3, #9]
 8008768:	3a01      	subs	r2, #1
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800876e:	2101      	movs	r1, #1
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fbf7 	bl	8008f64 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	7f1b      	ldrb	r3, [r3, #28]
 800877a:	f003 0310 	and.w	r3, r3, #16
 800877e:	2b00      	cmp	r3, #0
 8008780:	d021      	beq.n	80087c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01d      	beq.n	80087c6 <poll_tcp+0xb2>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008792:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008796:	d316      	bcc.n	80087c6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d810      	bhi.n	80087c6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	7f1b      	ldrb	r3, [r3, #28]
 80087a8:	f023 0310 	bic.w	r3, r3, #16
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <poll_tcp+0xb2>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2200      	movs	r2, #0
 80087c0:	2102      	movs	r1, #2
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	08018708 	.word	0x08018708
 80087d4:	08018860 	.word	0x08018860
 80087d8:	0801874c 	.word	0x0801874c

080087dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <sent_tcp+0x26>
 80087f4:	4b20      	ldr	r3, [pc, #128]	; (8008878 <sent_tcp+0x9c>)
 80087f6:	f240 1293 	movw	r2, #403	; 0x193
 80087fa:	4920      	ldr	r1, [pc, #128]	; (800887c <sent_tcp+0xa0>)
 80087fc:	4820      	ldr	r0, [pc, #128]	; (8008880 <sent_tcp+0xa4>)
 80087fe:	f00e fdf7 	bl	80173f0 <iprintf>

  if (conn) {
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d032      	beq.n	800886e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d104      	bne.n	800881a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008810:	2101      	movs	r1, #1
 8008812:	6978      	ldr	r0, [r7, #20]
 8008814:	f000 fefc 	bl	8009610 <lwip_netconn_do_writemore>
 8008818:	e007      	b.n	800882a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b04      	cmp	r3, #4
 8008820:	d103      	bne.n	800882a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008822:	2101      	movs	r1, #1
 8008824:	6978      	ldr	r0, [r7, #20]
 8008826:	f000 fb9d 	bl	8008f64 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01d      	beq.n	800886e <sent_tcp+0x92>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800883a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800883e:	d316      	bcc.n	800886e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008848:	2b04      	cmp	r3, #4
 800884a:	d810      	bhi.n	800886e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	7f1b      	ldrb	r3, [r3, #28]
 8008850:	f023 0310 	bic.w	r3, r3, #16
 8008854:	b2da      	uxtb	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <sent_tcp+0x92>
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	88fa      	ldrh	r2, [r7, #6]
 8008868:	2102      	movs	r1, #2
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	08018708 	.word	0x08018708
 800887c:	08018860 	.word	0x08018860
 8008880:	0801874c 	.word	0x0801874c

08008884 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <err_tcp+0x24>
 800889a:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <err_tcp+0x194>)
 800889c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80088a0:	495e      	ldr	r1, [pc, #376]	; (8008a1c <err_tcp+0x198>)
 80088a2:	485f      	ldr	r0, [pc, #380]	; (8008a20 <err_tcp+0x19c>)
 80088a4:	f00e fda4 	bl	80173f0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80088a8:	f00e fc96 	bl	80171d8 <sys_arch_protect>
 80088ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2200      	movs	r2, #0
 80088b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	7f1b      	ldrb	r3, [r3, #28]
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	2200      	movs	r2, #0
 80088d2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80088d4:	69b8      	ldr	r0, [r7, #24]
 80088d6:	f00e fc8d 	bl	80171f4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <err_tcp+0x6a>
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2200      	movs	r2, #0
 80088e8:	2104      	movs	r1, #4
 80088ea:	69f8      	ldr	r0, [r7, #28]
 80088ec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <err_tcp+0x7e>
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	69f8      	ldr	r0, [r7, #28]
 8008900:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <err_tcp+0x92>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2200      	movs	r2, #0
 8008910:	2102      	movs	r1, #2
 8008912:	69f8      	ldr	r0, [r7, #28]
 8008914:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fd86 	bl	800842c <lwip_netconn_err_to_msg>
 8008920:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3310      	adds	r3, #16
 8008926:	4618      	mov	r0, r3
 8008928:	f00e fb3b 	bl	8016fa2 <sys_mbox_valid>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d005      	beq.n	800893e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	3310      	adds	r3, #16
 8008936:	6939      	ldr	r1, [r7, #16]
 8008938:	4618      	mov	r0, r3
 800893a:	f00e fabd 	bl	8016eb8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3314      	adds	r3, #20
 8008942:	4618      	mov	r0, r3
 8008944:	f00e fb2d 	bl	8016fa2 <sys_mbox_valid>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	3314      	adds	r3, #20
 8008952:	6939      	ldr	r1, [r7, #16]
 8008954:	4618      	mov	r0, r3
 8008956:	f00e faaf 	bl	8016eb8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d005      	beq.n	800896c <err_tcp+0xe8>
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b04      	cmp	r3, #4
 8008964:	d002      	beq.n	800896c <err_tcp+0xe8>
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	2b03      	cmp	r3, #3
 800896a:	d143      	bne.n	80089f4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	7f1b      	ldrb	r3, [r3, #28]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	7f1b      	ldrb	r3, [r3, #28]
 8008984:	f023 0304 	bic.w	r3, r3, #4
 8008988:	b2da      	uxtb	r2, r3
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d13b      	bne.n	8008a0c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <err_tcp+0x126>
 800899c:	4b1e      	ldr	r3, [pc, #120]	; (8008a18 <err_tcp+0x194>)
 800899e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80089a2:	4920      	ldr	r1, [pc, #128]	; (8008a24 <err_tcp+0x1a0>)
 80089a4:	481e      	ldr	r0, [pc, #120]	; (8008a20 <err_tcp+0x19c>)
 80089a6:	f00e fd23 	bl	80173f0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d104      	bne.n	80089ba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	2200      	movs	r2, #0
 80089b6:	711a      	strb	r2, [r3, #4]
 80089b8:	e003      	b.n	80089c2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80089cc:	68b8      	ldr	r0, [r7, #8]
 80089ce:	f00e fb79 	bl	80170c4 <sys_sem_valid>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <err_tcp+0x162>
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <err_tcp+0x194>)
 80089da:	f240 12ef 	movw	r2, #495	; 0x1ef
 80089de:	4912      	ldr	r1, [pc, #72]	; (8008a28 <err_tcp+0x1a4>)
 80089e0:	480f      	ldr	r0, [pc, #60]	; (8008a20 <err_tcp+0x19c>)
 80089e2:	f00e fd05 	bl	80173f0 <iprintf>
      conn->current_msg = NULL;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2200      	movs	r2, #0
 80089ea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80089ec:	68b8      	ldr	r0, [r7, #8]
 80089ee:	f00e fb4f 	bl	8017090 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80089f2:	e00b      	b.n	8008a0c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d008      	beq.n	8008a0e <err_tcp+0x18a>
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <err_tcp+0x194>)
 80089fe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008a02:	490a      	ldr	r1, [pc, #40]	; (8008a2c <err_tcp+0x1a8>)
 8008a04:	4806      	ldr	r0, [pc, #24]	; (8008a20 <err_tcp+0x19c>)
 8008a06:	f00e fcf3 	bl	80173f0 <iprintf>
  }
}
 8008a0a:	e000      	b.n	8008a0e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008a0c:	bf00      	nop
}
 8008a0e:	bf00      	nop
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	08018708 	.word	0x08018708
 8008a1c:	08018860 	.word	0x08018860
 8008a20:	0801874c 	.word	0x0801874c
 8008a24:	08018870 	.word	0x08018870
 8008a28:	0801888c 	.word	0x0801888c
 8008a2c:	080188a8 	.word	0x080188a8

08008a30 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f004 fda7 	bl	800d594 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008a46:	490a      	ldr	r1, [pc, #40]	; (8008a70 <setup_tcp+0x40>)
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f004 fdb5 	bl	800d5b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008a4e:	4909      	ldr	r1, [pc, #36]	; (8008a74 <setup_tcp+0x44>)
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f004 fdd3 	bl	800d5fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008a56:	2202      	movs	r2, #2
 8008a58:	4907      	ldr	r1, [pc, #28]	; (8008a78 <setup_tcp+0x48>)
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f004 fe2a 	bl	800d6b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008a60:	4906      	ldr	r1, [pc, #24]	; (8008a7c <setup_tcp+0x4c>)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f004 fdec 	bl	800d640 <tcp_err>
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	08008609 	.word	0x08008609
 8008a74:	080087dd 	.word	0x080087dd
 8008a78:	08008715 	.word	0x08008715
 8008a7c:	08008885 	.word	0x08008885

08008a80 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b089      	sub	sp, #36	; 0x24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <accept_function+0x1e>
    return ERR_VAL;
 8008a98:	f06f 0305 	mvn.w	r3, #5
 8008a9c:	e0a1      	b.n	8008be2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3314      	adds	r3, #20
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f00e fa7d 	bl	8016fa2 <sys_mbox_valid>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d102      	bne.n	8008ab4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008aae:	f06f 0305 	mvn.w	r3, #5
 8008ab2:	e096      	b.n	8008be2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d11b      	bne.n	8008af2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f103 0414 	add.w	r4, r3, #20
 8008ac0:	f06f 000c 	mvn.w	r0, #12
 8008ac4:	f7ff fcb2 	bl	800842c <lwip_netconn_err_to_msg>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	4619      	mov	r1, r3
 8008acc:	4620      	mov	r0, r4
 8008ace:	f00e f9f3 	bl	8016eb8 <sys_mbox_trypost>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <accept_function+0x6c>
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	69f8      	ldr	r0, [r7, #28]
 8008aea:	4798      	blx	r3
    }
    return ERR_VAL;
 8008aec:	f06f 0305 	mvn.w	r3, #5
 8008af0:	e077      	b.n	8008be2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d006      	beq.n	8008b08 <accept_function+0x88>
 8008afa:	4b3c      	ldr	r3, [pc, #240]	; (8008bec <accept_function+0x16c>)
 8008afc:	f240 222a 	movw	r2, #554	; 0x22a
 8008b00:	493b      	ldr	r1, [pc, #236]	; (8008bf0 <accept_function+0x170>)
 8008b02:	483c      	ldr	r0, [pc, #240]	; (8008bf4 <accept_function+0x174>)
 8008b04:	f00e fc74 	bl	80173f0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	4619      	mov	r1, r3
 8008b12:	4610      	mov	r0, r2
 8008b14:	f000 f8f0 	bl	8008cf8 <netconn_alloc>
 8008b18:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d11b      	bne.n	8008b58 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f103 0414 	add.w	r4, r3, #20
 8008b26:	f06f 000c 	mvn.w	r0, #12
 8008b2a:	f7ff fc7f 	bl	800842c <lwip_netconn_err_to_msg>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4619      	mov	r1, r3
 8008b32:	4620      	mov	r0, r4
 8008b34:	f00e f9c0 	bl	8016eb8 <sys_mbox_trypost>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d109      	bne.n	8008b52 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <accept_function+0xd2>
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	69f8      	ldr	r0, [r7, #28]
 8008b50:	4798      	blx	r3
    }
    return ERR_MEM;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295
 8008b56:	e044      	b.n	8008be2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008b5e:	69b8      	ldr	r0, [r7, #24]
 8008b60:	f7ff ff66 	bl	8008a30 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	3314      	adds	r3, #20
 8008b68:	69b9      	ldr	r1, [r7, #24]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f00e f9a4 	bl	8016eb8 <sys_mbox_trypost>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d02a      	beq.n	8008bcc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f004 fd08 	bl	800d594 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008b84:	2100      	movs	r1, #0
 8008b86:	6978      	ldr	r0, [r7, #20]
 8008b88:	f004 fd16 	bl	800d5b8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f004 fd34 	bl	800d5fc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008b94:	2200      	movs	r2, #0
 8008b96:	2100      	movs	r1, #0
 8008b98:	6978      	ldr	r0, [r7, #20]
 8008b9a:	f004 fd8b 	bl	800d6b4 <tcp_poll>
    tcp_err(pcb, NULL);
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	6978      	ldr	r0, [r7, #20]
 8008ba2:	f004 fd4d 	bl	800d640 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	3310      	adds	r3, #16
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f00e f96f 	bl	8016e94 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	3310      	adds	r3, #16
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f00e fa02 	bl	8016fc4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008bc0:	69b8      	ldr	r0, [r7, #24]
 8008bc2:	f000 f907 	bl	8008dd4 <netconn_free>
    return ERR_MEM;
 8008bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bca:	e00a      	b.n	8008be2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <accept_function+0x160>
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2100      	movs	r1, #0
 8008bdc:	69f8      	ldr	r0, [r7, #28]
 8008bde:	4798      	blx	r3
  }

  return ERR_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3724      	adds	r7, #36	; 0x24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	08018708 	.word	0x08018708
 8008bf0:	080188c4 	.word	0x080188c4
 8008bf4:	0801874c 	.word	0x0801874c

08008bf8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d006      	beq.n	8008c1c <pcb_new+0x24>
 8008c0e:	4b2b      	ldr	r3, [pc, #172]	; (8008cbc <pcb_new+0xc4>)
 8008c10:	f240 2265 	movw	r2, #613	; 0x265
 8008c14:	492a      	ldr	r1, [pc, #168]	; (8008cc0 <pcb_new+0xc8>)
 8008c16:	482b      	ldr	r0, [pc, #172]	; (8008cc4 <pcb_new+0xcc>)
 8008c18:	f00e fbea 	bl	80173f0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d022      	beq.n	8008c70 <pcb_new+0x78>
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d133      	bne.n	8008c96 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681c      	ldr	r4, [r3, #0]
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f009 ff54 	bl	8012ae2 <udp_new_ip_type>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d02a      	beq.n	8008c9e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b22      	cmp	r3, #34	; 0x22
 8008c50:	d104      	bne.n	8008c5c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6858      	ldr	r0, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	4917      	ldr	r1, [pc, #92]	; (8008cc8 <pcb_new+0xd0>)
 8008c6a:	f009 fec1 	bl	80129f0 <udp_recv>
      }
      break;
 8008c6e:	e016      	b.n	8008c9e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681c      	ldr	r4, [r3, #0]
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f004 fc7e 	bl	800d578 <tcp_new_ip_type>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00b      	beq.n	8008ca2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff fece 	bl	8008a30 <setup_tcp>
      }
      break;
 8008c94:	e005      	b.n	8008ca2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	22fa      	movs	r2, #250	; 0xfa
 8008c9a:	711a      	strb	r2, [r3, #4]
      return;
 8008c9c:	e00a      	b.n	8008cb4 <pcb_new+0xbc>
      break;
 8008c9e:	bf00      	nop
 8008ca0:	e000      	b.n	8008ca4 <pcb_new+0xac>
      break;
 8008ca2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d102      	bne.n	8008cb4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	711a      	strb	r2, [r3, #4]
  }
}
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	08018708 	.word	0x08018708
 8008cc0:	080188ec 	.word	0x080188ec
 8008cc4:	0801874c 	.word	0x0801874c
 8008cc8:	0800850d 	.word	0x0800850d

08008ccc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d102      	bne.n	8008cee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff85 	bl	8008bf8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008d08:	2007      	movs	r0, #7
 8008d0a:	f001 fe8f 	bl	800aa2c <memp_malloc>
 8008d0e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <netconn_alloc+0x22>
    return NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e052      	b.n	8008dc0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	79fa      	ldrb	r2, [r7, #7]
 8008d24:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d32:	2b10      	cmp	r3, #16
 8008d34:	d004      	beq.n	8008d40 <netconn_alloc+0x48>
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d105      	bne.n	8008d46 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008d3e:	e00a      	b.n	8008d56 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008d40:	2306      	movs	r3, #6
 8008d42:	617b      	str	r3, [r7, #20]
      break;
 8008d44:	e007      	b.n	8008d56 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008d46:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <netconn_alloc+0xd0>)
 8008d48:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008d4c:	491f      	ldr	r1, [pc, #124]	; (8008dcc <netconn_alloc+0xd4>)
 8008d4e:	4820      	ldr	r0, [pc, #128]	; (8008dd0 <netconn_alloc+0xd8>)
 8008d50:	f00e fb4e 	bl	80173f0 <iprintf>
      goto free_and_return;
 8008d54:	e02f      	b.n	8008db6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3310      	adds	r3, #16
 8008d5a:	6979      	ldr	r1, [r7, #20]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f00e f877 	bl	8016e50 <sys_mbox_new>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d125      	bne.n	8008db4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f00e f935 	bl	8016fde <sys_sem_new>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f00e f888 	bl	8016e94 <sys_mbox_free>
    goto free_and_return;
 8008d84:	e017      	b.n	8008db6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f00e f91a 	bl	8016fc4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	7cfa      	ldrb	r2, [r7, #19]
 8008dae:	771a      	strb	r2, [r3, #28]
  return conn;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e005      	b.n	8008dc0 <netconn_alloc+0xc8>
    goto free_and_return;
 8008db4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008db6:	68f9      	ldr	r1, [r7, #12]
 8008db8:	2007      	movs	r0, #7
 8008dba:	f001 fead 	bl	800ab18 <memp_free>
  return NULL;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	08018708 	.word	0x08018708
 8008dcc:	0801890c 	.word	0x0801890c
 8008dd0:	0801874c 	.word	0x0801874c

08008dd4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d006      	beq.n	8008df2 <netconn_free+0x1e>
 8008de4:	4b1b      	ldr	r3, [pc, #108]	; (8008e54 <netconn_free+0x80>)
 8008de6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008dea:	491b      	ldr	r1, [pc, #108]	; (8008e58 <netconn_free+0x84>)
 8008dec:	481b      	ldr	r0, [pc, #108]	; (8008e5c <netconn_free+0x88>)
 8008dee:	f00e faff 	bl	80173f0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3310      	adds	r3, #16
 8008df6:	4618      	mov	r0, r3
 8008df8:	f00e f8d3 	bl	8016fa2 <sys_mbox_valid>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d006      	beq.n	8008e10 <netconn_free+0x3c>
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <netconn_free+0x80>)
 8008e04:	f240 3223 	movw	r2, #803	; 0x323
 8008e08:	4915      	ldr	r1, [pc, #84]	; (8008e60 <netconn_free+0x8c>)
 8008e0a:	4814      	ldr	r0, [pc, #80]	; (8008e5c <netconn_free+0x88>)
 8008e0c:	f00e faf0 	bl	80173f0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3314      	adds	r3, #20
 8008e14:	4618      	mov	r0, r3
 8008e16:	f00e f8c4 	bl	8016fa2 <sys_mbox_valid>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d006      	beq.n	8008e2e <netconn_free+0x5a>
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <netconn_free+0x80>)
 8008e22:	f240 3226 	movw	r2, #806	; 0x326
 8008e26:	490f      	ldr	r1, [pc, #60]	; (8008e64 <netconn_free+0x90>)
 8008e28:	480c      	ldr	r0, [pc, #48]	; (8008e5c <netconn_free+0x88>)
 8008e2a:	f00e fae1 	bl	80173f0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	330c      	adds	r3, #12
 8008e32:	4618      	mov	r0, r3
 8008e34:	f00e f939 	bl	80170aa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f00e f952 	bl	80170e6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	2007      	movs	r0, #7
 8008e46:	f001 fe67 	bl	800ab18 <memp_free>
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08018708 	.word	0x08018708
 8008e58:	08018934 	.word	0x08018934
 8008e5c:	0801874c 	.word	0x0801874c
 8008e60:	08018964 	.word	0x08018964
 8008e64:	080189a0 	.word	0x080189a0

08008e68 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3310      	adds	r3, #16
 8008e74:	4618      	mov	r0, r3
 8008e76:	f00e f894 	bl	8016fa2 <sys_mbox_valid>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d02f      	beq.n	8008ee0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e80:	e018      	b.n	8008eb4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e8a:	2b10      	cmp	r3, #16
 8008e8c:	d10e      	bne.n	8008eac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f107 020f 	add.w	r2, r7, #15
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fafe 	bl	8008498 <lwip_netconn_is_err_msg>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d108      	bne.n	8008eb4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f002 fce7 	bl	800b878 <pbuf_free>
 8008eaa:	e003      	b.n	8008eb4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fe92 	bl	8009bd8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3310      	adds	r3, #16
 8008eb8:	f107 0210 	add.w	r2, r7, #16
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00e f853 	bl	8016f6a <sys_arch_mbox_tryfetch>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d1da      	bne.n	8008e82 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3310      	adds	r3, #16
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f00d ffdf 	bl	8016e94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3310      	adds	r3, #16
 8008eda:	4618      	mov	r0, r3
 8008edc:	f00e f872 	bl	8016fc4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3314      	adds	r3, #20
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f00e f85c 	bl	8016fa2 <sys_mbox_valid>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d034      	beq.n	8008f5a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ef0:	e01d      	b.n	8008f2e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f107 020e 	add.w	r2, r7, #14
 8008ef8:	4611      	mov	r1, r2
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff facc 	bl	8008498 <lwip_netconn_is_err_msg>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d113      	bne.n	8008f2e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008f0a:	6978      	ldr	r0, [r7, #20]
 8008f0c:	f7ff ffac 	bl	8008e68 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f003 faab 	bl	800c478 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2200      	movs	r2, #0
 8008f26:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008f28:	6978      	ldr	r0, [r7, #20]
 8008f2a:	f7ff ff53 	bl	8008dd4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3314      	adds	r3, #20
 8008f32:	f107 0210 	add.w	r2, r7, #16
 8008f36:	4611      	mov	r1, r2
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f00e f816 	bl	8016f6a <sys_arch_mbox_tryfetch>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f44:	d1d5      	bne.n	8008ef2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00d ffa2 	bl	8016e94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3314      	adds	r3, #20
 8008f54:	4618      	mov	r0, r3
 8008f56:	f00e f835 	bl	8016fc4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008f5a:	bf00      	nop
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <lwip_netconn_do_close_internal+0x24>
 8008f7a:	4b87      	ldr	r3, [pc, #540]	; (8009198 <lwip_netconn_do_close_internal+0x234>)
 8008f7c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008f80:	4986      	ldr	r1, [pc, #536]	; (800919c <lwip_netconn_do_close_internal+0x238>)
 8008f82:	4887      	ldr	r0, [pc, #540]	; (80091a0 <lwip_netconn_do_close_internal+0x23c>)
 8008f84:	f00e fa34 	bl	80173f0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f90:	2b10      	cmp	r3, #16
 8008f92:	d006      	beq.n	8008fa2 <lwip_netconn_do_close_internal+0x3e>
 8008f94:	4b80      	ldr	r3, [pc, #512]	; (8009198 <lwip_netconn_do_close_internal+0x234>)
 8008f96:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008f9a:	4982      	ldr	r1, [pc, #520]	; (80091a4 <lwip_netconn_do_close_internal+0x240>)
 8008f9c:	4880      	ldr	r0, [pc, #512]	; (80091a0 <lwip_netconn_do_close_internal+0x23c>)
 8008f9e:	f00e fa27 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d006      	beq.n	8008fb8 <lwip_netconn_do_close_internal+0x54>
 8008faa:	4b7b      	ldr	r3, [pc, #492]	; (8009198 <lwip_netconn_do_close_internal+0x234>)
 8008fac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008fb0:	497d      	ldr	r1, [pc, #500]	; (80091a8 <lwip_netconn_do_close_internal+0x244>)
 8008fb2:	487b      	ldr	r0, [pc, #492]	; (80091a0 <lwip_netconn_do_close_internal+0x23c>)
 8008fb4:	f00e fa1c 	bl	80173f0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <lwip_netconn_do_close_internal+0x6a>
 8008fc0:	4b75      	ldr	r3, [pc, #468]	; (8009198 <lwip_netconn_do_close_internal+0x234>)
 8008fc2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008fc6:	4979      	ldr	r1, [pc, #484]	; (80091ac <lwip_netconn_do_close_internal+0x248>)
 8008fc8:	4875      	ldr	r0, [pc, #468]	; (80091a0 <lwip_netconn_do_close_internal+0x23c>)
 8008fca:	f00e fa11 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <lwip_netconn_do_close_internal+0x80>
 8008fd6:	4b70      	ldr	r3, [pc, #448]	; (8009198 <lwip_netconn_do_close_internal+0x234>)
 8008fd8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008fdc:	4974      	ldr	r1, [pc, #464]	; (80091b0 <lwip_netconn_do_close_internal+0x24c>)
 8008fde:	4870      	ldr	r0, [pc, #448]	; (80091a0 <lwip_netconn_do_close_internal+0x23c>)
 8008fe0:	f00e fa06 	bl	80173f0 <iprintf>

  tpcb = conn->pcb.tcp;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	7a1b      	ldrb	r3, [r3, #8]
 8008ff0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b03      	cmp	r3, #3
 8009006:	d102      	bne.n	800900e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009008:	2301      	movs	r3, #1
 800900a:	75bb      	strb	r3, [r7, #22]
 800900c:	e01f      	b.n	800904e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00e      	beq.n	8009032 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009018:	2b05      	cmp	r3, #5
 800901a:	d007      	beq.n	800902c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009020:	2b06      	cmp	r3, #6
 8009022:	d003      	beq.n	800902c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009028:	2b08      	cmp	r3, #8
 800902a:	d102      	bne.n	8009032 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800902c:	2301      	movs	r3, #1
 800902e:	75bb      	strb	r3, [r7, #22]
 8009030:	e00d      	b.n	800904e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009032:	7b7b      	ldrb	r3, [r7, #13]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d008      	beq.n	800904a <lwip_netconn_do_close_internal+0xe6>
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	8b5b      	ldrh	r3, [r3, #26]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009044:	2301      	movs	r3, #1
 8009046:	75bb      	strb	r3, [r7, #22]
 8009048:	e001      	b.n	800904e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800904e:	7dbb      	ldrb	r3, [r7, #22]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009054:	2100      	movs	r1, #0
 8009056:	6938      	ldr	r0, [r7, #16]
 8009058:	f004 fa9c 	bl	800d594 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	7d1b      	ldrb	r3, [r3, #20]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d104      	bne.n	800906e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009064:	2100      	movs	r1, #0
 8009066:	6938      	ldr	r0, [r7, #16]
 8009068:	f004 fb0c 	bl	800d684 <tcp_accept>
 800906c:	e01d      	b.n	80090aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009074:	2100      	movs	r1, #0
 8009076:	6938      	ldr	r0, [r7, #16]
 8009078:	f004 fa9e 	bl	800d5b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800907c:	2100      	movs	r1, #0
 800907e:	6938      	ldr	r0, [r7, #16]
 8009080:	f004 fb00 	bl	800d684 <tcp_accept>
    }
    if (shut_tx) {
 8009084:	7b7b      	ldrb	r3, [r7, #13]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800908a:	2100      	movs	r1, #0
 800908c:	6938      	ldr	r0, [r7, #16]
 800908e:	f004 fab5 	bl	800d5fc <tcp_sent>
    }
    if (shut_close) {
 8009092:	7dbb      	ldrb	r3, [r7, #22]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	6938      	ldr	r0, [r7, #16]
 800909e:	f004 fb09 	bl	800d6b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 80090a2:	2100      	movs	r1, #0
 80090a4:	6938      	ldr	r0, [r7, #16]
 80090a6:	f004 facb 	bl	800d640 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80090aa:	7dbb      	ldrb	r3, [r7, #22]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80090b0:	6938      	ldr	r0, [r7, #16]
 80090b2:	f003 f89b 	bl	800c1ec <tcp_close>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
 80090ba:	e007      	b.n	80090cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	7b7a      	ldrb	r2, [r7, #13]
 80090c0:	4619      	mov	r1, r3
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f003 f8be 	bl	800c244 <tcp_shutdown>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80090cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80090d4:	2301      	movs	r3, #1
 80090d6:	757b      	strb	r3, [r7, #21]
 80090d8:	e016      	b.n	8009108 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80090da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e2:	d10f      	bne.n	8009104 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	7a5b      	ldrb	r3, [r3, #9]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10c      	bne.n	8009108 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80090ee:	2301      	movs	r3, #1
 80090f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80090f2:	7dbb      	ldrb	r3, [r7, #22]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80090f8:	6938      	ldr	r0, [r7, #16]
 80090fa:	f003 f9bd 	bl	800c478 <tcp_abort>
          err = ERR_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]
 8009102:	e001      	b.n	8009108 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009104:	2301      	movs	r3, #1
 8009106:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009108:	7d7b      	ldrb	r3, [r7, #21]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d052      	beq.n	80091b4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	7dfa      	ldrb	r2, [r7, #23]
 800911e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800912c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d129      	bne.n	8009188 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009134:	7dbb      	ldrb	r3, [r7, #22]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00c      	beq.n	8009154 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <lwip_netconn_do_close_internal+0x1f0>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2200      	movs	r2, #0
 800914e:	2104      	movs	r1, #4
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
      }
      if (shut_rx) {
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d005      	beq.n	800916e <lwip_netconn_do_close_internal+0x20a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
      }
      if (shut_tx) {
 800916e:	7b7b      	ldrb	r3, [r7, #13]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d009      	beq.n	8009188 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <lwip_netconn_do_close_internal+0x224>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2200      	movs	r2, #0
 8009182:	2102      	movs	r1, #2
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800918e:	68b8      	ldr	r0, [r7, #8]
 8009190:	f00d ff7e 	bl	8017090 <sys_sem_signal>
    }
    return ERR_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	e03c      	b.n	8009212 <lwip_netconn_do_close_internal+0x2ae>
 8009198:	08018708 	.word	0x08018708
 800919c:	080189dc 	.word	0x080189dc
 80091a0:	0801874c 	.word	0x0801874c
 80091a4:	080189ec 	.word	0x080189ec
 80091a8:	08018a0c 	.word	0x08018a0c
 80091ac:	08018a30 	.word	0x08018a30
 80091b0:	08018870 	.word	0x08018870
  }
  if (!close_finished) {
 80091b4:	7d7b      	ldrb	r3, [r7, #21]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d11e      	bne.n	80091f8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	7d1b      	ldrb	r3, [r3, #20]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d106      	bne.n	80091d0 <lwip_netconn_do_close_internal+0x26c>
 80091c2:	4b16      	ldr	r3, [pc, #88]	; (800921c <lwip_netconn_do_close_internal+0x2b8>)
 80091c4:	f240 4241 	movw	r2, #1089	; 0x441
 80091c8:	4915      	ldr	r1, [pc, #84]	; (8009220 <lwip_netconn_do_close_internal+0x2bc>)
 80091ca:	4816      	ldr	r0, [pc, #88]	; (8009224 <lwip_netconn_do_close_internal+0x2c0>)
 80091cc:	f00e f910 	bl	80173f0 <iprintf>
    if (shut_tx) {
 80091d0:	7b7b      	ldrb	r3, [r7, #13]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80091d6:	4914      	ldr	r1, [pc, #80]	; (8009228 <lwip_netconn_do_close_internal+0x2c4>)
 80091d8:	6938      	ldr	r0, [r7, #16]
 80091da:	f004 fa0f 	bl	800d5fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80091de:	2201      	movs	r2, #1
 80091e0:	4912      	ldr	r1, [pc, #72]	; (800922c <lwip_netconn_do_close_internal+0x2c8>)
 80091e2:	6938      	ldr	r0, [r7, #16]
 80091e4:	f004 fa66 	bl	800d6b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80091e8:	4911      	ldr	r1, [pc, #68]	; (8009230 <lwip_netconn_do_close_internal+0x2cc>)
 80091ea:	6938      	ldr	r0, [r7, #16]
 80091ec:	f004 fa28 	bl	800d640 <tcp_err>
    tcp_arg(tpcb, conn);
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	6938      	ldr	r0, [r7, #16]
 80091f4:	f004 f9ce 	bl	800d594 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80091f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d106      	bne.n	800920e <lwip_netconn_do_close_internal+0x2aa>
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <lwip_netconn_do_close_internal+0x2b8>)
 8009202:	f240 424d 	movw	r2, #1101	; 0x44d
 8009206:	490b      	ldr	r1, [pc, #44]	; (8009234 <lwip_netconn_do_close_internal+0x2d0>)
 8009208:	4806      	ldr	r0, [pc, #24]	; (8009224 <lwip_netconn_do_close_internal+0x2c0>)
 800920a:	f00e f8f1 	bl	80173f0 <iprintf>
  return err;
 800920e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	08018708 	.word	0x08018708
 8009220:	08018a44 	.word	0x08018a44
 8009224:	0801874c 	.word	0x0801874c
 8009228:	080087dd 	.word	0x080087dd
 800922c:	08008715 	.word	0x08008715
 8009230:	08008885 	.word	0x08008885
 8009234:	08018a68 	.word	0x08018a68

08009238 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00d      	beq.n	800926e <lwip_netconn_do_delconn+0x36>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800925c:	2b10      	cmp	r3, #16
 800925e:	d006      	beq.n	800926e <lwip_netconn_do_delconn+0x36>
 8009260:	4b60      	ldr	r3, [pc, #384]	; (80093e4 <lwip_netconn_do_delconn+0x1ac>)
 8009262:	f240 425e 	movw	r2, #1118	; 0x45e
 8009266:	4960      	ldr	r1, [pc, #384]	; (80093e8 <lwip_netconn_do_delconn+0x1b0>)
 8009268:	4860      	ldr	r0, [pc, #384]	; (80093ec <lwip_netconn_do_delconn+0x1b4>)
 800926a:	f00e f8c1 	bl	80173f0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <lwip_netconn_do_delconn+0x48>
 8009274:	7afb      	ldrb	r3, [r7, #11]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d002      	beq.n	8009280 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d109      	bne.n	8009294 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	2b03      	cmp	r3, #3
 8009284:	d10a      	bne.n	800929c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	7f1b      	ldrb	r3, [r3, #28]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	22fb      	movs	r2, #251	; 0xfb
 8009298:	711a      	strb	r2, [r3, #4]
 800929a:	e097      	b.n	80093cc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d10d      	bne.n	80092be <lwip_netconn_do_delconn+0x86>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	7f1b      	ldrb	r3, [r3, #28]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <lwip_netconn_do_delconn+0x86>
 80092b0:	4b4c      	ldr	r3, [pc, #304]	; (80093e4 <lwip_netconn_do_delconn+0x1ac>)
 80092b2:	f240 427a 	movw	r2, #1146	; 0x47a
 80092b6:	494e      	ldr	r1, [pc, #312]	; (80093f0 <lwip_netconn_do_delconn+0x1b8>)
 80092b8:	484c      	ldr	r0, [pc, #304]	; (80093ec <lwip_netconn_do_delconn+0x1b4>)
 80092ba:	f00e f899 	bl	80173f0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7ff fdcd 	bl	8008e68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d05f      	beq.n	8009398 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e2:	2b10      	cmp	r3, #16
 80092e4:	d00d      	beq.n	8009302 <lwip_netconn_do_delconn+0xca>
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d151      	bne.n	800938e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f009 fb98 	bl	8012a30 <udp_remove>
          break;
 8009300:	e046      	b.n	8009390 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <lwip_netconn_do_delconn+0xe2>
 800930c:	4b35      	ldr	r3, [pc, #212]	; (80093e4 <lwip_netconn_do_delconn+0x1ac>)
 800930e:	f240 4294 	movw	r2, #1172	; 0x494
 8009312:	4938      	ldr	r1, [pc, #224]	; (80093f4 <lwip_netconn_do_delconn+0x1bc>)
 8009314:	4835      	ldr	r0, [pc, #212]	; (80093ec <lwip_netconn_do_delconn+0x1b4>)
 8009316:	f00e f86b 	bl	80173f0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2204      	movs	r2, #4
 8009320:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2203      	movs	r2, #3
 8009326:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2100      	movs	r1, #0
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fe14 	bl	8008f64 <lwip_netconn_do_close_internal>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d04b      	beq.n	80093da <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	2b04      	cmp	r3, #4
 800934a:	d006      	beq.n	800935a <lwip_netconn_do_delconn+0x122>
 800934c:	4b25      	ldr	r3, [pc, #148]	; (80093e4 <lwip_netconn_do_delconn+0x1ac>)
 800934e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009352:	4929      	ldr	r1, [pc, #164]	; (80093f8 <lwip_netconn_do_delconn+0x1c0>)
 8009354:	4825      	ldr	r0, [pc, #148]	; (80093ec <lwip_netconn_do_delconn+0x1b4>)
 8009356:	f00e f84b 	bl	80173f0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800935a:	4828      	ldr	r0, [pc, #160]	; (80093fc <lwip_netconn_do_delconn+0x1c4>)
 800935c:	f00d ff09 	bl	8017172 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	2100      	movs	r1, #0
 8009368:	4618      	mov	r0, r3
 800936a:	f00d fe60 	bl	801702e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800936e:	4823      	ldr	r0, [pc, #140]	; (80093fc <lwip_netconn_do_delconn+0x1c4>)
 8009370:	f00d fef0 	bl	8017154 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d02d      	beq.n	80093da <lwip_netconn_do_delconn+0x1a2>
 800937e:	4b19      	ldr	r3, [pc, #100]	; (80093e4 <lwip_netconn_do_delconn+0x1ac>)
 8009380:	f240 429e 	movw	r2, #1182	; 0x49e
 8009384:	491c      	ldr	r1, [pc, #112]	; (80093f8 <lwip_netconn_do_delconn+0x1c0>)
 8009386:	4819      	ldr	r0, [pc, #100]	; (80093ec <lwip_netconn_do_delconn+0x1b4>)
 8009388:	f00e f832 	bl	80173f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800938c:	e025      	b.n	80093da <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800938e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2200      	movs	r2, #0
 8009396:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <lwip_netconn_do_delconn+0x17a>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	6810      	ldr	r0, [r2, #0]
 80093ac:	2200      	movs	r2, #0
 80093ae:	2100      	movs	r1, #0
 80093b0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d007      	beq.n	80093cc <lwip_netconn_do_delconn+0x194>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	6810      	ldr	r0, [r2, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	2102      	movs	r1, #2
 80093ca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	330c      	adds	r3, #12
 80093d2:	4618      	mov	r0, r3
 80093d4:	f00d fe76 	bl	80170c4 <sys_sem_valid>
 80093d8:	e000      	b.n	80093dc <lwip_netconn_do_delconn+0x1a4>
          return;
 80093da:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	08018708 	.word	0x08018708
 80093e8:	08018a78 	.word	0x08018a78
 80093ec:	0801874c 	.word	0x0801874c
 80093f0:	08018a8c 	.word	0x08018a8c
 80093f4:	08018aac 	.word	0x08018aac
 80093f8:	08018ac8 	.word	0x08018ac8
 80093fc:	2000d1a4 	.word	0x2000d1a4

08009400 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d025      	beq.n	8009462 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009420:	2b10      	cmp	r3, #16
 8009422:	d00e      	beq.n	8009442 <lwip_netconn_do_bind+0x42>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d119      	bne.n	800945c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6858      	ldr	r0, [r3, #4]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	899b      	ldrh	r3, [r3, #12]
 8009436:	461a      	mov	r2, r3
 8009438:	f009 f9e4 	bl	8012804 <udp_bind>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
        break;
 8009440:	e011      	b.n	8009466 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6858      	ldr	r0, [r3, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6899      	ldr	r1, [r3, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	899b      	ldrh	r3, [r3, #12]
 8009450:	461a      	mov	r2, r3
 8009452:	f003 f81d 	bl	800c490 <tcp_bind>
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]
        break;
 800945a:	e004      	b.n	8009466 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800945c:	23fa      	movs	r3, #250	; 0xfa
 800945e:	73fb      	strb	r3, [r7, #15]
        break;
 8009460:	e001      	b.n	8009466 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009462:	23fa      	movs	r3, #250	; 0xfa
 8009464:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	7bfa      	ldrb	r2, [r7, #15]
 800946a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d07f      	beq.n	800958a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009494:	2b10      	cmp	r3, #16
 8009496:	d175      	bne.n	8009584 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d165      	bne.n	800956e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	7d1b      	ldrb	r3, [r3, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80094ae:	23fa      	movs	r3, #250	; 0xfa
 80094b0:	72fb      	strb	r3, [r7, #11]
 80094b2:	e06c      	b.n	800958e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80094b4:	23ff      	movs	r3, #255	; 0xff
 80094b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f107 020b 	add.w	r2, r7, #11
 80094c2:	7cf9      	ldrb	r1, [r7, #19]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f003 f89b 	bl	800c600 <tcp_listen_with_backlog_and_err>
 80094ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d05d      	beq.n	800958e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3310      	adds	r3, #16
 80094d8:	4618      	mov	r0, r3
 80094da:	f00d fd62 	bl	8016fa2 <sys_mbox_valid>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3310      	adds	r3, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f00d fcd2 	bl	8016e94 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3310      	adds	r3, #16
 80094f6:	4618      	mov	r0, r3
 80094f8:	f00d fd64 	bl	8016fc4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3314      	adds	r3, #20
 8009506:	4618      	mov	r0, r3
 8009508:	f00d fd4b 	bl	8016fa2 <sys_mbox_valid>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d108      	bne.n	8009524 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	2106      	movs	r1, #6
 800951a:	4618      	mov	r0, r3
 800951c:	f00d fc98 	bl	8016e50 <sys_mbox_new>
 8009520:	4603      	mov	r3, r0
 8009522:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009524:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d118      	bne.n	800955e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2202      	movs	r2, #2
 8009532:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4619      	mov	r1, r3
 8009548:	4610      	mov	r0, r2
 800954a:	f004 f823 	bl	800d594 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4912      	ldr	r1, [pc, #72]	; (80095a0 <lwip_netconn_do_listen+0x12c>)
 8009556:	4618      	mov	r0, r3
 8009558:	f004 f894 	bl	800d684 <tcp_accept>
 800955c:	e017      	b.n	800958e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f002 fe44 	bl	800c1ec <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	605a      	str	r2, [r3, #4]
 800956c:	e00f      	b.n	800958e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d102      	bne.n	800957e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	72fb      	strb	r3, [r7, #11]
 800957c:	e007      	b.n	800958e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800957e:	23f5      	movs	r3, #245	; 0xf5
 8009580:	72fb      	strb	r3, [r7, #11]
 8009582:	e004      	b.n	800958e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009584:	23f0      	movs	r3, #240	; 0xf0
 8009586:	72fb      	strb	r3, [r7, #11]
 8009588:	e001      	b.n	800958e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800958a:	23f5      	movs	r3, #245	; 0xf5
 800958c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800958e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009596:	bf00      	nop
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	08008a81 	.word	0x08008a81

080095a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2200      	movs	r2, #0
 80095b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d022      	beq.n	8009606 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ca:	2b10      	cmp	r3, #16
 80095cc:	d11b      	bne.n	8009606 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095da:	d202      	bcs.n	80095e2 <lwip_netconn_do_recv+0x3e>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	e001      	b.n	80095e6 <lwip_netconn_do_recv+0x42>
 80095e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	89fa      	ldrh	r2, [r7, #14]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f003 f908 	bl	800c808 <tcp_recved>
        remaining -= recved;
 80095f8:	89fb      	ldrh	r3, [r7, #14]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e6      	bne.n	80095d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009606:	bf00      	nop
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <lwip_netconn_do_writemore+0x24>
 8009626:	4b96      	ldr	r3, [pc, #600]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 8009628:	f240 6273 	movw	r2, #1651	; 0x673
 800962c:	4995      	ldr	r1, [pc, #596]	; (8009884 <lwip_netconn_do_writemore+0x274>)
 800962e:	4896      	ldr	r0, [pc, #600]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 8009630:	f00d fede 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d006      	beq.n	800964a <lwip_netconn_do_writemore+0x3a>
 800963c:	4b90      	ldr	r3, [pc, #576]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 800963e:	f240 6274 	movw	r2, #1652	; 0x674
 8009642:	4992      	ldr	r1, [pc, #584]	; (800988c <lwip_netconn_do_writemore+0x27c>)
 8009644:	4890      	ldr	r0, [pc, #576]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 8009646:	f00d fed3 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <lwip_netconn_do_writemore+0x50>
 8009652:	4b8b      	ldr	r3, [pc, #556]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 8009654:	f240 6275 	movw	r2, #1653	; 0x675
 8009658:	498d      	ldr	r1, [pc, #564]	; (8009890 <lwip_netconn_do_writemore+0x280>)
 800965a:	488b      	ldr	r0, [pc, #556]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 800965c:	f00d fec8 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d106      	bne.n	8009676 <lwip_netconn_do_writemore+0x66>
 8009668:	4b85      	ldr	r3, [pc, #532]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 800966a:	f240 6276 	movw	r2, #1654	; 0x676
 800966e:	4989      	ldr	r1, [pc, #548]	; (8009894 <lwip_netconn_do_writemore+0x284>)
 8009670:	4885      	ldr	r0, [pc, #532]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 8009672:	f00d febd 	bl	80173f0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	429a      	cmp	r2, r3
 8009684:	d306      	bcc.n	8009694 <lwip_netconn_do_writemore+0x84>
 8009686:	4b7e      	ldr	r3, [pc, #504]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 8009688:	f240 6277 	movw	r2, #1655	; 0x677
 800968c:	4982      	ldr	r1, [pc, #520]	; (8009898 <lwip_netconn_do_writemore+0x288>)
 800968e:	487e      	ldr	r0, [pc, #504]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 8009690:	f00d feae 	bl	80173f0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	899b      	ldrh	r3, [r3, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <lwip_netconn_do_writemore+0x9c>
 800969e:	4b78      	ldr	r3, [pc, #480]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 80096a0:	f240 6279 	movw	r2, #1657	; 0x679
 80096a4:	497d      	ldr	r1, [pc, #500]	; (800989c <lwip_netconn_do_writemore+0x28c>)
 80096a6:	4878      	ldr	r0, [pc, #480]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 80096a8:	f00d fea2 	bl	80173f0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	7f1b      	ldrb	r3, [r3, #28]
 80096b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	7f1b      	ldrb	r3, [r3, #28]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <lwip_netconn_do_writemore+0xba>
 80096c0:	7ebb      	ldrb	r3, [r7, #26]
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <lwip_netconn_do_writemore+0xbe>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <lwip_netconn_do_writemore+0xc0>
 80096ce:	2300      	movs	r3, #0
 80096d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	4413      	add	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fc:	d307      	bcc.n	800970e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80096fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009702:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009704:	7ebb      	ldrb	r3, [r7, #26]
 8009706:	f043 0302 	orr.w	r3, r3, #2
 800970a:	76bb      	strb	r3, [r7, #26]
 800970c:	e001      	b.n	8009712 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800971a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800971c:	89fa      	ldrh	r2, [r7, #14]
 800971e:	8bbb      	ldrh	r3, [r7, #28]
 8009720:	429a      	cmp	r2, r3
 8009722:	d216      	bcs.n	8009752 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009724:	89fb      	ldrh	r3, [r7, #14]
 8009726:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009728:	7e3b      	ldrb	r3, [r7, #24]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00d      	beq.n	800974a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800972e:	8bbb      	ldrh	r3, [r7, #28]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10e      	bne.n	8009752 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <lwip_netconn_do_writemore+0x134>
 800973e:	f06f 0306 	mvn.w	r3, #6
 8009742:	e000      	b.n	8009746 <lwip_netconn_do_writemore+0x136>
 8009744:	2300      	movs	r3, #0
 8009746:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009748:	e07d      	b.n	8009846 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800974a:	7ebb      	ldrb	r3, [r7, #26]
 800974c:	f043 0302 	orr.w	r3, r3, #2
 8009750:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	8bbb      	ldrh	r3, [r7, #28]
 800975a:	441a      	add	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	d906      	bls.n	8009776 <lwip_netconn_do_writemore+0x166>
 8009768:	4b45      	ldr	r3, [pc, #276]	; (8009880 <lwip_netconn_do_writemore+0x270>)
 800976a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800976e:	494c      	ldr	r1, [pc, #304]	; (80098a0 <lwip_netconn_do_writemore+0x290>)
 8009770:	4845      	ldr	r0, [pc, #276]	; (8009888 <lwip_netconn_do_writemore+0x278>)
 8009772:	f00d fe3d 	bl	80173f0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009776:	8bbb      	ldrh	r3, [r7, #28]
 8009778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800977c:	4293      	cmp	r3, r2
 800977e:	d103      	bne.n	8009788 <lwip_netconn_do_writemore+0x178>
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009786:	d209      	bcs.n	800979c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800978c:	8bba      	ldrh	r2, [r7, #28]
 800978e:	429a      	cmp	r2, r3
 8009790:	d10b      	bne.n	80097aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	899b      	ldrh	r3, [r3, #12]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d906      	bls.n	80097aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800979c:	2301      	movs	r3, #1
 800979e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80097a0:	7ebb      	ldrb	r3, [r7, #26]
 80097a2:	f043 0302 	orr.w	r3, r3, #2
 80097a6:	76bb      	strb	r3, [r7, #26]
 80097a8:	e001      	b.n	80097ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6858      	ldr	r0, [r3, #4]
 80097b2:	7ebb      	ldrb	r3, [r7, #26]
 80097b4:	8bba      	ldrh	r2, [r7, #28]
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	f006 fe2e 	bl	8010418 <tcp_write>
 80097bc:	4603      	mov	r3, r0
 80097be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80097c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d12c      	bne.n	8009822 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	6999      	ldr	r1, [r3, #24]
 80097ce:	8bba      	ldrh	r2, [r7, #28]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	440a      	add	r2, r1
 80097d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	6919      	ldr	r1, [r3, #16]
 80097de:	8bba      	ldrh	r2, [r7, #28]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	440a      	add	r2, r1
 80097e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	691a      	ldr	r2, [r3, #16]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d113      	bne.n	8009822 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	899a      	ldrh	r2, [r3, #12]
 8009800:	3a01      	subs	r2, #1
 8009802:	b292      	uxth	r2, r2
 8009804:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	899b      	ldrh	r3, [r3, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	3208      	adds	r2, #8
 8009818:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	2200      	movs	r2, #0
 8009820:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009822:	7e7b      	ldrb	r3, [r7, #25]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <lwip_netconn_do_writemore+0x222>
 8009828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f43f af50 	beq.w	80096d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <lwip_netconn_do_writemore+0x234>
 800983a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d146      	bne.n	80098d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009844:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009846:	7e3b      	ldrb	r3, [r7, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02b      	beq.n	80098a4 <lwip_netconn_do_writemore+0x294>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	429a      	cmp	r2, r3
 800985a:	d223      	bcs.n	80098a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <lwip_netconn_do_writemore+0x260>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2200      	movs	r2, #0
 800986a:	2103      	movs	r1, #3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7f1b      	ldrb	r3, [r3, #28]
 8009874:	f043 0310 	orr.w	r3, r3, #16
 8009878:	b2da      	uxtb	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	771a      	strb	r2, [r3, #28]
 800987e:	e028      	b.n	80098d2 <lwip_netconn_do_writemore+0x2c2>
 8009880:	08018708 	.word	0x08018708
 8009884:	08018860 	.word	0x08018860
 8009888:	0801874c 	.word	0x0801874c
 800988c:	08018b68 	.word	0x08018b68
 8009890:	08018870 	.word	0x08018870
 8009894:	08018b88 	.word	0x08018b88
 8009898:	08018ba0 	.word	0x08018ba0
 800989c:	08018be0 	.word	0x08018be0
 80098a0:	08018c08 	.word	0x08018c08
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80098b0:	d305      	bcc.n	80098be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d909      	bls.n	80098d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <lwip_netconn_do_writemore+0x2c2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	2200      	movs	r2, #0
 80098cc:	2103      	movs	r1, #3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80098d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d11d      	bne.n	8009916 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d002      	beq.n	80098f0 <lwip_netconn_do_writemore+0x2e0>
 80098ea:	7e3b      	ldrb	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80098f0:	2301      	movs	r3, #1
 80098f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f007 fb77 	bl	8010fec <tcp_output>
 80098fe:	4603      	mov	r3, r0
 8009900:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009902:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009906:	f113 0f04 	cmn.w	r3, #4
 800990a:	d12c      	bne.n	8009966 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800990c:	7b3b      	ldrb	r3, [r7, #12]
 800990e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009910:	2301      	movs	r3, #1
 8009912:	76fb      	strb	r3, [r7, #27]
 8009914:	e027      	b.n	8009966 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991e:	d120      	bne.n	8009962 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	f007 fb61 	bl	8010fec <tcp_output>
 800992a:	4603      	mov	r3, r0
 800992c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800992e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009932:	f113 0f04 	cmn.w	r3, #4
 8009936:	d104      	bne.n	8009942 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009938:	7b7b      	ldrb	r3, [r7, #13]
 800993a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800993c:	2301      	movs	r3, #1
 800993e:	76fb      	strb	r3, [r7, #27]
 8009940:	e011      	b.n	8009966 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009942:	7e3b      	ldrb	r3, [r7, #24]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00e      	beq.n	8009966 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <lwip_netconn_do_writemore+0x348>
 8009952:	f06f 0306 	mvn.w	r3, #6
 8009956:	e000      	b.n	800995a <lwip_netconn_do_writemore+0x34a>
 8009958:	2300      	movs	r3, #0
 800995a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800995c:	2301      	movs	r3, #1
 800995e:	76fb      	strb	r3, [r7, #27]
 8009960:	e001      	b.n	8009966 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009962:	2301      	movs	r3, #1
 8009964:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009966:	7efb      	ldrb	r3, [r7, #27]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d015      	beq.n	8009998 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	330c      	adds	r3, #12
 8009974:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	7ffa      	ldrb	r2, [r7, #31]
 800997c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d006      	beq.n	800999e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009990:	68b8      	ldr	r0, [r7, #8]
 8009992:	f00d fb7d 	bl	8017090 <sys_sem_signal>
 8009996:	e002      	b.n	800999e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	e000      	b.n	80099a0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fd1c 	bl	80083f6 <netconn_err>
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80099c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d166      	bne.n	8009a98 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d4:	2b10      	cmp	r3, #16
 80099d6:	d15d      	bne.n	8009a94 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80099e2:	23fb      	movs	r3, #251	; 0xfb
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	e057      	b.n	8009a98 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d04d      	beq.n	8009a8e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2201      	movs	r2, #1
 80099f8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d006      	beq.n	8009a12 <lwip_netconn_do_write+0x6a>
 8009a04:	4b28      	ldr	r3, [pc, #160]	; (8009aa8 <lwip_netconn_do_write+0x100>)
 8009a06:	f240 7223 	movw	r2, #1827	; 0x723
 8009a0a:	4928      	ldr	r1, [pc, #160]	; (8009aac <lwip_netconn_do_write+0x104>)
 8009a0c:	4828      	ldr	r0, [pc, #160]	; (8009ab0 <lwip_netconn_do_write+0x108>)
 8009a0e:	f00d fcef 	bl	80173f0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <lwip_netconn_do_write+0x80>
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <lwip_netconn_do_write+0x100>)
 8009a1c:	f240 7224 	movw	r2, #1828	; 0x724
 8009a20:	4924      	ldr	r1, [pc, #144]	; (8009ab4 <lwip_netconn_do_write+0x10c>)
 8009a22:	4823      	ldr	r0, [pc, #140]	; (8009ab0 <lwip_netconn_do_write+0x108>)
 8009a24:	f00d fce4 	bl	80173f0 <iprintf>
        msg->conn->current_msg = msg;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff fdea 	bl	8009610 <lwip_netconn_do_writemore>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d02e      	beq.n	8009aa0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d006      	beq.n	8009a5a <lwip_netconn_do_write+0xb2>
 8009a4c:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <lwip_netconn_do_write+0x100>)
 8009a4e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009a52:	4919      	ldr	r1, [pc, #100]	; (8009ab8 <lwip_netconn_do_write+0x110>)
 8009a54:	4816      	ldr	r0, [pc, #88]	; (8009ab0 <lwip_netconn_do_write+0x108>)
 8009a56:	f00d fccb 	bl	80173f0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009a5a:	4818      	ldr	r0, [pc, #96]	; (8009abc <lwip_netconn_do_write+0x114>)
 8009a5c:	f00d fb89 	bl	8017172 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f00d fae0 	bl	801702e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009a6e:	4813      	ldr	r0, [pc, #76]	; (8009abc <lwip_netconn_do_write+0x114>)
 8009a70:	f00d fb70 	bl	8017154 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d110      	bne.n	8009aa0 <lwip_netconn_do_write+0xf8>
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <lwip_netconn_do_write+0x100>)
 8009a80:	f240 722c 	movw	r2, #1836	; 0x72c
 8009a84:	490c      	ldr	r1, [pc, #48]	; (8009ab8 <lwip_netconn_do_write+0x110>)
 8009a86:	480a      	ldr	r0, [pc, #40]	; (8009ab0 <lwip_netconn_do_write+0x108>)
 8009a88:	f00d fcb2 	bl	80173f0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009a8c:	e008      	b.n	8009aa0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009a8e:	23f5      	movs	r3, #245	; 0xf5
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	e001      	b.n	8009a98 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009a94:	23fa      	movs	r3, #250	; 0xfa
 8009a96:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	e000      	b.n	8009aa2 <lwip_netconn_do_write+0xfa>
        return;
 8009aa0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	08018708 	.word	0x08018708
 8009aac:	08018aac 	.word	0x08018aac
 8009ab0:	0801874c 	.word	0x0801874c
 8009ab4:	08018c34 	.word	0x08018c34
 8009ab8:	08018ac8 	.word	0x08018ac8
 8009abc:	2000d1a4 	.word	0x2000d1a4

08009ac0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d069      	beq.n	8009bb2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d162      	bne.n	8009bb2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d002      	beq.n	8009afa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d05b      	beq.n	8009bb2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d103      	bne.n	8009b08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	22f5      	movs	r2, #245	; 0xf5
 8009b04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009b06:	e059      	b.n	8009bbc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d103      	bne.n	8009b16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	22fb      	movs	r2, #251	; 0xfb
 8009b12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009b14:	e052      	b.n	8009bbc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	7a1b      	ldrb	r3, [r3, #8]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff f99e 	bl	8008e68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <lwip_netconn_do_close+0x84>
 8009b36:	4b23      	ldr	r3, [pc, #140]	; (8009bc4 <lwip_netconn_do_close+0x104>)
 8009b38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009b3c:	4922      	ldr	r1, [pc, #136]	; (8009bc8 <lwip_netconn_do_close+0x108>)
 8009b3e:	4823      	ldr	r0, [pc, #140]	; (8009bcc <lwip_netconn_do_close+0x10c>)
 8009b40:	f00d fc56 	bl	80173f0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fa02 	bl	8008f64 <lwip_netconn_do_close_internal>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d029      	beq.n	8009bba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d006      	beq.n	8009b7e <lwip_netconn_do_close+0xbe>
 8009b70:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <lwip_netconn_do_close+0x104>)
 8009b72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009b76:	4916      	ldr	r1, [pc, #88]	; (8009bd0 <lwip_netconn_do_close+0x110>)
 8009b78:	4814      	ldr	r0, [pc, #80]	; (8009bcc <lwip_netconn_do_close+0x10c>)
 8009b7a:	f00d fc39 	bl	80173f0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009b7e:	4815      	ldr	r0, [pc, #84]	; (8009bd4 <lwip_netconn_do_close+0x114>)
 8009b80:	f00d faf7 	bl	8017172 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f00d fa4e 	bl	801702e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009b92:	4810      	ldr	r0, [pc, #64]	; (8009bd4 <lwip_netconn_do_close+0x114>)
 8009b94:	f00d fade 	bl	8017154 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <lwip_netconn_do_close+0xfa>
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <lwip_netconn_do_close+0x104>)
 8009ba4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009ba8:	4909      	ldr	r1, [pc, #36]	; (8009bd0 <lwip_netconn_do_close+0x110>)
 8009baa:	4808      	ldr	r0, [pc, #32]	; (8009bcc <lwip_netconn_do_close+0x10c>)
 8009bac:	f00d fc20 	bl	80173f0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009bb0:	e003      	b.n	8009bba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	22f5      	movs	r2, #245	; 0xf5
 8009bb6:	711a      	strb	r2, [r3, #4]
 8009bb8:	e000      	b.n	8009bbc <lwip_netconn_do_close+0xfc>
      return;
 8009bba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	08018708 	.word	0x08018708
 8009bc8:	08018aac 	.word	0x08018aac
 8009bcc:	0801874c 	.word	0x0801874c
 8009bd0:	08018ac8 	.word	0x08018ac8
 8009bd4:	2000d1a4 	.word	0x2000d1a4

08009bd8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d013      	beq.n	8009c0e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fe40 	bl	800b878 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	605a      	str	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	2006      	movs	r0, #6
 8009c0a:	f000 ff85 	bl	800ab18 <memp_free>
  }
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <netbuf_data+0x24>
 8009c2a:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <netbuf_data+0x80>)
 8009c2c:	22c6      	movs	r2, #198	; 0xc6
 8009c2e:	491b      	ldr	r1, [pc, #108]	; (8009c9c <netbuf_data+0x84>)
 8009c30:	481b      	ldr	r0, [pc, #108]	; (8009ca0 <netbuf_data+0x88>)
 8009c32:	f00d fbdd 	bl	80173f0 <iprintf>
 8009c36:	f06f 030f 	mvn.w	r3, #15
 8009c3a:	e029      	b.n	8009c90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d108      	bne.n	8009c54 <netbuf_data+0x3c>
 8009c42:	4b15      	ldr	r3, [pc, #84]	; (8009c98 <netbuf_data+0x80>)
 8009c44:	22c7      	movs	r2, #199	; 0xc7
 8009c46:	4917      	ldr	r1, [pc, #92]	; (8009ca4 <netbuf_data+0x8c>)
 8009c48:	4815      	ldr	r0, [pc, #84]	; (8009ca0 <netbuf_data+0x88>)
 8009c4a:	f00d fbd1 	bl	80173f0 <iprintf>
 8009c4e:	f06f 030f 	mvn.w	r3, #15
 8009c52:	e01d      	b.n	8009c90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d108      	bne.n	8009c6c <netbuf_data+0x54>
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <netbuf_data+0x80>)
 8009c5c:	22c8      	movs	r2, #200	; 0xc8
 8009c5e:	4912      	ldr	r1, [pc, #72]	; (8009ca8 <netbuf_data+0x90>)
 8009c60:	480f      	ldr	r0, [pc, #60]	; (8009ca0 <netbuf_data+0x88>)
 8009c62:	f00d fbc5 	bl	80173f0 <iprintf>
 8009c66:	f06f 030f 	mvn.w	r3, #15
 8009c6a:	e011      	b.n	8009c90 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <netbuf_data+0x62>
    return ERR_BUF;
 8009c74:	f06f 0301 	mvn.w	r3, #1
 8009c78:	e00a      	b.n	8009c90 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	895a      	ldrh	r2, [r3, #10]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	08018c60 	.word	0x08018c60
 8009c9c:	08018d68 	.word	0x08018d68
 8009ca0:	08018cb0 	.word	0x08018cb0
 8009ca4:	08018d84 	.word	0x08018d84
 8009ca8:	08018da4 	.word	0x08018da4

08009cac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <netbuf_next+0x20>
 8009cba:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <netbuf_next+0x54>)
 8009cbc:	22e0      	movs	r2, #224	; 0xe0
 8009cbe:	4911      	ldr	r1, [pc, #68]	; (8009d04 <netbuf_next+0x58>)
 8009cc0:	4811      	ldr	r0, [pc, #68]	; (8009d08 <netbuf_next+0x5c>)
 8009cc2:	f00d fb95 	bl	80173f0 <iprintf>
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	e014      	b.n	8009cf6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <netbuf_next+0x30>
    return -1;
 8009cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cda:	e00c      	b.n	8009cf6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <netbuf_next+0x48>
    return 1;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <netbuf_next+0x4a>
  }
  return 0;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	08018c60 	.word	0x08018c60
 8009d04:	08018dc0 	.word	0x08018dc0
 8009d08:	08018cb0 	.word	0x08018cb0

08009d0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009d16:	f008 fa21 	bl	801215c <sys_timeouts_sleeptime>
 8009d1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d22:	d10b      	bne.n	8009d3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009d24:	4813      	ldr	r0, [pc, #76]	; (8009d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d26:	f00d fa24 	bl	8017172 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f00d f8dc 	bl	8016eec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009d34:	480f      	ldr	r0, [pc, #60]	; (8009d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d36:	f00d fa0d 	bl	8017154 <sys_mutex_lock>
    return;
 8009d3a:	e018      	b.n	8009d6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009d42:	f008 f9d1 	bl	80120e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009d46:	e7e6      	b.n	8009d16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009d48:	480a      	ldr	r0, [pc, #40]	; (8009d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d4a:	f00d fa12 	bl	8017172 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f00d f8ca 	bl	8016eec <sys_arch_mbox_fetch>
 8009d58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009d5a:	4806      	ldr	r0, [pc, #24]	; (8009d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d5c:	f00d f9fa 	bl	8017154 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d102      	bne.n	8009d6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009d68:	f008 f9be 	bl	80120e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009d6c:	e7d3      	b.n	8009d16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	2000d1a4 	.word	0x2000d1a4

08009d78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009d80:	4810      	ldr	r0, [pc, #64]	; (8009dc4 <tcpip_thread+0x4c>)
 8009d82:	f00d f9e7 	bl	8017154 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009d86:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <tcpip_thread+0x50>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009d8e:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <tcpip_thread+0x50>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a0e      	ldr	r2, [pc, #56]	; (8009dcc <tcpip_thread+0x54>)
 8009d94:	6812      	ldr	r2, [r2, #0]
 8009d96:	4610      	mov	r0, r2
 8009d98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d9a:	f107 030c 	add.w	r3, r7, #12
 8009d9e:	4619      	mov	r1, r3
 8009da0:	480b      	ldr	r0, [pc, #44]	; (8009dd0 <tcpip_thread+0x58>)
 8009da2:	f7ff ffb3 	bl	8009d0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d106      	bne.n	8009dba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <tcpip_thread+0x5c>)
 8009dae:	2291      	movs	r2, #145	; 0x91
 8009db0:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <tcpip_thread+0x60>)
 8009db2:	480a      	ldr	r0, [pc, #40]	; (8009ddc <tcpip_thread+0x64>)
 8009db4:	f00d fb1c 	bl	80173f0 <iprintf>
      continue;
 8009db8:	e003      	b.n	8009dc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f80f 	bl	8009de0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009dc2:	e7ea      	b.n	8009d9a <tcpip_thread+0x22>
 8009dc4:	2000d1a4 	.word	0x2000d1a4
 8009dc8:	2000d198 	.word	0x2000d198
 8009dcc:	2000d19c 	.word	0x2000d19c
 8009dd0:	2000d1a0 	.word	0x2000d1a0
 8009dd4:	08018df8 	.word	0x08018df8
 8009dd8:	08018e28 	.word	0x08018e28
 8009ddc:	08018e48 	.word	0x08018e48

08009de0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d026      	beq.n	8009e3e <tcpip_thread_handle_msg+0x5e>
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	dc2b      	bgt.n	8009e4c <tcpip_thread_handle_msg+0x6c>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <tcpip_thread_handle_msg+0x1e>
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d015      	beq.n	8009e28 <tcpip_thread_handle_msg+0x48>
 8009dfc:	e026      	b.n	8009e4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6850      	ldr	r0, [r2, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6892      	ldr	r2, [r2, #8]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4798      	blx	r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fd2d 	bl	800b878 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	2009      	movs	r0, #9
 8009e22:	f000 fe79 	bl	800ab18 <memp_free>
      break;
 8009e26:	e018      	b.n	8009e5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6892      	ldr	r2, [r2, #8]
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	2008      	movs	r0, #8
 8009e38:	f000 fe6e 	bl	800ab18 <memp_free>
      break;
 8009e3c:	e00d      	b.n	8009e5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6892      	ldr	r2, [r2, #8]
 8009e46:	4610      	mov	r0, r2
 8009e48:	4798      	blx	r3
      break;
 8009e4a:	e006      	b.n	8009e5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <tcpip_thread_handle_msg+0x84>)
 8009e4e:	22cf      	movs	r2, #207	; 0xcf
 8009e50:	4905      	ldr	r1, [pc, #20]	; (8009e68 <tcpip_thread_handle_msg+0x88>)
 8009e52:	4806      	ldr	r0, [pc, #24]	; (8009e6c <tcpip_thread_handle_msg+0x8c>)
 8009e54:	f00d facc 	bl	80173f0 <iprintf>
      break;
 8009e58:	bf00      	nop
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	08018df8 	.word	0x08018df8
 8009e68:	08018e28 	.word	0x08018e28
 8009e6c:	08018e48 	.word	0x08018e48

08009e70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009e7c:	481a      	ldr	r0, [pc, #104]	; (8009ee8 <tcpip_inpkt+0x78>)
 8009e7e:	f00d f890 	bl	8016fa2 <sys_mbox_valid>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d105      	bne.n	8009e94 <tcpip_inpkt+0x24>
 8009e88:	4b18      	ldr	r3, [pc, #96]	; (8009eec <tcpip_inpkt+0x7c>)
 8009e8a:	22fc      	movs	r2, #252	; 0xfc
 8009e8c:	4918      	ldr	r1, [pc, #96]	; (8009ef0 <tcpip_inpkt+0x80>)
 8009e8e:	4819      	ldr	r0, [pc, #100]	; (8009ef4 <tcpip_inpkt+0x84>)
 8009e90:	f00d faae 	bl	80173f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009e94:	2009      	movs	r0, #9
 8009e96:	f000 fdc9 	bl	800aa2c <memp_malloc>
 8009e9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea6:	e01a      	b.n	8009ede <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009ec0:	6979      	ldr	r1, [r7, #20]
 8009ec2:	4809      	ldr	r0, [pc, #36]	; (8009ee8 <tcpip_inpkt+0x78>)
 8009ec4:	f00c fff8 	bl	8016eb8 <sys_mbox_trypost>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d006      	beq.n	8009edc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009ece:	6979      	ldr	r1, [r7, #20]
 8009ed0:	2009      	movs	r0, #9
 8009ed2:	f000 fe21 	bl	800ab18 <memp_free>
    return ERR_MEM;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	e000      	b.n	8009ede <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009edc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000d1a0 	.word	0x2000d1a0
 8009eec:	08018df8 	.word	0x08018df8
 8009ef0:	08018e70 	.word	0x08018e70
 8009ef4:	08018e48 	.word	0x08018e48

08009ef8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009f08:	f003 0318 	and.w	r3, r3, #24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009f10:	4a08      	ldr	r2, [pc, #32]	; (8009f34 <tcpip_input+0x3c>)
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ffab 	bl	8009e70 <tcpip_inpkt>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	e005      	b.n	8009f2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009f1e:	4a06      	ldr	r2, [pc, #24]	; (8009f38 <tcpip_input+0x40>)
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ffa4 	bl	8009e70 <tcpip_inpkt>
 8009f28:	4603      	mov	r3, r0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	08016ca5 	.word	0x08016ca5
 8009f38:	08015b71 	.word	0x08015b71

08009f3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f46:	4819      	ldr	r0, [pc, #100]	; (8009fac <tcpip_try_callback+0x70>)
 8009f48:	f00d f82b 	bl	8016fa2 <sys_mbox_valid>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <tcpip_try_callback+0x24>
 8009f52:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <tcpip_try_callback+0x74>)
 8009f54:	f240 125d 	movw	r2, #349	; 0x15d
 8009f58:	4916      	ldr	r1, [pc, #88]	; (8009fb4 <tcpip_try_callback+0x78>)
 8009f5a:	4817      	ldr	r0, [pc, #92]	; (8009fb8 <tcpip_try_callback+0x7c>)
 8009f5c:	f00d fa48 	bl	80173f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009f60:	2008      	movs	r0, #8
 8009f62:	f000 fd63 	bl	800aa2c <memp_malloc>
 8009f66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d102      	bne.n	8009f74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	e017      	b.n	8009fa4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f86:	68f9      	ldr	r1, [r7, #12]
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <tcpip_try_callback+0x70>)
 8009f8a:	f00c ff95 	bl	8016eb8 <sys_mbox_trypost>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	2008      	movs	r0, #8
 8009f98:	f000 fdbe 	bl	800ab18 <memp_free>
    return ERR_MEM;
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa0:	e000      	b.n	8009fa4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	2000d1a0 	.word	0x2000d1a0
 8009fb0:	08018df8 	.word	0x08018df8
 8009fb4:	08018e70 	.word	0x08018e70
 8009fb8:	08018e48 	.word	0x08018e48

08009fbc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009fc8:	4806      	ldr	r0, [pc, #24]	; (8009fe4 <tcpip_send_msg_wait_sem+0x28>)
 8009fca:	f00d f8c3 	bl	8017154 <sys_mutex_lock>
  fn(apimsg);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68b8      	ldr	r0, [r7, #8]
 8009fd2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009fd4:	4803      	ldr	r0, [pc, #12]	; (8009fe4 <tcpip_send_msg_wait_sem+0x28>)
 8009fd6:	f00d f8cc 	bl	8017172 <sys_mutex_unlock>
  return ERR_OK;
 8009fda:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	2000d1a4 	.word	0x2000d1a4

08009fe8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009ff2:	f000 f871 	bl	800a0d8 <lwip_init>

  tcpip_init_done = initfunc;
 8009ff6:	4a17      	ldr	r2, [pc, #92]	; (800a054 <tcpip_init+0x6c>)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009ffc:	4a16      	ldr	r2, [pc, #88]	; (800a058 <tcpip_init+0x70>)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a002:	2106      	movs	r1, #6
 800a004:	4815      	ldr	r0, [pc, #84]	; (800a05c <tcpip_init+0x74>)
 800a006:	f00c ff23 	bl	8016e50 <sys_mbox_new>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <tcpip_init+0x78>)
 800a012:	f240 2261 	movw	r2, #609	; 0x261
 800a016:	4913      	ldr	r1, [pc, #76]	; (800a064 <tcpip_init+0x7c>)
 800a018:	4813      	ldr	r0, [pc, #76]	; (800a068 <tcpip_init+0x80>)
 800a01a:	f00d f9e9 	bl	80173f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a01e:	4813      	ldr	r0, [pc, #76]	; (800a06c <tcpip_init+0x84>)
 800a020:	f00d f87c 	bl	801711c <sys_mutex_new>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d006      	beq.n	800a038 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a02a:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <tcpip_init+0x78>)
 800a02c:	f240 2265 	movw	r2, #613	; 0x265
 800a030:	490f      	ldr	r1, [pc, #60]	; (800a070 <tcpip_init+0x88>)
 800a032:	480d      	ldr	r0, [pc, #52]	; (800a068 <tcpip_init+0x80>)
 800a034:	f00d f9dc 	bl	80173f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a038:	2300      	movs	r3, #0
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a040:	2200      	movs	r2, #0
 800a042:	490c      	ldr	r1, [pc, #48]	; (800a074 <tcpip_init+0x8c>)
 800a044:	480c      	ldr	r0, [pc, #48]	; (800a078 <tcpip_init+0x90>)
 800a046:	f00d f8a1 	bl	801718c <sys_thread_new>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	2000d198 	.word	0x2000d198
 800a058:	2000d19c 	.word	0x2000d19c
 800a05c:	2000d1a0 	.word	0x2000d1a0
 800a060:	08018df8 	.word	0x08018df8
 800a064:	08018e80 	.word	0x08018e80
 800a068:	08018e48 	.word	0x08018e48
 800a06c:	2000d1a4 	.word	0x2000d1a4
 800a070:	08018ea4 	.word	0x08018ea4
 800a074:	08009d79 	.word	0x08009d79
 800a078:	08018ec8 	.word	0x08018ec8

0800a07c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	b21a      	sxth	r2, r3
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	0a1b      	lsrs	r3, r3, #8
 800a090:	b29b      	uxth	r3, r3
 800a092:	b21b      	sxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b21b      	sxth	r3, r3
 800a098:	b29b      	uxth	r3, r3
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	061a      	lsls	r2, r3, #24
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	021b      	lsls	r3, r3, #8
 800a0b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	0a1b      	lsrs	r3, r3, #8
 800a0c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	0e1b      	lsrs	r3, r3, #24
 800a0ca:	4313      	orrs	r3, r2
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a0e2:	f00d f80d 	bl	8017100 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a0e6:	f000 f8d5 	bl	800a294 <mem_init>
  memp_init();
 800a0ea:	f000 fc31 	bl	800a950 <memp_init>
  pbuf_init();
  netif_init();
 800a0ee:	f000 fd3d 	bl	800ab6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a0f2:	f008 f86b 	bl	80121cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a0f6:	f001 fe69 	bl	800bdcc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a0fa:	f007 ffad 	bl	8012058 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a112:	4b05      	ldr	r3, [pc, #20]	; (800a128 <ptr_to_mem+0x20>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	4413      	add	r3, r2
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	2000d814 	.word	0x2000d814

0800a12c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <mem_to_ptr+0x20>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	b29b      	uxth	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	2000d814 	.word	0x2000d814

0800a150 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a158:	4b45      	ldr	r3, [pc, #276]	; (800a270 <plug_holes+0x120>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d206      	bcs.n	800a170 <plug_holes+0x20>
 800a162:	4b44      	ldr	r3, [pc, #272]	; (800a274 <plug_holes+0x124>)
 800a164:	f240 12df 	movw	r2, #479	; 0x1df
 800a168:	4943      	ldr	r1, [pc, #268]	; (800a278 <plug_holes+0x128>)
 800a16a:	4844      	ldr	r0, [pc, #272]	; (800a27c <plug_holes+0x12c>)
 800a16c:	f00d f940 	bl	80173f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a170:	4b43      	ldr	r3, [pc, #268]	; (800a280 <plug_holes+0x130>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	429a      	cmp	r2, r3
 800a178:	d306      	bcc.n	800a188 <plug_holes+0x38>
 800a17a:	4b3e      	ldr	r3, [pc, #248]	; (800a274 <plug_holes+0x124>)
 800a17c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a180:	4940      	ldr	r1, [pc, #256]	; (800a284 <plug_holes+0x134>)
 800a182:	483e      	ldr	r0, [pc, #248]	; (800a27c <plug_holes+0x12c>)
 800a184:	f00d f934 	bl	80173f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	791b      	ldrb	r3, [r3, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <plug_holes+0x4e>
 800a190:	4b38      	ldr	r3, [pc, #224]	; (800a274 <plug_holes+0x124>)
 800a192:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a196:	493c      	ldr	r1, [pc, #240]	; (800a288 <plug_holes+0x138>)
 800a198:	4838      	ldr	r0, [pc, #224]	; (800a27c <plug_holes+0x12c>)
 800a19a:	f00d f929 	bl	80173f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1a6:	d906      	bls.n	800a1b6 <plug_holes+0x66>
 800a1a8:	4b32      	ldr	r3, [pc, #200]	; (800a274 <plug_holes+0x124>)
 800a1aa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a1ae:	4937      	ldr	r1, [pc, #220]	; (800a28c <plug_holes+0x13c>)
 800a1b0:	4832      	ldr	r0, [pc, #200]	; (800a27c <plug_holes+0x12c>)
 800a1b2:	f00d f91d 	bl	80173f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff ffa4 	bl	800a108 <ptr_to_mem>
 800a1c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d024      	beq.n	800a214 <plug_holes+0xc4>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	791b      	ldrb	r3, [r3, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d120      	bne.n	800a214 <plug_holes+0xc4>
 800a1d2:	4b2b      	ldr	r3, [pc, #172]	; (800a280 <plug_holes+0x130>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d01b      	beq.n	800a214 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a1dc:	4b2c      	ldr	r3, [pc, #176]	; (800a290 <plug_holes+0x140>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d102      	bne.n	800a1ec <plug_holes+0x9c>
      lfree = mem;
 800a1e6:	4a2a      	ldr	r2, [pc, #168]	; (800a290 <plug_holes+0x140>)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	881a      	ldrh	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1fc:	d00a      	beq.n	800a214 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff ff80 	bl	800a108 <ptr_to_mem>
 800a208:	4604      	mov	r4, r0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ff8e 	bl	800a12c <mem_to_ptr>
 800a210:	4603      	mov	r3, r0
 800a212:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	885b      	ldrh	r3, [r3, #2]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff ff75 	bl	800a108 <ptr_to_mem>
 800a21e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d01f      	beq.n	800a268 <plug_holes+0x118>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d11b      	bne.n	800a268 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a230:	4b17      	ldr	r3, [pc, #92]	; (800a290 <plug_holes+0x140>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	429a      	cmp	r2, r3
 800a238:	d102      	bne.n	800a240 <plug_holes+0xf0>
      lfree = pmem;
 800a23a:	4a15      	ldr	r2, [pc, #84]	; (800a290 <plug_holes+0x140>)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	881a      	ldrh	r2, [r3, #0]
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a250:	d00a      	beq.n	800a268 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ff56 	bl	800a108 <ptr_to_mem>
 800a25c:	4604      	mov	r4, r0
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	f7ff ff64 	bl	800a12c <mem_to_ptr>
 800a264:	4603      	mov	r3, r0
 800a266:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a268:	bf00      	nop
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd90      	pop	{r4, r7, pc}
 800a270:	2000d814 	.word	0x2000d814
 800a274:	08018ed8 	.word	0x08018ed8
 800a278:	08018f08 	.word	0x08018f08
 800a27c:	08018f20 	.word	0x08018f20
 800a280:	2000d818 	.word	0x2000d818
 800a284:	08018f48 	.word	0x08018f48
 800a288:	08018f64 	.word	0x08018f64
 800a28c:	08018f80 	.word	0x08018f80
 800a290:	2000d820 	.word	0x2000d820

0800a294 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a29a:	4b1f      	ldr	r3, [pc, #124]	; (800a318 <mem_init+0x84>)
 800a29c:	3303      	adds	r3, #3
 800a29e:	f023 0303 	bic.w	r3, r3, #3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <mem_init+0x88>)
 800a2a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <mem_init+0x88>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a2c2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a2c6:	f7ff ff1f 	bl	800a108 <ptr_to_mem>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4a14      	ldr	r2, [pc, #80]	; (800a320 <mem_init+0x8c>)
 800a2ce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a2d0:	4b13      	ldr	r3, [pc, #76]	; (800a320 <mem_init+0x8c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a2d8:	4b11      	ldr	r3, [pc, #68]	; (800a320 <mem_init+0x8c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2e0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a2e2:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <mem_init+0x8c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2ea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <mem_init+0x88>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0c      	ldr	r2, [pc, #48]	; (800a324 <mem_init+0x90>)
 800a2f2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a2f4:	480c      	ldr	r0, [pc, #48]	; (800a328 <mem_init+0x94>)
 800a2f6:	f00c ff11 	bl	801711c <sys_mutex_new>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a300:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <mem_init+0x98>)
 800a302:	f240 221f 	movw	r2, #543	; 0x21f
 800a306:	490a      	ldr	r1, [pc, #40]	; (800a330 <mem_init+0x9c>)
 800a308:	480a      	ldr	r0, [pc, #40]	; (800a334 <mem_init+0xa0>)
 800a30a:	f00d f871 	bl	80173f0 <iprintf>
  }
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	2000d1c0 	.word	0x2000d1c0
 800a31c:	2000d814 	.word	0x2000d814
 800a320:	2000d818 	.word	0x2000d818
 800a324:	2000d820 	.word	0x2000d820
 800a328:	2000d81c 	.word	0x2000d81c
 800a32c:	08018ed8 	.word	0x08018ed8
 800a330:	08018fac 	.word	0x08018fac
 800a334:	08018f20 	.word	0x08018f20

0800a338 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff fef3 	bl	800a12c <mem_to_ptr>
 800a346:	4603      	mov	r3, r0
 800a348:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff feda 	bl	800a108 <ptr_to_mem>
 800a354:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	885b      	ldrh	r3, [r3, #2]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff fed4 	bl	800a108 <ptr_to_mem>
 800a360:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a36a:	d818      	bhi.n	800a39e <mem_link_valid+0x66>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	885b      	ldrh	r3, [r3, #2]
 800a370:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a374:	d813      	bhi.n	800a39e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a37a:	8afa      	ldrh	r2, [r7, #22]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d004      	beq.n	800a38a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	8afa      	ldrh	r2, [r7, #22]
 800a386:	429a      	cmp	r2, r3
 800a388:	d109      	bne.n	800a39e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <mem_link_valid+0x74>)
 800a38c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	429a      	cmp	r2, r3
 800a392:	d006      	beq.n	800a3a2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	885b      	ldrh	r3, [r3, #2]
 800a398:	8afa      	ldrh	r2, [r7, #22]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d001      	beq.n	800a3a2 <mem_link_valid+0x6a>
    return 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e000      	b.n	800a3a4 <mem_link_valid+0x6c>
  }
  return 1;
 800a3a2:	2301      	movs	r3, #1
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	2000d818 	.word	0x2000d818

0800a3b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d070      	beq.n	800a4a0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f003 0303 	and.w	r3, r3, #3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00d      	beq.n	800a3e4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a3c8:	4b37      	ldr	r3, [pc, #220]	; (800a4a8 <mem_free+0xf8>)
 800a3ca:	f240 2273 	movw	r2, #627	; 0x273
 800a3ce:	4937      	ldr	r1, [pc, #220]	; (800a4ac <mem_free+0xfc>)
 800a3d0:	4837      	ldr	r0, [pc, #220]	; (800a4b0 <mem_free+0x100>)
 800a3d2:	f00d f80d 	bl	80173f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3d6:	f00c feff 	bl	80171d8 <sys_arch_protect>
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f00c ff09 	bl	80171f4 <sys_arch_unprotect>
    return;
 800a3e2:	e05e      	b.n	800a4a2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3b08      	subs	r3, #8
 800a3e8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a3ea:	4b32      	ldr	r3, [pc, #200]	; (800a4b4 <mem_free+0x104>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d306      	bcc.n	800a402 <mem_free+0x52>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f103 020c 	add.w	r2, r3, #12
 800a3fa:	4b2f      	ldr	r3, [pc, #188]	; (800a4b8 <mem_free+0x108>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d90d      	bls.n	800a41e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a402:	4b29      	ldr	r3, [pc, #164]	; (800a4a8 <mem_free+0xf8>)
 800a404:	f240 227f 	movw	r2, #639	; 0x27f
 800a408:	492c      	ldr	r1, [pc, #176]	; (800a4bc <mem_free+0x10c>)
 800a40a:	4829      	ldr	r0, [pc, #164]	; (800a4b0 <mem_free+0x100>)
 800a40c:	f00c fff0 	bl	80173f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a410:	f00c fee2 	bl	80171d8 <sys_arch_protect>
 800a414:	6138      	str	r0, [r7, #16]
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f00c feec 	bl	80171f4 <sys_arch_unprotect>
    return;
 800a41c:	e041      	b.n	800a4a2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a41e:	4828      	ldr	r0, [pc, #160]	; (800a4c0 <mem_free+0x110>)
 800a420:	f00c fe98 	bl	8017154 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	791b      	ldrb	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d110      	bne.n	800a44e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a42c:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <mem_free+0xf8>)
 800a42e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a432:	4924      	ldr	r1, [pc, #144]	; (800a4c4 <mem_free+0x114>)
 800a434:	481e      	ldr	r0, [pc, #120]	; (800a4b0 <mem_free+0x100>)
 800a436:	f00c ffdb 	bl	80173f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a43a:	4821      	ldr	r0, [pc, #132]	; (800a4c0 <mem_free+0x110>)
 800a43c:	f00c fe99 	bl	8017172 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a440:	f00c feca 	bl	80171d8 <sys_arch_protect>
 800a444:	6178      	str	r0, [r7, #20]
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f00c fed4 	bl	80171f4 <sys_arch_unprotect>
    return;
 800a44c:	e029      	b.n	800a4a2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a44e:	69f8      	ldr	r0, [r7, #28]
 800a450:	f7ff ff72 	bl	800a338 <mem_link_valid>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d110      	bne.n	800a47c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a45a:	4b13      	ldr	r3, [pc, #76]	; (800a4a8 <mem_free+0xf8>)
 800a45c:	f240 2295 	movw	r2, #661	; 0x295
 800a460:	4919      	ldr	r1, [pc, #100]	; (800a4c8 <mem_free+0x118>)
 800a462:	4813      	ldr	r0, [pc, #76]	; (800a4b0 <mem_free+0x100>)
 800a464:	f00c ffc4 	bl	80173f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a468:	4815      	ldr	r0, [pc, #84]	; (800a4c0 <mem_free+0x110>)
 800a46a:	f00c fe82 	bl	8017172 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a46e:	f00c feb3 	bl	80171d8 <sys_arch_protect>
 800a472:	61b8      	str	r0, [r7, #24]
 800a474:	69b8      	ldr	r0, [r7, #24]
 800a476:	f00c febd 	bl	80171f4 <sys_arch_unprotect>
    return;
 800a47a:	e012      	b.n	800a4a2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	2200      	movs	r2, #0
 800a480:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a482:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <mem_free+0x11c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d202      	bcs.n	800a492 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a48c:	4a0f      	ldr	r2, [pc, #60]	; (800a4cc <mem_free+0x11c>)
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a492:	69f8      	ldr	r0, [r7, #28]
 800a494:	f7ff fe5c 	bl	800a150 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a498:	4809      	ldr	r0, [pc, #36]	; (800a4c0 <mem_free+0x110>)
 800a49a:	f00c fe6a 	bl	8017172 <sys_mutex_unlock>
 800a49e:	e000      	b.n	800a4a2 <mem_free+0xf2>
    return;
 800a4a0:	bf00      	nop
}
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	08018ed8 	.word	0x08018ed8
 800a4ac:	08018fc8 	.word	0x08018fc8
 800a4b0:	08018f20 	.word	0x08018f20
 800a4b4:	2000d814 	.word	0x2000d814
 800a4b8:	2000d818 	.word	0x2000d818
 800a4bc:	08018fec 	.word	0x08018fec
 800a4c0:	2000d81c 	.word	0x2000d81c
 800a4c4:	08019008 	.word	0x08019008
 800a4c8:	08019030 	.word	0x08019030
 800a4cc:	2000d820 	.word	0x2000d820

0800a4d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b088      	sub	sp, #32
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a4dc:	887b      	ldrh	r3, [r7, #2]
 800a4de:	3303      	adds	r3, #3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a4e8:	8bfb      	ldrh	r3, [r7, #30]
 800a4ea:	2b0b      	cmp	r3, #11
 800a4ec:	d801      	bhi.n	800a4f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a4f2:	8bfb      	ldrh	r3, [r7, #30]
 800a4f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4f8:	d803      	bhi.n	800a502 <mem_trim+0x32>
 800a4fa:	8bfa      	ldrh	r2, [r7, #30]
 800a4fc:	887b      	ldrh	r3, [r7, #2]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d201      	bcs.n	800a506 <mem_trim+0x36>
    return NULL;
 800a502:	2300      	movs	r3, #0
 800a504:	e0d8      	b.n	800a6b8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a506:	4b6e      	ldr	r3, [pc, #440]	; (800a6c0 <mem_trim+0x1f0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d304      	bcc.n	800a51a <mem_trim+0x4a>
 800a510:	4b6c      	ldr	r3, [pc, #432]	; (800a6c4 <mem_trim+0x1f4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d306      	bcc.n	800a528 <mem_trim+0x58>
 800a51a:	4b6b      	ldr	r3, [pc, #428]	; (800a6c8 <mem_trim+0x1f8>)
 800a51c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a520:	496a      	ldr	r1, [pc, #424]	; (800a6cc <mem_trim+0x1fc>)
 800a522:	486b      	ldr	r0, [pc, #428]	; (800a6d0 <mem_trim+0x200>)
 800a524:	f00c ff64 	bl	80173f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a528:	4b65      	ldr	r3, [pc, #404]	; (800a6c0 <mem_trim+0x1f0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d304      	bcc.n	800a53c <mem_trim+0x6c>
 800a532:	4b64      	ldr	r3, [pc, #400]	; (800a6c4 <mem_trim+0x1f4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d307      	bcc.n	800a54c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a53c:	f00c fe4c 	bl	80171d8 <sys_arch_protect>
 800a540:	60b8      	str	r0, [r7, #8]
 800a542:	68b8      	ldr	r0, [r7, #8]
 800a544:	f00c fe56 	bl	80171f4 <sys_arch_unprotect>
    return rmem;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	e0b5      	b.n	800a6b8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3b08      	subs	r3, #8
 800a550:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a552:	69b8      	ldr	r0, [r7, #24]
 800a554:	f7ff fdea 	bl	800a12c <mem_to_ptr>
 800a558:	4603      	mov	r3, r0
 800a55a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	881a      	ldrh	r2, [r3, #0]
 800a560:	8afb      	ldrh	r3, [r7, #22]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	b29b      	uxth	r3, r3
 800a566:	3b08      	subs	r3, #8
 800a568:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a56a:	8bfa      	ldrh	r2, [r7, #30]
 800a56c:	8abb      	ldrh	r3, [r7, #20]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d906      	bls.n	800a580 <mem_trim+0xb0>
 800a572:	4b55      	ldr	r3, [pc, #340]	; (800a6c8 <mem_trim+0x1f8>)
 800a574:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a578:	4956      	ldr	r1, [pc, #344]	; (800a6d4 <mem_trim+0x204>)
 800a57a:	4855      	ldr	r0, [pc, #340]	; (800a6d0 <mem_trim+0x200>)
 800a57c:	f00c ff38 	bl	80173f0 <iprintf>
  if (newsize > size) {
 800a580:	8bfa      	ldrh	r2, [r7, #30]
 800a582:	8abb      	ldrh	r3, [r7, #20]
 800a584:	429a      	cmp	r2, r3
 800a586:	d901      	bls.n	800a58c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	e095      	b.n	800a6b8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a58c:	8bfa      	ldrh	r2, [r7, #30]
 800a58e:	8abb      	ldrh	r3, [r7, #20]
 800a590:	429a      	cmp	r2, r3
 800a592:	d101      	bne.n	800a598 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	e08f      	b.n	800a6b8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a598:	484f      	ldr	r0, [pc, #316]	; (800a6d8 <mem_trim+0x208>)
 800a59a:	f00c fddb 	bl	8017154 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff fdb0 	bl	800a108 <ptr_to_mem>
 800a5a8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	791b      	ldrb	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d13f      	bne.n	800a632 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5ba:	d106      	bne.n	800a5ca <mem_trim+0xfa>
 800a5bc:	4b42      	ldr	r3, [pc, #264]	; (800a6c8 <mem_trim+0x1f8>)
 800a5be:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a5c2:	4946      	ldr	r1, [pc, #280]	; (800a6dc <mem_trim+0x20c>)
 800a5c4:	4842      	ldr	r0, [pc, #264]	; (800a6d0 <mem_trim+0x200>)
 800a5c6:	f00c ff13 	bl	80173f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a5d0:	8afa      	ldrh	r2, [r7, #22]
 800a5d2:	8bfb      	ldrh	r3, [r7, #30]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	3308      	adds	r3, #8
 800a5da:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a5dc:	4b40      	ldr	r3, [pc, #256]	; (800a6e0 <mem_trim+0x210>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d106      	bne.n	800a5f4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a5e6:	89fb      	ldrh	r3, [r7, #14]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fd8d 	bl	800a108 <ptr_to_mem>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4a3b      	ldr	r2, [pc, #236]	; (800a6e0 <mem_trim+0x210>)
 800a5f2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a5f4:	89fb      	ldrh	r3, [r7, #14]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fd86 	bl	800a108 <ptr_to_mem>
 800a5fc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2200      	movs	r2, #0
 800a602:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	89ba      	ldrh	r2, [r7, #12]
 800a608:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	8afa      	ldrh	r2, [r7, #22]
 800a60e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	89fa      	ldrh	r2, [r7, #14]
 800a614:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a61e:	d047      	beq.n	800a6b0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fd6f 	bl	800a108 <ptr_to_mem>
 800a62a:	4602      	mov	r2, r0
 800a62c:	89fb      	ldrh	r3, [r7, #14]
 800a62e:	8053      	strh	r3, [r2, #2]
 800a630:	e03e      	b.n	800a6b0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a632:	8bfb      	ldrh	r3, [r7, #30]
 800a634:	f103 0214 	add.w	r2, r3, #20
 800a638:	8abb      	ldrh	r3, [r7, #20]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d838      	bhi.n	800a6b0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a63e:	8afa      	ldrh	r2, [r7, #22]
 800a640:	8bfb      	ldrh	r3, [r7, #30]
 800a642:	4413      	add	r3, r2
 800a644:	b29b      	uxth	r3, r3
 800a646:	3308      	adds	r3, #8
 800a648:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a652:	d106      	bne.n	800a662 <mem_trim+0x192>
 800a654:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <mem_trim+0x1f8>)
 800a656:	f240 3216 	movw	r2, #790	; 0x316
 800a65a:	4920      	ldr	r1, [pc, #128]	; (800a6dc <mem_trim+0x20c>)
 800a65c:	481c      	ldr	r0, [pc, #112]	; (800a6d0 <mem_trim+0x200>)
 800a65e:	f00c fec7 	bl	80173f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a662:	89fb      	ldrh	r3, [r7, #14]
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fd4f 	bl	800a108 <ptr_to_mem>
 800a66a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a66c:	4b1c      	ldr	r3, [pc, #112]	; (800a6e0 <mem_trim+0x210>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	429a      	cmp	r2, r3
 800a674:	d202      	bcs.n	800a67c <mem_trim+0x1ac>
      lfree = mem2;
 800a676:	4a1a      	ldr	r2, [pc, #104]	; (800a6e0 <mem_trim+0x210>)
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2200      	movs	r2, #0
 800a680:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	881a      	ldrh	r2, [r3, #0]
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	8afa      	ldrh	r2, [r7, #22]
 800a68e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	89fa      	ldrh	r2, [r7, #14]
 800a694:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a69e:	d007      	beq.n	800a6b0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fd2f 	bl	800a108 <ptr_to_mem>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	89fb      	ldrh	r3, [r7, #14]
 800a6ae:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a6b0:	4809      	ldr	r0, [pc, #36]	; (800a6d8 <mem_trim+0x208>)
 800a6b2:	f00c fd5e 	bl	8017172 <sys_mutex_unlock>
  return rmem;
 800a6b6:	687b      	ldr	r3, [r7, #4]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	2000d814 	.word	0x2000d814
 800a6c4:	2000d818 	.word	0x2000d818
 800a6c8:	08018ed8 	.word	0x08018ed8
 800a6cc:	08019064 	.word	0x08019064
 800a6d0:	08018f20 	.word	0x08018f20
 800a6d4:	0801907c 	.word	0x0801907c
 800a6d8:	2000d81c 	.word	0x2000d81c
 800a6dc:	0801909c 	.word	0x0801909c
 800a6e0:	2000d820 	.word	0x2000d820

0800a6e4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <mem_malloc+0x14>
    return NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e0e2      	b.n	800a8be <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	3303      	adds	r3, #3
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	f023 0303 	bic.w	r3, r3, #3
 800a702:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a704:	8bbb      	ldrh	r3, [r7, #28]
 800a706:	2b0b      	cmp	r3, #11
 800a708:	d801      	bhi.n	800a70e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a70a:	230c      	movs	r3, #12
 800a70c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a70e:	8bbb      	ldrh	r3, [r7, #28]
 800a710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a714:	d803      	bhi.n	800a71e <mem_malloc+0x3a>
 800a716:	8bba      	ldrh	r2, [r7, #28]
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d201      	bcs.n	800a722 <mem_malloc+0x3e>
    return NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	e0cd      	b.n	800a8be <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a722:	4869      	ldr	r0, [pc, #420]	; (800a8c8 <mem_malloc+0x1e4>)
 800a724:	f00c fd16 	bl	8017154 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a728:	4b68      	ldr	r3, [pc, #416]	; (800a8cc <mem_malloc+0x1e8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fcfd 	bl	800a12c <mem_to_ptr>
 800a732:	4603      	mov	r3, r0
 800a734:	83fb      	strh	r3, [r7, #30]
 800a736:	e0b7      	b.n	800a8a8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a738:	8bfb      	ldrh	r3, [r7, #30]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fce4 	bl	800a108 <ptr_to_mem>
 800a740:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	791b      	ldrb	r3, [r3, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f040 80a7 	bne.w	800a89a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	461a      	mov	r2, r3
 800a752:	8bfb      	ldrh	r3, [r7, #30]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	f1a3 0208 	sub.w	r2, r3, #8
 800a75a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a75c:	429a      	cmp	r2, r3
 800a75e:	f0c0 809c 	bcc.w	800a89a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	8bfb      	ldrh	r3, [r7, #30]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	f1a3 0208 	sub.w	r2, r3, #8
 800a770:	8bbb      	ldrh	r3, [r7, #28]
 800a772:	3314      	adds	r3, #20
 800a774:	429a      	cmp	r2, r3
 800a776:	d333      	bcc.n	800a7e0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a778:	8bfa      	ldrh	r2, [r7, #30]
 800a77a:	8bbb      	ldrh	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	3308      	adds	r3, #8
 800a782:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a784:	8a7b      	ldrh	r3, [r7, #18]
 800a786:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a78a:	d106      	bne.n	800a79a <mem_malloc+0xb6>
 800a78c:	4b50      	ldr	r3, [pc, #320]	; (800a8d0 <mem_malloc+0x1ec>)
 800a78e:	f240 3287 	movw	r2, #903	; 0x387
 800a792:	4950      	ldr	r1, [pc, #320]	; (800a8d4 <mem_malloc+0x1f0>)
 800a794:	4850      	ldr	r0, [pc, #320]	; (800a8d8 <mem_malloc+0x1f4>)
 800a796:	f00c fe2b 	bl	80173f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a79a:	8a7b      	ldrh	r3, [r7, #18]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fcb3 	bl	800a108 <ptr_to_mem>
 800a7a2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	881a      	ldrh	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8bfa      	ldrh	r2, [r7, #30]
 800a7b6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	8a7a      	ldrh	r2, [r7, #18]
 800a7bc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7cc:	d00b      	beq.n	800a7e6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff fc98 	bl	800a108 <ptr_to_mem>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	8a7b      	ldrh	r3, [r7, #18]
 800a7dc:	8053      	strh	r3, [r2, #2]
 800a7de:	e002      	b.n	800a7e6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a7e6:	4b39      	ldr	r3, [pc, #228]	; (800a8cc <mem_malloc+0x1e8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d127      	bne.n	800a840 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a7f0:	4b36      	ldr	r3, [pc, #216]	; (800a8cc <mem_malloc+0x1e8>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a7f6:	e005      	b.n	800a804 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7ff fc83 	bl	800a108 <ptr_to_mem>
 800a802:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	791b      	ldrb	r3, [r3, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d004      	beq.n	800a816 <mem_malloc+0x132>
 800a80c:	4b33      	ldr	r3, [pc, #204]	; (800a8dc <mem_malloc+0x1f8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	429a      	cmp	r2, r3
 800a814:	d1f0      	bne.n	800a7f8 <mem_malloc+0x114>
          }
          lfree = cur;
 800a816:	4a2d      	ldr	r2, [pc, #180]	; (800a8cc <mem_malloc+0x1e8>)
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a81c:	4b2b      	ldr	r3, [pc, #172]	; (800a8cc <mem_malloc+0x1e8>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <mem_malloc+0x1f8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d00b      	beq.n	800a840 <mem_malloc+0x15c>
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <mem_malloc+0x1e8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	791b      	ldrb	r3, [r3, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d006      	beq.n	800a840 <mem_malloc+0x15c>
 800a832:	4b27      	ldr	r3, [pc, #156]	; (800a8d0 <mem_malloc+0x1ec>)
 800a834:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a838:	4929      	ldr	r1, [pc, #164]	; (800a8e0 <mem_malloc+0x1fc>)
 800a83a:	4827      	ldr	r0, [pc, #156]	; (800a8d8 <mem_malloc+0x1f4>)
 800a83c:	f00c fdd8 	bl	80173f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a840:	4821      	ldr	r0, [pc, #132]	; (800a8c8 <mem_malloc+0x1e4>)
 800a842:	f00c fc96 	bl	8017172 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a846:	8bba      	ldrh	r2, [r7, #28]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
 800a84c:	3308      	adds	r3, #8
 800a84e:	4a23      	ldr	r2, [pc, #140]	; (800a8dc <mem_malloc+0x1f8>)
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	4293      	cmp	r3, r2
 800a854:	d906      	bls.n	800a864 <mem_malloc+0x180>
 800a856:	4b1e      	ldr	r3, [pc, #120]	; (800a8d0 <mem_malloc+0x1ec>)
 800a858:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a85c:	4921      	ldr	r1, [pc, #132]	; (800a8e4 <mem_malloc+0x200>)
 800a85e:	481e      	ldr	r0, [pc, #120]	; (800a8d8 <mem_malloc+0x1f4>)
 800a860:	f00c fdc6 	bl	80173f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f003 0303 	and.w	r3, r3, #3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <mem_malloc+0x198>
 800a86e:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <mem_malloc+0x1ec>)
 800a870:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a874:	491c      	ldr	r1, [pc, #112]	; (800a8e8 <mem_malloc+0x204>)
 800a876:	4818      	ldr	r0, [pc, #96]	; (800a8d8 <mem_malloc+0x1f4>)
 800a878:	f00c fdba 	bl	80173f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d006      	beq.n	800a894 <mem_malloc+0x1b0>
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <mem_malloc+0x1ec>)
 800a888:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a88c:	4917      	ldr	r1, [pc, #92]	; (800a8ec <mem_malloc+0x208>)
 800a88e:	4812      	ldr	r0, [pc, #72]	; (800a8d8 <mem_malloc+0x1f4>)
 800a890:	f00c fdae 	bl	80173f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	3308      	adds	r3, #8
 800a898:	e011      	b.n	800a8be <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a89a:	8bfb      	ldrh	r3, [r7, #30]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fc33 	bl	800a108 <ptr_to_mem>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8a8:	8bfa      	ldrh	r2, [r7, #30]
 800a8aa:	8bbb      	ldrh	r3, [r7, #28]
 800a8ac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	f4ff af41 	bcc.w	800a738 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a8b6:	4804      	ldr	r0, [pc, #16]	; (800a8c8 <mem_malloc+0x1e4>)
 800a8b8:	f00c fc5b 	bl	8017172 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000d81c 	.word	0x2000d81c
 800a8cc:	2000d820 	.word	0x2000d820
 800a8d0:	08018ed8 	.word	0x08018ed8
 800a8d4:	0801909c 	.word	0x0801909c
 800a8d8:	08018f20 	.word	0x08018f20
 800a8dc:	2000d818 	.word	0x2000d818
 800a8e0:	080190b0 	.word	0x080190b0
 800a8e4:	080190cc 	.word	0x080190cc
 800a8e8:	080190fc 	.word	0x080190fc
 800a8ec:	0801912c 	.word	0x0801912c

0800a8f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	3303      	adds	r3, #3
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	e011      	b.n	800a936 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	4413      	add	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	461a      	mov	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4293      	cmp	r3, r2
 800a940:	dbe7      	blt.n	800a912 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a956:	2300      	movs	r3, #0
 800a958:	80fb      	strh	r3, [r7, #6]
 800a95a:	e009      	b.n	800a970 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a95c:	88fb      	ldrh	r3, [r7, #6]
 800a95e:	4a08      	ldr	r2, [pc, #32]	; (800a980 <memp_init+0x30>)
 800a960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff ffc3 	bl	800a8f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	3301      	adds	r3, #1
 800a96e:	80fb      	strh	r3, [r7, #6]
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	2b0c      	cmp	r3, #12
 800a974:	d9f2      	bls.n	800a95c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	0801bce4 	.word	0x0801bce4

0800a984 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a98c:	f00c fc24 	bl	80171d8 <sys_arch_protect>
 800a990:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d015      	beq.n	800a9cc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	6812      	ldr	r2, [r2, #0]
 800a9a8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f003 0303 	and.w	r3, r3, #3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d006      	beq.n	800a9c2 <do_memp_malloc_pool+0x3e>
 800a9b4:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <do_memp_malloc_pool+0x58>)
 800a9b6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a9ba:	4909      	ldr	r1, [pc, #36]	; (800a9e0 <do_memp_malloc_pool+0x5c>)
 800a9bc:	4809      	ldr	r0, [pc, #36]	; (800a9e4 <do_memp_malloc_pool+0x60>)
 800a9be:	f00c fd17 	bl	80173f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f00c fc16 	bl	80171f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	e003      	b.n	800a9d4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f00c fc11 	bl	80171f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	08019150 	.word	0x08019150
 800a9e0:	08019180 	.word	0x08019180
 800a9e4:	080191a4 	.word	0x080191a4

0800a9e8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <memp_malloc_pool+0x1c>
 800a9f6:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <memp_malloc_pool+0x38>)
 800a9f8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a9fc:	4909      	ldr	r1, [pc, #36]	; (800aa24 <memp_malloc_pool+0x3c>)
 800a9fe:	480a      	ldr	r0, [pc, #40]	; (800aa28 <memp_malloc_pool+0x40>)
 800aa00:	f00c fcf6 	bl	80173f0 <iprintf>
  if (desc == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <memp_malloc_pool+0x26>
    return NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e003      	b.n	800aa16 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff ffb8 	bl	800a984 <do_memp_malloc_pool>
 800aa14:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	08019150 	.word	0x08019150
 800aa24:	080191cc 	.word	0x080191cc
 800aa28:	080191a4 	.word	0x080191a4

0800aa2c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	2b0c      	cmp	r3, #12
 800aa3a:	d908      	bls.n	800aa4e <memp_malloc+0x22>
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <memp_malloc+0x3c>)
 800aa3e:	f240 1257 	movw	r2, #343	; 0x157
 800aa42:	490a      	ldr	r1, [pc, #40]	; (800aa6c <memp_malloc+0x40>)
 800aa44:	480a      	ldr	r0, [pc, #40]	; (800aa70 <memp_malloc+0x44>)
 800aa46:	f00c fcd3 	bl	80173f0 <iprintf>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e008      	b.n	800aa60 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	4a08      	ldr	r2, [pc, #32]	; (800aa74 <memp_malloc+0x48>)
 800aa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff ff94 	bl	800a984 <do_memp_malloc_pool>
 800aa5c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	08019150 	.word	0x08019150
 800aa6c:	080191e0 	.word	0x080191e0
 800aa70:	080191a4 	.word	0x080191a4
 800aa74:	0801bce4 	.word	0x0801bce4

0800aa78 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d006      	beq.n	800aa9a <do_memp_free_pool+0x22>
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <do_memp_free_pool+0x4c>)
 800aa8e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aa92:	490d      	ldr	r1, [pc, #52]	; (800aac8 <do_memp_free_pool+0x50>)
 800aa94:	480d      	ldr	r0, [pc, #52]	; (800aacc <do_memp_free_pool+0x54>)
 800aa96:	f00c fcab 	bl	80173f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aa9e:	f00c fb9b 	bl	80171d8 <sys_arch_protect>
 800aaa2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aab6:	68b8      	ldr	r0, [r7, #8]
 800aab8:	f00c fb9c 	bl	80171f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	08019150 	.word	0x08019150
 800aac8:	08019200 	.word	0x08019200
 800aacc:	080191a4 	.word	0x080191a4

0800aad0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <memp_free_pool+0x1e>
 800aae0:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <memp_free_pool+0x3c>)
 800aae2:	f240 1295 	movw	r2, #405	; 0x195
 800aae6:	490a      	ldr	r1, [pc, #40]	; (800ab10 <memp_free_pool+0x40>)
 800aae8:	480a      	ldr	r0, [pc, #40]	; (800ab14 <memp_free_pool+0x44>)
 800aaea:	f00c fc81 	bl	80173f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d007      	beq.n	800ab04 <memp_free_pool+0x34>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d004      	beq.n	800ab04 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ffbb 	bl	800aa78 <do_memp_free_pool>
 800ab02:	e000      	b.n	800ab06 <memp_free_pool+0x36>
    return;
 800ab04:	bf00      	nop
}
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	08019150 	.word	0x08019150
 800ab10:	080191cc 	.word	0x080191cc
 800ab14:	080191a4 	.word	0x080191a4

0800ab18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	2b0c      	cmp	r3, #12
 800ab28:	d907      	bls.n	800ab3a <memp_free+0x22>
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <memp_free+0x44>)
 800ab2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ab30:	490b      	ldr	r1, [pc, #44]	; (800ab60 <memp_free+0x48>)
 800ab32:	480c      	ldr	r0, [pc, #48]	; (800ab64 <memp_free+0x4c>)
 800ab34:	f00c fc5c 	bl	80173f0 <iprintf>
 800ab38:	e00c      	b.n	800ab54 <memp_free+0x3c>

  if (mem == NULL) {
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d008      	beq.n	800ab52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	4a09      	ldr	r2, [pc, #36]	; (800ab68 <memp_free+0x50>)
 800ab44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff ff94 	bl	800aa78 <do_memp_free_pool>
 800ab50:	e000      	b.n	800ab54 <memp_free+0x3c>
    return;
 800ab52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	08019150 	.word	0x08019150
 800ab60:	08019220 	.word	0x08019220
 800ab64:	080191a4 	.word	0x080191a4
 800ab68:	0801bce4 	.word	0x0801bce4

0800ab6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab70:	bf00      	nop
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d108      	bne.n	800aba2 <netif_add+0x26>
 800ab90:	4b5b      	ldr	r3, [pc, #364]	; (800ad00 <netif_add+0x184>)
 800ab92:	f240 1227 	movw	r2, #295	; 0x127
 800ab96:	495b      	ldr	r1, [pc, #364]	; (800ad04 <netif_add+0x188>)
 800ab98:	485b      	ldr	r0, [pc, #364]	; (800ad08 <netif_add+0x18c>)
 800ab9a:	f00c fc29 	bl	80173f0 <iprintf>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e0a9      	b.n	800acf6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d108      	bne.n	800abba <netif_add+0x3e>
 800aba8:	4b55      	ldr	r3, [pc, #340]	; (800ad00 <netif_add+0x184>)
 800abaa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800abae:	4957      	ldr	r1, [pc, #348]	; (800ad0c <netif_add+0x190>)
 800abb0:	4855      	ldr	r0, [pc, #340]	; (800ad08 <netif_add+0x18c>)
 800abb2:	f00c fc1d 	bl	80173f0 <iprintf>
 800abb6:	2300      	movs	r3, #0
 800abb8:	e09d      	b.n	800acf6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800abc0:	4b53      	ldr	r3, [pc, #332]	; (800ad10 <netif_add+0x194>)
 800abc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800abca:	4b51      	ldr	r3, [pc, #324]	; (800ad10 <netif_add+0x194>)
 800abcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800abd4:	4b4e      	ldr	r3, [pc, #312]	; (800ad10 <netif_add+0x194>)
 800abd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	4a49      	ldr	r2, [pc, #292]	; (800ad14 <netif_add+0x198>)
 800abee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3324      	adds	r3, #36	; 0x24
 800ac02:	2204      	movs	r2, #4
 800ac04:	2100      	movs	r1, #0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f00c fc57 	bl	80174ba <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a3a      	ldr	r2, [r7, #32]
 800ac16:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ac18:	4b3f      	ldr	r3, [pc, #252]	; (800ad18 <netif_add+0x19c>)
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac26:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	68b9      	ldr	r1, [r7, #8]
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 f914 	bl	800ae5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	4798      	blx	r3
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <netif_add+0xc8>
    return NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e058      	b.n	800acf6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac4a:	2bff      	cmp	r3, #255	; 0xff
 800ac4c:	d103      	bne.n	800ac56 <netif_add+0xda>
        netif->num = 0;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac5a:	4b30      	ldr	r3, [pc, #192]	; (800ad1c <netif_add+0x1a0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	e02b      	b.n	800acba <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d106      	bne.n	800ac78 <netif_add+0xfc>
 800ac6a:	4b25      	ldr	r3, [pc, #148]	; (800ad00 <netif_add+0x184>)
 800ac6c:	f240 128b 	movw	r2, #395	; 0x18b
 800ac70:	492b      	ldr	r1, [pc, #172]	; (800ad20 <netif_add+0x1a4>)
 800ac72:	4825      	ldr	r0, [pc, #148]	; (800ad08 <netif_add+0x18c>)
 800ac74:	f00c fbbc 	bl	80173f0 <iprintf>
        num_netifs++;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2bff      	cmp	r3, #255	; 0xff
 800ac82:	dd06      	ble.n	800ac92 <netif_add+0x116>
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <netif_add+0x184>)
 800ac86:	f240 128d 	movw	r2, #397	; 0x18d
 800ac8a:	4926      	ldr	r1, [pc, #152]	; (800ad24 <netif_add+0x1a8>)
 800ac8c:	481e      	ldr	r0, [pc, #120]	; (800ad08 <netif_add+0x18c>)
 800ac8e:	f00c fbaf 	bl	80173f0 <iprintf>
        if (netif2->num == netif->num) {
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d108      	bne.n	800acb4 <netif_add+0x138>
          netif->num++;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aca8:	3301      	adds	r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800acb2:	e005      	b.n	800acc0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	617b      	str	r3, [r7, #20]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1d0      	bne.n	800ac62 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1be      	bne.n	800ac44 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800accc:	2bfe      	cmp	r3, #254	; 0xfe
 800acce:	d103      	bne.n	800acd8 <netif_add+0x15c>
    netif_num = 0;
 800acd0:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <netif_add+0x19c>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e006      	b.n	800ace6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800acde:	3301      	adds	r3, #1
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <netif_add+0x19c>)
 800ace4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ace6:	4b0d      	ldr	r3, [pc, #52]	; (800ad1c <netif_add+0x1a0>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800acee:	4a0b      	ldr	r2, [pc, #44]	; (800ad1c <netif_add+0x1a0>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800acf4:	68fb      	ldr	r3, [r7, #12]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0801923c 	.word	0x0801923c
 800ad04:	080192d0 	.word	0x080192d0
 800ad08:	0801928c 	.word	0x0801928c
 800ad0c:	080192ec 	.word	0x080192ec
 800ad10:	0801bd68 	.word	0x0801bd68
 800ad14:	0800b13f 	.word	0x0800b13f
 800ad18:	20010918 	.word	0x20010918
 800ad1c:	20010910 	.word	0x20010910
 800ad20:	08019310 	.word	0x08019310
 800ad24:	08019324 	.word	0x08019324

0800ad28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 fe63 	bl	800da00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f007 fedd 	bl	8012afc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <netif_do_set_ipaddr+0x20>
 800ad5e:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <netif_do_set_ipaddr+0x88>)
 800ad60:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ad64:	491c      	ldr	r1, [pc, #112]	; (800add8 <netif_do_set_ipaddr+0x8c>)
 800ad66:	481d      	ldr	r0, [pc, #116]	; (800addc <netif_do_set_ipaddr+0x90>)
 800ad68:	f00c fb42 	bl	80173f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <netif_do_set_ipaddr+0x34>
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <netif_do_set_ipaddr+0x88>)
 800ad74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ad78:	4917      	ldr	r1, [pc, #92]	; (800add8 <netif_do_set_ipaddr+0x8c>)
 800ad7a:	4818      	ldr	r0, [pc, #96]	; (800addc <netif_do_set_ipaddr+0x90>)
 800ad7c:	f00c fb38 	bl	80173f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3304      	adds	r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d01c      	beq.n	800adc8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3304      	adds	r3, #4
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ad9e:	f107 0314 	add.w	r3, r7, #20
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7ff ffbf 	bl	800ad28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <netif_do_set_ipaddr+0x6a>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	e000      	b.n	800adb8 <netif_do_set_ipaddr+0x6c>
 800adb6:	2300      	movs	r3, #0
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800adbc:	2101      	movs	r1, #1
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f8d2 	bl	800af68 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800adc4:	2301      	movs	r3, #1
 800adc6:	e000      	b.n	800adca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	0801923c 	.word	0x0801923c
 800add8:	08019354 	.word	0x08019354
 800addc:	0801928c 	.word	0x0801928c

0800ade0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3308      	adds	r3, #8
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d00a      	beq.n	800ae10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <netif_do_set_netmask+0x26>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	e000      	b.n	800ae08 <netif_do_set_netmask+0x28>
 800ae06:	2300      	movs	r3, #0
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	330c      	adds	r3, #12
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d00a      	beq.n	800ae4e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <netif_do_set_gw+0x26>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	e000      	b.n	800ae46 <netif_do_set_gw+0x28>
 800ae44:	2300      	movs	r3, #0
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ae78:	4b1c      	ldr	r3, [pc, #112]	; (800aeec <netif_set_addr+0x90>)
 800ae7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ae82:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <netif_set_addr+0x90>)
 800ae84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ae8c:	4b17      	ldr	r3, [pc, #92]	; (800aeec <netif_set_addr+0x90>)
 800ae8e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <netif_set_addr+0x42>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <netif_set_addr+0x46>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <netif_set_addr+0x48>
 800aea2:	2300      	movs	r3, #0
 800aea4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d006      	beq.n	800aeba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aeac:	f107 0310 	add.w	r3, r7, #16
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68b9      	ldr	r1, [r7, #8]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f7ff ff49 	bl	800ad4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	6879      	ldr	r1, [r7, #4]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff ff8e 	bl	800ade0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff ffa8 	bl	800ae1e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d106      	bne.n	800aee2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aed4:	f107 0310 	add.w	r3, r7, #16
 800aed8:	461a      	mov	r2, r3
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7ff ff35 	bl	800ad4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aee2:	bf00      	nop
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	0801bd68 	.word	0x0801bd68

0800aef0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aef8:	4a04      	ldr	r2, [pc, #16]	; (800af0c <netif_set_default+0x1c>)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	20010914 	.word	0x20010914

0800af10 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d107      	bne.n	800af2e <netif_set_up+0x1e>
 800af1e:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <netif_set_up+0x4c>)
 800af20:	f44f 7254 	mov.w	r2, #848	; 0x350
 800af24:	490e      	ldr	r1, [pc, #56]	; (800af60 <netif_set_up+0x50>)
 800af26:	480f      	ldr	r0, [pc, #60]	; (800af64 <netif_set_up+0x54>)
 800af28:	f00c fa62 	bl	80173f0 <iprintf>
 800af2c:	e013      	b.n	800af56 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10c      	bne.n	800af56 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	b2da      	uxtb	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af4e:	2103      	movs	r1, #3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f809 	bl	800af68 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	0801923c 	.word	0x0801923c
 800af60:	080193c4 	.word	0x080193c4
 800af64:	0801928c 	.word	0x0801928c

0800af68 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <netif_issue_reports+0x20>
 800af7a:	4b18      	ldr	r3, [pc, #96]	; (800afdc <netif_issue_reports+0x74>)
 800af7c:	f240 326d 	movw	r2, #877	; 0x36d
 800af80:	4917      	ldr	r1, [pc, #92]	; (800afe0 <netif_issue_reports+0x78>)
 800af82:	4818      	ldr	r0, [pc, #96]	; (800afe4 <netif_issue_reports+0x7c>)
 800af84:	f00c fa34 	bl	80173f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	d01e      	beq.n	800afd4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af9c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d017      	beq.n	800afd4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00e      	beq.n	800afd6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800afbe:	f003 0308 	and.w	r3, r3, #8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d007      	beq.n	800afd6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3304      	adds	r3, #4
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f00a fb95 	bl	80156fc <etharp_request>
 800afd2:	e000      	b.n	800afd6 <netif_issue_reports+0x6e>
    return;
 800afd4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	0801923c 	.word	0x0801923c
 800afe0:	080193e0 	.word	0x080193e0
 800afe4:	0801928c 	.word	0x0801928c

0800afe8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d107      	bne.n	800b006 <netif_set_down+0x1e>
 800aff6:	4b12      	ldr	r3, [pc, #72]	; (800b040 <netif_set_down+0x58>)
 800aff8:	f240 329b 	movw	r2, #923	; 0x39b
 800affc:	4911      	ldr	r1, [pc, #68]	; (800b044 <netif_set_down+0x5c>)
 800affe:	4812      	ldr	r0, [pc, #72]	; (800b048 <netif_set_down+0x60>)
 800b000:	f00c f9f6 	bl	80173f0 <iprintf>
 800b004:	e019      	b.n	800b03a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d012      	beq.n	800b03a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b01a:	f023 0301 	bic.w	r3, r3, #1
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f009 ff1b 	bl	8014e70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0801923c 	.word	0x0801923c
 800b044:	08019404 	.word	0x08019404
 800b048:	0801928c 	.word	0x0801928c

0800b04c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d107      	bne.n	800b06a <netif_set_link_up+0x1e>
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <netif_set_link_up+0x64>)
 800b05c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b060:	4914      	ldr	r1, [pc, #80]	; (800b0b4 <netif_set_link_up+0x68>)
 800b062:	4815      	ldr	r0, [pc, #84]	; (800b0b8 <netif_set_link_up+0x6c>)
 800b064:	f00c f9c4 	bl	80173f0 <iprintf>
 800b068:	e01e      	b.n	800b0a8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d117      	bne.n	800b0a8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b07e:	f043 0304 	orr.w	r3, r3, #4
 800b082:	b2da      	uxtb	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f008 f960 	bl	8013350 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b090:	2103      	movs	r1, #3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ff68 	bl	800af68 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <netif_set_link_up+0x5c>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	0801923c 	.word	0x0801923c
 800b0b4:	08019424 	.word	0x08019424
 800b0b8:	0801928c 	.word	0x0801928c

0800b0bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <netif_set_link_down+0x1e>
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <netif_set_link_down+0x54>)
 800b0cc:	f240 4206 	movw	r2, #1030	; 0x406
 800b0d0:	4910      	ldr	r1, [pc, #64]	; (800b114 <netif_set_link_down+0x58>)
 800b0d2:	4811      	ldr	r0, [pc, #68]	; (800b118 <netif_set_link_down+0x5c>)
 800b0d4:	f00c f98c 	bl	80173f0 <iprintf>
 800b0d8:	e017      	b.n	800b10a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0ee:	f023 0304 	bic.w	r3, r3, #4
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <netif_set_link_down+0x4e>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	0801923c 	.word	0x0801923c
 800b114:	08019448 	.word	0x08019448
 800b118:	0801928c 	.word	0x0801928c

0800b11c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	61da      	str	r2, [r3, #28]
  }
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b14a:	f06f 030b 	mvn.w	r3, #11
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
	...

0800b15c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d013      	beq.n	800b194 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <netif_get_by_index+0x48>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e00c      	b.n	800b18e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	79fa      	ldrb	r2, [r7, #7]
 800b180:	429a      	cmp	r2, r3
 800b182:	d101      	bne.n	800b188 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	e006      	b.n	800b196 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1ef      	bne.n	800b174 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20010910 	.word	0x20010910

0800b1a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b1ae:	f00c f813 	bl	80171d8 <sys_arch_protect>
 800b1b2:	6038      	str	r0, [r7, #0]
 800b1b4:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <pbuf_free_ooseq+0x44>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	6838      	ldr	r0, [r7, #0]
 800b1bc:	f00c f81a 	bl	80171f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1c0:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <pbuf_free_ooseq+0x48>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	607b      	str	r3, [r7, #4]
 800b1c6:	e00a      	b.n	800b1de <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 fc53 	bl	800da7c <tcp_free_ooseq>
      return;
 800b1d6:	e005      	b.n	800b1e4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	607b      	str	r3, [r7, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1f1      	bne.n	800b1c8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20010919 	.word	0x20010919
 800b1f0:	20010928 	.word	0x20010928

0800b1f4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b1fc:	f7ff ffd4 	bl	800b1a8 <pbuf_free_ooseq>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b20e:	f00b ffe3 	bl	80171d8 <sys_arch_protect>
 800b212:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b214:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b21a:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f00b ffe7 	bl	80171f4 <sys_arch_unprotect>

  if (!queued) {
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10f      	bne.n	800b24c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b22c:	2100      	movs	r1, #0
 800b22e:	480a      	ldr	r0, [pc, #40]	; (800b258 <pbuf_pool_is_empty+0x50>)
 800b230:	f7fe fe84 	bl	8009f3c <tcpip_try_callback>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <pbuf_pool_is_empty+0x44>
 800b23a:	f00b ffcd 	bl	80171d8 <sys_arch_protect>
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b242:	2200      	movs	r2, #0
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f00b ffd4 	bl	80171f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20010919 	.word	0x20010919
 800b258:	0800b1f5 	.word	0x0800b1f5

0800b25c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	4611      	mov	r1, r2
 800b268:	461a      	mov	r2, r3
 800b26a:	460b      	mov	r3, r1
 800b26c:	80fb      	strh	r3, [r7, #6]
 800b26e:	4613      	mov	r3, r2
 800b270:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	88ba      	ldrh	r2, [r7, #4]
 800b288:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b28a:	8b3b      	ldrh	r3, [r7, #24]
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	7f3a      	ldrb	r2, [r7, #28]
 800b296:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	73da      	strb	r2, [r3, #15]
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08c      	sub	sp, #48	; 0x30
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	80bb      	strh	r3, [r7, #4]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b2c6:	887b      	ldrh	r3, [r7, #2]
 800b2c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b2cc:	d07f      	beq.n	800b3ce <pbuf_alloc+0x11e>
 800b2ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b2d2:	f300 80c8 	bgt.w	800b466 <pbuf_alloc+0x1b6>
 800b2d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b2da:	d010      	beq.n	800b2fe <pbuf_alloc+0x4e>
 800b2dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b2e0:	f300 80c1 	bgt.w	800b466 <pbuf_alloc+0x1b6>
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d002      	beq.n	800b2ee <pbuf_alloc+0x3e>
 800b2e8:	2b41      	cmp	r3, #65	; 0x41
 800b2ea:	f040 80bc 	bne.w	800b466 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b2ee:	887a      	ldrh	r2, [r7, #2]
 800b2f0:	88bb      	ldrh	r3, [r7, #4]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f000 f8d1 	bl	800b49c <pbuf_alloc_reference>
 800b2fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b2fc:	e0bd      	b.n	800b47a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b306:	88bb      	ldrh	r3, [r7, #4]
 800b308:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b30a:	200c      	movs	r0, #12
 800b30c:	f7ff fb8e 	bl	800aa2c <memp_malloc>
 800b310:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b318:	f7ff ff76 	bl	800b208 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b324:	f000 faa8 	bl	800b878 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	e0a7      	b.n	800b47c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b32c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b32e:	3303      	adds	r3, #3
 800b330:	b29b      	uxth	r3, r3
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	b29b      	uxth	r3, r3
 800b338:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8b7a      	ldrh	r2, [r7, #26]
 800b340:	4293      	cmp	r3, r2
 800b342:	bf28      	it	cs
 800b344:	4613      	movcs	r3, r2
 800b346:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b34a:	3310      	adds	r3, #16
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	3303      	adds	r3, #3
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	4618      	mov	r0, r3
 800b358:	89f9      	ldrh	r1, [r7, #14]
 800b35a:	8b7a      	ldrh	r2, [r7, #26]
 800b35c:	2300      	movs	r3, #0
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	887b      	ldrh	r3, [r7, #2]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	460b      	mov	r3, r1
 800b366:	4601      	mov	r1, r0
 800b368:	6938      	ldr	r0, [r7, #16]
 800b36a:	f7ff ff77 	bl	800b25c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d006      	beq.n	800b388 <pbuf_alloc+0xd8>
 800b37a:	4b42      	ldr	r3, [pc, #264]	; (800b484 <pbuf_alloc+0x1d4>)
 800b37c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b380:	4941      	ldr	r1, [pc, #260]	; (800b488 <pbuf_alloc+0x1d8>)
 800b382:	4842      	ldr	r0, [pc, #264]	; (800b48c <pbuf_alloc+0x1dc>)
 800b384:	f00c f834 	bl	80173f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b38a:	3303      	adds	r3, #3
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b394:	d106      	bne.n	800b3a4 <pbuf_alloc+0xf4>
 800b396:	4b3b      	ldr	r3, [pc, #236]	; (800b484 <pbuf_alloc+0x1d4>)
 800b398:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b39c:	493c      	ldr	r1, [pc, #240]	; (800b490 <pbuf_alloc+0x1e0>)
 800b39e:	483b      	ldr	r0, [pc, #236]	; (800b48c <pbuf_alloc+0x1dc>)
 800b3a0:	f00c f826 	bl	80173f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ae:	e002      	b.n	800b3b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b3ba:	8b7a      	ldrh	r2, [r7, #26]
 800b3bc:	89fb      	ldrh	r3, [r7, #14]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b3c6:	8b7b      	ldrh	r3, [r7, #26]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d19e      	bne.n	800b30a <pbuf_alloc+0x5a>
      break;
 800b3cc:	e055      	b.n	800b47a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b3ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	88bb      	ldrh	r3, [r7, #4]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f023 0303 	bic.w	r3, r3, #3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b3ea:	8b3b      	ldrh	r3, [r7, #24]
 800b3ec:	3310      	adds	r3, #16
 800b3ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3f0:	8b3a      	ldrh	r2, [r7, #24]
 800b3f2:	88bb      	ldrh	r3, [r7, #4]
 800b3f4:	3303      	adds	r3, #3
 800b3f6:	f023 0303 	bic.w	r3, r3, #3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d306      	bcc.n	800b40c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b3fe:	8afa      	ldrh	r2, [r7, #22]
 800b400:	88bb      	ldrh	r3, [r7, #4]
 800b402:	3303      	adds	r3, #3
 800b404:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b408:	429a      	cmp	r2, r3
 800b40a:	d201      	bcs.n	800b410 <pbuf_alloc+0x160>
        return NULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e035      	b.n	800b47c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b410:	8afb      	ldrh	r3, [r7, #22]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff f966 	bl	800a6e4 <mem_malloc>
 800b418:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <pbuf_alloc+0x174>
        return NULL;
 800b420:	2300      	movs	r3, #0
 800b422:	e02b      	b.n	800b47c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b426:	3310      	adds	r3, #16
 800b428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42a:	4413      	add	r3, r2
 800b42c:	3303      	adds	r3, #3
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	4618      	mov	r0, r3
 800b434:	88b9      	ldrh	r1, [r7, #4]
 800b436:	88ba      	ldrh	r2, [r7, #4]
 800b438:	2300      	movs	r3, #0
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	887b      	ldrh	r3, [r7, #2]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	460b      	mov	r3, r1
 800b442:	4601      	mov	r1, r0
 800b444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b446:	f7ff ff09 	bl	800b25c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d010      	beq.n	800b478 <pbuf_alloc+0x1c8>
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <pbuf_alloc+0x1d4>)
 800b458:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b45c:	490d      	ldr	r1, [pc, #52]	; (800b494 <pbuf_alloc+0x1e4>)
 800b45e:	480b      	ldr	r0, [pc, #44]	; (800b48c <pbuf_alloc+0x1dc>)
 800b460:	f00b ffc6 	bl	80173f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b464:	e008      	b.n	800b478 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <pbuf_alloc+0x1d4>)
 800b468:	f240 1227 	movw	r2, #295	; 0x127
 800b46c:	490a      	ldr	r1, [pc, #40]	; (800b498 <pbuf_alloc+0x1e8>)
 800b46e:	4807      	ldr	r0, [pc, #28]	; (800b48c <pbuf_alloc+0x1dc>)
 800b470:	f00b ffbe 	bl	80173f0 <iprintf>
      return NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	e001      	b.n	800b47c <pbuf_alloc+0x1cc>
      break;
 800b478:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3728      	adds	r7, #40	; 0x28
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	0801946c 	.word	0x0801946c
 800b488:	0801949c 	.word	0x0801949c
 800b48c:	080194cc 	.word	0x080194cc
 800b490:	080194f4 	.word	0x080194f4
 800b494:	08019528 	.word	0x08019528
 800b498:	08019554 	.word	0x08019554

0800b49c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	807b      	strh	r3, [r7, #2]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b4ac:	883b      	ldrh	r3, [r7, #0]
 800b4ae:	2b41      	cmp	r3, #65	; 0x41
 800b4b0:	d009      	beq.n	800b4c6 <pbuf_alloc_reference+0x2a>
 800b4b2:	883b      	ldrh	r3, [r7, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d006      	beq.n	800b4c6 <pbuf_alloc_reference+0x2a>
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <pbuf_alloc_reference+0x5c>)
 800b4ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b4be:	490f      	ldr	r1, [pc, #60]	; (800b4fc <pbuf_alloc_reference+0x60>)
 800b4c0:	480f      	ldr	r0, [pc, #60]	; (800b500 <pbuf_alloc_reference+0x64>)
 800b4c2:	f00b ff95 	bl	80173f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b4c6:	200b      	movs	r0, #11
 800b4c8:	f7ff fab0 	bl	800aa2c <memp_malloc>
 800b4cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e00b      	b.n	800b4f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b4d8:	8879      	ldrh	r1, [r7, #2]
 800b4da:	887a      	ldrh	r2, [r7, #2]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	883b      	ldrh	r3, [r7, #0]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff feb7 	bl	800b25c <pbuf_init_alloced_pbuf>
  return p;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	0801946c 	.word	0x0801946c
 800b4fc:	08019570 	.word	0x08019570
 800b500:	080194cc 	.word	0x080194cc

0800b504 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af02      	add	r7, sp, #8
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
 800b510:	460b      	mov	r3, r1
 800b512:	81bb      	strh	r3, [r7, #12]
 800b514:	4613      	mov	r3, r2
 800b516:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b51c:	8a7b      	ldrh	r3, [r7, #18]
 800b51e:	3303      	adds	r3, #3
 800b520:	f023 0203 	bic.w	r2, r3, #3
 800b524:	89bb      	ldrh	r3, [r7, #12]
 800b526:	441a      	add	r2, r3
 800b528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d901      	bls.n	800b532 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	e018      	b.n	800b564 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b538:	8a7b      	ldrh	r3, [r7, #18]
 800b53a:	3303      	adds	r3, #3
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	6a3a      	ldr	r2, [r7, #32]
 800b542:	4413      	add	r3, r2
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	e001      	b.n	800b54c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	89b9      	ldrh	r1, [r7, #12]
 800b550:	89ba      	ldrh	r2, [r7, #12]
 800b552:	2302      	movs	r3, #2
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	897b      	ldrh	r3, [r7, #10]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	460b      	mov	r3, r1
 800b55c:	6979      	ldr	r1, [r7, #20]
 800b55e:	f7ff fe7d 	bl	800b25c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b562:	687b      	ldr	r3, [r7, #4]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <pbuf_realloc+0x20>
 800b57e:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <pbuf_realloc+0xfc>)
 800b580:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b584:	4939      	ldr	r1, [pc, #228]	; (800b66c <pbuf_realloc+0x100>)
 800b586:	483a      	ldr	r0, [pc, #232]	; (800b670 <pbuf_realloc+0x104>)
 800b588:	f00b ff32 	bl	80173f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	887a      	ldrh	r2, [r7, #2]
 800b592:	429a      	cmp	r2, r3
 800b594:	d263      	bcs.n	800b65e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	891a      	ldrh	r2, [r3, #8]
 800b59a:	887b      	ldrh	r3, [r7, #2]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b5a0:	887b      	ldrh	r3, [r7, #2]
 800b5a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b5a8:	e018      	b.n	800b5dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	897a      	ldrh	r2, [r7, #10]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	891a      	ldrh	r2, [r3, #8]
 800b5b8:	893b      	ldrh	r3, [r7, #8]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <pbuf_realloc+0x70>
 800b5ce:	4b26      	ldr	r3, [pc, #152]	; (800b668 <pbuf_realloc+0xfc>)
 800b5d0:	f240 12af 	movw	r2, #431	; 0x1af
 800b5d4:	4927      	ldr	r1, [pc, #156]	; (800b674 <pbuf_realloc+0x108>)
 800b5d6:	4826      	ldr	r0, [pc, #152]	; (800b670 <pbuf_realloc+0x104>)
 800b5d8:	f00b ff0a 	bl	80173f0 <iprintf>
  while (rem_len > q->len) {
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	895b      	ldrh	r3, [r3, #10]
 800b5e0:	897a      	ldrh	r2, [r7, #10]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d8e1      	bhi.n	800b5aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	7b1b      	ldrb	r3, [r3, #12]
 800b5ea:	f003 030f 	and.w	r3, r3, #15
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d121      	bne.n	800b636 <pbuf_realloc+0xca>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	895b      	ldrh	r3, [r3, #10]
 800b5f6:	897a      	ldrh	r2, [r7, #10]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d01c      	beq.n	800b636 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	7b5b      	ldrb	r3, [r3, #13]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d116      	bne.n	800b636 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	b29a      	uxth	r2, r3
 800b612:	897b      	ldrh	r3, [r7, #10]
 800b614:	4413      	add	r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7fe ff58 	bl	800a4d0 <mem_trim>
 800b620:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d106      	bne.n	800b636 <pbuf_realloc+0xca>
 800b628:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <pbuf_realloc+0xfc>)
 800b62a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b62e:	4912      	ldr	r1, [pc, #72]	; (800b678 <pbuf_realloc+0x10c>)
 800b630:	480f      	ldr	r0, [pc, #60]	; (800b670 <pbuf_realloc+0x104>)
 800b632:	f00b fedd 	bl	80173f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	897a      	ldrh	r2, [r7, #10]
 800b63a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	895a      	ldrh	r2, [r3, #10]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d004      	beq.n	800b656 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f911 	bl	800b878 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	e000      	b.n	800b660 <pbuf_realloc+0xf4>
    return;
 800b65e:	bf00      	nop

}
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0801946c 	.word	0x0801946c
 800b66c:	08019584 	.word	0x08019584
 800b670:	080194cc 	.word	0x080194cc
 800b674:	0801959c 	.word	0x0801959c
 800b678:	080195b4 	.word	0x080195b4

0800b67c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d106      	bne.n	800b69e <pbuf_add_header_impl+0x22>
 800b690:	4b2b      	ldr	r3, [pc, #172]	; (800b740 <pbuf_add_header_impl+0xc4>)
 800b692:	f240 12df 	movw	r2, #479	; 0x1df
 800b696:	492b      	ldr	r1, [pc, #172]	; (800b744 <pbuf_add_header_impl+0xc8>)
 800b698:	482b      	ldr	r0, [pc, #172]	; (800b748 <pbuf_add_header_impl+0xcc>)
 800b69a:	f00b fea9 	bl	80173f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <pbuf_add_header_impl+0x30>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6aa:	d301      	bcc.n	800b6b0 <pbuf_add_header_impl+0x34>
    return 1;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e043      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <pbuf_add_header_impl+0x3e>
    return 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e03e      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	891a      	ldrh	r2, [r3, #8]
 800b6c2:	8a7b      	ldrh	r3, [r7, #18]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	8a7a      	ldrh	r2, [r7, #18]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d901      	bls.n	800b6d2 <pbuf_add_header_impl+0x56>
    return 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e032      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	7b1b      	ldrb	r3, [r3, #12]
 800b6d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b6d8:	8a3b      	ldrh	r3, [r7, #16]
 800b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00c      	beq.n	800b6fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3310      	adds	r3, #16
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d20d      	bcs.n	800b714 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e01d      	b.n	800b738 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d006      	beq.n	800b710 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	425b      	negs	r3, r3
 800b70a:	4413      	add	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	e001      	b.n	800b714 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b710:	2301      	movs	r3, #1
 800b712:	e011      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	895a      	ldrh	r2, [r3, #10]
 800b71e:	8a7b      	ldrh	r3, [r7, #18]
 800b720:	4413      	add	r3, r2
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	891a      	ldrh	r2, [r3, #8]
 800b72c:	8a7b      	ldrh	r3, [r7, #18]
 800b72e:	4413      	add	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	811a      	strh	r2, [r3, #8]


  return 0;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	0801946c 	.word	0x0801946c
 800b744:	080195d0 	.word	0x080195d0
 800b748:	080194cc 	.word	0x080194cc

0800b74c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b756:	2200      	movs	r2, #0
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff ff8e 	bl	800b67c <pbuf_add_header_impl>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d106      	bne.n	800b78a <pbuf_remove_header+0x1e>
 800b77c:	4b20      	ldr	r3, [pc, #128]	; (800b800 <pbuf_remove_header+0x94>)
 800b77e:	f240 224b 	movw	r2, #587	; 0x24b
 800b782:	4920      	ldr	r1, [pc, #128]	; (800b804 <pbuf_remove_header+0x98>)
 800b784:	4820      	ldr	r0, [pc, #128]	; (800b808 <pbuf_remove_header+0x9c>)
 800b786:	f00b fe33 	bl	80173f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <pbuf_remove_header+0x2c>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b796:	d301      	bcc.n	800b79c <pbuf_remove_header+0x30>
    return 1;
 800b798:	2301      	movs	r3, #1
 800b79a:	e02c      	b.n	800b7f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <pbuf_remove_header+0x3a>
    return 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e027      	b.n	800b7f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	895b      	ldrh	r3, [r3, #10]
 800b7ae:	89fa      	ldrh	r2, [r7, #14]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d908      	bls.n	800b7c6 <pbuf_remove_header+0x5a>
 800b7b4:	4b12      	ldr	r3, [pc, #72]	; (800b800 <pbuf_remove_header+0x94>)
 800b7b6:	f240 2255 	movw	r2, #597	; 0x255
 800b7ba:	4914      	ldr	r1, [pc, #80]	; (800b80c <pbuf_remove_header+0xa0>)
 800b7bc:	4812      	ldr	r0, [pc, #72]	; (800b808 <pbuf_remove_header+0x9c>)
 800b7be:	f00b fe17 	bl	80173f0 <iprintf>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e017      	b.n	800b7f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	441a      	add	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	895a      	ldrh	r2, [r3, #10]
 800b7dc:	89fb      	ldrh	r3, [r7, #14]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	891a      	ldrh	r2, [r3, #8]
 800b7ea:	89fb      	ldrh	r3, [r7, #14]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	0801946c 	.word	0x0801946c
 800b804:	080195d0 	.word	0x080195d0
 800b808:	080194cc 	.word	0x080194cc
 800b80c:	080195dc 	.word	0x080195dc

0800b810 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
 800b81c:	4613      	mov	r3, r2
 800b81e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b824:	2b00      	cmp	r3, #0
 800b826:	da08      	bge.n	800b83a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b82c:	425b      	negs	r3, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff9b 	bl	800b76c <pbuf_remove_header>
 800b836:	4603      	mov	r3, r0
 800b838:	e007      	b.n	800b84a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b83a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b83e:	787a      	ldrb	r2, [r7, #1]
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ff1a 	bl	800b67c <pbuf_add_header_impl>
 800b848:	4603      	mov	r3, r0
  }
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b85e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b862:	2201      	movs	r2, #1
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff ffd2 	bl	800b810 <pbuf_header_impl>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10b      	bne.n	800b89e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <pbuf_free+0x22>
 800b88c:	4b3b      	ldr	r3, [pc, #236]	; (800b97c <pbuf_free+0x104>)
 800b88e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b892:	493b      	ldr	r1, [pc, #236]	; (800b980 <pbuf_free+0x108>)
 800b894:	483b      	ldr	r0, [pc, #236]	; (800b984 <pbuf_free+0x10c>)
 800b896:	f00b fdab 	bl	80173f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	e069      	b.n	800b972 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b8a2:	e062      	b.n	800b96a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b8a4:	f00b fc98 	bl	80171d8 <sys_arch_protect>
 800b8a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7b9b      	ldrb	r3, [r3, #14]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <pbuf_free+0x48>
 800b8b2:	4b32      	ldr	r3, [pc, #200]	; (800b97c <pbuf_free+0x104>)
 800b8b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b8b8:	4933      	ldr	r1, [pc, #204]	; (800b988 <pbuf_free+0x110>)
 800b8ba:	4832      	ldr	r0, [pc, #200]	; (800b984 <pbuf_free+0x10c>)
 800b8bc:	f00b fd98 	bl	80173f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7b9b      	ldrb	r3, [r3, #14]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	739a      	strb	r2, [r3, #14]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7b9b      	ldrb	r3, [r3, #14]
 800b8d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b8d2:	69b8      	ldr	r0, [r7, #24]
 800b8d4:	f00b fc8e 	bl	80171f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d143      	bne.n	800b966 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7b1b      	ldrb	r3, [r3, #12]
 800b8e8:	f003 030f 	and.w	r3, r3, #15
 800b8ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7b5b      	ldrb	r3, [r3, #13]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <pbuf_free+0x9c>
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <pbuf_free+0x104>)
 800b908:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b90c:	491f      	ldr	r1, [pc, #124]	; (800b98c <pbuf_free+0x114>)
 800b90e:	481d      	ldr	r0, [pc, #116]	; (800b984 <pbuf_free+0x10c>)
 800b910:	f00b fd6e 	bl	80173f0 <iprintf>
        pc->custom_free_function(p);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	4798      	blx	r3
 800b91c:	e01d      	b.n	800b95a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d104      	bne.n	800b92e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	200c      	movs	r0, #12
 800b928:	f7ff f8f6 	bl	800ab18 <memp_free>
 800b92c:	e015      	b.n	800b95a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d104      	bne.n	800b93e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	200b      	movs	r0, #11
 800b938:	f7ff f8ee 	bl	800ab18 <memp_free>
 800b93c:	e00d      	b.n	800b95a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d103      	bne.n	800b94c <pbuf_free+0xd4>
          mem_free(p);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7fe fd33 	bl	800a3b0 <mem_free>
 800b94a:	e006      	b.n	800b95a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b94c:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <pbuf_free+0x104>)
 800b94e:	f240 320f 	movw	r2, #783	; 0x30f
 800b952:	490f      	ldr	r1, [pc, #60]	; (800b990 <pbuf_free+0x118>)
 800b954:	480b      	ldr	r0, [pc, #44]	; (800b984 <pbuf_free+0x10c>)
 800b956:	f00b fd4b 	bl	80173f0 <iprintf>
        }
      }
      count++;
 800b95a:	7ffb      	ldrb	r3, [r7, #31]
 800b95c:	3301      	adds	r3, #1
 800b95e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	607b      	str	r3, [r7, #4]
 800b964:	e001      	b.n	800b96a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d199      	bne.n	800b8a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b970:	7ffb      	ldrb	r3, [r7, #31]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3720      	adds	r7, #32
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	0801946c 	.word	0x0801946c
 800b980:	080195d0 	.word	0x080195d0
 800b984:	080194cc 	.word	0x080194cc
 800b988:	080195fc 	.word	0x080195fc
 800b98c:	08019614 	.word	0x08019614
 800b990:	08019638 	.word	0x08019638

0800b994 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b9a0:	e005      	b.n	800b9ae <pbuf_clen+0x1a>
    ++len;
 800b9a2:	89fb      	ldrh	r3, [r7, #14]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1f6      	bne.n	800b9a2 <pbuf_clen+0xe>
  }
  return len;
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d016      	beq.n	800ba00 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b9d2:	f00b fc01 	bl	80171d8 <sys_arch_protect>
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7b9b      	ldrb	r3, [r3, #14]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	739a      	strb	r2, [r3, #14]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f00b fc05 	bl	80171f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	7b9b      	ldrb	r3, [r3, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <pbuf_ref+0x3c>
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <pbuf_ref+0x44>)
 800b9f4:	f240 3242 	movw	r2, #834	; 0x342
 800b9f8:	4904      	ldr	r1, [pc, #16]	; (800ba0c <pbuf_ref+0x48>)
 800b9fa:	4805      	ldr	r0, [pc, #20]	; (800ba10 <pbuf_ref+0x4c>)
 800b9fc:	f00b fcf8 	bl	80173f0 <iprintf>
  }
}
 800ba00:	bf00      	nop
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	0801946c 	.word	0x0801946c
 800ba0c:	0801964c 	.word	0x0801964c
 800ba10:	080194cc 	.word	0x080194cc

0800ba14 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <pbuf_cat+0x16>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d107      	bne.n	800ba3a <pbuf_cat+0x26>
 800ba2a:	4b20      	ldr	r3, [pc, #128]	; (800baac <pbuf_cat+0x98>)
 800ba2c:	f240 3259 	movw	r2, #857	; 0x359
 800ba30:	491f      	ldr	r1, [pc, #124]	; (800bab0 <pbuf_cat+0x9c>)
 800ba32:	4820      	ldr	r0, [pc, #128]	; (800bab4 <pbuf_cat+0xa0>)
 800ba34:	f00b fcdc 	bl	80173f0 <iprintf>
 800ba38:	e034      	b.n	800baa4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	e00a      	b.n	800ba56 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	891a      	ldrh	r2, [r3, #8]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	891b      	ldrh	r3, [r3, #8]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f0      	bne.n	800ba40 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	891a      	ldrh	r2, [r3, #8]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	895b      	ldrh	r3, [r3, #10]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d006      	beq.n	800ba78 <pbuf_cat+0x64>
 800ba6a:	4b10      	ldr	r3, [pc, #64]	; (800baac <pbuf_cat+0x98>)
 800ba6c:	f240 3262 	movw	r2, #866	; 0x362
 800ba70:	4911      	ldr	r1, [pc, #68]	; (800bab8 <pbuf_cat+0xa4>)
 800ba72:	4810      	ldr	r0, [pc, #64]	; (800bab4 <pbuf_cat+0xa0>)
 800ba74:	f00b fcbc 	bl	80173f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d006      	beq.n	800ba8e <pbuf_cat+0x7a>
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <pbuf_cat+0x98>)
 800ba82:	f240 3263 	movw	r2, #867	; 0x363
 800ba86:	490d      	ldr	r1, [pc, #52]	; (800babc <pbuf_cat+0xa8>)
 800ba88:	480a      	ldr	r0, [pc, #40]	; (800bab4 <pbuf_cat+0xa0>)
 800ba8a:	f00b fcb1 	bl	80173f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	891a      	ldrh	r2, [r3, #8]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	891b      	ldrh	r3, [r3, #8]
 800ba96:	4413      	add	r3, r2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	0801946c 	.word	0x0801946c
 800bab0:	08019660 	.word	0x08019660
 800bab4:	080194cc 	.word	0x080194cc
 800bab8:	08019698 	.word	0x08019698
 800babc:	080196c8 	.word	0x080196c8

0800bac0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff ffa1 	bl	800ba14 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bad2:	6838      	ldr	r0, [r7, #0]
 800bad4:	f7ff ff76 	bl	800b9c4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	2300      	movs	r3, #0
 800baf0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d008      	beq.n	800bb0a <pbuf_copy+0x2a>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d005      	beq.n	800bb0a <pbuf_copy+0x2a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	891a      	ldrh	r2, [r3, #8]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d209      	bcs.n	800bb1e <pbuf_copy+0x3e>
 800bb0a:	4b57      	ldr	r3, [pc, #348]	; (800bc68 <pbuf_copy+0x188>)
 800bb0c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bb10:	4956      	ldr	r1, [pc, #344]	; (800bc6c <pbuf_copy+0x18c>)
 800bb12:	4857      	ldr	r0, [pc, #348]	; (800bc70 <pbuf_copy+0x190>)
 800bb14:	f00b fc6c 	bl	80173f0 <iprintf>
 800bb18:	f06f 030f 	mvn.w	r3, #15
 800bb1c:	e09f      	b.n	800bc5e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	895b      	ldrh	r3, [r3, #10]
 800bb22:	461a      	mov	r2, r3
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	895b      	ldrh	r3, [r3, #10]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	1acb      	subs	r3, r1, r3
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d306      	bcc.n	800bb44 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	895b      	ldrh	r3, [r3, #10]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	e005      	b.n	800bb50 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	895b      	ldrh	r3, [r3, #10]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	18d0      	adds	r0, r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	4413      	add	r3, r2
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4619      	mov	r1, r3
 800bb64:	f00b fd74 	bl	8017650 <memcpy>
    offset_to += len;
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	4413      	add	r3, r2
 800bb76:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	895b      	ldrh	r3, [r3, #10]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d906      	bls.n	800bb92 <pbuf_copy+0xb2>
 800bb84:	4b38      	ldr	r3, [pc, #224]	; (800bc68 <pbuf_copy+0x188>)
 800bb86:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bb8a:	493a      	ldr	r1, [pc, #232]	; (800bc74 <pbuf_copy+0x194>)
 800bb8c:	4838      	ldr	r0, [pc, #224]	; (800bc70 <pbuf_copy+0x190>)
 800bb8e:	f00b fc2f 	bl	80173f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	895b      	ldrh	r3, [r3, #10]
 800bb96:	461a      	mov	r2, r3
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d906      	bls.n	800bbac <pbuf_copy+0xcc>
 800bb9e:	4b32      	ldr	r3, [pc, #200]	; (800bc68 <pbuf_copy+0x188>)
 800bba0:	f240 32da 	movw	r2, #986	; 0x3da
 800bba4:	4934      	ldr	r1, [pc, #208]	; (800bc78 <pbuf_copy+0x198>)
 800bba6:	4832      	ldr	r0, [pc, #200]	; (800bc70 <pbuf_copy+0x190>)
 800bba8:	f00b fc22 	bl	80173f0 <iprintf>
    if (offset_from >= p_from->len) {
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	895b      	ldrh	r3, [r3, #10]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d304      	bcc.n	800bbc2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	895b      	ldrh	r3, [r3, #10]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d114      	bne.n	800bbf8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10c      	bne.n	800bbf8 <pbuf_copy+0x118>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <pbuf_copy+0x118>
 800bbe4:	4b20      	ldr	r3, [pc, #128]	; (800bc68 <pbuf_copy+0x188>)
 800bbe6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bbea:	4924      	ldr	r1, [pc, #144]	; (800bc7c <pbuf_copy+0x19c>)
 800bbec:	4820      	ldr	r0, [pc, #128]	; (800bc70 <pbuf_copy+0x190>)
 800bbee:	f00b fbff 	bl	80173f0 <iprintf>
 800bbf2:	f06f 030f 	mvn.w	r3, #15
 800bbf6:	e032      	b.n	800bc5e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d013      	beq.n	800bc26 <pbuf_copy+0x146>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	895a      	ldrh	r2, [r3, #10]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	891b      	ldrh	r3, [r3, #8]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d10d      	bne.n	800bc26 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d009      	beq.n	800bc26 <pbuf_copy+0x146>
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <pbuf_copy+0x188>)
 800bc14:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bc18:	4919      	ldr	r1, [pc, #100]	; (800bc80 <pbuf_copy+0x1a0>)
 800bc1a:	4815      	ldr	r0, [pc, #84]	; (800bc70 <pbuf_copy+0x190>)
 800bc1c:	f00b fbe8 	bl	80173f0 <iprintf>
 800bc20:	f06f 0305 	mvn.w	r3, #5
 800bc24:	e01b      	b.n	800bc5e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d013      	beq.n	800bc54 <pbuf_copy+0x174>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	895a      	ldrh	r2, [r3, #10]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	891b      	ldrh	r3, [r3, #8]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d10d      	bne.n	800bc54 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d009      	beq.n	800bc54 <pbuf_copy+0x174>
 800bc40:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <pbuf_copy+0x188>)
 800bc42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bc46:	490e      	ldr	r1, [pc, #56]	; (800bc80 <pbuf_copy+0x1a0>)
 800bc48:	4809      	ldr	r0, [pc, #36]	; (800bc70 <pbuf_copy+0x190>)
 800bc4a:	f00b fbd1 	bl	80173f0 <iprintf>
 800bc4e:	f06f 0305 	mvn.w	r3, #5
 800bc52:	e004      	b.n	800bc5e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f47f af61 	bne.w	800bb1e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0801946c 	.word	0x0801946c
 800bc6c:	08019714 	.word	0x08019714
 800bc70:	080194cc 	.word	0x080194cc
 800bc74:	08019744 	.word	0x08019744
 800bc78:	0801975c 	.word	0x0801975c
 800bc7c:	08019778 	.word	0x08019778
 800bc80:	08019788 	.word	0x08019788

0800bc84 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	461a      	mov	r2, r3
 800bc92:	460b      	mov	r3, r1
 800bc94:	80fb      	strh	r3, [r7, #6]
 800bc96:	4613      	mov	r3, r2
 800bc98:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d108      	bne.n	800bcba <pbuf_copy_partial+0x36>
 800bca8:	4b2b      	ldr	r3, [pc, #172]	; (800bd58 <pbuf_copy_partial+0xd4>)
 800bcaa:	f240 420a 	movw	r2, #1034	; 0x40a
 800bcae:	492b      	ldr	r1, [pc, #172]	; (800bd5c <pbuf_copy_partial+0xd8>)
 800bcb0:	482b      	ldr	r0, [pc, #172]	; (800bd60 <pbuf_copy_partial+0xdc>)
 800bcb2:	f00b fb9d 	bl	80173f0 <iprintf>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e04a      	b.n	800bd50 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d108      	bne.n	800bcd2 <pbuf_copy_partial+0x4e>
 800bcc0:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <pbuf_copy_partial+0xd4>)
 800bcc2:	f240 420b 	movw	r2, #1035	; 0x40b
 800bcc6:	4927      	ldr	r1, [pc, #156]	; (800bd64 <pbuf_copy_partial+0xe0>)
 800bcc8:	4825      	ldr	r0, [pc, #148]	; (800bd60 <pbuf_copy_partial+0xdc>)
 800bcca:	f00b fb91 	bl	80173f0 <iprintf>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e03e      	b.n	800bd50 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	e034      	b.n	800bd42 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bcd8:	88bb      	ldrh	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <pbuf_copy_partial+0x70>
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	895b      	ldrh	r3, [r3, #10]
 800bce2:	88ba      	ldrh	r2, [r7, #4]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d305      	bcc.n	800bcf4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	895b      	ldrh	r3, [r3, #10]
 800bcec:	88ba      	ldrh	r2, [r7, #4]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	80bb      	strh	r3, [r7, #4]
 800bcf2:	e023      	b.n	800bd3c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	895a      	ldrh	r2, [r3, #10]
 800bcf8:	88bb      	ldrh	r3, [r7, #4]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bcfe:	8b3a      	ldrh	r2, [r7, #24]
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d901      	bls.n	800bd0a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bd06:	88fb      	ldrh	r3, [r7, #6]
 800bd08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bd0a:	8b7b      	ldrh	r3, [r7, #26]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	18d0      	adds	r0, r2, r3
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	88bb      	ldrh	r3, [r7, #4]
 800bd16:	4413      	add	r3, r2
 800bd18:	8b3a      	ldrh	r2, [r7, #24]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f00b fc98 	bl	8017650 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bd20:	8afa      	ldrh	r2, [r7, #22]
 800bd22:	8b3b      	ldrh	r3, [r7, #24]
 800bd24:	4413      	add	r3, r2
 800bd26:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bd28:	8b7a      	ldrh	r2, [r7, #26]
 800bd2a:	8b3b      	ldrh	r3, [r7, #24]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bd30:	88fa      	ldrh	r2, [r7, #6]
 800bd32:	8b3b      	ldrh	r3, [r7, #24]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	88fb      	ldrh	r3, [r7, #6]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <pbuf_copy_partial+0xca>
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1c4      	bne.n	800bcd8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bd4e:	8afb      	ldrh	r3, [r7, #22]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	0801946c 	.word	0x0801946c
 800bd5c:	080197b4 	.word	0x080197b4
 800bd60:	080194cc 	.word	0x080194cc
 800bd64:	080197d4 	.word	0x080197d4

0800bd68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	603a      	str	r2, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
 800bd74:	460b      	mov	r3, r1
 800bd76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	8919      	ldrh	r1, [r3, #8]
 800bd7c:	88ba      	ldrh	r2, [r7, #4]
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fa95 	bl	800b2b0 <pbuf_alloc>
 800bd86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <pbuf_clone+0x2a>
    return NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e011      	b.n	800bdb6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff fea3 	bl	800bae0 <pbuf_copy>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d006      	beq.n	800bdb4 <pbuf_clone+0x4c>
 800bda6:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <pbuf_clone+0x58>)
 800bda8:	f240 5224 	movw	r2, #1316	; 0x524
 800bdac:	4905      	ldr	r1, [pc, #20]	; (800bdc4 <pbuf_clone+0x5c>)
 800bdae:	4806      	ldr	r0, [pc, #24]	; (800bdc8 <pbuf_clone+0x60>)
 800bdb0:	f00b fb1e 	bl	80173f0 <iprintf>
  return q;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	0801946c 	.word	0x0801946c
 800bdc4:	080198e0 	.word	0x080198e0
 800bdc8:	080194cc 	.word	0x080194cc

0800bdcc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdd0:	f00b fa20 	bl	8017214 <rand>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	4b01      	ldr	r3, [pc, #4]	; (800bdec <tcp_init+0x20>)
 800bde6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bde8:	bf00      	nop
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000024 	.word	0x20000024

0800bdf0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7d1b      	ldrb	r3, [r3, #20]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d105      	bne.n	800be0c <tcp_free+0x1c>
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <tcp_free+0x2c>)
 800be02:	22d4      	movs	r2, #212	; 0xd4
 800be04:	4906      	ldr	r1, [pc, #24]	; (800be20 <tcp_free+0x30>)
 800be06:	4807      	ldr	r0, [pc, #28]	; (800be24 <tcp_free+0x34>)
 800be08:	f00b faf2 	bl	80173f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	2001      	movs	r0, #1
 800be10:	f7fe fe82 	bl	800ab18 <memp_free>
}
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	0801996c 	.word	0x0801996c
 800be20:	0801999c 	.word	0x0801999c
 800be24:	080199b0 	.word	0x080199b0

0800be28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d105      	bne.n	800be44 <tcp_free_listen+0x1c>
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <tcp_free_listen+0x2c>)
 800be3a:	22df      	movs	r2, #223	; 0xdf
 800be3c:	4906      	ldr	r1, [pc, #24]	; (800be58 <tcp_free_listen+0x30>)
 800be3e:	4807      	ldr	r0, [pc, #28]	; (800be5c <tcp_free_listen+0x34>)
 800be40:	f00b fad6 	bl	80173f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	2002      	movs	r0, #2
 800be48:	f7fe fe66 	bl	800ab18 <memp_free>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801996c 	.word	0x0801996c
 800be58:	080199d8 	.word	0x080199d8
 800be5c:	080199b0 	.word	0x080199b0

0800be60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be64:	f001 f8a6 	bl	800cfb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be68:	4b07      	ldr	r3, [pc, #28]	; (800be88 <tcp_tmr+0x28>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <tcp_tmr+0x28>)
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <tcp_tmr+0x28>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be80:	f000 fd58 	bl	800c934 <tcp_slowtmr>
  }
}
 800be84:	bf00      	nop
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20010931 	.word	0x20010931

0800be8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d105      	bne.n	800bea8 <tcp_remove_listener+0x1c>
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <tcp_remove_listener+0x48>)
 800be9e:	22ff      	movs	r2, #255	; 0xff
 800bea0:	490d      	ldr	r1, [pc, #52]	; (800bed8 <tcp_remove_listener+0x4c>)
 800bea2:	480e      	ldr	r0, [pc, #56]	; (800bedc <tcp_remove_listener+0x50>)
 800bea4:	f00b faa4 	bl	80173f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e00a      	b.n	800bec4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d102      	bne.n	800bebe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f1      	bne.n	800beae <tcp_remove_listener+0x22>
    }
  }
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	0801996c 	.word	0x0801996c
 800bed8:	080199f4 	.word	0x080199f4
 800bedc:	080199b0 	.word	0x080199b0

0800bee0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <tcp_listen_closed+0x1c>
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <tcp_listen_closed+0x60>)
 800bef0:	f240 1211 	movw	r2, #273	; 0x111
 800bef4:	4913      	ldr	r1, [pc, #76]	; (800bf44 <tcp_listen_closed+0x64>)
 800bef6:	4814      	ldr	r0, [pc, #80]	; (800bf48 <tcp_listen_closed+0x68>)
 800bef8:	f00b fa7a 	bl	80173f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d006      	beq.n	800bf12 <tcp_listen_closed+0x32>
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <tcp_listen_closed+0x60>)
 800bf06:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bf0a:	4910      	ldr	r1, [pc, #64]	; (800bf4c <tcp_listen_closed+0x6c>)
 800bf0c:	480e      	ldr	r0, [pc, #56]	; (800bf48 <tcp_listen_closed+0x68>)
 800bf0e:	f00b fa6f 	bl	80173f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf12:	2301      	movs	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	e00b      	b.n	800bf30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bf18:	4a0d      	ldr	r2, [pc, #52]	; (800bf50 <tcp_listen_closed+0x70>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff ffb1 	bl	800be8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d9f0      	bls.n	800bf18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	0801996c 	.word	0x0801996c
 800bf44:	08019a1c 	.word	0x08019a1c
 800bf48:	080199b0 	.word	0x080199b0
 800bf4c:	08019a28 	.word	0x08019a28
 800bf50:	0801bd30 	.word	0x0801bd30

0800bf54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf54:	b5b0      	push	{r4, r5, r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af04      	add	r7, sp, #16
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <tcp_close_shutdown+0x20>
 800bf66:	4b63      	ldr	r3, [pc, #396]	; (800c0f4 <tcp_close_shutdown+0x1a0>)
 800bf68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bf6c:	4962      	ldr	r1, [pc, #392]	; (800c0f8 <tcp_close_shutdown+0x1a4>)
 800bf6e:	4863      	ldr	r0, [pc, #396]	; (800c0fc <tcp_close_shutdown+0x1a8>)
 800bf70:	f00b fa3e 	bl	80173f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d066      	beq.n	800c048 <tcp_close_shutdown+0xf4>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	7d1b      	ldrb	r3, [r3, #20]
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d003      	beq.n	800bf8a <tcp_close_shutdown+0x36>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7d1b      	ldrb	r3, [r3, #20]
 800bf86:	2b07      	cmp	r3, #7
 800bf88:	d15e      	bne.n	800c048 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d104      	bne.n	800bf9c <tcp_close_shutdown+0x48>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf9a:	d055      	beq.n	800c048 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	8b5b      	ldrh	r3, [r3, #26]
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <tcp_close_shutdown+0x62>
 800bfa8:	4b52      	ldr	r3, [pc, #328]	; (800c0f4 <tcp_close_shutdown+0x1a0>)
 800bfaa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bfae:	4954      	ldr	r1, [pc, #336]	; (800c100 <tcp_close_shutdown+0x1ac>)
 800bfb0:	4852      	ldr	r0, [pc, #328]	; (800c0fc <tcp_close_shutdown+0x1a8>)
 800bfb2:	f00b fa1d 	bl	80173f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bfbe:	687d      	ldr	r5, [r7, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	8ad2      	ldrh	r2, [r2, #22]
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	8b09      	ldrh	r1, [r1, #24]
 800bfcc:	9102      	str	r1, [sp, #8]
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f005 fdbb 	bl	8011b54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 fb98 	bl	800d714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bfe4:	4b47      	ldr	r3, [pc, #284]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d105      	bne.n	800bffa <tcp_close_shutdown+0xa6>
 800bfee:	4b45      	ldr	r3, [pc, #276]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	4a43      	ldr	r2, [pc, #268]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	e013      	b.n	800c022 <tcp_close_shutdown+0xce>
 800bffa:	4b42      	ldr	r3, [pc, #264]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	e00c      	b.n	800c01c <tcp_close_shutdown+0xc8>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d104      	bne.n	800c016 <tcp_close_shutdown+0xc2>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	60da      	str	r2, [r3, #12]
 800c014:	e005      	b.n	800c022 <tcp_close_shutdown+0xce>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1ef      	bne.n	800c002 <tcp_close_shutdown+0xae>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	60da      	str	r2, [r3, #12]
 800c028:	4b37      	ldr	r3, [pc, #220]	; (800c108 <tcp_close_shutdown+0x1b4>)
 800c02a:	2201      	movs	r2, #1
 800c02c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c02e:	4b37      	ldr	r3, [pc, #220]	; (800c10c <tcp_close_shutdown+0x1b8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d102      	bne.n	800c03e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c038:	f004 f830 	bl	801009c <tcp_trigger_input_pcb_close>
 800c03c:	e002      	b.n	800c044 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff fed6 	bl	800bdf0 <tcp_free>
      }
      return ERR_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	e050      	b.n	800c0ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d03b      	beq.n	800c0c8 <tcp_close_shutdown+0x174>
 800c050:	2b02      	cmp	r3, #2
 800c052:	dc44      	bgt.n	800c0de <tcp_close_shutdown+0x18a>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <tcp_close_shutdown+0x10a>
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d02a      	beq.n	800c0b2 <tcp_close_shutdown+0x15e>
 800c05c:	e03f      	b.n	800c0de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8adb      	ldrh	r3, [r3, #22]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d021      	beq.n	800c0aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d105      	bne.n	800c07c <tcp_close_shutdown+0x128>
 800c070:	4b27      	ldr	r3, [pc, #156]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	4a26      	ldr	r2, [pc, #152]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	e013      	b.n	800c0a4 <tcp_close_shutdown+0x150>
 800c07c:	4b24      	ldr	r3, [pc, #144]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60bb      	str	r3, [r7, #8]
 800c082:	e00c      	b.n	800c09e <tcp_close_shutdown+0x14a>
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d104      	bne.n	800c098 <tcp_close_shutdown+0x144>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	60da      	str	r2, [r3, #12]
 800c096:	e005      	b.n	800c0a4 <tcp_close_shutdown+0x150>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	60bb      	str	r3, [r7, #8]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1ef      	bne.n	800c084 <tcp_close_shutdown+0x130>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fea0 	bl	800bdf0 <tcp_free>
      break;
 800c0b0:	e01a      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff ff14 	bl	800bee0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4816      	ldr	r0, [pc, #88]	; (800c114 <tcp_close_shutdown+0x1c0>)
 800c0bc:	f001 fb7a 	bl	800d7b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff feb1 	bl	800be28 <tcp_free_listen>
      break;
 800c0c6:	e00f      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	480e      	ldr	r0, [pc, #56]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800c0cc:	f001 fb72 	bl	800d7b4 <tcp_pcb_remove>
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <tcp_close_shutdown+0x1b4>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fe8a 	bl	800bdf0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c0dc:	e004      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f81a 	bl	800c118 <tcp_close_shutdown_fin>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	e000      	b.n	800c0ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	0801996c 	.word	0x0801996c
 800c0f8:	08019a40 	.word	0x08019a40
 800c0fc:	080199b0 	.word	0x080199b0
 800c100:	08019a60 	.word	0x08019a60
 800c104:	20010928 	.word	0x20010928
 800c108:	20010930 	.word	0x20010930
 800c10c:	20010968 	.word	0x20010968
 800c110:	20010920 	.word	0x20010920
 800c114:	20010924 	.word	0x20010924

0800c118 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <tcp_close_shutdown_fin+0x1c>
 800c126:	4b2e      	ldr	r3, [pc, #184]	; (800c1e0 <tcp_close_shutdown_fin+0xc8>)
 800c128:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c12c:	492d      	ldr	r1, [pc, #180]	; (800c1e4 <tcp_close_shutdown_fin+0xcc>)
 800c12e:	482e      	ldr	r0, [pc, #184]	; (800c1e8 <tcp_close_shutdown_fin+0xd0>)
 800c130:	f00b f95e 	bl	80173f0 <iprintf>

  switch (pcb->state) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7d1b      	ldrb	r3, [r3, #20]
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d020      	beq.n	800c17e <tcp_close_shutdown_fin+0x66>
 800c13c:	2b07      	cmp	r3, #7
 800c13e:	dc2b      	bgt.n	800c198 <tcp_close_shutdown_fin+0x80>
 800c140:	2b03      	cmp	r3, #3
 800c142:	d002      	beq.n	800c14a <tcp_close_shutdown_fin+0x32>
 800c144:	2b04      	cmp	r3, #4
 800c146:	d00d      	beq.n	800c164 <tcp_close_shutdown_fin+0x4c>
 800c148:	e026      	b.n	800c198 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f004 fe10 	bl	8010d70 <tcp_send_fin>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d11f      	bne.n	800c19c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2205      	movs	r2, #5
 800c160:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c162:	e01b      	b.n	800c19c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f004 fe03 	bl	8010d70 <tcp_send_fin>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d114      	bne.n	800c1a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2205      	movs	r2, #5
 800c17a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c17c:	e010      	b.n	800c1a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f004 fdf6 	bl	8010d70 <tcp_send_fin>
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2209      	movs	r2, #9
 800c194:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c196:	e005      	b.n	800c1a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	e01c      	b.n	800c1d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c19c:	bf00      	nop
 800c19e:	e002      	b.n	800c1a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f004 ff1c 	bl	8010fec <tcp_output>
 800c1b4:	e00d      	b.n	800c1d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d108      	bne.n	800c1d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8b5b      	ldrh	r3, [r3, #26]
 800c1c4:	f043 0308 	orr.w	r3, r3, #8
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e001      	b.n	800c1d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	0801996c 	.word	0x0801996c
 800c1e4:	08019a1c 	.word	0x08019a1c
 800c1e8:	080199b0 	.word	0x080199b0

0800c1ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d109      	bne.n	800c20e <tcp_close+0x22>
 800c1fa:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <tcp_close+0x4c>)
 800c1fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c200:	490e      	ldr	r1, [pc, #56]	; (800c23c <tcp_close+0x50>)
 800c202:	480f      	ldr	r0, [pc, #60]	; (800c240 <tcp_close+0x54>)
 800c204:	f00b f8f4 	bl	80173f0 <iprintf>
 800c208:	f06f 030f 	mvn.w	r3, #15
 800c20c:	e00f      	b.n	800c22e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7d1b      	ldrb	r3, [r3, #20]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d006      	beq.n	800c224 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8b5b      	ldrh	r3, [r3, #26]
 800c21a:	f043 0310 	orr.w	r3, r3, #16
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c224:	2101      	movs	r1, #1
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fe94 	bl	800bf54 <tcp_close_shutdown>
 800c22c:	4603      	mov	r3, r0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	0801996c 	.word	0x0801996c
 800c23c:	08019a7c 	.word	0x08019a7c
 800c240:	080199b0 	.word	0x080199b0

0800c244 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <tcp_shutdown+0x26>
 800c256:	4b26      	ldr	r3, [pc, #152]	; (800c2f0 <tcp_shutdown+0xac>)
 800c258:	f240 2207 	movw	r2, #519	; 0x207
 800c25c:	4925      	ldr	r1, [pc, #148]	; (800c2f4 <tcp_shutdown+0xb0>)
 800c25e:	4826      	ldr	r0, [pc, #152]	; (800c2f8 <tcp_shutdown+0xb4>)
 800c260:	f00b f8c6 	bl	80173f0 <iprintf>
 800c264:	f06f 030f 	mvn.w	r3, #15
 800c268:	e03d      	b.n	800c2e6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	7d1b      	ldrb	r3, [r3, #20]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d102      	bne.n	800c278 <tcp_shutdown+0x34>
    return ERR_CONN;
 800c272:	f06f 030a 	mvn.w	r3, #10
 800c276:	e036      	b.n	800c2e6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d01b      	beq.n	800c2b6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	8b5b      	ldrh	r3, [r3, #26]
 800c282:	f043 0310 	orr.w	r3, r3, #16
 800c286:	b29a      	uxth	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c292:	2101      	movs	r1, #1
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff fe5d 	bl	800bf54 <tcp_close_shutdown>
 800c29a:	4603      	mov	r3, r0
 800c29c:	e023      	b.n	800c2e6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d007      	beq.n	800c2b6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff fae4 	bl	800b878 <pbuf_free>
      pcb->refused_data = NULL;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d013      	beq.n	800c2e4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	7d1b      	ldrb	r3, [r3, #20]
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	dc02      	bgt.n	800c2ca <tcp_shutdown+0x86>
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	da02      	bge.n	800c2ce <tcp_shutdown+0x8a>
 800c2c8:	e009      	b.n	800c2de <tcp_shutdown+0x9a>
 800c2ca:	2b07      	cmp	r3, #7
 800c2cc:	d107      	bne.n	800c2de <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff fe3d 	bl	800bf54 <tcp_close_shutdown>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	e003      	b.n	800c2e6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c2de:	f06f 030a 	mvn.w	r3, #10
 800c2e2:	e000      	b.n	800c2e6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0801996c 	.word	0x0801996c
 800c2f4:	08019a94 	.word	0x08019a94
 800c2f8:	080199b0 	.word	0x080199b0

0800c2fc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08e      	sub	sp, #56	; 0x38
 800c300:	af04      	add	r7, sp, #16
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d107      	bne.n	800c31c <tcp_abandon+0x20>
 800c30c:	4b52      	ldr	r3, [pc, #328]	; (800c458 <tcp_abandon+0x15c>)
 800c30e:	f240 223d 	movw	r2, #573	; 0x23d
 800c312:	4952      	ldr	r1, [pc, #328]	; (800c45c <tcp_abandon+0x160>)
 800c314:	4852      	ldr	r0, [pc, #328]	; (800c460 <tcp_abandon+0x164>)
 800c316:	f00b f86b 	bl	80173f0 <iprintf>
 800c31a:	e099      	b.n	800c450 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7d1b      	ldrb	r3, [r3, #20]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d106      	bne.n	800c332 <tcp_abandon+0x36>
 800c324:	4b4c      	ldr	r3, [pc, #304]	; (800c458 <tcp_abandon+0x15c>)
 800c326:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c32a:	494e      	ldr	r1, [pc, #312]	; (800c464 <tcp_abandon+0x168>)
 800c32c:	484c      	ldr	r0, [pc, #304]	; (800c460 <tcp_abandon+0x164>)
 800c32e:	f00b f85f 	bl	80173f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	7d1b      	ldrb	r3, [r3, #20]
 800c336:	2b0a      	cmp	r3, #10
 800c338:	d107      	bne.n	800c34a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	484a      	ldr	r0, [pc, #296]	; (800c468 <tcp_abandon+0x16c>)
 800c33e:	f001 fa39 	bl	800d7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fd54 	bl	800bdf0 <tcp_free>
 800c348:	e082      	b.n	800c450 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c356:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c364:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	7d1b      	ldrb	r3, [r3, #20]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d126      	bne.n	800c3c2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	8adb      	ldrh	r3, [r3, #22]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d02e      	beq.n	800c3da <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c37c:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <tcp_abandon+0x170>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d105      	bne.n	800c392 <tcp_abandon+0x96>
 800c386:	4b39      	ldr	r3, [pc, #228]	; (800c46c <tcp_abandon+0x170>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	4a37      	ldr	r2, [pc, #220]	; (800c46c <tcp_abandon+0x170>)
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	e013      	b.n	800c3ba <tcp_abandon+0xbe>
 800c392:	4b36      	ldr	r3, [pc, #216]	; (800c46c <tcp_abandon+0x170>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	61fb      	str	r3, [r7, #28]
 800c398:	e00c      	b.n	800c3b4 <tcp_abandon+0xb8>
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d104      	bne.n	800c3ae <tcp_abandon+0xb2>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68da      	ldr	r2, [r3, #12]
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	60da      	str	r2, [r3, #12]
 800c3ac:	e005      	b.n	800c3ba <tcp_abandon+0xbe>
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	61fb      	str	r3, [r7, #28]
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1ef      	bne.n	800c39a <tcp_abandon+0x9e>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	60da      	str	r2, [r3, #12]
 800c3c0:	e00b      	b.n	800c3da <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	8adb      	ldrh	r3, [r3, #22]
 800c3ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c3cc:	6879      	ldr	r1, [r7, #4]
 800c3ce:	4828      	ldr	r0, [pc, #160]	; (800c470 <tcp_abandon+0x174>)
 800c3d0:	f001 f9f0 	bl	800d7b4 <tcp_pcb_remove>
 800c3d4:	4b27      	ldr	r3, [pc, #156]	; (800c474 <tcp_abandon+0x178>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fec4 	bl	800d174 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d004      	beq.n	800c3fe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 febb 	bl	800d174 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c402:	2b00      	cmp	r3, #0
 800c404:	d004      	beq.n	800c410 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 feb2 	bl	800d174 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00e      	beq.n	800c434 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	3304      	adds	r3, #4
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	8b12      	ldrh	r2, [r2, #24]
 800c420:	9202      	str	r2, [sp, #8]
 800c422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c424:	9201      	str	r2, [sp, #4]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	460b      	mov	r3, r1
 800c42a:	697a      	ldr	r2, [r7, #20]
 800c42c:	69b9      	ldr	r1, [r7, #24]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f005 fb90 	bl	8011b54 <tcp_rst>
    }
    last_state = pcb->state;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7d1b      	ldrb	r3, [r3, #20]
 800c438:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff fcd8 	bl	800bdf0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <tcp_abandon+0x154>
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f06f 010c 	mvn.w	r1, #12
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	4798      	blx	r3
  }
}
 800c450:	3728      	adds	r7, #40	; 0x28
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0801996c 	.word	0x0801996c
 800c45c:	08019ab0 	.word	0x08019ab0
 800c460:	080199b0 	.word	0x080199b0
 800c464:	08019acc 	.word	0x08019acc
 800c468:	2001092c 	.word	0x2001092c
 800c46c:	20010920 	.word	0x20010920
 800c470:	20010928 	.word	0x20010928
 800c474:	20010930 	.word	0x20010930

0800c478 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c480:	2101      	movs	r1, #1
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff ff3a 	bl	800c2fc <tcp_abandon>
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c49e:	2304      	movs	r3, #4
 800c4a0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c4a8:	4b3e      	ldr	r3, [pc, #248]	; (800c5a4 <tcp_bind+0x114>)
 800c4aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d109      	bne.n	800c4c6 <tcp_bind+0x36>
 800c4b2:	4b3d      	ldr	r3, [pc, #244]	; (800c5a8 <tcp_bind+0x118>)
 800c4b4:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c4b8:	493c      	ldr	r1, [pc, #240]	; (800c5ac <tcp_bind+0x11c>)
 800c4ba:	483d      	ldr	r0, [pc, #244]	; (800c5b0 <tcp_bind+0x120>)
 800c4bc:	f00a ff98 	bl	80173f0 <iprintf>
 800c4c0:	f06f 030f 	mvn.w	r3, #15
 800c4c4:	e06a      	b.n	800c59c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7d1b      	ldrb	r3, [r3, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d009      	beq.n	800c4e2 <tcp_bind+0x52>
 800c4ce:	4b36      	ldr	r3, [pc, #216]	; (800c5a8 <tcp_bind+0x118>)
 800c4d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c4d4:	4937      	ldr	r1, [pc, #220]	; (800c5b4 <tcp_bind+0x124>)
 800c4d6:	4836      	ldr	r0, [pc, #216]	; (800c5b0 <tcp_bind+0x120>)
 800c4d8:	f00a ff8a 	bl	80173f0 <iprintf>
 800c4dc:	f06f 0305 	mvn.w	r3, #5
 800c4e0:	e05c      	b.n	800c59c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c4e2:	88fb      	ldrh	r3, [r7, #6]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d109      	bne.n	800c4fc <tcp_bind+0x6c>
    port = tcp_new_port();
 800c4e8:	f000 f9de 	bl	800c8a8 <tcp_new_port>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c4f0:	88fb      	ldrh	r3, [r7, #6]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d135      	bne.n	800c562 <tcp_bind+0xd2>
      return ERR_BUF;
 800c4f6:	f06f 0301 	mvn.w	r3, #1
 800c4fa:	e04f      	b.n	800c59c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	e02b      	b.n	800c55a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c502:	4a2d      	ldr	r2, [pc, #180]	; (800c5b8 <tcp_bind+0x128>)
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	e01e      	b.n	800c54e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	8adb      	ldrh	r3, [r3, #22]
 800c514:	88fa      	ldrh	r2, [r7, #6]
 800c516:	429a      	cmp	r2, r3
 800c518:	d116      	bne.n	800c548 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c51a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d010      	beq.n	800c542 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00c      	beq.n	800c542 <tcp_bind+0xb2>
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d009      	beq.n	800c542 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c53e:	429a      	cmp	r2, r3
 800c540:	d102      	bne.n	800c548 <tcp_bind+0xb8>
              return ERR_USE;
 800c542:	f06f 0307 	mvn.w	r3, #7
 800c546:	e029      	b.n	800c59c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	61bb      	str	r3, [r7, #24]
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1dd      	bne.n	800c510 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	3301      	adds	r3, #1
 800c558:	61fb      	str	r3, [r7, #28]
 800c55a:	69fa      	ldr	r2, [r7, #28]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	429a      	cmp	r2, r3
 800c560:	dbcf      	blt.n	800c502 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00c      	beq.n	800c582 <tcp_bind+0xf2>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d008      	beq.n	800c582 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <tcp_bind+0xec>
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	e000      	b.n	800c57e <tcp_bind+0xee>
 800c57c:	2300      	movs	r3, #0
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	88fa      	ldrh	r2, [r7, #6]
 800c586:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c588:	4b0c      	ldr	r3, [pc, #48]	; (800c5bc <tcp_bind+0x12c>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	60da      	str	r2, [r3, #12]
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <tcp_bind+0x12c>)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	f005 fc9f 	bl	8011ed8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	0801bd68 	.word	0x0801bd68
 800c5a8:	0801996c 	.word	0x0801996c
 800c5ac:	08019b00 	.word	0x08019b00
 800c5b0:	080199b0 	.word	0x080199b0
 800c5b4:	08019b18 	.word	0x08019b18
 800c5b8:	0801bd30 	.word	0x0801bd30
 800c5bc:	20010920 	.word	0x20010920

0800c5c0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d106      	bne.n	800c5e2 <tcp_accept_null+0x22>
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <tcp_accept_null+0x34>)
 800c5d6:	f240 320f 	movw	r2, #783	; 0x30f
 800c5da:	4907      	ldr	r1, [pc, #28]	; (800c5f8 <tcp_accept_null+0x38>)
 800c5dc:	4807      	ldr	r0, [pc, #28]	; (800c5fc <tcp_accept_null+0x3c>)
 800c5de:	f00a ff07 	bl	80173f0 <iprintf>

  tcp_abort(pcb);
 800c5e2:	68b8      	ldr	r0, [r7, #8]
 800c5e4:	f7ff ff48 	bl	800c478 <tcp_abort>

  return ERR_ABRT;
 800c5e8:	f06f 030c 	mvn.w	r3, #12
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	0801996c 	.word	0x0801996c
 800c5f8:	08019b40 	.word	0x08019b40
 800c5fc:	080199b0 	.word	0x080199b0

0800c600 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	460b      	mov	r3, r1
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d109      	bne.n	800c62c <tcp_listen_with_backlog_and_err+0x2c>
 800c618:	4b47      	ldr	r3, [pc, #284]	; (800c738 <tcp_listen_with_backlog_and_err+0x138>)
 800c61a:	f240 3259 	movw	r2, #857	; 0x359
 800c61e:	4947      	ldr	r1, [pc, #284]	; (800c73c <tcp_listen_with_backlog_and_err+0x13c>)
 800c620:	4847      	ldr	r0, [pc, #284]	; (800c740 <tcp_listen_with_backlog_and_err+0x140>)
 800c622:	f00a fee5 	bl	80173f0 <iprintf>
 800c626:	23f0      	movs	r3, #240	; 0xf0
 800c628:	76fb      	strb	r3, [r7, #27]
 800c62a:	e079      	b.n	800c720 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d009      	beq.n	800c648 <tcp_listen_with_backlog_and_err+0x48>
 800c634:	4b40      	ldr	r3, [pc, #256]	; (800c738 <tcp_listen_with_backlog_and_err+0x138>)
 800c636:	f240 325a 	movw	r2, #858	; 0x35a
 800c63a:	4942      	ldr	r1, [pc, #264]	; (800c744 <tcp_listen_with_backlog_and_err+0x144>)
 800c63c:	4840      	ldr	r0, [pc, #256]	; (800c740 <tcp_listen_with_backlog_and_err+0x140>)
 800c63e:	f00a fed7 	bl	80173f0 <iprintf>
 800c642:	23f1      	movs	r3, #241	; 0xf1
 800c644:	76fb      	strb	r3, [r7, #27]
 800c646:	e06b      	b.n	800c720 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	7d1b      	ldrb	r3, [r3, #20]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d104      	bne.n	800c65a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c654:	23f7      	movs	r3, #247	; 0xf7
 800c656:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c658:	e062      	b.n	800c720 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c65a:	2002      	movs	r0, #2
 800c65c:	f7fe f9e6 	bl	800aa2c <memp_malloc>
 800c660:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d102      	bne.n	800c66e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c668:	23ff      	movs	r3, #255	; 0xff
 800c66a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c66c:	e058      	b.n	800c720 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	691a      	ldr	r2, [r3, #16]
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	8ada      	ldrh	r2, [r3, #22]
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	2201      	movs	r2, #1
 800c682:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	7d5a      	ldrb	r2, [r3, #21]
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	7a5a      	ldrb	r2, [r3, #9]
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2200      	movs	r2, #0
 800c698:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	7ada      	ldrb	r2, [r3, #11]
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	7a9a      	ldrb	r2, [r3, #10]
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	8adb      	ldrh	r3, [r3, #22]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d021      	beq.n	800c6fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c6ba:	4b23      	ldr	r3, [pc, #140]	; (800c748 <tcp_listen_with_backlog_and_err+0x148>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d105      	bne.n	800c6d0 <tcp_listen_with_backlog_and_err+0xd0>
 800c6c4:	4b20      	ldr	r3, [pc, #128]	; (800c748 <tcp_listen_with_backlog_and_err+0x148>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	4a1f      	ldr	r2, [pc, #124]	; (800c748 <tcp_listen_with_backlog_and_err+0x148>)
 800c6cc:	6013      	str	r3, [r2, #0]
 800c6ce:	e013      	b.n	800c6f8 <tcp_listen_with_backlog_and_err+0xf8>
 800c6d0:	4b1d      	ldr	r3, [pc, #116]	; (800c748 <tcp_listen_with_backlog_and_err+0x148>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e00c      	b.n	800c6f2 <tcp_listen_with_backlog_and_err+0xf2>
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d104      	bne.n	800c6ec <tcp_listen_with_backlog_and_err+0xec>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	60da      	str	r2, [r3, #12]
 800c6ea:	e005      	b.n	800c6f8 <tcp_listen_with_backlog_and_err+0xf8>
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1ef      	bne.n	800c6d8 <tcp_listen_with_backlog_and_err+0xd8>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff fb76 	bl	800bdf0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	4a11      	ldr	r2, [pc, #68]	; (800c74c <tcp_listen_with_backlog_and_err+0x14c>)
 800c708:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c70a:	4b11      	ldr	r3, [pc, #68]	; (800c750 <tcp_listen_with_backlog_and_err+0x150>)
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	60da      	str	r2, [r3, #12]
 800c712:	4a0f      	ldr	r2, [pc, #60]	; (800c750 <tcp_listen_with_backlog_and_err+0x150>)
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	f005 fbde 	bl	8011ed8 <tcp_timer_needed>
  res = ERR_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7efa      	ldrb	r2, [r7, #27]
 800c72a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c72c:	69fb      	ldr	r3, [r7, #28]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3720      	adds	r7, #32
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	0801996c 	.word	0x0801996c
 800c73c:	08019b60 	.word	0x08019b60
 800c740:	080199b0 	.word	0x080199b0
 800c744:	08019b90 	.word	0x08019b90
 800c748:	20010920 	.word	0x20010920
 800c74c:	0800c5c1 	.word	0x0800c5c1
 800c750:	20010924 	.word	0x20010924

0800c754 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <tcp_update_rcv_ann_wnd+0x1c>
 800c762:	4b25      	ldr	r3, [pc, #148]	; (800c7f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c764:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c768:	4924      	ldr	r1, [pc, #144]	; (800c7fc <tcp_update_rcv_ann_wnd+0xa8>)
 800c76a:	4825      	ldr	r0, [pc, #148]	; (800c800 <tcp_update_rcv_ann_wnd+0xac>)
 800c76c:	f00a fe40 	bl	80173f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c778:	4413      	add	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c784:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c788:	bf28      	it	cs
 800c78a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c78e:	b292      	uxth	r2, r2
 800c790:	4413      	add	r3, r2
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b00      	cmp	r3, #0
 800c798:	db08      	blt.n	800c7ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	e020      	b.n	800c7ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dd03      	ble.n	800c7c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c7c0:	e014      	b.n	800c7ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7d4:	d306      	bcc.n	800c7e4 <tcp_update_rcv_ann_wnd+0x90>
 800c7d6:	4b08      	ldr	r3, [pc, #32]	; (800c7f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c7d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c7dc:	4909      	ldr	r1, [pc, #36]	; (800c804 <tcp_update_rcv_ann_wnd+0xb0>)
 800c7de:	4808      	ldr	r0, [pc, #32]	; (800c800 <tcp_update_rcv_ann_wnd+0xac>)
 800c7e0:	f00a fe06 	bl	80173f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c7ec:	2300      	movs	r3, #0
  }
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0801996c 	.word	0x0801996c
 800c7fc:	08019bc8 	.word	0x08019bc8
 800c800:	080199b0 	.word	0x080199b0
 800c804:	08019bec 	.word	0x08019bec

0800c808 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	460b      	mov	r3, r1
 800c812:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d107      	bne.n	800c82a <tcp_recved+0x22>
 800c81a:	4b1f      	ldr	r3, [pc, #124]	; (800c898 <tcp_recved+0x90>)
 800c81c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c820:	491e      	ldr	r1, [pc, #120]	; (800c89c <tcp_recved+0x94>)
 800c822:	481f      	ldr	r0, [pc, #124]	; (800c8a0 <tcp_recved+0x98>)
 800c824:	f00a fde4 	bl	80173f0 <iprintf>
 800c828:	e032      	b.n	800c890 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7d1b      	ldrb	r3, [r3, #20]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d106      	bne.n	800c840 <tcp_recved+0x38>
 800c832:	4b19      	ldr	r3, [pc, #100]	; (800c898 <tcp_recved+0x90>)
 800c834:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c838:	491a      	ldr	r1, [pc, #104]	; (800c8a4 <tcp_recved+0x9c>)
 800c83a:	4819      	ldr	r0, [pc, #100]	; (800c8a0 <tcp_recved+0x98>)
 800c83c:	f00a fdd8 	bl	80173f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c844:	887b      	ldrh	r3, [r7, #2]
 800c846:	4413      	add	r3, r2
 800c848:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c84a:	89fb      	ldrh	r3, [r7, #14]
 800c84c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c850:	d804      	bhi.n	800c85c <tcp_recved+0x54>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c856:	89fa      	ldrh	r2, [r7, #14]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d204      	bcs.n	800c866 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c862:	851a      	strh	r2, [r3, #40]	; 0x28
 800c864:	e002      	b.n	800c86c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	89fa      	ldrh	r2, [r7, #14]
 800c86a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ff71 	bl	800c754 <tcp_update_rcv_ann_wnd>
 800c872:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c87a:	d309      	bcc.n	800c890 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8b5b      	ldrh	r3, [r3, #26]
 800c880:	f043 0302 	orr.w	r3, r3, #2
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f004 fbae 	bl	8010fec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	0801996c 	.word	0x0801996c
 800c89c:	08019c08 	.word	0x08019c08
 800c8a0:	080199b0 	.word	0x080199b0
 800c8a4:	08019c20 	.word	0x08019c20

0800c8a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c8b2:	4b1e      	ldr	r3, [pc, #120]	; (800c92c <tcp_new_port+0x84>)
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	4b1c      	ldr	r3, [pc, #112]	; (800c92c <tcp_new_port+0x84>)
 800c8bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c8be:	4b1b      	ldr	r3, [pc, #108]	; (800c92c <tcp_new_port+0x84>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d103      	bne.n	800c8d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c8ca:	4b18      	ldr	r3, [pc, #96]	; (800c92c <tcp_new_port+0x84>)
 800c8cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c8d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	71fb      	strb	r3, [r7, #7]
 800c8d6:	e01e      	b.n	800c916 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c8d8:	79fb      	ldrb	r3, [r7, #7]
 800c8da:	4a15      	ldr	r2, [pc, #84]	; (800c930 <tcp_new_port+0x88>)
 800c8dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	e011      	b.n	800c90a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	8ada      	ldrh	r2, [r3, #22]
 800c8ea:	4b10      	ldr	r3, [pc, #64]	; (800c92c <tcp_new_port+0x84>)
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d108      	bne.n	800c904 <tcp_new_port+0x5c>
        n++;
 800c8f2:	88bb      	ldrh	r3, [r7, #4]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c8f8:	88bb      	ldrh	r3, [r7, #4]
 800c8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8fe:	d3d8      	bcc.n	800c8b2 <tcp_new_port+0xa>
          return 0;
 800c900:	2300      	movs	r3, #0
 800c902:	e00d      	b.n	800c920 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	603b      	str	r3, [r7, #0]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1ea      	bne.n	800c8e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	3301      	adds	r3, #1
 800c914:	71fb      	strb	r3, [r7, #7]
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d9dd      	bls.n	800c8d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c91c:	4b03      	ldr	r3, [pc, #12]	; (800c92c <tcp_new_port+0x84>)
 800c91e:	881b      	ldrh	r3, [r3, #0]
}
 800c920:	4618      	mov	r0, r3
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20000024 	.word	0x20000024
 800c930:	0801bd30 	.word	0x0801bd30

0800c934 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c934:	b5b0      	push	{r4, r5, r7, lr}
 800c936:	b090      	sub	sp, #64	; 0x40
 800c938:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c940:	4b94      	ldr	r3, [pc, #592]	; (800cb94 <tcp_slowtmr+0x260>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3301      	adds	r3, #1
 800c946:	4a93      	ldr	r2, [pc, #588]	; (800cb94 <tcp_slowtmr+0x260>)
 800c948:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c94a:	4b93      	ldr	r3, [pc, #588]	; (800cb98 <tcp_slowtmr+0x264>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	3301      	adds	r3, #1
 800c950:	b2da      	uxtb	r2, r3
 800c952:	4b91      	ldr	r3, [pc, #580]	; (800cb98 <tcp_slowtmr+0x264>)
 800c954:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c95a:	4b90      	ldr	r3, [pc, #576]	; (800cb9c <tcp_slowtmr+0x268>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c960:	e29f      	b.n	800cea2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c964:	7d1b      	ldrb	r3, [r3, #20]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <tcp_slowtmr+0x44>
 800c96a:	4b8d      	ldr	r3, [pc, #564]	; (800cba0 <tcp_slowtmr+0x26c>)
 800c96c:	f240 42be 	movw	r2, #1214	; 0x4be
 800c970:	498c      	ldr	r1, [pc, #560]	; (800cba4 <tcp_slowtmr+0x270>)
 800c972:	488d      	ldr	r0, [pc, #564]	; (800cba8 <tcp_slowtmr+0x274>)
 800c974:	f00a fd3c 	bl	80173f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	7d1b      	ldrb	r3, [r3, #20]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d106      	bne.n	800c98e <tcp_slowtmr+0x5a>
 800c980:	4b87      	ldr	r3, [pc, #540]	; (800cba0 <tcp_slowtmr+0x26c>)
 800c982:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c986:	4989      	ldr	r1, [pc, #548]	; (800cbac <tcp_slowtmr+0x278>)
 800c988:	4887      	ldr	r0, [pc, #540]	; (800cba8 <tcp_slowtmr+0x274>)
 800c98a:	f00a fd31 	bl	80173f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	7d1b      	ldrb	r3, [r3, #20]
 800c992:	2b0a      	cmp	r3, #10
 800c994:	d106      	bne.n	800c9a4 <tcp_slowtmr+0x70>
 800c996:	4b82      	ldr	r3, [pc, #520]	; (800cba0 <tcp_slowtmr+0x26c>)
 800c998:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c99c:	4984      	ldr	r1, [pc, #528]	; (800cbb0 <tcp_slowtmr+0x27c>)
 800c99e:	4882      	ldr	r0, [pc, #520]	; (800cba8 <tcp_slowtmr+0x274>)
 800c9a0:	f00a fd26 	bl	80173f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	7f9a      	ldrb	r2, [r3, #30]
 800c9a8:	4b7b      	ldr	r3, [pc, #492]	; (800cb98 <tcp_slowtmr+0x264>)
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d105      	bne.n	800c9bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c9ba:	e272      	b.n	800cea2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c9bc:	4b76      	ldr	r3, [pc, #472]	; (800cb98 <tcp_slowtmr+0x264>)
 800c9be:	781a      	ldrb	r2, [r3, #0]
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	7d1b      	ldrb	r3, [r3, #20]
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d10a      	bne.n	800c9ee <tcp_slowtmr+0xba>
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d905      	bls.n	800c9ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ec:	e11e      	b.n	800cc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9f4:	2b0b      	cmp	r3, #11
 800c9f6:	d905      	bls.n	800ca04 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca02:	e113      	b.n	800cc2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d075      	beq.n	800cafa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <tcp_slowtmr+0xf0>
 800ca16:	4b62      	ldr	r3, [pc, #392]	; (800cba0 <tcp_slowtmr+0x26c>)
 800ca18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ca1c:	4965      	ldr	r1, [pc, #404]	; (800cbb4 <tcp_slowtmr+0x280>)
 800ca1e:	4862      	ldr	r0, [pc, #392]	; (800cba8 <tcp_slowtmr+0x274>)
 800ca20:	f00a fce6 	bl	80173f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d106      	bne.n	800ca3a <tcp_slowtmr+0x106>
 800ca2c:	4b5c      	ldr	r3, [pc, #368]	; (800cba0 <tcp_slowtmr+0x26c>)
 800ca2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ca32:	4961      	ldr	r1, [pc, #388]	; (800cbb8 <tcp_slowtmr+0x284>)
 800ca34:	485c      	ldr	r0, [pc, #368]	; (800cba8 <tcp_slowtmr+0x274>)
 800ca36:	f00a fcdb 	bl	80173f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ca40:	2b0b      	cmp	r3, #11
 800ca42:	d905      	bls.n	800ca50 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ca44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca48:	3301      	adds	r3, #1
 800ca4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca4e:	e0ed      	b.n	800cc2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4a58      	ldr	r2, [pc, #352]	; (800cbbc <tcp_slowtmr+0x288>)
 800ca5a:	5cd3      	ldrb	r3, [r2, r3]
 800ca5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca64:	7c7a      	ldrb	r2, [r7, #17]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d907      	bls.n	800ca7a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca70:	3301      	adds	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca80:	7c7a      	ldrb	r2, [r7, #17]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	f200 80d2 	bhi.w	800cc2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ca88:	2301      	movs	r3, #1
 800ca8a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d108      	bne.n	800caa8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ca96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca98:	f005 f950 	bl	8011d3c <tcp_zero_window_probe>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d014      	beq.n	800cacc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800caa2:	2300      	movs	r3, #0
 800caa4:	623b      	str	r3, [r7, #32]
 800caa6:	e011      	b.n	800cacc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caae:	4619      	mov	r1, r3
 800cab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab2:	f004 f815 	bl	8010ae0 <tcp_split_unsent_seg>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d107      	bne.n	800cacc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cabc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cabe:	f004 fa95 	bl	8010fec <tcp_output>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 80ac 	beq.w	800cc2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cae2:	2b06      	cmp	r3, #6
 800cae4:	f200 80a2 	bhi.w	800cc2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caee:	3301      	adds	r3, #1
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800caf8:	e098      	b.n	800cc2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	db0f      	blt.n	800cb24 <tcp_slowtmr+0x1f0>
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d008      	beq.n	800cb24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	b21a      	sxth	r2, r3
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb30:	429a      	cmp	r2, r3
 800cb32:	db7b      	blt.n	800cc2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cb34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb36:	f004 fd4d 	bl	80115d4 <tcp_rexmit_rto_prepare>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d007      	beq.n	800cb50 <tcp_slowtmr+0x21c>
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d171      	bne.n	800cc2c <tcp_slowtmr+0x2f8>
 800cb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d06d      	beq.n	800cc2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	7d1b      	ldrb	r3, [r3, #20]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d03a      	beq.n	800cbce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb5e:	2b0c      	cmp	r3, #12
 800cb60:	bf28      	it	cs
 800cb62:	230c      	movcs	r3, #12
 800cb64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb6c:	10db      	asrs	r3, r3, #3
 800cb6e:	b21b      	sxth	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb78:	4413      	add	r3, r2
 800cb7a:	7efa      	ldrb	r2, [r7, #27]
 800cb7c:	4910      	ldr	r1, [pc, #64]	; (800cbc0 <tcp_slowtmr+0x28c>)
 800cb7e:	5c8a      	ldrb	r2, [r1, r2]
 800cb80:	4093      	lsls	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	dc1a      	bgt.n	800cbc4 <tcp_slowtmr+0x290>
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	b21a      	sxth	r2, r3
 800cb92:	e019      	b.n	800cbc8 <tcp_slowtmr+0x294>
 800cb94:	2001091c 	.word	0x2001091c
 800cb98:	20010932 	.word	0x20010932
 800cb9c:	20010928 	.word	0x20010928
 800cba0:	0801996c 	.word	0x0801996c
 800cba4:	08019cb0 	.word	0x08019cb0
 800cba8:	080199b0 	.word	0x080199b0
 800cbac:	08019cdc 	.word	0x08019cdc
 800cbb0:	08019d08 	.word	0x08019d08
 800cbb4:	08019d38 	.word	0x08019d38
 800cbb8:	08019d6c 	.word	0x08019d6c
 800cbbc:	0801bd28 	.word	0x0801bd28
 800cbc0:	0801bd18 	.word	0x0801bd18
 800cbc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	bf28      	it	cs
 800cbe4:	4613      	movcs	r3, r2
 800cbe6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cbe8:	8a7b      	ldrh	r3, [r7, #18]
 800cbea:	085b      	lsrs	r3, r3, #1
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d206      	bcs.n	800cc14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc20:	2200      	movs	r2, #0
 800cc22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cc26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc28:	f004 fd44 	bl	80116b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	7d1b      	ldrb	r3, [r3, #20]
 800cc30:	2b06      	cmp	r3, #6
 800cc32:	d111      	bne.n	800cc58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc36:	8b5b      	ldrh	r3, [r3, #26]
 800cc38:	f003 0310 	and.w	r3, r3, #16
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00b      	beq.n	800cc58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc40:	4b9d      	ldr	r3, [pc, #628]	; (800ceb8 <tcp_slowtmr+0x584>)
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	2b28      	cmp	r3, #40	; 0x28
 800cc4c:	d904      	bls.n	800cc58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc52:	3301      	adds	r3, #1
 800cc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	7a5b      	ldrb	r3, [r3, #9]
 800cc5c:	f003 0308 	and.w	r3, r3, #8
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d04c      	beq.n	800ccfe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d003      	beq.n	800cc74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cc70:	2b07      	cmp	r3, #7
 800cc72:	d144      	bne.n	800ccfe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc74:	4b90      	ldr	r3, [pc, #576]	; (800ceb8 <tcp_slowtmr+0x584>)
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc84:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cc88:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cc8c:	498b      	ldr	r1, [pc, #556]	; (800cebc <tcp_slowtmr+0x588>)
 800cc8e:	fba1 1303 	umull	r1, r3, r1, r3
 800cc92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d90a      	bls.n	800ccae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cca6:	3301      	adds	r3, #1
 800cca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccac:	e027      	b.n	800ccfe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccae:	4b82      	ldr	r3, [pc, #520]	; (800ceb8 <tcp_slowtmr+0x584>)
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	6a1b      	ldr	r3, [r3, #32]
 800ccb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	4b7e      	ldr	r3, [pc, #504]	; (800cec0 <tcp_slowtmr+0x58c>)
 800ccc8:	fb00 f303 	mul.w	r3, r0, r3
 800cccc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ccce:	497b      	ldr	r1, [pc, #492]	; (800cebc <tcp_slowtmr+0x588>)
 800ccd0:	fba1 1303 	umull	r1, r3, r1, r3
 800ccd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d911      	bls.n	800ccfe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ccda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccdc:	f004 ffee 	bl	8011cbc <tcp_keepalive>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cce6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d107      	bne.n	800ccfe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd06:	4b6c      	ldr	r3, [pc, #432]	; (800ceb8 <tcp_slowtmr+0x584>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd16:	4619      	mov	r1, r3
 800cd18:	460b      	mov	r3, r1
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	440b      	add	r3, r1
 800cd1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d302      	bcc.n	800cd2a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cd24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd26:	f000 fea9 	bl	800da7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	7d1b      	ldrb	r3, [r3, #20]
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d10b      	bne.n	800cd4a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd32:	4b61      	ldr	r3, [pc, #388]	; (800ceb8 <tcp_slowtmr+0x584>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b28      	cmp	r3, #40	; 0x28
 800cd3e:	d904      	bls.n	800cd4a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd44:	3301      	adds	r3, #1
 800cd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	7d1b      	ldrb	r3, [r3, #20]
 800cd4e:	2b09      	cmp	r3, #9
 800cd50:	d10b      	bne.n	800cd6a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd52:	4b59      	ldr	r3, [pc, #356]	; (800ceb8 <tcp_slowtmr+0x584>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2bf0      	cmp	r3, #240	; 0xf0
 800cd5e:	d904      	bls.n	800cd6a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd64:	3301      	adds	r3, #1
 800cd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d060      	beq.n	800ce34 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cd7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd7c:	f000 fcca 	bl	800d714 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d010      	beq.n	800cda8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cd86:	4b4f      	ldr	r3, [pc, #316]	; (800cec4 <tcp_slowtmr+0x590>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d106      	bne.n	800cd9e <tcp_slowtmr+0x46a>
 800cd90:	4b4d      	ldr	r3, [pc, #308]	; (800cec8 <tcp_slowtmr+0x594>)
 800cd92:	f240 526d 	movw	r2, #1389	; 0x56d
 800cd96:	494d      	ldr	r1, [pc, #308]	; (800cecc <tcp_slowtmr+0x598>)
 800cd98:	484d      	ldr	r0, [pc, #308]	; (800ced0 <tcp_slowtmr+0x59c>)
 800cd9a:	f00a fb29 	bl	80173f0 <iprintf>
        prev->next = pcb->next;
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	68da      	ldr	r2, [r3, #12]
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	60da      	str	r2, [r3, #12]
 800cda6:	e00f      	b.n	800cdc8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cda8:	4b46      	ldr	r3, [pc, #280]	; (800cec4 <tcp_slowtmr+0x590>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d006      	beq.n	800cdc0 <tcp_slowtmr+0x48c>
 800cdb2:	4b45      	ldr	r3, [pc, #276]	; (800cec8 <tcp_slowtmr+0x594>)
 800cdb4:	f240 5271 	movw	r2, #1393	; 0x571
 800cdb8:	4946      	ldr	r1, [pc, #280]	; (800ced4 <tcp_slowtmr+0x5a0>)
 800cdba:	4845      	ldr	r0, [pc, #276]	; (800ced0 <tcp_slowtmr+0x59c>)
 800cdbc:	f00a fb18 	bl	80173f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	4a3f      	ldr	r2, [pc, #252]	; (800cec4 <tcp_slowtmr+0x590>)
 800cdc6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cdc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d013      	beq.n	800cdf8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cdd8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	3304      	adds	r3, #4
 800cdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde0:	8ad2      	ldrh	r2, [r2, #22]
 800cde2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cde4:	8b09      	ldrh	r1, [r1, #24]
 800cde6:	9102      	str	r1, [sp, #8]
 800cde8:	9201      	str	r2, [sp, #4]
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	462b      	mov	r3, r5
 800cdee:	4622      	mov	r2, r4
 800cdf0:	4601      	mov	r1, r0
 800cdf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdf4:	f004 feae 	bl	8011b54 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	7d1b      	ldrb	r3, [r3, #20]
 800ce02:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce0e:	6838      	ldr	r0, [r7, #0]
 800ce10:	f7fe ffee 	bl	800bdf0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ce14:	4b30      	ldr	r3, [pc, #192]	; (800ced8 <tcp_slowtmr+0x5a4>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <tcp_slowtmr+0x4f6>
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f06f 010c 	mvn.w	r1, #12
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ce2a:	4b2b      	ldr	r3, [pc, #172]	; (800ced8 <tcp_slowtmr+0x5a4>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d037      	beq.n	800cea2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ce32:	e590      	b.n	800c956 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	7f1b      	ldrb	r3, [r3, #28]
 800ce42:	3301      	adds	r3, #1
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	7f1a      	ldrb	r2, [r3, #28]
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	7f5b      	ldrb	r3, [r3, #29]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d325      	bcc.n	800cea2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ce56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce58:	2200      	movs	r2, #0
 800ce5a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ce5c:	4b1e      	ldr	r3, [pc, #120]	; (800ced8 <tcp_slowtmr+0x5a4>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <tcp_slowtmr+0x550>
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce74:	6912      	ldr	r2, [r2, #16]
 800ce76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ce82:	e002      	b.n	800ce8a <tcp_slowtmr+0x556>
 800ce84:	2300      	movs	r3, #0
 800ce86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ce8a:	4b13      	ldr	r3, [pc, #76]	; (800ced8 <tcp_slowtmr+0x5a4>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d000      	beq.n	800ce94 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ce92:	e560      	b.n	800c956 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ce94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ce9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce9e:	f004 f8a5 	bl	8010fec <tcp_output>
  while (pcb != NULL) {
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f47f ad5c 	bne.w	800c962 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ceae:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <tcp_slowtmr+0x5a8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ceb4:	e067      	b.n	800cf86 <tcp_slowtmr+0x652>
 800ceb6:	bf00      	nop
 800ceb8:	2001091c 	.word	0x2001091c
 800cebc:	10624dd3 	.word	0x10624dd3
 800cec0:	000124f8 	.word	0x000124f8
 800cec4:	20010928 	.word	0x20010928
 800cec8:	0801996c 	.word	0x0801996c
 800cecc:	08019da4 	.word	0x08019da4
 800ced0:	080199b0 	.word	0x080199b0
 800ced4:	08019dd0 	.word	0x08019dd0
 800ced8:	20010930 	.word	0x20010930
 800cedc:	2001092c 	.word	0x2001092c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	7d1b      	ldrb	r3, [r3, #20]
 800cee4:	2b0a      	cmp	r3, #10
 800cee6:	d006      	beq.n	800cef6 <tcp_slowtmr+0x5c2>
 800cee8:	4b2b      	ldr	r3, [pc, #172]	; (800cf98 <tcp_slowtmr+0x664>)
 800ceea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ceee:	492b      	ldr	r1, [pc, #172]	; (800cf9c <tcp_slowtmr+0x668>)
 800cef0:	482b      	ldr	r0, [pc, #172]	; (800cfa0 <tcp_slowtmr+0x66c>)
 800cef2:	f00a fa7d 	bl	80173f0 <iprintf>
    pcb_remove = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cefc:	4b29      	ldr	r3, [pc, #164]	; (800cfa4 <tcp_slowtmr+0x670>)
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	2bf0      	cmp	r3, #240	; 0xf0
 800cf08:	d904      	bls.n	800cf14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cf0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d02f      	beq.n	800cf7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cf1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1e:	f000 fbf9 	bl	800d714 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d010      	beq.n	800cf4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cf28:	4b1f      	ldr	r3, [pc, #124]	; (800cfa8 <tcp_slowtmr+0x674>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d106      	bne.n	800cf40 <tcp_slowtmr+0x60c>
 800cf32:	4b19      	ldr	r3, [pc, #100]	; (800cf98 <tcp_slowtmr+0x664>)
 800cf34:	f240 52af 	movw	r2, #1455	; 0x5af
 800cf38:	491c      	ldr	r1, [pc, #112]	; (800cfac <tcp_slowtmr+0x678>)
 800cf3a:	4819      	ldr	r0, [pc, #100]	; (800cfa0 <tcp_slowtmr+0x66c>)
 800cf3c:	f00a fa58 	bl	80173f0 <iprintf>
        prev->next = pcb->next;
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	60da      	str	r2, [r3, #12]
 800cf48:	e00f      	b.n	800cf6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cf4a:	4b17      	ldr	r3, [pc, #92]	; (800cfa8 <tcp_slowtmr+0x674>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d006      	beq.n	800cf62 <tcp_slowtmr+0x62e>
 800cf54:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <tcp_slowtmr+0x664>)
 800cf56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cf5a:	4915      	ldr	r1, [pc, #84]	; (800cfb0 <tcp_slowtmr+0x67c>)
 800cf5c:	4810      	ldr	r0, [pc, #64]	; (800cfa0 <tcp_slowtmr+0x66c>)
 800cf5e:	f00a fa47 	bl	80173f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	4a10      	ldr	r2, [pc, #64]	; (800cfa8 <tcp_slowtmr+0x674>)
 800cf68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cf74:	69f8      	ldr	r0, [r7, #28]
 800cf76:	f7fe ff3b 	bl	800bdf0 <tcp_free>
 800cf7a:	e004      	b.n	800cf86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d1a9      	bne.n	800cee0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	3730      	adds	r7, #48	; 0x30
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bdb0      	pop	{r4, r5, r7, pc}
 800cf96:	bf00      	nop
 800cf98:	0801996c 	.word	0x0801996c
 800cf9c:	08019dfc 	.word	0x08019dfc
 800cfa0:	080199b0 	.word	0x080199b0
 800cfa4:	2001091c 	.word	0x2001091c
 800cfa8:	2001092c 	.word	0x2001092c
 800cfac:	08019e2c 	.word	0x08019e2c
 800cfb0:	08019e54 	.word	0x08019e54

0800cfb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cfba:	4b2d      	ldr	r3, [pc, #180]	; (800d070 <tcp_fasttmr+0xbc>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	4b2b      	ldr	r3, [pc, #172]	; (800d070 <tcp_fasttmr+0xbc>)
 800cfc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cfc6:	4b2b      	ldr	r3, [pc, #172]	; (800d074 <tcp_fasttmr+0xc0>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cfcc:	e048      	b.n	800d060 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7f9a      	ldrb	r2, [r3, #30]
 800cfd2:	4b27      	ldr	r3, [pc, #156]	; (800d070 <tcp_fasttmr+0xbc>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d03f      	beq.n	800d05a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cfda:	4b25      	ldr	r3, [pc, #148]	; (800d070 <tcp_fasttmr+0xbc>)
 800cfdc:	781a      	ldrb	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8b5b      	ldrh	r3, [r3, #26]
 800cfe6:	f003 0301 	and.w	r3, r3, #1
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d010      	beq.n	800d010 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8b5b      	ldrh	r3, [r3, #26]
 800cff2:	f043 0302 	orr.w	r3, r3, #2
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f003 fff5 	bl	8010fec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8b5b      	ldrh	r3, [r3, #26]
 800d006:	f023 0303 	bic.w	r3, r3, #3
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d009      	beq.n	800d030 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b5b      	ldrh	r3, [r3, #26]
 800d020:	f023 0308 	bic.w	r3, r3, #8
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff f874 	bl	800c118 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d03e:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <tcp_fasttmr+0xc4>)
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f819 	bl	800d07c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d04a:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <tcp_fasttmr+0xc4>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d000      	beq.n	800d054 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d052:	e7b8      	b.n	800cfc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	607b      	str	r3, [r7, #4]
 800d058:	e002      	b.n	800d060 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1b3      	bne.n	800cfce <tcp_fasttmr+0x1a>
    }
  }
}
 800d066:	bf00      	nop
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20010932 	.word	0x20010932
 800d074:	20010928 	.word	0x20010928
 800d078:	20010930 	.word	0x20010930

0800d07c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d07c:	b590      	push	{r4, r7, lr}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d109      	bne.n	800d09e <tcp_process_refused_data+0x22>
 800d08a:	4b37      	ldr	r3, [pc, #220]	; (800d168 <tcp_process_refused_data+0xec>)
 800d08c:	f240 6209 	movw	r2, #1545	; 0x609
 800d090:	4936      	ldr	r1, [pc, #216]	; (800d16c <tcp_process_refused_data+0xf0>)
 800d092:	4837      	ldr	r0, [pc, #220]	; (800d170 <tcp_process_refused_data+0xf4>)
 800d094:	f00a f9ac 	bl	80173f0 <iprintf>
 800d098:	f06f 030f 	mvn.w	r3, #15
 800d09c:	e060      	b.n	800d160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0a2:	7b5b      	ldrb	r3, [r3, #13]
 800d0a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00b      	beq.n	800d0d4 <tcp_process_refused_data+0x58>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6918      	ldr	r0, [r3, #16]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	47a0      	blx	r4
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
 800d0d2:	e007      	b.n	800d0e4 <tcp_process_refused_data+0x68>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	6879      	ldr	r1, [r7, #4]
 800d0da:	2000      	movs	r0, #0
 800d0dc:	f000 f8a4 	bl	800d228 <tcp_recv_null>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d12a      	bne.n	800d142 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
 800d0ee:	f003 0320 	and.w	r3, r3, #32
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d033      	beq.n	800d15e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d0fe:	d005      	beq.n	800d10c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d104:	3301      	adds	r3, #1
 800d106:	b29a      	uxth	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00b      	beq.n	800d12e <tcp_process_refused_data+0xb2>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6918      	ldr	r0, [r3, #16]
 800d120:	2300      	movs	r3, #0
 800d122:	2200      	movs	r2, #0
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	47a0      	blx	r4
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]
 800d12c:	e001      	b.n	800d132 <tcp_process_refused_data+0xb6>
 800d12e:	2300      	movs	r3, #0
 800d130:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d136:	f113 0f0d 	cmn.w	r3, #13
 800d13a:	d110      	bne.n	800d15e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d13c:	f06f 030c 	mvn.w	r3, #12
 800d140:	e00e      	b.n	800d160 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d146:	f113 0f0d 	cmn.w	r3, #13
 800d14a:	d102      	bne.n	800d152 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d14c:	f06f 030c 	mvn.w	r3, #12
 800d150:	e006      	b.n	800d160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d158:	f06f 0304 	mvn.w	r3, #4
 800d15c:	e000      	b.n	800d160 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3714      	adds	r7, #20
 800d164:	46bd      	mov	sp, r7
 800d166:	bd90      	pop	{r4, r7, pc}
 800d168:	0801996c 	.word	0x0801996c
 800d16c:	08019e7c 	.word	0x08019e7c
 800d170:	080199b0 	.word	0x080199b0

0800d174 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d17c:	e007      	b.n	800d18e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f80a 	bl	800d19e <tcp_seg_free>
    seg = next;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1f4      	bne.n	800d17e <tcp_segs_free+0xa>
  }
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00c      	beq.n	800d1c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe fb5d 	bl	800b878 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	2003      	movs	r0, #3
 800d1c2:	f7fd fca9 	bl	800ab18 <memp_free>
  }
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d106      	bne.n	800d1ec <tcp_seg_copy+0x1c>
 800d1de:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <tcp_seg_copy+0x4c>)
 800d1e0:	f240 6282 	movw	r2, #1666	; 0x682
 800d1e4:	490e      	ldr	r1, [pc, #56]	; (800d220 <tcp_seg_copy+0x50>)
 800d1e6:	480f      	ldr	r0, [pc, #60]	; (800d224 <tcp_seg_copy+0x54>)
 800d1e8:	f00a f902 	bl	80173f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d1ec:	2003      	movs	r0, #3
 800d1ee:	f7fd fc1d 	bl	800aa2c <memp_malloc>
 800d1f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <tcp_seg_copy+0x2e>
    return NULL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e00a      	b.n	800d214 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d1fe:	2210      	movs	r2, #16
 800d200:	6879      	ldr	r1, [r7, #4]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f00a fa24 	bl	8017650 <memcpy>
  pbuf_ref(cseg->p);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe fbd9 	bl	800b9c4 <pbuf_ref>
  return cseg;
 800d212:	68fb      	ldr	r3, [r7, #12]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	0801996c 	.word	0x0801996c
 800d220:	08019ec0 	.word	0x08019ec0
 800d224:	080199b0 	.word	0x080199b0

0800d228 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d109      	bne.n	800d250 <tcp_recv_null+0x28>
 800d23c:	4b12      	ldr	r3, [pc, #72]	; (800d288 <tcp_recv_null+0x60>)
 800d23e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d242:	4912      	ldr	r1, [pc, #72]	; (800d28c <tcp_recv_null+0x64>)
 800d244:	4812      	ldr	r0, [pc, #72]	; (800d290 <tcp_recv_null+0x68>)
 800d246:	f00a f8d3 	bl	80173f0 <iprintf>
 800d24a:	f06f 030f 	mvn.w	r3, #15
 800d24e:	e016      	b.n	800d27e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d009      	beq.n	800d26a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	891b      	ldrh	r3, [r3, #8]
 800d25a:	4619      	mov	r1, r3
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f7ff fad3 	bl	800c808 <tcp_recved>
    pbuf_free(p);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7fe fb08 	bl	800b878 <pbuf_free>
 800d268:	e008      	b.n	800d27c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d26a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d104      	bne.n	800d27c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d272:	68b8      	ldr	r0, [r7, #8]
 800d274:	f7fe ffba 	bl	800c1ec <tcp_close>
 800d278:	4603      	mov	r3, r0
 800d27a:	e000      	b.n	800d27e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	0801996c 	.word	0x0801996c
 800d28c:	08019edc 	.word	0x08019edc
 800d290:	080199b0 	.word	0x080199b0

0800d294 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	db01      	blt.n	800d2aa <tcp_kill_prio+0x16>
 800d2a6:	79fb      	ldrb	r3, [r7, #7]
 800d2a8:	e000      	b.n	800d2ac <tcp_kill_prio+0x18>
 800d2aa:	237f      	movs	r3, #127	; 0x7f
 800d2ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d2ae:	7afb      	ldrb	r3, [r7, #11]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d034      	beq.n	800d31e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d2b4:	7afb      	ldrb	r3, [r7, #11]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2c2:	4b19      	ldr	r3, [pc, #100]	; (800d328 <tcp_kill_prio+0x94>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	617b      	str	r3, [r7, #20]
 800d2c8:	e01f      	b.n	800d30a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	7d5b      	ldrb	r3, [r3, #21]
 800d2ce:	7afa      	ldrb	r2, [r7, #11]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d80c      	bhi.n	800d2ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d2d8:	7afa      	ldrb	r2, [r7, #11]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d112      	bne.n	800d304 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d2de:	4b13      	ldr	r3, [pc, #76]	; (800d32c <tcp_kill_prio+0x98>)
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	1ad3      	subs	r3, r2, r3
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d80a      	bhi.n	800d304 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d2ee:	4b0f      	ldr	r3, [pc, #60]	; (800d32c <tcp_kill_prio+0x98>)
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	7d5b      	ldrb	r3, [r3, #21]
 800d302:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1dc      	bne.n	800d2ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d004      	beq.n	800d320 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d316:	6938      	ldr	r0, [r7, #16]
 800d318:	f7ff f8ae 	bl	800c478 <tcp_abort>
 800d31c:	e000      	b.n	800d320 <tcp_kill_prio+0x8c>
    return;
 800d31e:	bf00      	nop
  }
}
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20010928 	.word	0x20010928
 800d32c:	2001091c 	.word	0x2001091c

0800d330 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d009      	beq.n	800d354 <tcp_kill_state+0x24>
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	2b09      	cmp	r3, #9
 800d344:	d006      	beq.n	800d354 <tcp_kill_state+0x24>
 800d346:	4b1a      	ldr	r3, [pc, #104]	; (800d3b0 <tcp_kill_state+0x80>)
 800d348:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d34c:	4919      	ldr	r1, [pc, #100]	; (800d3b4 <tcp_kill_state+0x84>)
 800d34e:	481a      	ldr	r0, [pc, #104]	; (800d3b8 <tcp_kill_state+0x88>)
 800d350:	f00a f84e 	bl	80173f0 <iprintf>

  inactivity = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d35c:	4b17      	ldr	r3, [pc, #92]	; (800d3bc <tcp_kill_state+0x8c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	617b      	str	r3, [r7, #20]
 800d362:	e017      	b.n	800d394 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	7d1b      	ldrb	r3, [r3, #20]
 800d368:	79fa      	ldrb	r2, [r7, #7]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d10f      	bne.n	800d38e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d36e:	4b14      	ldr	r3, [pc, #80]	; (800d3c0 <tcp_kill_state+0x90>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d807      	bhi.n	800d38e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d37e:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <tcp_kill_state+0x90>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	617b      	str	r3, [r7, #20]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1e4      	bne.n	800d364 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d003      	beq.n	800d3a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	6938      	ldr	r0, [r7, #16]
 800d3a4:	f7fe ffaa 	bl	800c2fc <tcp_abandon>
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	0801996c 	.word	0x0801996c
 800d3b4:	08019ef8 	.word	0x08019ef8
 800d3b8:	080199b0 	.word	0x080199b0
 800d3bc:	20010928 	.word	0x20010928
 800d3c0:	2001091c 	.word	0x2001091c

0800d3c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3d2:	4b12      	ldr	r3, [pc, #72]	; (800d41c <tcp_kill_timewait+0x58>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	e012      	b.n	800d400 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d3da:	4b11      	ldr	r3, [pc, #68]	; (800d420 <tcp_kill_timewait+0x5c>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d807      	bhi.n	800d3fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d3ea:	4b0d      	ldr	r3, [pc, #52]	; (800d420 <tcp_kill_timewait+0x5c>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e9      	bne.n	800d3da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d40c:	68b8      	ldr	r0, [r7, #8]
 800d40e:	f7ff f833 	bl	800c478 <tcp_abort>
  }
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	2001092c 	.word	0x2001092c
 800d420:	2001091c 	.word	0x2001091c

0800d424 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d42a:	4b10      	ldr	r3, [pc, #64]	; (800d46c <tcp_handle_closepend+0x48>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d430:	e014      	b.n	800d45c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	8b5b      	ldrh	r3, [r3, #26]
 800d43c:	f003 0308 	and.w	r3, r3, #8
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	8b5b      	ldrh	r3, [r3, #26]
 800d448:	f023 0308 	bic.w	r3, r3, #8
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7fe fe60 	bl	800c118 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e7      	bne.n	800d432 <tcp_handle_closepend+0xe>
  }
}
 800d462:	bf00      	nop
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20010928 	.word	0x20010928

0800d470 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	4603      	mov	r3, r0
 800d478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d47a:	2001      	movs	r0, #1
 800d47c:	f7fd fad6 	bl	800aa2c <memp_malloc>
 800d480:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d126      	bne.n	800d4d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d488:	f7ff ffcc 	bl	800d424 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d48c:	f7ff ff9a 	bl	800d3c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d490:	2001      	movs	r0, #1
 800d492:	f7fd facb 	bl	800aa2c <memp_malloc>
 800d496:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d11b      	bne.n	800d4d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d49e:	2009      	movs	r0, #9
 800d4a0:	f7ff ff46 	bl	800d330 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	f7fd fac1 	bl	800aa2c <memp_malloc>
 800d4aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d111      	bne.n	800d4d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d4b2:	2008      	movs	r0, #8
 800d4b4:	f7ff ff3c 	bl	800d330 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4b8:	2001      	movs	r0, #1
 800d4ba:	f7fd fab7 	bl	800aa2c <memp_malloc>
 800d4be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d107      	bne.n	800d4d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fee3 	bl	800d294 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	f7fd faac 	bl	800aa2c <memp_malloc>
 800d4d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d03f      	beq.n	800d55c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d4dc:	229c      	movs	r2, #156	; 0x9c
 800d4de:	2100      	movs	r1, #0
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f009 ffea 	bl	80174ba <memset>
    pcb->prio = prio;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	79fa      	ldrb	r2, [r7, #7]
 800d4ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d4f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	22ff      	movs	r2, #255	; 0xff
 800d50a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d512:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2206      	movs	r2, #6
 800d518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2206      	movs	r2, #6
 800d520:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d528:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d532:	4b0d      	ldr	r3, [pc, #52]	; (800d568 <tcp_alloc+0xf8>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d53a:	4b0c      	ldr	r3, [pc, #48]	; (800d56c <tcp_alloc+0xfc>)
 800d53c:	781a      	ldrb	r2, [r3, #0]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d548:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	4a08      	ldr	r2, [pc, #32]	; (800d570 <tcp_alloc+0x100>)
 800d550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4a07      	ldr	r2, [pc, #28]	; (800d574 <tcp_alloc+0x104>)
 800d558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d55c:	68fb      	ldr	r3, [r7, #12]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	2001091c 	.word	0x2001091c
 800d56c:	20010932 	.word	0x20010932
 800d570:	0800d229 	.word	0x0800d229
 800d574:	006ddd00 	.word	0x006ddd00

0800d578 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d582:	2040      	movs	r0, #64	; 0x40
 800d584:	f7ff ff74 	bl	800d470 <tcp_alloc>
 800d588:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d58a:	68fb      	ldr	r3, [r7, #12]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	611a      	str	r2, [r3, #16]
  }
}
 800d5aa:	bf00      	nop
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00e      	beq.n	800d5e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	7d1b      	ldrb	r3, [r3, #20]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d106      	bne.n	800d5de <tcp_recv+0x26>
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <tcp_recv+0x38>)
 800d5d2:	f240 72df 	movw	r2, #2015	; 0x7df
 800d5d6:	4907      	ldr	r1, [pc, #28]	; (800d5f4 <tcp_recv+0x3c>)
 800d5d8:	4807      	ldr	r0, [pc, #28]	; (800d5f8 <tcp_recv+0x40>)
 800d5da:	f009 ff09 	bl	80173f0 <iprintf>
    pcb->recv = recv;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	0801996c 	.word	0x0801996c
 800d5f4:	08019f08 	.word	0x08019f08
 800d5f8:	080199b0 	.word	0x080199b0

0800d5fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00e      	beq.n	800d62a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7d1b      	ldrb	r3, [r3, #20]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d106      	bne.n	800d622 <tcp_sent+0x26>
 800d614:	4b07      	ldr	r3, [pc, #28]	; (800d634 <tcp_sent+0x38>)
 800d616:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d61a:	4907      	ldr	r1, [pc, #28]	; (800d638 <tcp_sent+0x3c>)
 800d61c:	4807      	ldr	r0, [pc, #28]	; (800d63c <tcp_sent+0x40>)
 800d61e:	f009 fee7 	bl	80173f0 <iprintf>
    pcb->sent = sent;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	0801996c 	.word	0x0801996c
 800d638:	08019f30 	.word	0x08019f30
 800d63c:	080199b0 	.word	0x080199b0

0800d640 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00e      	beq.n	800d66e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	7d1b      	ldrb	r3, [r3, #20]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d106      	bne.n	800d666 <tcp_err+0x26>
 800d658:	4b07      	ldr	r3, [pc, #28]	; (800d678 <tcp_err+0x38>)
 800d65a:	f640 020d 	movw	r2, #2061	; 0x80d
 800d65e:	4907      	ldr	r1, [pc, #28]	; (800d67c <tcp_err+0x3c>)
 800d660:	4807      	ldr	r0, [pc, #28]	; (800d680 <tcp_err+0x40>)
 800d662:	f009 fec5 	bl	80173f0 <iprintf>
    pcb->errf = err;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	0801996c 	.word	0x0801996c
 800d67c:	08019f58 	.word	0x08019f58
 800d680:	080199b0 	.word	0x080199b0

0800d684 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d008      	beq.n	800d6a6 <tcp_accept+0x22>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d104      	bne.n	800d6a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	619a      	str	r2, [r3, #24]
  }
}
 800d6a6:	bf00      	nop
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
	...

0800d6b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d107      	bne.n	800d6d8 <tcp_poll+0x24>
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	; (800d704 <tcp_poll+0x50>)
 800d6ca:	f640 023d 	movw	r2, #2109	; 0x83d
 800d6ce:	490e      	ldr	r1, [pc, #56]	; (800d708 <tcp_poll+0x54>)
 800d6d0:	480e      	ldr	r0, [pc, #56]	; (800d70c <tcp_poll+0x58>)
 800d6d2:	f009 fe8d 	bl	80173f0 <iprintf>
 800d6d6:	e011      	b.n	800d6fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	7d1b      	ldrb	r3, [r3, #20]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d106      	bne.n	800d6ee <tcp_poll+0x3a>
 800d6e0:	4b08      	ldr	r3, [pc, #32]	; (800d704 <tcp_poll+0x50>)
 800d6e2:	f640 023e 	movw	r2, #2110	; 0x83e
 800d6e6:	490a      	ldr	r1, [pc, #40]	; (800d710 <tcp_poll+0x5c>)
 800d6e8:	4808      	ldr	r0, [pc, #32]	; (800d70c <tcp_poll+0x58>)
 800d6ea:	f009 fe81 	bl	80173f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	79fa      	ldrb	r2, [r7, #7]
 800d6fa:	775a      	strb	r2, [r3, #29]
}
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	0801996c 	.word	0x0801996c
 800d708:	08019f80 	.word	0x08019f80
 800d70c:	080199b0 	.word	0x080199b0
 800d710:	08019f98 	.word	0x08019f98

0800d714 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d107      	bne.n	800d732 <tcp_pcb_purge+0x1e>
 800d722:	4b21      	ldr	r3, [pc, #132]	; (800d7a8 <tcp_pcb_purge+0x94>)
 800d724:	f640 0251 	movw	r2, #2129	; 0x851
 800d728:	4920      	ldr	r1, [pc, #128]	; (800d7ac <tcp_pcb_purge+0x98>)
 800d72a:	4821      	ldr	r0, [pc, #132]	; (800d7b0 <tcp_pcb_purge+0x9c>)
 800d72c:	f009 fe60 	bl	80173f0 <iprintf>
 800d730:	e037      	b.n	800d7a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	7d1b      	ldrb	r3, [r3, #20]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d033      	beq.n	800d7a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d73e:	2b0a      	cmp	r3, #10
 800d740:	d02f      	beq.n	800d7a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d746:	2b01      	cmp	r3, #1
 800d748:	d02b      	beq.n	800d7a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d756:	4618      	mov	r0, r3
 800d758:	f7fe f88e 	bl	800b878 <pbuf_free>
      pcb->refused_data = NULL;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d766:	2b00      	cmp	r3, #0
 800d768:	d002      	beq.n	800d770 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f986 	bl	800da7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d776:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff fcf9 	bl	800d174 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d786:	4618      	mov	r0, r3
 800d788:	f7ff fcf4 	bl	800d174 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	66da      	str	r2, [r3, #108]	; 0x6c
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	0801996c 	.word	0x0801996c
 800d7ac:	08019fb8 	.word	0x08019fb8
 800d7b0:	080199b0 	.word	0x080199b0

0800d7b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <tcp_pcb_remove+0x1e>
 800d7c4:	4b3e      	ldr	r3, [pc, #248]	; (800d8c0 <tcp_pcb_remove+0x10c>)
 800d7c6:	f640 0283 	movw	r2, #2179	; 0x883
 800d7ca:	493e      	ldr	r1, [pc, #248]	; (800d8c4 <tcp_pcb_remove+0x110>)
 800d7cc:	483e      	ldr	r0, [pc, #248]	; (800d8c8 <tcp_pcb_remove+0x114>)
 800d7ce:	f009 fe0f 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <tcp_pcb_remove+0x32>
 800d7d8:	4b39      	ldr	r3, [pc, #228]	; (800d8c0 <tcp_pcb_remove+0x10c>)
 800d7da:	f640 0284 	movw	r2, #2180	; 0x884
 800d7de:	493b      	ldr	r1, [pc, #236]	; (800d8cc <tcp_pcb_remove+0x118>)
 800d7e0:	4839      	ldr	r0, [pc, #228]	; (800d8c8 <tcp_pcb_remove+0x114>)
 800d7e2:	f009 fe05 	bl	80173f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d105      	bne.n	800d7fc <tcp_pcb_remove+0x48>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	e013      	b.n	800d824 <tcp_pcb_remove+0x70>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	e00c      	b.n	800d81e <tcp_pcb_remove+0x6a>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d104      	bne.n	800d818 <tcp_pcb_remove+0x64>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	68da      	ldr	r2, [r3, #12]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	60da      	str	r2, [r3, #12]
 800d816:	e005      	b.n	800d824 <tcp_pcb_remove+0x70>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1ef      	bne.n	800d804 <tcp_pcb_remove+0x50>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d82a:	6838      	ldr	r0, [r7, #0]
 800d82c:	f7ff ff72 	bl	800d714 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	7d1b      	ldrb	r3, [r3, #20]
 800d834:	2b0a      	cmp	r3, #10
 800d836:	d013      	beq.n	800d860 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d00f      	beq.n	800d860 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	8b5b      	ldrh	r3, [r3, #26]
 800d844:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d009      	beq.n	800d860 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	8b5b      	ldrh	r3, [r3, #26]
 800d850:	f043 0302 	orr.w	r3, r3, #2
 800d854:	b29a      	uxth	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d85a:	6838      	ldr	r0, [r7, #0]
 800d85c:	f003 fbc6 	bl	8010fec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	7d1b      	ldrb	r3, [r3, #20]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d020      	beq.n	800d8aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d006      	beq.n	800d87e <tcp_pcb_remove+0xca>
 800d870:	4b13      	ldr	r3, [pc, #76]	; (800d8c0 <tcp_pcb_remove+0x10c>)
 800d872:	f640 0293 	movw	r2, #2195	; 0x893
 800d876:	4916      	ldr	r1, [pc, #88]	; (800d8d0 <tcp_pcb_remove+0x11c>)
 800d878:	4813      	ldr	r0, [pc, #76]	; (800d8c8 <tcp_pcb_remove+0x114>)
 800d87a:	f009 fdb9 	bl	80173f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d882:	2b00      	cmp	r3, #0
 800d884:	d006      	beq.n	800d894 <tcp_pcb_remove+0xe0>
 800d886:	4b0e      	ldr	r3, [pc, #56]	; (800d8c0 <tcp_pcb_remove+0x10c>)
 800d888:	f640 0294 	movw	r2, #2196	; 0x894
 800d88c:	4911      	ldr	r1, [pc, #68]	; (800d8d4 <tcp_pcb_remove+0x120>)
 800d88e:	480e      	ldr	r0, [pc, #56]	; (800d8c8 <tcp_pcb_remove+0x114>)
 800d890:	f009 fdae 	bl	80173f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d006      	beq.n	800d8aa <tcp_pcb_remove+0xf6>
 800d89c:	4b08      	ldr	r3, [pc, #32]	; (800d8c0 <tcp_pcb_remove+0x10c>)
 800d89e:	f640 0296 	movw	r2, #2198	; 0x896
 800d8a2:	490d      	ldr	r1, [pc, #52]	; (800d8d8 <tcp_pcb_remove+0x124>)
 800d8a4:	4808      	ldr	r0, [pc, #32]	; (800d8c8 <tcp_pcb_remove+0x114>)
 800d8a6:	f009 fda3 	bl	80173f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d8b6:	bf00      	nop
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0801996c 	.word	0x0801996c
 800d8c4:	08019fd4 	.word	0x08019fd4
 800d8c8:	080199b0 	.word	0x080199b0
 800d8cc:	08019ff0 	.word	0x08019ff0
 800d8d0:	0801a010 	.word	0x0801a010
 800d8d4:	0801a028 	.word	0x0801a028
 800d8d8:	0801a044 	.word	0x0801a044

0800d8dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d106      	bne.n	800d8f8 <tcp_next_iss+0x1c>
 800d8ea:	4b0a      	ldr	r3, [pc, #40]	; (800d914 <tcp_next_iss+0x38>)
 800d8ec:	f640 02af 	movw	r2, #2223	; 0x8af
 800d8f0:	4909      	ldr	r1, [pc, #36]	; (800d918 <tcp_next_iss+0x3c>)
 800d8f2:	480a      	ldr	r0, [pc, #40]	; (800d91c <tcp_next_iss+0x40>)
 800d8f4:	f009 fd7c 	bl	80173f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d8f8:	4b09      	ldr	r3, [pc, #36]	; (800d920 <tcp_next_iss+0x44>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	4b09      	ldr	r3, [pc, #36]	; (800d924 <tcp_next_iss+0x48>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4413      	add	r3, r2
 800d902:	4a07      	ldr	r2, [pc, #28]	; (800d920 <tcp_next_iss+0x44>)
 800d904:	6013      	str	r3, [r2, #0]
  return iss;
 800d906:	4b06      	ldr	r3, [pc, #24]	; (800d920 <tcp_next_iss+0x44>)
 800d908:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801996c 	.word	0x0801996c
 800d918:	0801a05c 	.word	0x0801a05c
 800d91c:	080199b0 	.word	0x080199b0
 800d920:	20000028 	.word	0x20000028
 800d924:	2001091c 	.word	0x2001091c

0800d928 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	4603      	mov	r3, r0
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
 800d934:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d106      	bne.n	800d94a <tcp_eff_send_mss_netif+0x22>
 800d93c:	4b14      	ldr	r3, [pc, #80]	; (800d990 <tcp_eff_send_mss_netif+0x68>)
 800d93e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d942:	4914      	ldr	r1, [pc, #80]	; (800d994 <tcp_eff_send_mss_netif+0x6c>)
 800d944:	4814      	ldr	r0, [pc, #80]	; (800d998 <tcp_eff_send_mss_netif+0x70>)
 800d946:	f009 fd53 	bl	80173f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d950:	89fb      	ldrh	r3, [r7, #14]
 800d952:	e019      	b.n	800d988 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d958:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d95a:	8afb      	ldrh	r3, [r7, #22]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d012      	beq.n	800d986 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d960:	2328      	movs	r3, #40	; 0x28
 800d962:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d964:	8afa      	ldrh	r2, [r7, #22]
 800d966:	8abb      	ldrh	r3, [r7, #20]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d904      	bls.n	800d976 <tcp_eff_send_mss_netif+0x4e>
 800d96c:	8afa      	ldrh	r2, [r7, #22]
 800d96e:	8abb      	ldrh	r3, [r7, #20]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	b29b      	uxth	r3, r3
 800d974:	e000      	b.n	800d978 <tcp_eff_send_mss_netif+0x50>
 800d976:	2300      	movs	r3, #0
 800d978:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d97a:	8a7a      	ldrh	r2, [r7, #18]
 800d97c:	89fb      	ldrh	r3, [r7, #14]
 800d97e:	4293      	cmp	r3, r2
 800d980:	bf28      	it	cs
 800d982:	4613      	movcs	r3, r2
 800d984:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d986:	89fb      	ldrh	r3, [r7, #14]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	0801996c 	.word	0x0801996c
 800d994:	0801a078 	.word	0x0801a078
 800d998:	080199b0 	.word	0x080199b0

0800d99c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d119      	bne.n	800d9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d9b0:	4b10      	ldr	r3, [pc, #64]	; (800d9f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d9b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d9b6:	4910      	ldr	r1, [pc, #64]	; (800d9f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d9b8:	4810      	ldr	r0, [pc, #64]	; (800d9fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d9ba:	f009 fd19 	bl	80173f0 <iprintf>

  while (pcb != NULL) {
 800d9be:	e011      	b.n	800d9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d108      	bne.n	800d9de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f7fe fd50 	bl	800c478 <tcp_abort>
      pcb = next;
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	e002      	b.n	800d9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1ea      	bne.n	800d9c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d9ea:	bf00      	nop
 800d9ec:	bf00      	nop
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	0801996c 	.word	0x0801996c
 800d9f8:	0801a0a0 	.word	0x0801a0a0
 800d9fc:	080199b0 	.word	0x080199b0

0800da00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d02a      	beq.n	800da66 <tcp_netif_ip_addr_changed+0x66>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d026      	beq.n	800da66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800da18:	4b15      	ldr	r3, [pc, #84]	; (800da70 <tcp_netif_ip_addr_changed+0x70>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7ff ffbc 	bl	800d99c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800da24:	4b13      	ldr	r3, [pc, #76]	; (800da74 <tcp_netif_ip_addr_changed+0x74>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff ffb6 	bl	800d99c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d017      	beq.n	800da66 <tcp_netif_ip_addr_changed+0x66>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d013      	beq.n	800da66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da3e:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <tcp_netif_ip_addr_changed+0x78>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e00c      	b.n	800da60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d103      	bne.n	800da5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1ef      	bne.n	800da46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800da66:	bf00      	nop
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20010928 	.word	0x20010928
 800da74:	20010920 	.word	0x20010920
 800da78:	20010924 	.word	0x20010924

0800da7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fb6f 	bl	800d174 <tcp_segs_free>
    pcb->ooseq = NULL;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800da9c:	bf00      	nop
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b08d      	sub	sp, #52	; 0x34
 800daa8:	af04      	add	r7, sp, #16
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d105      	bne.n	800dac0 <tcp_input+0x1c>
 800dab4:	4b9b      	ldr	r3, [pc, #620]	; (800dd24 <tcp_input+0x280>)
 800dab6:	2283      	movs	r2, #131	; 0x83
 800dab8:	499b      	ldr	r1, [pc, #620]	; (800dd28 <tcp_input+0x284>)
 800daba:	489c      	ldr	r0, [pc, #624]	; (800dd2c <tcp_input+0x288>)
 800dabc:	f009 fc98 	bl	80173f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4a9a      	ldr	r2, [pc, #616]	; (800dd30 <tcp_input+0x28c>)
 800dac6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	895b      	ldrh	r3, [r3, #10]
 800dacc:	2b13      	cmp	r3, #19
 800dace:	f240 83d1 	bls.w	800e274 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dad2:	4b98      	ldr	r3, [pc, #608]	; (800dd34 <tcp_input+0x290>)
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	4a97      	ldr	r2, [pc, #604]	; (800dd34 <tcp_input+0x290>)
 800dad8:	6812      	ldr	r2, [r2, #0]
 800dada:	4611      	mov	r1, r2
 800dadc:	4618      	mov	r0, r3
 800dade:	f008 fa61 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f040 83c7 	bne.w	800e278 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800daea:	4b92      	ldr	r3, [pc, #584]	; (800dd34 <tcp_input+0x290>)
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800daf2:	2be0      	cmp	r3, #224	; 0xe0
 800daf4:	f000 83c0 	beq.w	800e278 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800daf8:	4b8d      	ldr	r3, [pc, #564]	; (800dd30 <tcp_input+0x28c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	899b      	ldrh	r3, [r3, #12]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	4618      	mov	r0, r3
 800db02:	f7fc fabb 	bl	800a07c <lwip_htons>
 800db06:	4603      	mov	r3, r0
 800db08:	0b1b      	lsrs	r3, r3, #12
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800db12:	7cbb      	ldrb	r3, [r7, #18]
 800db14:	2b13      	cmp	r3, #19
 800db16:	f240 83b1 	bls.w	800e27c <tcp_input+0x7d8>
 800db1a:	7cbb      	ldrb	r3, [r7, #18]
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	891b      	ldrh	r3, [r3, #8]
 800db22:	429a      	cmp	r2, r3
 800db24:	f200 83aa 	bhi.w	800e27c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800db28:	7cbb      	ldrb	r3, [r7, #18]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	3b14      	subs	r3, #20
 800db2e:	b29a      	uxth	r2, r3
 800db30:	4b81      	ldr	r3, [pc, #516]	; (800dd38 <tcp_input+0x294>)
 800db32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800db34:	4b81      	ldr	r3, [pc, #516]	; (800dd3c <tcp_input+0x298>)
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	895a      	ldrh	r2, [r3, #10]
 800db3e:	7cbb      	ldrb	r3, [r7, #18]
 800db40:	b29b      	uxth	r3, r3
 800db42:	429a      	cmp	r2, r3
 800db44:	d309      	bcc.n	800db5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800db46:	4b7c      	ldr	r3, [pc, #496]	; (800dd38 <tcp_input+0x294>)
 800db48:	881a      	ldrh	r2, [r3, #0]
 800db4a:	4b7d      	ldr	r3, [pc, #500]	; (800dd40 <tcp_input+0x29c>)
 800db4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800db4e:	7cbb      	ldrb	r3, [r7, #18]
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7fd fe0a 	bl	800b76c <pbuf_remove_header>
 800db58:	e04e      	b.n	800dbf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d105      	bne.n	800db6e <tcp_input+0xca>
 800db62:	4b70      	ldr	r3, [pc, #448]	; (800dd24 <tcp_input+0x280>)
 800db64:	22c2      	movs	r2, #194	; 0xc2
 800db66:	4977      	ldr	r1, [pc, #476]	; (800dd44 <tcp_input+0x2a0>)
 800db68:	4870      	ldr	r0, [pc, #448]	; (800dd2c <tcp_input+0x288>)
 800db6a:	f009 fc41 	bl	80173f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800db6e:	2114      	movs	r1, #20
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7fd fdfb 	bl	800b76c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	895a      	ldrh	r2, [r3, #10]
 800db7a:	4b71      	ldr	r3, [pc, #452]	; (800dd40 <tcp_input+0x29c>)
 800db7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800db7e:	4b6e      	ldr	r3, [pc, #440]	; (800dd38 <tcp_input+0x294>)
 800db80:	881a      	ldrh	r2, [r3, #0]
 800db82:	4b6f      	ldr	r3, [pc, #444]	; (800dd40 <tcp_input+0x29c>)
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	1ad3      	subs	r3, r2, r3
 800db88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800db8a:	4b6d      	ldr	r3, [pc, #436]	; (800dd40 <tcp_input+0x29c>)
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7fd fdeb 	bl	800b76c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	895b      	ldrh	r3, [r3, #10]
 800db9c:	8a3a      	ldrh	r2, [r7, #16]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	f200 836e 	bhi.w	800e280 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4a64      	ldr	r2, [pc, #400]	; (800dd3c <tcp_input+0x298>)
 800dbac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	8a3a      	ldrh	r2, [r7, #16]
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fd fdd8 	bl	800b76c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	891a      	ldrh	r2, [r3, #8]
 800dbc0:	8a3b      	ldrh	r3, [r7, #16]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	895b      	ldrh	r3, [r3, #10]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <tcp_input+0x13a>
 800dbd2:	4b54      	ldr	r3, [pc, #336]	; (800dd24 <tcp_input+0x280>)
 800dbd4:	22df      	movs	r2, #223	; 0xdf
 800dbd6:	495c      	ldr	r1, [pc, #368]	; (800dd48 <tcp_input+0x2a4>)
 800dbd8:	4854      	ldr	r0, [pc, #336]	; (800dd2c <tcp_input+0x288>)
 800dbda:	f009 fc09 	bl	80173f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	891b      	ldrh	r3, [r3, #8]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d005      	beq.n	800dbf8 <tcp_input+0x154>
 800dbec:	4b4d      	ldr	r3, [pc, #308]	; (800dd24 <tcp_input+0x280>)
 800dbee:	22e0      	movs	r2, #224	; 0xe0
 800dbf0:	4956      	ldr	r1, [pc, #344]	; (800dd4c <tcp_input+0x2a8>)
 800dbf2:	484e      	ldr	r0, [pc, #312]	; (800dd2c <tcp_input+0x288>)
 800dbf4:	f009 fbfc 	bl	80173f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dbf8:	4b4d      	ldr	r3, [pc, #308]	; (800dd30 <tcp_input+0x28c>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	881b      	ldrh	r3, [r3, #0]
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	4a4b      	ldr	r2, [pc, #300]	; (800dd30 <tcp_input+0x28c>)
 800dc02:	6814      	ldr	r4, [r2, #0]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fc fa39 	bl	800a07c <lwip_htons>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dc0e:	4b48      	ldr	r3, [pc, #288]	; (800dd30 <tcp_input+0x28c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	885b      	ldrh	r3, [r3, #2]
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	4a46      	ldr	r2, [pc, #280]	; (800dd30 <tcp_input+0x28c>)
 800dc18:	6814      	ldr	r4, [r2, #0]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fc fa2e 	bl	800a07c <lwip_htons>
 800dc20:	4603      	mov	r3, r0
 800dc22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dc24:	4b42      	ldr	r3, [pc, #264]	; (800dd30 <tcp_input+0x28c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	4a41      	ldr	r2, [pc, #260]	; (800dd30 <tcp_input+0x28c>)
 800dc2c:	6814      	ldr	r4, [r2, #0]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fc fa39 	bl	800a0a6 <lwip_htonl>
 800dc34:	4603      	mov	r3, r0
 800dc36:	6063      	str	r3, [r4, #4]
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	4a45      	ldr	r2, [pc, #276]	; (800dd50 <tcp_input+0x2ac>)
 800dc3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dc3e:	4b3c      	ldr	r3, [pc, #240]	; (800dd30 <tcp_input+0x28c>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	4a3a      	ldr	r2, [pc, #232]	; (800dd30 <tcp_input+0x28c>)
 800dc46:	6814      	ldr	r4, [r2, #0]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fc fa2c 	bl	800a0a6 <lwip_htonl>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	60a3      	str	r3, [r4, #8]
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	4a3f      	ldr	r2, [pc, #252]	; (800dd54 <tcp_input+0x2b0>)
 800dc56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dc58:	4b35      	ldr	r3, [pc, #212]	; (800dd30 <tcp_input+0x28c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	89db      	ldrh	r3, [r3, #14]
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	4a33      	ldr	r2, [pc, #204]	; (800dd30 <tcp_input+0x28c>)
 800dc62:	6814      	ldr	r4, [r2, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fc fa09 	bl	800a07c <lwip_htons>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dc6e:	4b30      	ldr	r3, [pc, #192]	; (800dd30 <tcp_input+0x28c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	899b      	ldrh	r3, [r3, #12]
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fc fa00 	bl	800a07c <lwip_htons>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	4b34      	ldr	r3, [pc, #208]	; (800dd58 <tcp_input+0x2b4>)
 800dc88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	891a      	ldrh	r2, [r3, #8]
 800dc8e:	4b33      	ldr	r3, [pc, #204]	; (800dd5c <tcp_input+0x2b8>)
 800dc90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dc92:	4b31      	ldr	r3, [pc, #196]	; (800dd58 <tcp_input+0x2b4>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	f003 0303 	and.w	r3, r3, #3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00c      	beq.n	800dcb8 <tcp_input+0x214>
    tcplen++;
 800dc9e:	4b2f      	ldr	r3, [pc, #188]	; (800dd5c <tcp_input+0x2b8>)
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	4b2d      	ldr	r3, [pc, #180]	; (800dd5c <tcp_input+0x2b8>)
 800dca8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	891a      	ldrh	r2, [r3, #8]
 800dcae:	4b2b      	ldr	r3, [pc, #172]	; (800dd5c <tcp_input+0x2b8>)
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	f200 82e6 	bhi.w	800e284 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcbc:	4b28      	ldr	r3, [pc, #160]	; (800dd60 <tcp_input+0x2bc>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	61fb      	str	r3, [r7, #28]
 800dcc2:	e09d      	b.n	800de00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d105      	bne.n	800dcd8 <tcp_input+0x234>
 800dccc:	4b15      	ldr	r3, [pc, #84]	; (800dd24 <tcp_input+0x280>)
 800dcce:	22fb      	movs	r2, #251	; 0xfb
 800dcd0:	4924      	ldr	r1, [pc, #144]	; (800dd64 <tcp_input+0x2c0>)
 800dcd2:	4816      	ldr	r0, [pc, #88]	; (800dd2c <tcp_input+0x288>)
 800dcd4:	f009 fb8c 	bl	80173f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	7d1b      	ldrb	r3, [r3, #20]
 800dcdc:	2b0a      	cmp	r3, #10
 800dcde:	d105      	bne.n	800dcec <tcp_input+0x248>
 800dce0:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <tcp_input+0x280>)
 800dce2:	22fc      	movs	r2, #252	; 0xfc
 800dce4:	4920      	ldr	r1, [pc, #128]	; (800dd68 <tcp_input+0x2c4>)
 800dce6:	4811      	ldr	r0, [pc, #68]	; (800dd2c <tcp_input+0x288>)
 800dce8:	f009 fb82 	bl	80173f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	7d1b      	ldrb	r3, [r3, #20]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d105      	bne.n	800dd00 <tcp_input+0x25c>
 800dcf4:	4b0b      	ldr	r3, [pc, #44]	; (800dd24 <tcp_input+0x280>)
 800dcf6:	22fd      	movs	r2, #253	; 0xfd
 800dcf8:	491c      	ldr	r1, [pc, #112]	; (800dd6c <tcp_input+0x2c8>)
 800dcfa:	480c      	ldr	r0, [pc, #48]	; (800dd2c <tcp_input+0x288>)
 800dcfc:	f009 fb78 	bl	80173f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	7a1b      	ldrb	r3, [r3, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d033      	beq.n	800dd70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	7a1a      	ldrb	r2, [r3, #8]
 800dd0c:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <tcp_input+0x290>)
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd14:	3301      	adds	r3, #1
 800dd16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d029      	beq.n	800dd70 <tcp_input+0x2cc>
      prev = pcb;
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	61bb      	str	r3, [r7, #24]
      continue;
 800dd20:	e06b      	b.n	800ddfa <tcp_input+0x356>
 800dd22:	bf00      	nop
 800dd24:	0801a0d4 	.word	0x0801a0d4
 800dd28:	0801a108 	.word	0x0801a108
 800dd2c:	0801a120 	.word	0x0801a120
 800dd30:	20010944 	.word	0x20010944
 800dd34:	2000d1a8 	.word	0x2000d1a8
 800dd38:	20010948 	.word	0x20010948
 800dd3c:	2001094c 	.word	0x2001094c
 800dd40:	2001094a 	.word	0x2001094a
 800dd44:	0801a148 	.word	0x0801a148
 800dd48:	0801a158 	.word	0x0801a158
 800dd4c:	0801a164 	.word	0x0801a164
 800dd50:	20010954 	.word	0x20010954
 800dd54:	20010958 	.word	0x20010958
 800dd58:	20010960 	.word	0x20010960
 800dd5c:	2001095e 	.word	0x2001095e
 800dd60:	20010928 	.word	0x20010928
 800dd64:	0801a184 	.word	0x0801a184
 800dd68:	0801a1ac 	.word	0x0801a1ac
 800dd6c:	0801a1d8 	.word	0x0801a1d8
    }

    if (pcb->remote_port == tcphdr->src &&
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	8b1a      	ldrh	r2, [r3, #24]
 800dd74:	4b72      	ldr	r3, [pc, #456]	; (800df40 <tcp_input+0x49c>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d13a      	bne.n	800ddf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	8ada      	ldrh	r2, [r3, #22]
 800dd84:	4b6e      	ldr	r3, [pc, #440]	; (800df40 <tcp_input+0x49c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	885b      	ldrh	r3, [r3, #2]
 800dd8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d132      	bne.n	800ddf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	4b6b      	ldr	r3, [pc, #428]	; (800df44 <tcp_input+0x4a0>)
 800dd96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d12c      	bne.n	800ddf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	4b68      	ldr	r3, [pc, #416]	; (800df44 <tcp_input+0x4a0>)
 800dda2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d126      	bne.n	800ddf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	69fa      	ldr	r2, [r7, #28]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d106      	bne.n	800ddc0 <tcp_input+0x31c>
 800ddb2:	4b65      	ldr	r3, [pc, #404]	; (800df48 <tcp_input+0x4a4>)
 800ddb4:	f240 120d 	movw	r2, #269	; 0x10d
 800ddb8:	4964      	ldr	r1, [pc, #400]	; (800df4c <tcp_input+0x4a8>)
 800ddba:	4865      	ldr	r0, [pc, #404]	; (800df50 <tcp_input+0x4ac>)
 800ddbc:	f009 fb18 	bl	80173f0 <iprintf>
      if (prev != NULL) {
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00a      	beq.n	800dddc <tcp_input+0x338>
        prev->next = pcb->next;
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ddce:	4b61      	ldr	r3, [pc, #388]	; (800df54 <tcp_input+0x4b0>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ddd6:	4a5f      	ldr	r2, [pc, #380]	; (800df54 <tcp_input+0x4b0>)
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	69fa      	ldr	r2, [r7, #28]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d111      	bne.n	800de0a <tcp_input+0x366>
 800dde6:	4b58      	ldr	r3, [pc, #352]	; (800df48 <tcp_input+0x4a4>)
 800dde8:	f240 1215 	movw	r2, #277	; 0x115
 800ddec:	495a      	ldr	r1, [pc, #360]	; (800df58 <tcp_input+0x4b4>)
 800ddee:	4858      	ldr	r0, [pc, #352]	; (800df50 <tcp_input+0x4ac>)
 800ddf0:	f009 fafe 	bl	80173f0 <iprintf>
      break;
 800ddf4:	e009      	b.n	800de0a <tcp_input+0x366>
    }
    prev = pcb;
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f47f af5e 	bne.w	800dcc4 <tcp_input+0x220>
 800de08:	e000      	b.n	800de0c <tcp_input+0x368>
      break;
 800de0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f040 80aa 	bne.w	800df68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de14:	4b51      	ldr	r3, [pc, #324]	; (800df5c <tcp_input+0x4b8>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	e03f      	b.n	800de9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	7d1b      	ldrb	r3, [r3, #20]
 800de20:	2b0a      	cmp	r3, #10
 800de22:	d006      	beq.n	800de32 <tcp_input+0x38e>
 800de24:	4b48      	ldr	r3, [pc, #288]	; (800df48 <tcp_input+0x4a4>)
 800de26:	f240 121f 	movw	r2, #287	; 0x11f
 800de2a:	494d      	ldr	r1, [pc, #308]	; (800df60 <tcp_input+0x4bc>)
 800de2c:	4848      	ldr	r0, [pc, #288]	; (800df50 <tcp_input+0x4ac>)
 800de2e:	f009 fadf 	bl	80173f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	7a1b      	ldrb	r3, [r3, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d009      	beq.n	800de4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	7a1a      	ldrb	r2, [r3, #8]
 800de3e:	4b41      	ldr	r3, [pc, #260]	; (800df44 <tcp_input+0x4a0>)
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800de46:	3301      	adds	r3, #1
 800de48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d122      	bne.n	800de94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	8b1a      	ldrh	r2, [r3, #24]
 800de52:	4b3b      	ldr	r3, [pc, #236]	; (800df40 <tcp_input+0x49c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	881b      	ldrh	r3, [r3, #0]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d11b      	bne.n	800de96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	8ada      	ldrh	r2, [r3, #22]
 800de62:	4b37      	ldr	r3, [pc, #220]	; (800df40 <tcp_input+0x49c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	885b      	ldrh	r3, [r3, #2]
 800de68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d113      	bne.n	800de96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	4b34      	ldr	r3, [pc, #208]	; (800df44 <tcp_input+0x4a0>)
 800de74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800de76:	429a      	cmp	r2, r3
 800de78:	d10d      	bne.n	800de96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b31      	ldr	r3, [pc, #196]	; (800df44 <tcp_input+0x4a0>)
 800de80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de82:	429a      	cmp	r2, r3
 800de84:	d107      	bne.n	800de96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800de86:	69f8      	ldr	r0, [r7, #28]
 800de88:	f000 fb56 	bl	800e538 <tcp_timewait_input>
        }
        pbuf_free(p);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7fd fcf3 	bl	800b878 <pbuf_free>
        return;
 800de92:	e1fd      	b.n	800e290 <tcp_input+0x7ec>
        continue;
 800de94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1bc      	bne.n	800de1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dea6:	4b2f      	ldr	r3, [pc, #188]	; (800df64 <tcp_input+0x4c0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	e02a      	b.n	800df04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	7a1b      	ldrb	r3, [r3, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00c      	beq.n	800ded0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	7a1a      	ldrb	r2, [r3, #8]
 800deba:	4b22      	ldr	r3, [pc, #136]	; (800df44 <tcp_input+0x4a0>)
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dec2:	3301      	adds	r3, #1
 800dec4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d002      	beq.n	800ded0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	61bb      	str	r3, [r7, #24]
        continue;
 800dece:	e016      	b.n	800defe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	8ada      	ldrh	r2, [r3, #22]
 800ded4:	4b1a      	ldr	r3, [pc, #104]	; (800df40 <tcp_input+0x49c>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	885b      	ldrh	r3, [r3, #2]
 800deda:	b29b      	uxth	r3, r3
 800dedc:	429a      	cmp	r2, r3
 800dede:	d10c      	bne.n	800defa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	4b17      	ldr	r3, [pc, #92]	; (800df44 <tcp_input+0x4a0>)
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d00f      	beq.n	800df0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00d      	beq.n	800df0e <tcp_input+0x46a>
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d009      	beq.n	800df0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	617b      	str	r3, [r7, #20]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1d1      	bne.n	800deae <tcp_input+0x40a>
 800df0a:	e000      	b.n	800df0e <tcp_input+0x46a>
            break;
 800df0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d029      	beq.n	800df68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	68da      	ldr	r2, [r3, #12]
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800df22:	4b10      	ldr	r3, [pc, #64]	; (800df64 <tcp_input+0x4c0>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800df2a:	4a0e      	ldr	r2, [pc, #56]	; (800df64 <tcp_input+0x4c0>)
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800df30:	6978      	ldr	r0, [r7, #20]
 800df32:	f000 fa03 	bl	800e33c <tcp_listen_input>
      }
      pbuf_free(p);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7fd fc9e 	bl	800b878 <pbuf_free>
      return;
 800df3c:	e1a8      	b.n	800e290 <tcp_input+0x7ec>
 800df3e:	bf00      	nop
 800df40:	20010944 	.word	0x20010944
 800df44:	2000d1a8 	.word	0x2000d1a8
 800df48:	0801a0d4 	.word	0x0801a0d4
 800df4c:	0801a200 	.word	0x0801a200
 800df50:	0801a120 	.word	0x0801a120
 800df54:	20010928 	.word	0x20010928
 800df58:	0801a22c 	.word	0x0801a22c
 800df5c:	2001092c 	.word	0x2001092c
 800df60:	0801a258 	.word	0x0801a258
 800df64:	20010924 	.word	0x20010924
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 8158 	beq.w	800e220 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800df70:	4b95      	ldr	r3, [pc, #596]	; (800e1c8 <tcp_input+0x724>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	891a      	ldrh	r2, [r3, #8]
 800df7a:	4b93      	ldr	r3, [pc, #588]	; (800e1c8 <tcp_input+0x724>)
 800df7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800df7e:	4a92      	ldr	r2, [pc, #584]	; (800e1c8 <tcp_input+0x724>)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800df84:	4b91      	ldr	r3, [pc, #580]	; (800e1cc <tcp_input+0x728>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a8f      	ldr	r2, [pc, #572]	; (800e1c8 <tcp_input+0x724>)
 800df8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800df8c:	4b90      	ldr	r3, [pc, #576]	; (800e1d0 <tcp_input+0x72c>)
 800df8e:	2200      	movs	r2, #0
 800df90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800df92:	4b90      	ldr	r3, [pc, #576]	; (800e1d4 <tcp_input+0x730>)
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800df98:	4b8f      	ldr	r3, [pc, #572]	; (800e1d8 <tcp_input+0x734>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800df9e:	4b8f      	ldr	r3, [pc, #572]	; (800e1dc <tcp_input+0x738>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 0308 	and.w	r3, r3, #8
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d006      	beq.n	800dfb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7b5b      	ldrb	r3, [r3, #13]
 800dfae:	f043 0301 	orr.w	r3, r3, #1
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d017      	beq.n	800dff0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dfc0:	69f8      	ldr	r0, [r7, #28]
 800dfc2:	f7ff f85b 	bl	800d07c <tcp_process_refused_data>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	f113 0f0d 	cmn.w	r3, #13
 800dfcc:	d007      	beq.n	800dfde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00c      	beq.n	800dff0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dfd6:	4b82      	ldr	r3, [pc, #520]	; (800e1e0 <tcp_input+0x73c>)
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d008      	beq.n	800dff0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 80e3 	bne.w	800e1ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dfe8:	69f8      	ldr	r0, [r7, #28]
 800dfea:	f003 fe05 	bl	8011bf8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dfee:	e0de      	b.n	800e1ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dff0:	4a7c      	ldr	r2, [pc, #496]	; (800e1e4 <tcp_input+0x740>)
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dff6:	69f8      	ldr	r0, [r7, #28]
 800dff8:	f000 fb18 	bl	800e62c <tcp_process>
 800dffc:	4603      	mov	r3, r0
 800dffe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e004:	f113 0f0d 	cmn.w	r3, #13
 800e008:	f000 80d3 	beq.w	800e1b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e00c:	4b71      	ldr	r3, [pc, #452]	; (800e1d4 <tcp_input+0x730>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	f003 0308 	and.w	r3, r3, #8
 800e014:	2b00      	cmp	r3, #0
 800e016:	d015      	beq.n	800e044 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d008      	beq.n	800e034 <tcp_input+0x590>
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e028:	69fa      	ldr	r2, [r7, #28]
 800e02a:	6912      	ldr	r2, [r2, #16]
 800e02c:	f06f 010d 	mvn.w	r1, #13
 800e030:	4610      	mov	r0, r2
 800e032:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e034:	69f9      	ldr	r1, [r7, #28]
 800e036:	486c      	ldr	r0, [pc, #432]	; (800e1e8 <tcp_input+0x744>)
 800e038:	f7ff fbbc 	bl	800d7b4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e03c:	69f8      	ldr	r0, [r7, #28]
 800e03e:	f7fd fed7 	bl	800bdf0 <tcp_free>
 800e042:	e0da      	b.n	800e1fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e044:	2300      	movs	r3, #0
 800e046:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e048:	4b63      	ldr	r3, [pc, #396]	; (800e1d8 <tcp_input+0x734>)
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d01d      	beq.n	800e08c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e050:	4b61      	ldr	r3, [pc, #388]	; (800e1d8 <tcp_input+0x734>)
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00a      	beq.n	800e076 <tcp_input+0x5d2>
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	6910      	ldr	r0, [r2, #16]
 800e06a:	89fa      	ldrh	r2, [r7, #14]
 800e06c:	69f9      	ldr	r1, [r7, #28]
 800e06e:	4798      	blx	r3
 800e070:	4603      	mov	r3, r0
 800e072:	74fb      	strb	r3, [r7, #19]
 800e074:	e001      	b.n	800e07a <tcp_input+0x5d6>
 800e076:	2300      	movs	r3, #0
 800e078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e07e:	f113 0f0d 	cmn.w	r3, #13
 800e082:	f000 8098 	beq.w	800e1b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e086:	4b54      	ldr	r3, [pc, #336]	; (800e1d8 <tcp_input+0x734>)
 800e088:	2200      	movs	r2, #0
 800e08a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e08c:	69f8      	ldr	r0, [r7, #28]
 800e08e:	f000 f915 	bl	800e2bc <tcp_input_delayed_close>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	f040 8090 	bne.w	800e1ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e09a:	4b4d      	ldr	r3, [pc, #308]	; (800e1d0 <tcp_input+0x72c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d041      	beq.n	800e126 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d006      	beq.n	800e0b8 <tcp_input+0x614>
 800e0aa:	4b50      	ldr	r3, [pc, #320]	; (800e1ec <tcp_input+0x748>)
 800e0ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e0b0:	494f      	ldr	r1, [pc, #316]	; (800e1f0 <tcp_input+0x74c>)
 800e0b2:	4850      	ldr	r0, [pc, #320]	; (800e1f4 <tcp_input+0x750>)
 800e0b4:	f009 f99c 	bl	80173f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	8b5b      	ldrh	r3, [r3, #26]
 800e0bc:	f003 0310 	and.w	r3, r3, #16
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d008      	beq.n	800e0d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e0c4:	4b42      	ldr	r3, [pc, #264]	; (800e1d0 <tcp_input+0x72c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fd fbd5 	bl	800b878 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e0ce:	69f8      	ldr	r0, [r7, #28]
 800e0d0:	f7fe f9d2 	bl	800c478 <tcp_abort>
            goto aborted;
 800e0d4:	e091      	b.n	800e1fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00c      	beq.n	800e0fa <tcp_input+0x656>
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	6918      	ldr	r0, [r3, #16]
 800e0ea:	4b39      	ldr	r3, [pc, #228]	; (800e1d0 <tcp_input+0x72c>)
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	69f9      	ldr	r1, [r7, #28]
 800e0f2:	47a0      	blx	r4
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	74fb      	strb	r3, [r7, #19]
 800e0f8:	e008      	b.n	800e10c <tcp_input+0x668>
 800e0fa:	4b35      	ldr	r3, [pc, #212]	; (800e1d0 <tcp_input+0x72c>)
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	2300      	movs	r3, #0
 800e100:	69f9      	ldr	r1, [r7, #28]
 800e102:	2000      	movs	r0, #0
 800e104:	f7ff f890 	bl	800d228 <tcp_recv_null>
 800e108:	4603      	mov	r3, r0
 800e10a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e110:	f113 0f0d 	cmn.w	r3, #13
 800e114:	d053      	beq.n	800e1be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e11e:	4b2c      	ldr	r3, [pc, #176]	; (800e1d0 <tcp_input+0x72c>)
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e126:	4b2b      	ldr	r3, [pc, #172]	; (800e1d4 <tcp_input+0x730>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	f003 0320 	and.w	r3, r3, #32
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d030      	beq.n	800e194 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e136:	2b00      	cmp	r3, #0
 800e138:	d009      	beq.n	800e14e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e13e:	7b5a      	ldrb	r2, [r3, #13]
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e144:	f042 0220 	orr.w	r2, r2, #32
 800e148:	b2d2      	uxtb	r2, r2
 800e14a:	735a      	strb	r2, [r3, #13]
 800e14c:	e022      	b.n	800e194 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e152:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e156:	d005      	beq.n	800e164 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e15c:	3301      	adds	r3, #1
 800e15e:	b29a      	uxth	r2, r3
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00b      	beq.n	800e186 <tcp_input+0x6e2>
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	6918      	ldr	r0, [r3, #16]
 800e178:	2300      	movs	r3, #0
 800e17a:	2200      	movs	r2, #0
 800e17c:	69f9      	ldr	r1, [r7, #28]
 800e17e:	47a0      	blx	r4
 800e180:	4603      	mov	r3, r0
 800e182:	74fb      	strb	r3, [r7, #19]
 800e184:	e001      	b.n	800e18a <tcp_input+0x6e6>
 800e186:	2300      	movs	r3, #0
 800e188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e18a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e18e:	f113 0f0d 	cmn.w	r3, #13
 800e192:	d016      	beq.n	800e1c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e194:	4b13      	ldr	r3, [pc, #76]	; (800e1e4 <tcp_input+0x740>)
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e19a:	69f8      	ldr	r0, [r7, #28]
 800e19c:	f000 f88e 	bl	800e2bc <tcp_input_delayed_close>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d128      	bne.n	800e1f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e1a6:	69f8      	ldr	r0, [r7, #28]
 800e1a8:	f002 ff20 	bl	8010fec <tcp_output>
 800e1ac:	e025      	b.n	800e1fa <tcp_input+0x756>
        goto aborted;
 800e1ae:	bf00      	nop
 800e1b0:	e023      	b.n	800e1fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e1b2:	bf00      	nop
 800e1b4:	e021      	b.n	800e1fa <tcp_input+0x756>
              goto aborted;
 800e1b6:	bf00      	nop
 800e1b8:	e01f      	b.n	800e1fa <tcp_input+0x756>
          goto aborted;
 800e1ba:	bf00      	nop
 800e1bc:	e01d      	b.n	800e1fa <tcp_input+0x756>
            goto aborted;
 800e1be:	bf00      	nop
 800e1c0:	e01b      	b.n	800e1fa <tcp_input+0x756>
              goto aborted;
 800e1c2:	bf00      	nop
 800e1c4:	e019      	b.n	800e1fa <tcp_input+0x756>
 800e1c6:	bf00      	nop
 800e1c8:	20010934 	.word	0x20010934
 800e1cc:	20010944 	.word	0x20010944
 800e1d0:	20010964 	.word	0x20010964
 800e1d4:	20010961 	.word	0x20010961
 800e1d8:	2001095c 	.word	0x2001095c
 800e1dc:	20010960 	.word	0x20010960
 800e1e0:	2001095e 	.word	0x2001095e
 800e1e4:	20010968 	.word	0x20010968
 800e1e8:	20010928 	.word	0x20010928
 800e1ec:	0801a0d4 	.word	0x0801a0d4
 800e1f0:	0801a288 	.word	0x0801a288
 800e1f4:	0801a120 	.word	0x0801a120
          goto aborted;
 800e1f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800e1fa:	4b27      	ldr	r3, [pc, #156]	; (800e298 <tcp_input+0x7f4>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e200:	4b26      	ldr	r3, [pc, #152]	; (800e29c <tcp_input+0x7f8>)
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e206:	4b26      	ldr	r3, [pc, #152]	; (800e2a0 <tcp_input+0x7fc>)
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d03f      	beq.n	800e28e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e20e:	4b24      	ldr	r3, [pc, #144]	; (800e2a0 <tcp_input+0x7fc>)
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	4618      	mov	r0, r3
 800e214:	f7fd fb30 	bl	800b878 <pbuf_free>
      inseg.p = NULL;
 800e218:	4b21      	ldr	r3, [pc, #132]	; (800e2a0 <tcp_input+0x7fc>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e21e:	e036      	b.n	800e28e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e220:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <tcp_input+0x800>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	899b      	ldrh	r3, [r3, #12]
 800e226:	b29b      	uxth	r3, r3
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fb ff27 	bl	800a07c <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	b2db      	uxtb	r3, r3
 800e232:	f003 0304 	and.w	r3, r3, #4
 800e236:	2b00      	cmp	r3, #0
 800e238:	d118      	bne.n	800e26c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e23a:	4b1b      	ldr	r3, [pc, #108]	; (800e2a8 <tcp_input+0x804>)
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	4b1b      	ldr	r3, [pc, #108]	; (800e2ac <tcp_input+0x808>)
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	4b1a      	ldr	r3, [pc, #104]	; (800e2b0 <tcp_input+0x80c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e24a:	4b16      	ldr	r3, [pc, #88]	; (800e2a4 <tcp_input+0x800>)
 800e24c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e252:	4a14      	ldr	r2, [pc, #80]	; (800e2a4 <tcp_input+0x800>)
 800e254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e256:	8812      	ldrh	r2, [r2, #0]
 800e258:	b292      	uxth	r2, r2
 800e25a:	9202      	str	r2, [sp, #8]
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	4b15      	ldr	r3, [pc, #84]	; (800e2b4 <tcp_input+0x810>)
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4b15      	ldr	r3, [pc, #84]	; (800e2b8 <tcp_input+0x814>)
 800e264:	4602      	mov	r2, r0
 800e266:	2000      	movs	r0, #0
 800e268:	f003 fc74 	bl	8011b54 <tcp_rst>
    pbuf_free(p);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7fd fb03 	bl	800b878 <pbuf_free>
  return;
 800e272:	e00c      	b.n	800e28e <tcp_input+0x7ea>
    goto dropped;
 800e274:	bf00      	nop
 800e276:	e006      	b.n	800e286 <tcp_input+0x7e2>
    goto dropped;
 800e278:	bf00      	nop
 800e27a:	e004      	b.n	800e286 <tcp_input+0x7e2>
    goto dropped;
 800e27c:	bf00      	nop
 800e27e:	e002      	b.n	800e286 <tcp_input+0x7e2>
      goto dropped;
 800e280:	bf00      	nop
 800e282:	e000      	b.n	800e286 <tcp_input+0x7e2>
      goto dropped;
 800e284:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7fd faf6 	bl	800b878 <pbuf_free>
 800e28c:	e000      	b.n	800e290 <tcp_input+0x7ec>
  return;
 800e28e:	bf00      	nop
}
 800e290:	3724      	adds	r7, #36	; 0x24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd90      	pop	{r4, r7, pc}
 800e296:	bf00      	nop
 800e298:	20010968 	.word	0x20010968
 800e29c:	20010964 	.word	0x20010964
 800e2a0:	20010934 	.word	0x20010934
 800e2a4:	20010944 	.word	0x20010944
 800e2a8:	20010958 	.word	0x20010958
 800e2ac:	2001095e 	.word	0x2001095e
 800e2b0:	20010954 	.word	0x20010954
 800e2b4:	2000d1b8 	.word	0x2000d1b8
 800e2b8:	2000d1bc 	.word	0x2000d1bc

0800e2bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <tcp_input_delayed_close+0x1c>
 800e2ca:	4b17      	ldr	r3, [pc, #92]	; (800e328 <tcp_input_delayed_close+0x6c>)
 800e2cc:	f240 225a 	movw	r2, #602	; 0x25a
 800e2d0:	4916      	ldr	r1, [pc, #88]	; (800e32c <tcp_input_delayed_close+0x70>)
 800e2d2:	4817      	ldr	r0, [pc, #92]	; (800e330 <tcp_input_delayed_close+0x74>)
 800e2d4:	f009 f88c 	bl	80173f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e2d8:	4b16      	ldr	r3, [pc, #88]	; (800e334 <tcp_input_delayed_close+0x78>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f003 0310 	and.w	r3, r3, #16
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01c      	beq.n	800e31e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	8b5b      	ldrh	r3, [r3, #26]
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d10d      	bne.n	800e30c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d008      	beq.n	800e30c <tcp_input_delayed_close+0x50>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	6912      	ldr	r2, [r2, #16]
 800e304:	f06f 010e 	mvn.w	r1, #14
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	480a      	ldr	r0, [pc, #40]	; (800e338 <tcp_input_delayed_close+0x7c>)
 800e310:	f7ff fa50 	bl	800d7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7fd fd6b 	bl	800bdf0 <tcp_free>
    return 1;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e000      	b.n	800e320 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	0801a0d4 	.word	0x0801a0d4
 800e32c:	0801a2a4 	.word	0x0801a2a4
 800e330:	0801a120 	.word	0x0801a120
 800e334:	20010961 	.word	0x20010961
 800e338:	20010928 	.word	0x20010928

0800e33c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b08b      	sub	sp, #44	; 0x2c
 800e340:	af04      	add	r7, sp, #16
 800e342:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e344:	4b6f      	ldr	r3, [pc, #444]	; (800e504 <tcp_listen_input+0x1c8>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 0304 	and.w	r3, r3, #4
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f040 80d2 	bne.w	800e4f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <tcp_listen_input+0x2a>
 800e358:	4b6b      	ldr	r3, [pc, #428]	; (800e508 <tcp_listen_input+0x1cc>)
 800e35a:	f240 2281 	movw	r2, #641	; 0x281
 800e35e:	496b      	ldr	r1, [pc, #428]	; (800e50c <tcp_listen_input+0x1d0>)
 800e360:	486b      	ldr	r0, [pc, #428]	; (800e510 <tcp_listen_input+0x1d4>)
 800e362:	f009 f845 	bl	80173f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e366:	4b67      	ldr	r3, [pc, #412]	; (800e504 <tcp_listen_input+0x1c8>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	f003 0310 	and.w	r3, r3, #16
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d019      	beq.n	800e3a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e372:	4b68      	ldr	r3, [pc, #416]	; (800e514 <tcp_listen_input+0x1d8>)
 800e374:	6819      	ldr	r1, [r3, #0]
 800e376:	4b68      	ldr	r3, [pc, #416]	; (800e518 <tcp_listen_input+0x1dc>)
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	461a      	mov	r2, r3
 800e37c:	4b67      	ldr	r3, [pc, #412]	; (800e51c <tcp_listen_input+0x1e0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e382:	4b67      	ldr	r3, [pc, #412]	; (800e520 <tcp_listen_input+0x1e4>)
 800e384:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e386:	885b      	ldrh	r3, [r3, #2]
 800e388:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e38a:	4a65      	ldr	r2, [pc, #404]	; (800e520 <tcp_listen_input+0x1e4>)
 800e38c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e38e:	8812      	ldrh	r2, [r2, #0]
 800e390:	b292      	uxth	r2, r2
 800e392:	9202      	str	r2, [sp, #8]
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	4b63      	ldr	r3, [pc, #396]	; (800e524 <tcp_listen_input+0x1e8>)
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	4b63      	ldr	r3, [pc, #396]	; (800e528 <tcp_listen_input+0x1ec>)
 800e39c:	4602      	mov	r2, r0
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f003 fbd8 	bl	8011b54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e3a4:	e0a9      	b.n	800e4fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e3a6:	4b57      	ldr	r3, [pc, #348]	; (800e504 <tcp_listen_input+0x1c8>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 0302 	and.w	r3, r3, #2
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 80a3 	beq.w	800e4fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7d5b      	ldrb	r3, [r3, #21]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff f859 	bl	800d470 <tcp_alloc>
 800e3be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d111      	bne.n	800e3ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00a      	beq.n	800e3e4 <tcp_listen_input+0xa8>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	6910      	ldr	r0, [r2, #16]
 800e3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3da:	2100      	movs	r1, #0
 800e3dc:	4798      	blx	r3
 800e3de:	4603      	mov	r3, r0
 800e3e0:	73bb      	strb	r3, [r7, #14]
      return;
 800e3e2:	e08b      	b.n	800e4fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e3e4:	23f0      	movs	r3, #240	; 0xf0
 800e3e6:	73bb      	strb	r3, [r7, #14]
      return;
 800e3e8:	e088      	b.n	800e4fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e3ea:	4b50      	ldr	r3, [pc, #320]	; (800e52c <tcp_listen_input+0x1f0>)
 800e3ec:	695a      	ldr	r2, [r3, #20]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e3f2:	4b4e      	ldr	r3, [pc, #312]	; (800e52c <tcp_listen_input+0x1f0>)
 800e3f4:	691a      	ldr	r2, [r3, #16]
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8ada      	ldrh	r2, [r3, #22]
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e402:	4b47      	ldr	r3, [pc, #284]	; (800e520 <tcp_listen_input+0x1e4>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	b29a      	uxth	r2, r3
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2203      	movs	r2, #3
 800e412:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e414:	4b41      	ldr	r3, [pc, #260]	; (800e51c <tcp_listen_input+0x1e0>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	f7ff fa58 	bl	800d8dc <tcp_next_iss>
 800e42c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	693a      	ldr	r2, [r7, #16]
 800e432:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	693a      	ldr	r2, [r7, #16]
 800e43e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	693a      	ldr	r2, [r7, #16]
 800e444:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e446:	4b35      	ldr	r3, [pc, #212]	; (800e51c <tcp_listen_input+0x1e0>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	1e5a      	subs	r2, r3, #1
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	691a      	ldr	r2, [r3, #16]
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	7a5b      	ldrb	r3, [r3, #9]
 800e462:	f003 030c 	and.w	r3, r3, #12
 800e466:	b2da      	uxtb	r2, r3
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7a1a      	ldrb	r2, [r3, #8]
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e474:	4b2e      	ldr	r3, [pc, #184]	; (800e530 <tcp_listen_input+0x1f4>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	60da      	str	r2, [r3, #12]
 800e47c:	4a2c      	ldr	r2, [pc, #176]	; (800e530 <tcp_listen_input+0x1f4>)
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	6013      	str	r3, [r2, #0]
 800e482:	f003 fd29 	bl	8011ed8 <tcp_timer_needed>
 800e486:	4b2b      	ldr	r3, [pc, #172]	; (800e534 <tcp_listen_input+0x1f8>)
 800e488:	2201      	movs	r2, #1
 800e48a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e48c:	6978      	ldr	r0, [r7, #20]
 800e48e:	f001 fd8f 	bl	800ffb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e492:	4b23      	ldr	r3, [pc, #140]	; (800e520 <tcp_listen_input+0x1e4>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	89db      	ldrh	r3, [r3, #14]
 800e498:	b29a      	uxth	r2, r3
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f007 fac1 	bl	8015a3c <ip4_route>
 800e4ba:	4601      	mov	r1, r0
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f7ff fa30 	bl	800d928 <tcp_eff_send_mss_netif>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e4d0:	2112      	movs	r1, #18
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f002 fc9c 	bl	8010e10 <tcp_enqueue_flags>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d004      	beq.n	800e4ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6978      	ldr	r0, [r7, #20]
 800e4e8:	f7fd ff08 	bl	800c2fc <tcp_abandon>
      return;
 800e4ec:	e006      	b.n	800e4fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e4ee:	6978      	ldr	r0, [r7, #20]
 800e4f0:	f002 fd7c 	bl	8010fec <tcp_output>
  return;
 800e4f4:	e001      	b.n	800e4fa <tcp_listen_input+0x1be>
    return;
 800e4f6:	bf00      	nop
 800e4f8:	e000      	b.n	800e4fc <tcp_listen_input+0x1c0>
  return;
 800e4fa:	bf00      	nop
}
 800e4fc:	371c      	adds	r7, #28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd90      	pop	{r4, r7, pc}
 800e502:	bf00      	nop
 800e504:	20010960 	.word	0x20010960
 800e508:	0801a0d4 	.word	0x0801a0d4
 800e50c:	0801a2cc 	.word	0x0801a2cc
 800e510:	0801a120 	.word	0x0801a120
 800e514:	20010958 	.word	0x20010958
 800e518:	2001095e 	.word	0x2001095e
 800e51c:	20010954 	.word	0x20010954
 800e520:	20010944 	.word	0x20010944
 800e524:	2000d1b8 	.word	0x2000d1b8
 800e528:	2000d1bc 	.word	0x2000d1bc
 800e52c:	2000d1a8 	.word	0x2000d1a8
 800e530:	20010928 	.word	0x20010928
 800e534:	20010930 	.word	0x20010930

0800e538 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af04      	add	r7, sp, #16
 800e53e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e540:	4b2f      	ldr	r3, [pc, #188]	; (800e600 <tcp_timewait_input+0xc8>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d153      	bne.n	800e5f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d106      	bne.n	800e560 <tcp_timewait_input+0x28>
 800e552:	4b2c      	ldr	r3, [pc, #176]	; (800e604 <tcp_timewait_input+0xcc>)
 800e554:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e558:	492b      	ldr	r1, [pc, #172]	; (800e608 <tcp_timewait_input+0xd0>)
 800e55a:	482c      	ldr	r0, [pc, #176]	; (800e60c <tcp_timewait_input+0xd4>)
 800e55c:	f008 ff48 	bl	80173f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e560:	4b27      	ldr	r3, [pc, #156]	; (800e600 <tcp_timewait_input+0xc8>)
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 0302 	and.w	r3, r3, #2
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d02a      	beq.n	800e5c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e56c:	4b28      	ldr	r3, [pc, #160]	; (800e610 <tcp_timewait_input+0xd8>)
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	db2d      	blt.n	800e5d6 <tcp_timewait_input+0x9e>
 800e57a:	4b25      	ldr	r3, [pc, #148]	; (800e610 <tcp_timewait_input+0xd8>)
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e582:	6879      	ldr	r1, [r7, #4]
 800e584:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e586:	440b      	add	r3, r1
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dc23      	bgt.n	800e5d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e58e:	4b21      	ldr	r3, [pc, #132]	; (800e614 <tcp_timewait_input+0xdc>)
 800e590:	6819      	ldr	r1, [r3, #0]
 800e592:	4b21      	ldr	r3, [pc, #132]	; (800e618 <tcp_timewait_input+0xe0>)
 800e594:	881b      	ldrh	r3, [r3, #0]
 800e596:	461a      	mov	r2, r3
 800e598:	4b1d      	ldr	r3, [pc, #116]	; (800e610 <tcp_timewait_input+0xd8>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e59e:	4b1f      	ldr	r3, [pc, #124]	; (800e61c <tcp_timewait_input+0xe4>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5a2:	885b      	ldrh	r3, [r3, #2]
 800e5a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5a6:	4a1d      	ldr	r2, [pc, #116]	; (800e61c <tcp_timewait_input+0xe4>)
 800e5a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5aa:	8812      	ldrh	r2, [r2, #0]
 800e5ac:	b292      	uxth	r2, r2
 800e5ae:	9202      	str	r2, [sp, #8]
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	4b1b      	ldr	r3, [pc, #108]	; (800e620 <tcp_timewait_input+0xe8>)
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	4b1b      	ldr	r3, [pc, #108]	; (800e624 <tcp_timewait_input+0xec>)
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f003 faca 	bl	8011b54 <tcp_rst>
      return;
 800e5c0:	e01b      	b.n	800e5fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e5c2:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <tcp_timewait_input+0xc8>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d003      	beq.n	800e5d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e5ce:	4b16      	ldr	r3, [pc, #88]	; (800e628 <tcp_timewait_input+0xf0>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e5d6:	4b10      	ldr	r3, [pc, #64]	; (800e618 <tcp_timewait_input+0xe0>)
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8b5b      	ldrh	r3, [r3, #26]
 800e5e2:	f043 0302 	orr.w	r3, r3, #2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f002 fcfd 	bl	8010fec <tcp_output>
  }
  return;
 800e5f2:	e001      	b.n	800e5f8 <tcp_timewait_input+0xc0>
    return;
 800e5f4:	bf00      	nop
 800e5f6:	e000      	b.n	800e5fa <tcp_timewait_input+0xc2>
  return;
 800e5f8:	bf00      	nop
}
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20010960 	.word	0x20010960
 800e604:	0801a0d4 	.word	0x0801a0d4
 800e608:	0801a2ec 	.word	0x0801a2ec
 800e60c:	0801a120 	.word	0x0801a120
 800e610:	20010954 	.word	0x20010954
 800e614:	20010958 	.word	0x20010958
 800e618:	2001095e 	.word	0x2001095e
 800e61c:	20010944 	.word	0x20010944
 800e620:	2000d1b8 	.word	0x2000d1b8
 800e624:	2000d1bc 	.word	0x2000d1bc
 800e628:	2001091c 	.word	0x2001091c

0800e62c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b08d      	sub	sp, #52	; 0x34
 800e630:	af04      	add	r7, sp, #16
 800e632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e634:	2300      	movs	r3, #0
 800e636:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <tcp_process+0x24>
 800e642:	4b9d      	ldr	r3, [pc, #628]	; (800e8b8 <tcp_process+0x28c>)
 800e644:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e648:	499c      	ldr	r1, [pc, #624]	; (800e8bc <tcp_process+0x290>)
 800e64a:	489d      	ldr	r0, [pc, #628]	; (800e8c0 <tcp_process+0x294>)
 800e64c:	f008 fed0 	bl	80173f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e650:	4b9c      	ldr	r3, [pc, #624]	; (800e8c4 <tcp_process+0x298>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	f003 0304 	and.w	r3, r3, #4
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d04e      	beq.n	800e6fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7d1b      	ldrb	r3, [r3, #20]
 800e660:	2b02      	cmp	r3, #2
 800e662:	d108      	bne.n	800e676 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e668:	4b97      	ldr	r3, [pc, #604]	; (800e8c8 <tcp_process+0x29c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d123      	bne.n	800e6b8 <tcp_process+0x8c>
        acceptable = 1;
 800e670:	2301      	movs	r3, #1
 800e672:	76fb      	strb	r3, [r7, #27]
 800e674:	e020      	b.n	800e6b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e67a:	4b94      	ldr	r3, [pc, #592]	; (800e8cc <tcp_process+0x2a0>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d102      	bne.n	800e688 <tcp_process+0x5c>
        acceptable = 1;
 800e682:	2301      	movs	r3, #1
 800e684:	76fb      	strb	r3, [r7, #27]
 800e686:	e017      	b.n	800e6b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e688:	4b90      	ldr	r3, [pc, #576]	; (800e8cc <tcp_process+0x2a0>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	db10      	blt.n	800e6b8 <tcp_process+0x8c>
 800e696:	4b8d      	ldr	r3, [pc, #564]	; (800e8cc <tcp_process+0x2a0>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e6a2:	440b      	add	r3, r1
 800e6a4:	1ad3      	subs	r3, r2, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	dc06      	bgt.n	800e6b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	8b5b      	ldrh	r3, [r3, #26]
 800e6ae:	f043 0302 	orr.w	r3, r3, #2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e6b8:	7efb      	ldrb	r3, [r7, #27]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d01b      	beq.n	800e6f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7d1b      	ldrb	r3, [r3, #20]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d106      	bne.n	800e6d4 <tcp_process+0xa8>
 800e6c6:	4b7c      	ldr	r3, [pc, #496]	; (800e8b8 <tcp_process+0x28c>)
 800e6c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e6cc:	4980      	ldr	r1, [pc, #512]	; (800e8d0 <tcp_process+0x2a4>)
 800e6ce:	487c      	ldr	r0, [pc, #496]	; (800e8c0 <tcp_process+0x294>)
 800e6d0:	f008 fe8e 	bl	80173f0 <iprintf>
      recv_flags |= TF_RESET;
 800e6d4:	4b7f      	ldr	r3, [pc, #508]	; (800e8d4 <tcp_process+0x2a8>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f043 0308 	orr.w	r3, r3, #8
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	4b7d      	ldr	r3, [pc, #500]	; (800e8d4 <tcp_process+0x2a8>)
 800e6e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	8b5b      	ldrh	r3, [r3, #26]
 800e6e6:	f023 0301 	bic.w	r3, r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e6f0:	f06f 030d 	mvn.w	r3, #13
 800e6f4:	e37a      	b.n	800edec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e378      	b.n	800edec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e6fa:	4b72      	ldr	r3, [pc, #456]	; (800e8c4 <tcp_process+0x298>)
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	f003 0302 	and.w	r3, r3, #2
 800e702:	2b00      	cmp	r3, #0
 800e704:	d010      	beq.n	800e728 <tcp_process+0xfc>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	7d1b      	ldrb	r3, [r3, #20]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d00c      	beq.n	800e728 <tcp_process+0xfc>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	7d1b      	ldrb	r3, [r3, #20]
 800e712:	2b03      	cmp	r3, #3
 800e714:	d008      	beq.n	800e728 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	8b5b      	ldrh	r3, [r3, #26]
 800e71a:	f043 0302 	orr.w	r3, r3, #2
 800e71e:	b29a      	uxth	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	e361      	b.n	800edec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8b5b      	ldrh	r3, [r3, #26]
 800e72c:	f003 0310 	and.w	r3, r3, #16
 800e730:	2b00      	cmp	r3, #0
 800e732:	d103      	bne.n	800e73c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e734:	4b68      	ldr	r3, [pc, #416]	; (800e8d8 <tcp_process+0x2ac>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f001 fc2f 	bl	800ffb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7d1b      	ldrb	r3, [r3, #20]
 800e756:	3b02      	subs	r3, #2
 800e758:	2b07      	cmp	r3, #7
 800e75a:	f200 8337 	bhi.w	800edcc <tcp_process+0x7a0>
 800e75e:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <tcp_process+0x138>)
 800e760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e764:	0800e785 	.word	0x0800e785
 800e768:	0800e9b5 	.word	0x0800e9b5
 800e76c:	0800eb2d 	.word	0x0800eb2d
 800e770:	0800eb57 	.word	0x0800eb57
 800e774:	0800ec7b 	.word	0x0800ec7b
 800e778:	0800eb2d 	.word	0x0800eb2d
 800e77c:	0800ed07 	.word	0x0800ed07
 800e780:	0800ed97 	.word	0x0800ed97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e784:	4b4f      	ldr	r3, [pc, #316]	; (800e8c4 <tcp_process+0x298>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 80e4 	beq.w	800e95a <tcp_process+0x32e>
 800e792:	4b4c      	ldr	r3, [pc, #304]	; (800e8c4 <tcp_process+0x298>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	f003 0302 	and.w	r3, r3, #2
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 80dd 	beq.w	800e95a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	4b48      	ldr	r3, [pc, #288]	; (800e8c8 <tcp_process+0x29c>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	f040 80d5 	bne.w	800e95a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e7b0:	4b46      	ldr	r3, [pc, #280]	; (800e8cc <tcp_process+0x2a0>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	1c5a      	adds	r2, r3, #1
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e7c2:	4b41      	ldr	r3, [pc, #260]	; (800e8c8 <tcp_process+0x29c>)
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e7ca:	4b44      	ldr	r3, [pc, #272]	; (800e8dc <tcp_process+0x2b0>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	89db      	ldrh	r3, [r3, #14]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e7e4:	4b39      	ldr	r3, [pc, #228]	; (800e8cc <tcp_process+0x2a0>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	1e5a      	subs	r2, r3, #1
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f007 f91d 	bl	8015a3c <ip4_route>
 800e802:	4601      	mov	r1, r0
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3304      	adds	r3, #4
 800e808:	461a      	mov	r2, r3
 800e80a:	4620      	mov	r0, r4
 800e80c:	f7ff f88c 	bl	800d928 <tcp_eff_send_mss_netif>
 800e810:	4603      	mov	r3, r0
 800e812:	461a      	mov	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e81c:	009a      	lsls	r2, r3, #2
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e822:	005b      	lsls	r3, r3, #1
 800e824:	f241 111c 	movw	r1, #4380	; 0x111c
 800e828:	428b      	cmp	r3, r1
 800e82a:	bf38      	it	cc
 800e82c:	460b      	movcc	r3, r1
 800e82e:	429a      	cmp	r2, r3
 800e830:	d204      	bcs.n	800e83c <tcp_process+0x210>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	b29b      	uxth	r3, r3
 800e83a:	e00d      	b.n	800e858 <tcp_process+0x22c>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	f241 121c 	movw	r2, #4380	; 0x111c
 800e846:	4293      	cmp	r3, r2
 800e848:	d904      	bls.n	800e854 <tcp_process+0x228>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	b29b      	uxth	r3, r3
 800e852:	e001      	b.n	800e858 <tcp_process+0x22c>
 800e854:	f241 131c 	movw	r3, #4380	; 0x111c
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e864:	2b00      	cmp	r3, #0
 800e866:	d106      	bne.n	800e876 <tcp_process+0x24a>
 800e868:	4b13      	ldr	r3, [pc, #76]	; (800e8b8 <tcp_process+0x28c>)
 800e86a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e86e:	491c      	ldr	r1, [pc, #112]	; (800e8e0 <tcp_process+0x2b4>)
 800e870:	4813      	ldr	r0, [pc, #76]	; (800e8c0 <tcp_process+0x294>)
 800e872:	f008 fdbd 	bl	80173f0 <iprintf>
        --pcb->snd_queuelen;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e87c:	3b01      	subs	r3, #1
 800e87e:	b29a      	uxth	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e88a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d12a      	bne.n	800e8e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e896:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d106      	bne.n	800e8ac <tcp_process+0x280>
 800e89e:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <tcp_process+0x28c>)
 800e8a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e8a4:	490f      	ldr	r1, [pc, #60]	; (800e8e4 <tcp_process+0x2b8>)
 800e8a6:	4806      	ldr	r0, [pc, #24]	; (800e8c0 <tcp_process+0x294>)
 800e8a8:	f008 fda2 	bl	80173f0 <iprintf>
          pcb->unsent = rseg->next;
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	66da      	str	r2, [r3, #108]	; 0x6c
 800e8b4:	e01c      	b.n	800e8f0 <tcp_process+0x2c4>
 800e8b6:	bf00      	nop
 800e8b8:	0801a0d4 	.word	0x0801a0d4
 800e8bc:	0801a30c 	.word	0x0801a30c
 800e8c0:	0801a120 	.word	0x0801a120
 800e8c4:	20010960 	.word	0x20010960
 800e8c8:	20010958 	.word	0x20010958
 800e8cc:	20010954 	.word	0x20010954
 800e8d0:	0801a328 	.word	0x0801a328
 800e8d4:	20010961 	.word	0x20010961
 800e8d8:	2001091c 	.word	0x2001091c
 800e8dc:	20010944 	.word	0x20010944
 800e8e0:	0801a348 	.word	0x0801a348
 800e8e4:	0801a360 	.word	0x0801a360
        } else {
          pcb->unacked = rseg->next;
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e8f0:	69f8      	ldr	r0, [r7, #28]
 800e8f2:	f7fe fc54 	bl	800d19e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d104      	bne.n	800e908 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e904:	861a      	strh	r2, [r3, #48]	; 0x30
 800e906:	e006      	b.n	800e916 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00a      	beq.n	800e936 <tcp_process+0x30a>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	6910      	ldr	r0, [r2, #16]
 800e92a:	2200      	movs	r2, #0
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	4798      	blx	r3
 800e930:	4603      	mov	r3, r0
 800e932:	76bb      	strb	r3, [r7, #26]
 800e934:	e001      	b.n	800e93a <tcp_process+0x30e>
 800e936:	2300      	movs	r3, #0
 800e938:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e93a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e93e:	f113 0f0d 	cmn.w	r3, #13
 800e942:	d102      	bne.n	800e94a <tcp_process+0x31e>
          return ERR_ABRT;
 800e944:	f06f 030c 	mvn.w	r3, #12
 800e948:	e250      	b.n	800edec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	8b5b      	ldrh	r3, [r3, #26]
 800e94e:	f043 0302 	orr.w	r3, r3, #2
 800e952:	b29a      	uxth	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e958:	e23a      	b.n	800edd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e95a:	4b98      	ldr	r3, [pc, #608]	; (800ebbc <tcp_process+0x590>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0310 	and.w	r3, r3, #16
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 8234 	beq.w	800edd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e968:	4b95      	ldr	r3, [pc, #596]	; (800ebc0 <tcp_process+0x594>)
 800e96a:	6819      	ldr	r1, [r3, #0]
 800e96c:	4b95      	ldr	r3, [pc, #596]	; (800ebc4 <tcp_process+0x598>)
 800e96e:	881b      	ldrh	r3, [r3, #0]
 800e970:	461a      	mov	r2, r3
 800e972:	4b95      	ldr	r3, [pc, #596]	; (800ebc8 <tcp_process+0x59c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e978:	4b94      	ldr	r3, [pc, #592]	; (800ebcc <tcp_process+0x5a0>)
 800e97a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e97c:	885b      	ldrh	r3, [r3, #2]
 800e97e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e980:	4a92      	ldr	r2, [pc, #584]	; (800ebcc <tcp_process+0x5a0>)
 800e982:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e984:	8812      	ldrh	r2, [r2, #0]
 800e986:	b292      	uxth	r2, r2
 800e988:	9202      	str	r2, [sp, #8]
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	4b90      	ldr	r3, [pc, #576]	; (800ebd0 <tcp_process+0x5a4>)
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	4b90      	ldr	r3, [pc, #576]	; (800ebd4 <tcp_process+0x5a8>)
 800e992:	4602      	mov	r2, r0
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f003 f8dd 	bl	8011b54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9a0:	2b05      	cmp	r3, #5
 800e9a2:	f200 8215 	bhi.w	800edd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f002 fea9 	bl	8011704 <tcp_rexmit_rto>
      break;
 800e9b2:	e20d      	b.n	800edd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e9b4:	4b81      	ldr	r3, [pc, #516]	; (800ebbc <tcp_process+0x590>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	f003 0310 	and.w	r3, r3, #16
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 80a1 	beq.w	800eb04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9c2:	4b7f      	ldr	r3, [pc, #508]	; (800ebc0 <tcp_process+0x594>)
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	db7e      	blt.n	800ead0 <tcp_process+0x4a4>
 800e9d2:	4b7b      	ldr	r3, [pc, #492]	; (800ebc0 <tcp_process+0x594>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dc77      	bgt.n	800ead0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2204      	movs	r2, #4
 800e9e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e9ee:	23fa      	movs	r3, #250	; 0xfa
 800e9f0:	76bb      	strb	r3, [r7, #26]
 800e9f2:	e01d      	b.n	800ea30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <tcp_process+0x3e0>
 800e9fe:	4b76      	ldr	r3, [pc, #472]	; (800ebd8 <tcp_process+0x5ac>)
 800ea00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ea04:	4975      	ldr	r1, [pc, #468]	; (800ebdc <tcp_process+0x5b0>)
 800ea06:	4876      	ldr	r0, [pc, #472]	; (800ebe0 <tcp_process+0x5b4>)
 800ea08:	f008 fcf2 	bl	80173f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea10:	699b      	ldr	r3, [r3, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00a      	beq.n	800ea2c <tcp_process+0x400>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	6910      	ldr	r0, [r2, #16]
 800ea20:	2200      	movs	r2, #0
 800ea22:	6879      	ldr	r1, [r7, #4]
 800ea24:	4798      	blx	r3
 800ea26:	4603      	mov	r3, r0
 800ea28:	76bb      	strb	r3, [r7, #26]
 800ea2a:	e001      	b.n	800ea30 <tcp_process+0x404>
 800ea2c:	23f0      	movs	r3, #240	; 0xf0
 800ea2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ea30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00a      	beq.n	800ea4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ea38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ea3c:	f113 0f0d 	cmn.w	r3, #13
 800ea40:	d002      	beq.n	800ea48 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7fd fd18 	bl	800c478 <tcp_abort>
            }
            return ERR_ABRT;
 800ea48:	f06f 030c 	mvn.w	r3, #12
 800ea4c:	e1ce      	b.n	800edec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f000 fae0 	bl	800f014 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ea54:	4b63      	ldr	r3, [pc, #396]	; (800ebe4 <tcp_process+0x5b8>)
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d005      	beq.n	800ea68 <tcp_process+0x43c>
            recv_acked--;
 800ea5c:	4b61      	ldr	r3, [pc, #388]	; (800ebe4 <tcp_process+0x5b8>)
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	4b5f      	ldr	r3, [pc, #380]	; (800ebe4 <tcp_process+0x5b8>)
 800ea66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea6c:	009a      	lsls	r2, r3, #2
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea78:	428b      	cmp	r3, r1
 800ea7a:	bf38      	it	cc
 800ea7c:	460b      	movcc	r3, r1
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d204      	bcs.n	800ea8c <tcp_process+0x460>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	e00d      	b.n	800eaa8 <tcp_process+0x47c>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d904      	bls.n	800eaa4 <tcp_process+0x478>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea9e:	005b      	lsls	r3, r3, #1
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	e001      	b.n	800eaa8 <tcp_process+0x47c>
 800eaa4:	f241 131c 	movw	r3, #4380	; 0x111c
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eaae:	4b4e      	ldr	r3, [pc, #312]	; (800ebe8 <tcp_process+0x5bc>)
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	f003 0320 	and.w	r3, r3, #32
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d037      	beq.n	800eb2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	8b5b      	ldrh	r3, [r3, #26]
 800eabe:	f043 0302 	orr.w	r3, r3, #2
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2207      	movs	r2, #7
 800eacc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800eace:	e02c      	b.n	800eb2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ead0:	4b3b      	ldr	r3, [pc, #236]	; (800ebc0 <tcp_process+0x594>)
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	4b3b      	ldr	r3, [pc, #236]	; (800ebc4 <tcp_process+0x598>)
 800ead6:	881b      	ldrh	r3, [r3, #0]
 800ead8:	461a      	mov	r2, r3
 800eada:	4b3b      	ldr	r3, [pc, #236]	; (800ebc8 <tcp_process+0x59c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eae0:	4b3a      	ldr	r3, [pc, #232]	; (800ebcc <tcp_process+0x5a0>)
 800eae2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae4:	885b      	ldrh	r3, [r3, #2]
 800eae6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eae8:	4a38      	ldr	r2, [pc, #224]	; (800ebcc <tcp_process+0x5a0>)
 800eaea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaec:	8812      	ldrh	r2, [r2, #0]
 800eaee:	b292      	uxth	r2, r2
 800eaf0:	9202      	str	r2, [sp, #8]
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	4b36      	ldr	r3, [pc, #216]	; (800ebd0 <tcp_process+0x5a4>)
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	4b36      	ldr	r3, [pc, #216]	; (800ebd4 <tcp_process+0x5a8>)
 800eafa:	4602      	mov	r2, r0
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f003 f829 	bl	8011b54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eb02:	e167      	b.n	800edd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eb04:	4b2d      	ldr	r3, [pc, #180]	; (800ebbc <tcp_process+0x590>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 8161 	beq.w	800edd4 <tcp_process+0x7a8>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	1e5a      	subs	r2, r3, #1
 800eb18:	4b2b      	ldr	r3, [pc, #172]	; (800ebc8 <tcp_process+0x59c>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	f040 8159 	bne.w	800edd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f002 fe10 	bl	8011748 <tcp_rexmit>
      break;
 800eb28:	e154      	b.n	800edd4 <tcp_process+0x7a8>
 800eb2a:	e153      	b.n	800edd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fa71 	bl	800f014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eb32:	4b2d      	ldr	r3, [pc, #180]	; (800ebe8 <tcp_process+0x5bc>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	f003 0320 	and.w	r3, r3, #32
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f000 814c 	beq.w	800edd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	8b5b      	ldrh	r3, [r3, #26]
 800eb44:	f043 0302 	orr.w	r3, r3, #2
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2207      	movs	r2, #7
 800eb52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb54:	e140      	b.n	800edd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 fa5c 	bl	800f014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb5c:	4b22      	ldr	r3, [pc, #136]	; (800ebe8 <tcp_process+0x5bc>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 0320 	and.w	r3, r3, #32
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d071      	beq.n	800ec4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb68:	4b14      	ldr	r3, [pc, #80]	; (800ebbc <tcp_process+0x590>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 0310 	and.w	r3, r3, #16
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d060      	beq.n	800ec36 <tcp_process+0x60a>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb78:	4b11      	ldr	r3, [pc, #68]	; (800ebc0 <tcp_process+0x594>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d15a      	bne.n	800ec36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d156      	bne.n	800ec36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	8b5b      	ldrh	r3, [r3, #26]
 800eb8c:	f043 0302 	orr.w	r3, r3, #2
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7fe fdbc 	bl	800d714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb9c:	4b13      	ldr	r3, [pc, #76]	; (800ebec <tcp_process+0x5c0>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d105      	bne.n	800ebb2 <tcp_process+0x586>
 800eba6:	4b11      	ldr	r3, [pc, #68]	; (800ebec <tcp_process+0x5c0>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	4a0f      	ldr	r2, [pc, #60]	; (800ebec <tcp_process+0x5c0>)
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	e02e      	b.n	800ec10 <tcp_process+0x5e4>
 800ebb2:	4b0e      	ldr	r3, [pc, #56]	; (800ebec <tcp_process+0x5c0>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	e027      	b.n	800ec0a <tcp_process+0x5de>
 800ebba:	bf00      	nop
 800ebbc:	20010960 	.word	0x20010960
 800ebc0:	20010958 	.word	0x20010958
 800ebc4:	2001095e 	.word	0x2001095e
 800ebc8:	20010954 	.word	0x20010954
 800ebcc:	20010944 	.word	0x20010944
 800ebd0:	2000d1b8 	.word	0x2000d1b8
 800ebd4:	2000d1bc 	.word	0x2000d1bc
 800ebd8:	0801a0d4 	.word	0x0801a0d4
 800ebdc:	0801a374 	.word	0x0801a374
 800ebe0:	0801a120 	.word	0x0801a120
 800ebe4:	2001095c 	.word	0x2001095c
 800ebe8:	20010961 	.word	0x20010961
 800ebec:	20010928 	.word	0x20010928
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d104      	bne.n	800ec04 <tcp_process+0x5d8>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68da      	ldr	r2, [r3, #12]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	60da      	str	r2, [r3, #12]
 800ec02:	e005      	b.n	800ec10 <tcp_process+0x5e4>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	617b      	str	r3, [r7, #20]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1ef      	bne.n	800ebf0 <tcp_process+0x5c4>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	60da      	str	r2, [r3, #12]
 800ec16:	4b77      	ldr	r3, [pc, #476]	; (800edf4 <tcp_process+0x7c8>)
 800ec18:	2201      	movs	r2, #1
 800ec1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	220a      	movs	r2, #10
 800ec20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ec22:	4b75      	ldr	r3, [pc, #468]	; (800edf8 <tcp_process+0x7cc>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	60da      	str	r2, [r3, #12]
 800ec2a:	4a73      	ldr	r2, [pc, #460]	; (800edf8 <tcp_process+0x7cc>)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	f003 f952 	bl	8011ed8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ec34:	e0d2      	b.n	800eddc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	8b5b      	ldrh	r3, [r3, #26]
 800ec3a:	f043 0302 	orr.w	r3, r3, #2
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2208      	movs	r2, #8
 800ec48:	751a      	strb	r2, [r3, #20]
      break;
 800ec4a:	e0c7      	b.n	800eddc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec4c:	4b6b      	ldr	r3, [pc, #428]	; (800edfc <tcp_process+0x7d0>)
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	f003 0310 	and.w	r3, r3, #16
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 80c1 	beq.w	800eddc <tcp_process+0x7b0>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec5e:	4b68      	ldr	r3, [pc, #416]	; (800ee00 <tcp_process+0x7d4>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	f040 80ba 	bne.w	800eddc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f040 80b5 	bne.w	800eddc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2206      	movs	r2, #6
 800ec76:	751a      	strb	r2, [r3, #20]
      break;
 800ec78:	e0b0      	b.n	800eddc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f9ca 	bl	800f014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec80:	4b60      	ldr	r3, [pc, #384]	; (800ee04 <tcp_process+0x7d8>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 0320 	and.w	r3, r3, #32
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f000 80a9 	beq.w	800ede0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	8b5b      	ldrh	r3, [r3, #26]
 800ec92:	f043 0302 	orr.w	r3, r3, #2
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7fe fd39 	bl	800d714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eca2:	4b59      	ldr	r3, [pc, #356]	; (800ee08 <tcp_process+0x7dc>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d105      	bne.n	800ecb8 <tcp_process+0x68c>
 800ecac:	4b56      	ldr	r3, [pc, #344]	; (800ee08 <tcp_process+0x7dc>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68db      	ldr	r3, [r3, #12]
 800ecb2:	4a55      	ldr	r2, [pc, #340]	; (800ee08 <tcp_process+0x7dc>)
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	e013      	b.n	800ece0 <tcp_process+0x6b4>
 800ecb8:	4b53      	ldr	r3, [pc, #332]	; (800ee08 <tcp_process+0x7dc>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	613b      	str	r3, [r7, #16]
 800ecbe:	e00c      	b.n	800ecda <tcp_process+0x6ae>
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d104      	bne.n	800ecd4 <tcp_process+0x6a8>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	60da      	str	r2, [r3, #12]
 800ecd2:	e005      	b.n	800ece0 <tcp_process+0x6b4>
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	613b      	str	r3, [r7, #16]
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1ef      	bne.n	800ecc0 <tcp_process+0x694>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	60da      	str	r2, [r3, #12]
 800ece6:	4b43      	ldr	r3, [pc, #268]	; (800edf4 <tcp_process+0x7c8>)
 800ece8:	2201      	movs	r2, #1
 800ecea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	220a      	movs	r2, #10
 800ecf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ecf2:	4b41      	ldr	r3, [pc, #260]	; (800edf8 <tcp_process+0x7cc>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	4a3f      	ldr	r2, [pc, #252]	; (800edf8 <tcp_process+0x7cc>)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	f003 f8ea 	bl	8011ed8 <tcp_timer_needed>
      }
      break;
 800ed04:	e06c      	b.n	800ede0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f984 	bl	800f014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed0c:	4b3b      	ldr	r3, [pc, #236]	; (800edfc <tcp_process+0x7d0>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 0310 	and.w	r3, r3, #16
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d065      	beq.n	800ede4 <tcp_process+0x7b8>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed1c:	4b38      	ldr	r3, [pc, #224]	; (800ee00 <tcp_process+0x7d4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d15f      	bne.n	800ede4 <tcp_process+0x7b8>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d15b      	bne.n	800ede4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7fe fcf1 	bl	800d714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ed32:	4b35      	ldr	r3, [pc, #212]	; (800ee08 <tcp_process+0x7dc>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d105      	bne.n	800ed48 <tcp_process+0x71c>
 800ed3c:	4b32      	ldr	r3, [pc, #200]	; (800ee08 <tcp_process+0x7dc>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	4a31      	ldr	r2, [pc, #196]	; (800ee08 <tcp_process+0x7dc>)
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	e013      	b.n	800ed70 <tcp_process+0x744>
 800ed48:	4b2f      	ldr	r3, [pc, #188]	; (800ee08 <tcp_process+0x7dc>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	e00c      	b.n	800ed6a <tcp_process+0x73e>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d104      	bne.n	800ed64 <tcp_process+0x738>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68da      	ldr	r2, [r3, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	60da      	str	r2, [r3, #12]
 800ed62:	e005      	b.n	800ed70 <tcp_process+0x744>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1ef      	bne.n	800ed50 <tcp_process+0x724>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	60da      	str	r2, [r3, #12]
 800ed76:	4b1f      	ldr	r3, [pc, #124]	; (800edf4 <tcp_process+0x7c8>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	220a      	movs	r2, #10
 800ed80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed82:	4b1d      	ldr	r3, [pc, #116]	; (800edf8 <tcp_process+0x7cc>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	60da      	str	r2, [r3, #12]
 800ed8a:	4a1b      	ldr	r2, [pc, #108]	; (800edf8 <tcp_process+0x7cc>)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6013      	str	r3, [r2, #0]
 800ed90:	f003 f8a2 	bl	8011ed8 <tcp_timer_needed>
      }
      break;
 800ed94:	e026      	b.n	800ede4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f93c 	bl	800f014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed9c:	4b17      	ldr	r3, [pc, #92]	; (800edfc <tcp_process+0x7d0>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d01f      	beq.n	800ede8 <tcp_process+0x7bc>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edac:	4b14      	ldr	r3, [pc, #80]	; (800ee00 <tcp_process+0x7d4>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d119      	bne.n	800ede8 <tcp_process+0x7bc>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d115      	bne.n	800ede8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800edbc:	4b11      	ldr	r3, [pc, #68]	; (800ee04 <tcp_process+0x7d8>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f043 0310 	orr.w	r3, r3, #16
 800edc4:	b2da      	uxtb	r2, r3
 800edc6:	4b0f      	ldr	r3, [pc, #60]	; (800ee04 <tcp_process+0x7d8>)
 800edc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800edca:	e00d      	b.n	800ede8 <tcp_process+0x7bc>
    default:
      break;
 800edcc:	bf00      	nop
 800edce:	e00c      	b.n	800edea <tcp_process+0x7be>
      break;
 800edd0:	bf00      	nop
 800edd2:	e00a      	b.n	800edea <tcp_process+0x7be>
      break;
 800edd4:	bf00      	nop
 800edd6:	e008      	b.n	800edea <tcp_process+0x7be>
      break;
 800edd8:	bf00      	nop
 800edda:	e006      	b.n	800edea <tcp_process+0x7be>
      break;
 800eddc:	bf00      	nop
 800edde:	e004      	b.n	800edea <tcp_process+0x7be>
      break;
 800ede0:	bf00      	nop
 800ede2:	e002      	b.n	800edea <tcp_process+0x7be>
      break;
 800ede4:	bf00      	nop
 800ede6:	e000      	b.n	800edea <tcp_process+0x7be>
      break;
 800ede8:	bf00      	nop
  }
  return ERR_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3724      	adds	r7, #36	; 0x24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd90      	pop	{r4, r7, pc}
 800edf4:	20010930 	.word	0x20010930
 800edf8:	2001092c 	.word	0x2001092c
 800edfc:	20010960 	.word	0x20010960
 800ee00:	20010958 	.word	0x20010958
 800ee04:	20010961 	.word	0x20010961
 800ee08:	20010928 	.word	0x20010928

0800ee0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d106      	bne.n	800ee2a <tcp_oos_insert_segment+0x1e>
 800ee1c:	4b3b      	ldr	r3, [pc, #236]	; (800ef0c <tcp_oos_insert_segment+0x100>)
 800ee1e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ee22:	493b      	ldr	r1, [pc, #236]	; (800ef10 <tcp_oos_insert_segment+0x104>)
 800ee24:	483b      	ldr	r0, [pc, #236]	; (800ef14 <tcp_oos_insert_segment+0x108>)
 800ee26:	f008 fae3 	bl	80173f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	899b      	ldrh	r3, [r3, #12]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fb f922 	bl	800a07c <lwip_htons>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	f003 0301 	and.w	r3, r3, #1
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d028      	beq.n	800ee96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ee44:	6838      	ldr	r0, [r7, #0]
 800ee46:	f7fe f995 	bl	800d174 <tcp_segs_free>
    next = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	603b      	str	r3, [r7, #0]
 800ee4e:	e056      	b.n	800eefe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	899b      	ldrh	r3, [r3, #12]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fb f90f 	bl	800a07c <lwip_htons>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	f003 0301 	and.w	r3, r3, #1
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00d      	beq.n	800ee86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	899b      	ldrh	r3, [r3, #12]
 800ee70:	b29c      	uxth	r4, r3
 800ee72:	2001      	movs	r0, #1
 800ee74:	f7fb f902 	bl	800a07c <lwip_htons>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	4322      	orrs	r2, r4
 800ee82:	b292      	uxth	r2, r2
 800ee84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f7fe f984 	bl	800d19e <tcp_seg_free>
    while (next &&
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00e      	beq.n	800eeba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	891b      	ldrh	r3, [r3, #8]
 800eea0:	461a      	mov	r2, r3
 800eea2:	4b1d      	ldr	r3, [pc, #116]	; (800ef18 <tcp_oos_insert_segment+0x10c>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	441a      	add	r2, r3
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	8909      	ldrh	r1, [r1, #8]
 800eeb2:	440b      	add	r3, r1
 800eeb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	daca      	bge.n	800ee50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01e      	beq.n	800eefe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	891b      	ldrh	r3, [r3, #8]
 800eec4:	461a      	mov	r2, r3
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <tcp_oos_insert_segment+0x10c>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	441a      	add	r2, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	dd12      	ble.n	800eefe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	b29a      	uxth	r2, r3
 800eee0:	4b0d      	ldr	r3, [pc, #52]	; (800ef18 <tcp_oos_insert_segment+0x10c>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	891b      	ldrh	r3, [r3, #8]
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7fc fb37 	bl	800b56c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	601a      	str	r2, [r3, #0]
}
 800ef04:	bf00      	nop
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd90      	pop	{r4, r7, pc}
 800ef0c:	0801a0d4 	.word	0x0801a0d4
 800ef10:	0801a394 	.word	0x0801a394
 800ef14:	0801a120 	.word	0x0801a120
 800ef18:	20010954 	.word	0x20010954

0800ef1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ef1c:	b5b0      	push	{r4, r5, r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ef2a:	e03e      	b.n	800efaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fc fd2a 	bl	800b994 <pbuf_clen>
 800ef40:	4603      	mov	r3, r0
 800ef42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef4a:	8a7a      	ldrh	r2, [r7, #18]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d906      	bls.n	800ef5e <tcp_free_acked_segments+0x42>
 800ef50:	4b2a      	ldr	r3, [pc, #168]	; (800effc <tcp_free_acked_segments+0xe0>)
 800ef52:	f240 4257 	movw	r2, #1111	; 0x457
 800ef56:	492a      	ldr	r1, [pc, #168]	; (800f000 <tcp_free_acked_segments+0xe4>)
 800ef58:	482a      	ldr	r0, [pc, #168]	; (800f004 <tcp_free_acked_segments+0xe8>)
 800ef5a:	f008 fa49 	bl	80173f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ef64:	8a7b      	ldrh	r3, [r7, #18]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	891a      	ldrh	r2, [r3, #8]
 800ef74:	4b24      	ldr	r3, [pc, #144]	; (800f008 <tcp_free_acked_segments+0xec>)
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	4b22      	ldr	r3, [pc, #136]	; (800f008 <tcp_free_acked_segments+0xec>)
 800ef7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ef80:	6978      	ldr	r0, [r7, #20]
 800ef82:	f7fe f90c 	bl	800d19e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00c      	beq.n	800efaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d109      	bne.n	800efaa <tcp_free_acked_segments+0x8e>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <tcp_free_acked_segments+0x8e>
 800ef9c:	4b17      	ldr	r3, [pc, #92]	; (800effc <tcp_free_acked_segments+0xe0>)
 800ef9e:	f240 4261 	movw	r2, #1121	; 0x461
 800efa2:	491a      	ldr	r1, [pc, #104]	; (800f00c <tcp_free_acked_segments+0xf0>)
 800efa4:	4817      	ldr	r0, [pc, #92]	; (800f004 <tcp_free_acked_segments+0xe8>)
 800efa6:	f008 fa23 	bl	80173f0 <iprintf>
  while (seg_list != NULL &&
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d020      	beq.n	800eff2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fb f875 	bl	800a0a6 <lwip_htonl>
 800efbc:	4604      	mov	r4, r0
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	891b      	ldrh	r3, [r3, #8]
 800efc2:	461d      	mov	r5, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	899b      	ldrh	r3, [r3, #12]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fb f855 	bl	800a07c <lwip_htons>
 800efd2:	4603      	mov	r3, r0
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	f003 0303 	and.w	r3, r3, #3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <tcp_free_acked_segments+0xc6>
 800efde:	2301      	movs	r3, #1
 800efe0:	e000      	b.n	800efe4 <tcp_free_acked_segments+0xc8>
 800efe2:	2300      	movs	r3, #0
 800efe4:	442b      	add	r3, r5
 800efe6:	18e2      	adds	r2, r4, r3
 800efe8:	4b09      	ldr	r3, [pc, #36]	; (800f010 <tcp_free_acked_segments+0xf4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800efee:	2b00      	cmp	r3, #0
 800eff0:	dd9c      	ble.n	800ef2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eff2:	68bb      	ldr	r3, [r7, #8]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bdb0      	pop	{r4, r5, r7, pc}
 800effc:	0801a0d4 	.word	0x0801a0d4
 800f000:	0801a3bc 	.word	0x0801a3bc
 800f004:	0801a120 	.word	0x0801a120
 800f008:	2001095c 	.word	0x2001095c
 800f00c:	0801a3e4 	.word	0x0801a3e4
 800f010:	20010958 	.word	0x20010958

0800f014 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f014:	b5b0      	push	{r4, r5, r7, lr}
 800f016:	b094      	sub	sp, #80	; 0x50
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f01c:	2300      	movs	r3, #0
 800f01e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <tcp_receive+0x20>
 800f026:	4b91      	ldr	r3, [pc, #580]	; (800f26c <tcp_receive+0x258>)
 800f028:	f240 427b 	movw	r2, #1147	; 0x47b
 800f02c:	4990      	ldr	r1, [pc, #576]	; (800f270 <tcp_receive+0x25c>)
 800f02e:	4891      	ldr	r0, [pc, #580]	; (800f274 <tcp_receive+0x260>)
 800f030:	f008 f9de 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7d1b      	ldrb	r3, [r3, #20]
 800f038:	2b03      	cmp	r3, #3
 800f03a:	d806      	bhi.n	800f04a <tcp_receive+0x36>
 800f03c:	4b8b      	ldr	r3, [pc, #556]	; (800f26c <tcp_receive+0x258>)
 800f03e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f042:	498d      	ldr	r1, [pc, #564]	; (800f278 <tcp_receive+0x264>)
 800f044:	488b      	ldr	r0, [pc, #556]	; (800f274 <tcp_receive+0x260>)
 800f046:	f008 f9d3 	bl	80173f0 <iprintf>

  if (flags & TCP_ACK) {
 800f04a:	4b8c      	ldr	r3, [pc, #560]	; (800f27c <tcp_receive+0x268>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	f003 0310 	and.w	r3, r3, #16
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 8264 	beq.w	800f520 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f05e:	461a      	mov	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f064:	4413      	add	r3, r2
 800f066:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f06c:	4b84      	ldr	r3, [pc, #528]	; (800f280 <tcp_receive+0x26c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	db1b      	blt.n	800f0ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f07a:	4b81      	ldr	r3, [pc, #516]	; (800f280 <tcp_receive+0x26c>)
 800f07c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f07e:	429a      	cmp	r2, r3
 800f080:	d106      	bne.n	800f090 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f086:	4b7f      	ldr	r3, [pc, #508]	; (800f284 <tcp_receive+0x270>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	db0e      	blt.n	800f0ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f094:	4b7b      	ldr	r3, [pc, #492]	; (800f284 <tcp_receive+0x270>)
 800f096:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f098:	429a      	cmp	r2, r3
 800f09a:	d125      	bne.n	800f0e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f09c:	4b7a      	ldr	r3, [pc, #488]	; (800f288 <tcp_receive+0x274>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	89db      	ldrh	r3, [r3, #14]
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d91c      	bls.n	800f0e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f0ae:	4b76      	ldr	r3, [pc, #472]	; (800f288 <tcp_receive+0x274>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	89db      	ldrh	r3, [r3, #14]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d205      	bcs.n	800f0d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f0d8:	4b69      	ldr	r3, [pc, #420]	; (800f280 <tcp_receive+0x26c>)
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f0e0:	4b68      	ldr	r3, [pc, #416]	; (800f284 <tcp_receive+0x270>)
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f0e8:	4b66      	ldr	r3, [pc, #408]	; (800f284 <tcp_receive+0x270>)
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dc58      	bgt.n	800f1a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f0f6:	4b65      	ldr	r3, [pc, #404]	; (800f28c <tcp_receive+0x278>)
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d14b      	bne.n	800f196 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f108:	4413      	add	r3, r2
 800f10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d142      	bne.n	800f196 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f116:	2b00      	cmp	r3, #0
 800f118:	db3d      	blt.n	800f196 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f11e:	4b59      	ldr	r3, [pc, #356]	; (800f284 <tcp_receive+0x270>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	429a      	cmp	r2, r3
 800f124:	d137      	bne.n	800f196 <tcp_receive+0x182>
              found_dupack = 1;
 800f126:	2301      	movs	r3, #1
 800f128:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f130:	2bff      	cmp	r3, #255	; 0xff
 800f132:	d007      	beq.n	800f144 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f13a:	3301      	adds	r3, #1
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	d91b      	bls.n	800f186 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f158:	4413      	add	r3, r2
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f162:	429a      	cmp	r2, r3
 800f164:	d30a      	bcc.n	800f17c <tcp_receive+0x168>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f170:	4413      	add	r3, r2
 800f172:	b29a      	uxth	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f17a:	e004      	b.n	800f186 <tcp_receive+0x172>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d902      	bls.n	800f196 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f002 fb45 	bl	8011820 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f040 8161 	bne.w	800f460 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1a6:	e15b      	b.n	800f460 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1a8:	4b36      	ldr	r3, [pc, #216]	; (800f284 <tcp_receive+0x270>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f2c0 814e 	blt.w	800f456 <tcp_receive+0x442>
 800f1ba:	4b32      	ldr	r3, [pc, #200]	; (800f284 <tcp_receive+0x270>)
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f300 8146 	bgt.w	800f456 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	8b5b      	ldrh	r3, [r3, #26]
 800f1ce:	f003 0304 	and.w	r3, r3, #4
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d010      	beq.n	800f1f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	8b5b      	ldrh	r3, [r3, #26]
 800f1da:	f023 0304 	bic.w	r3, r3, #4
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f206:	10db      	asrs	r3, r3, #3
 800f208:	b21b      	sxth	r3, r3
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f212:	b29b      	uxth	r3, r3
 800f214:	4413      	add	r3, r2
 800f216:	b29b      	uxth	r3, r3
 800f218:	b21a      	sxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f220:	4b18      	ldr	r3, [pc, #96]	; (800f284 <tcp_receive+0x270>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	b29a      	uxth	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f238:	4b12      	ldr	r3, [pc, #72]	; (800f284 <tcp_receive+0x270>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	7d1b      	ldrb	r3, [r3, #20]
 800f244:	2b03      	cmp	r3, #3
 800f246:	f240 8097 	bls.w	800f378 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f256:	429a      	cmp	r2, r3
 800f258:	d245      	bcs.n	800f2e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	8b5b      	ldrh	r3, [r3, #26]
 800f25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f262:	2b00      	cmp	r3, #0
 800f264:	d014      	beq.n	800f290 <tcp_receive+0x27c>
 800f266:	2301      	movs	r3, #1
 800f268:	e013      	b.n	800f292 <tcp_receive+0x27e>
 800f26a:	bf00      	nop
 800f26c:	0801a0d4 	.word	0x0801a0d4
 800f270:	0801a404 	.word	0x0801a404
 800f274:	0801a120 	.word	0x0801a120
 800f278:	0801a420 	.word	0x0801a420
 800f27c:	20010960 	.word	0x20010960
 800f280:	20010954 	.word	0x20010954
 800f284:	20010958 	.word	0x20010958
 800f288:	20010944 	.word	0x20010944
 800f28c:	2001095e 	.word	0x2001095e
 800f290:	2302      	movs	r3, #2
 800f292:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2a0:	fb12 f303 	smulbb	r3, r2, r3
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	bf28      	it	cs
 800f2ac:	4613      	movcs	r3, r2
 800f2ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2b8:	4413      	add	r3, r2
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d309      	bcc.n	800f2da <tcp_receive+0x2c6>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2ce:	4413      	add	r3, r2
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2d8:	e04e      	b.n	800f378 <tcp_receive+0x364>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f2e4:	e048      	b.n	800f378 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d309      	bcc.n	800f310 <tcp_receive+0x2fc>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f304:	4413      	add	r3, r2
 800f306:	b29a      	uxth	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f30e:	e004      	b.n	800f31a <tcp_receive+0x306>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f326:	429a      	cmp	r2, r3
 800f328:	d326      	bcc.n	800f378 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	b29a      	uxth	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f34a:	4413      	add	r3, r2
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f354:	429a      	cmp	r2, r3
 800f356:	d30a      	bcc.n	800f36e <tcp_receive+0x35a>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f362:	4413      	add	r3, r2
 800f364:	b29a      	uxth	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f36c:	e004      	b.n	800f378 <tcp_receive+0x364>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f374:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f380:	4a98      	ldr	r2, [pc, #608]	; (800f5e4 <tcp_receive+0x5d0>)
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f7ff fdca 	bl	800ef1c <tcp_free_acked_segments>
 800f388:	4602      	mov	r2, r0
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f396:	4a94      	ldr	r2, [pc, #592]	; (800f5e8 <tcp_receive+0x5d4>)
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff fdbf 	bl	800ef1c <tcp_free_acked_segments>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d104      	bne.n	800f3b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3b2:	861a      	strh	r2, [r3, #48]	; 0x30
 800f3b4:	e002      	b.n	800f3bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d103      	bne.n	800f3d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f3d8:	4b84      	ldr	r3, [pc, #528]	; (800f5ec <tcp_receive+0x5d8>)
 800f3da:	881b      	ldrh	r3, [r3, #0]
 800f3dc:	4413      	add	r3, r2
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d035      	beq.n	800f45e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d118      	bne.n	800f42c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00c      	beq.n	800f41c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fa fe49 	bl	800a0a6 <lwip_htonl>
 800f414:	4603      	mov	r3, r0
 800f416:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc20      	bgt.n	800f45e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	8b5b      	ldrh	r3, [r3, #26]
 800f420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f424:	b29a      	uxth	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f42a:	e018      	b.n	800f45e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fa fe34 	bl	800a0a6 <lwip_htonl>
 800f43e:	4603      	mov	r3, r0
 800f440:	1ae3      	subs	r3, r4, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	dc0b      	bgt.n	800f45e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	8b5b      	ldrh	r3, [r3, #26]
 800f44a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f454:	e003      	b.n	800f45e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f002 fbce 	bl	8011bf8 <tcp_send_empty_ack>
 800f45c:	e000      	b.n	800f460 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f45e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f464:	2b00      	cmp	r3, #0
 800f466:	d05b      	beq.n	800f520 <tcp_receive+0x50c>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f46c:	4b60      	ldr	r3, [pc, #384]	; (800f5f0 <tcp_receive+0x5dc>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	da54      	bge.n	800f520 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f476:	4b5f      	ldr	r3, [pc, #380]	; (800f5f4 <tcp_receive+0x5e0>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f480:	b29b      	uxth	r3, r3
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	b29b      	uxth	r3, r3
 800f486:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f48a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f494:	10db      	asrs	r3, r3, #3
 800f496:	b21b      	sxth	r3, r3
 800f498:	b29b      	uxth	r3, r3
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4ae:	4413      	add	r3, r2
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	b21a      	sxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f4b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da05      	bge.n	800f4cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f4c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4c4:	425b      	negs	r3, r3
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f4cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4d6:	109b      	asrs	r3, r3, #2
 800f4d8:	b21b      	sxth	r3, r3
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f4f0:	4413      	add	r3, r2
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	b21a      	sxth	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f500:	10db      	asrs	r3, r3, #3
 800f502:	b21b      	sxth	r3, r3
 800f504:	b29a      	uxth	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4413      	add	r3, r2
 800f510:	b29b      	uxth	r3, r3
 800f512:	b21a      	sxth	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f520:	4b35      	ldr	r3, [pc, #212]	; (800f5f8 <tcp_receive+0x5e4>)
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f000 84e2 	beq.w	800feee <tcp_receive+0xeda>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7d1b      	ldrb	r3, [r3, #20]
 800f52e:	2b06      	cmp	r3, #6
 800f530:	f200 84dd 	bhi.w	800feee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f538:	4b30      	ldr	r3, [pc, #192]	; (800f5fc <tcp_receive+0x5e8>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	3b01      	subs	r3, #1
 800f540:	2b00      	cmp	r3, #0
 800f542:	f2c0 808f 	blt.w	800f664 <tcp_receive+0x650>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f54a:	4b2b      	ldr	r3, [pc, #172]	; (800f5f8 <tcp_receive+0x5e4>)
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	4619      	mov	r1, r3
 800f550:	4b2a      	ldr	r3, [pc, #168]	; (800f5fc <tcp_receive+0x5e8>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	440b      	add	r3, r1
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	3301      	adds	r3, #1
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f300 8082 	bgt.w	800f664 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f560:	4b27      	ldr	r3, [pc, #156]	; (800f600 <tcp_receive+0x5ec>)
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <tcp_receive+0x5e8>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f572:	4b23      	ldr	r3, [pc, #140]	; (800f600 <tcp_receive+0x5ec>)
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <tcp_receive+0x574>
 800f57a:	4b22      	ldr	r3, [pc, #136]	; (800f604 <tcp_receive+0x5f0>)
 800f57c:	f240 5294 	movw	r2, #1428	; 0x594
 800f580:	4921      	ldr	r1, [pc, #132]	; (800f608 <tcp_receive+0x5f4>)
 800f582:	4822      	ldr	r0, [pc, #136]	; (800f60c <tcp_receive+0x5f8>)
 800f584:	f007 ff34 	bl	80173f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f58e:	4293      	cmp	r3, r2
 800f590:	d906      	bls.n	800f5a0 <tcp_receive+0x58c>
 800f592:	4b1c      	ldr	r3, [pc, #112]	; (800f604 <tcp_receive+0x5f0>)
 800f594:	f240 5295 	movw	r2, #1429	; 0x595
 800f598:	491d      	ldr	r1, [pc, #116]	; (800f610 <tcp_receive+0x5fc>)
 800f59a:	481c      	ldr	r0, [pc, #112]	; (800f60c <tcp_receive+0x5f8>)
 800f59c:	f007 ff28 	bl	80173f0 <iprintf>
      off = (u16_t)off32;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f5a6:	4b16      	ldr	r3, [pc, #88]	; (800f600 <tcp_receive+0x5ec>)
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	891b      	ldrh	r3, [r3, #8]
 800f5ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d906      	bls.n	800f5c2 <tcp_receive+0x5ae>
 800f5b4:	4b13      	ldr	r3, [pc, #76]	; (800f604 <tcp_receive+0x5f0>)
 800f5b6:	f240 5297 	movw	r2, #1431	; 0x597
 800f5ba:	4916      	ldr	r1, [pc, #88]	; (800f614 <tcp_receive+0x600>)
 800f5bc:	4813      	ldr	r0, [pc, #76]	; (800f60c <tcp_receive+0x5f8>)
 800f5be:	f007 ff17 	bl	80173f0 <iprintf>
      inseg.len -= off;
 800f5c2:	4b0f      	ldr	r3, [pc, #60]	; (800f600 <tcp_receive+0x5ec>)
 800f5c4:	891a      	ldrh	r2, [r3, #8]
 800f5c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	4b0c      	ldr	r3, [pc, #48]	; (800f600 <tcp_receive+0x5ec>)
 800f5d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f5d2:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <tcp_receive+0x5ec>)
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	891a      	ldrh	r2, [r3, #8]
 800f5d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f5e0:	e02a      	b.n	800f638 <tcp_receive+0x624>
 800f5e2:	bf00      	nop
 800f5e4:	0801a43c 	.word	0x0801a43c
 800f5e8:	0801a444 	.word	0x0801a444
 800f5ec:	2001095c 	.word	0x2001095c
 800f5f0:	20010958 	.word	0x20010958
 800f5f4:	2001091c 	.word	0x2001091c
 800f5f8:	2001095e 	.word	0x2001095e
 800f5fc:	20010954 	.word	0x20010954
 800f600:	20010934 	.word	0x20010934
 800f604:	0801a0d4 	.word	0x0801a0d4
 800f608:	0801a44c 	.word	0x0801a44c
 800f60c:	0801a120 	.word	0x0801a120
 800f610:	0801a45c 	.word	0x0801a45c
 800f614:	0801a46c 	.word	0x0801a46c
        off -= p->len;
 800f618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f61a:	895b      	ldrh	r3, [r3, #10]
 800f61c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f628:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f62a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f62e:	2200      	movs	r2, #0
 800f630:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f63a:	895b      	ldrh	r3, [r3, #10]
 800f63c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f640:	429a      	cmp	r2, r3
 800f642:	d8e9      	bhi.n	800f618 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f648:	4619      	mov	r1, r3
 800f64a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f64c:	f7fc f88e 	bl	800b76c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f654:	4a91      	ldr	r2, [pc, #580]	; (800f89c <tcp_receive+0x888>)
 800f656:	6013      	str	r3, [r2, #0]
 800f658:	4b91      	ldr	r3, [pc, #580]	; (800f8a0 <tcp_receive+0x88c>)
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	4a8f      	ldr	r2, [pc, #572]	; (800f89c <tcp_receive+0x888>)
 800f65e:	6812      	ldr	r2, [r2, #0]
 800f660:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f662:	e00d      	b.n	800f680 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f664:	4b8d      	ldr	r3, [pc, #564]	; (800f89c <tcp_receive+0x888>)
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	da06      	bge.n	800f680 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8b5b      	ldrh	r3, [r3, #26]
 800f676:	f043 0302 	orr.w	r3, r3, #2
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f680:	4b86      	ldr	r3, [pc, #536]	; (800f89c <tcp_receive+0x888>)
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f2c0 842a 	blt.w	800fee4 <tcp_receive+0xed0>
 800f690:	4b82      	ldr	r3, [pc, #520]	; (800f89c <tcp_receive+0x888>)
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f69c:	440b      	add	r3, r1
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f300 841e 	bgt.w	800fee4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6ac:	4b7b      	ldr	r3, [pc, #492]	; (800f89c <tcp_receive+0x888>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	f040 829a 	bne.w	800fbea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f6b6:	4b7a      	ldr	r3, [pc, #488]	; (800f8a0 <tcp_receive+0x88c>)
 800f6b8:	891c      	ldrh	r4, [r3, #8]
 800f6ba:	4b79      	ldr	r3, [pc, #484]	; (800f8a0 <tcp_receive+0x88c>)
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	899b      	ldrh	r3, [r3, #12]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fa fcda 	bl	800a07c <lwip_htons>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	f003 0303 	and.w	r3, r3, #3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <tcp_receive+0x6c4>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e000      	b.n	800f6da <tcp_receive+0x6c6>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4423      	add	r3, r4
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	4b71      	ldr	r3, [pc, #452]	; (800f8a4 <tcp_receive+0x890>)
 800f6e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6e6:	4b6f      	ldr	r3, [pc, #444]	; (800f8a4 <tcp_receive+0x890>)
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d275      	bcs.n	800f7da <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6ee:	4b6c      	ldr	r3, [pc, #432]	; (800f8a0 <tcp_receive+0x88c>)
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fa fcc0 	bl	800a07c <lwip_htons>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b00      	cmp	r3, #0
 800f706:	d01f      	beq.n	800f748 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f708:	4b65      	ldr	r3, [pc, #404]	; (800f8a0 <tcp_receive+0x88c>)
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	899b      	ldrh	r3, [r3, #12]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	b21b      	sxth	r3, r3
 800f712:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f716:	b21c      	sxth	r4, r3
 800f718:	4b61      	ldr	r3, [pc, #388]	; (800f8a0 <tcp_receive+0x88c>)
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	899b      	ldrh	r3, [r3, #12]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	4618      	mov	r0, r3
 800f722:	f7fa fcab 	bl	800a07c <lwip_htons>
 800f726:	4603      	mov	r3, r0
 800f728:	b2db      	uxtb	r3, r3
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f730:	b29b      	uxth	r3, r3
 800f732:	4618      	mov	r0, r3
 800f734:	f7fa fca2 	bl	800a07c <lwip_htons>
 800f738:	4603      	mov	r3, r0
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	4323      	orrs	r3, r4
 800f73e:	b21a      	sxth	r2, r3
 800f740:	4b57      	ldr	r3, [pc, #348]	; (800f8a0 <tcp_receive+0x88c>)
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	b292      	uxth	r2, r2
 800f746:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f74c:	4b54      	ldr	r3, [pc, #336]	; (800f8a0 <tcp_receive+0x88c>)
 800f74e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f750:	4b53      	ldr	r3, [pc, #332]	; (800f8a0 <tcp_receive+0x88c>)
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	899b      	ldrh	r3, [r3, #12]
 800f756:	b29b      	uxth	r3, r3
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fa fc8f 	bl	800a07c <lwip_htons>
 800f75e:	4603      	mov	r3, r0
 800f760:	b2db      	uxtb	r3, r3
 800f762:	f003 0302 	and.w	r3, r3, #2
 800f766:	2b00      	cmp	r3, #0
 800f768:	d005      	beq.n	800f776 <tcp_receive+0x762>
            inseg.len -= 1;
 800f76a:	4b4d      	ldr	r3, [pc, #308]	; (800f8a0 <tcp_receive+0x88c>)
 800f76c:	891b      	ldrh	r3, [r3, #8]
 800f76e:	3b01      	subs	r3, #1
 800f770:	b29a      	uxth	r2, r3
 800f772:	4b4b      	ldr	r3, [pc, #300]	; (800f8a0 <tcp_receive+0x88c>)
 800f774:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f776:	4b4a      	ldr	r3, [pc, #296]	; (800f8a0 <tcp_receive+0x88c>)
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	4a49      	ldr	r2, [pc, #292]	; (800f8a0 <tcp_receive+0x88c>)
 800f77c:	8912      	ldrh	r2, [r2, #8]
 800f77e:	4611      	mov	r1, r2
 800f780:	4618      	mov	r0, r3
 800f782:	f7fb fef3 	bl	800b56c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f786:	4b46      	ldr	r3, [pc, #280]	; (800f8a0 <tcp_receive+0x88c>)
 800f788:	891c      	ldrh	r4, [r3, #8]
 800f78a:	4b45      	ldr	r3, [pc, #276]	; (800f8a0 <tcp_receive+0x88c>)
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	899b      	ldrh	r3, [r3, #12]
 800f790:	b29b      	uxth	r3, r3
 800f792:	4618      	mov	r0, r3
 800f794:	f7fa fc72 	bl	800a07c <lwip_htons>
 800f798:	4603      	mov	r3, r0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <tcp_receive+0x794>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	e000      	b.n	800f7aa <tcp_receive+0x796>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4423      	add	r3, r4
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	4b3d      	ldr	r3, [pc, #244]	; (800f8a4 <tcp_receive+0x890>)
 800f7b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f7b2:	4b3c      	ldr	r3, [pc, #240]	; (800f8a4 <tcp_receive+0x890>)
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4b38      	ldr	r3, [pc, #224]	; (800f89c <tcp_receive+0x888>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	441a      	add	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7c6:	440b      	add	r3, r1
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d006      	beq.n	800f7da <tcp_receive+0x7c6>
 800f7cc:	4b36      	ldr	r3, [pc, #216]	; (800f8a8 <tcp_receive+0x894>)
 800f7ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f7d2:	4936      	ldr	r1, [pc, #216]	; (800f8ac <tcp_receive+0x898>)
 800f7d4:	4836      	ldr	r0, [pc, #216]	; (800f8b0 <tcp_receive+0x89c>)
 800f7d6:	f007 fe0b 	bl	80173f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f000 80e7 	beq.w	800f9b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f7e4:	4b2e      	ldr	r3, [pc, #184]	; (800f8a0 <tcp_receive+0x88c>)
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	899b      	ldrh	r3, [r3, #12]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fa fc45 	bl	800a07c <lwip_htons>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d010      	beq.n	800f820 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f7fe:	e00a      	b.n	800f816 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f804:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f7fd fcc4 	bl	800d19e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1f0      	bne.n	800f800 <tcp_receive+0x7ec>
 800f81e:	e0c8      	b.n	800f9b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f824:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f826:	e052      	b.n	800f8ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4618      	mov	r0, r3
 800f832:	f7fa fc23 	bl	800a07c <lwip_htons>
 800f836:	4603      	mov	r3, r0
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	f003 0301 	and.w	r3, r3, #1
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d03d      	beq.n	800f8be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f842:	4b17      	ldr	r3, [pc, #92]	; (800f8a0 <tcp_receive+0x88c>)
 800f844:	68db      	ldr	r3, [r3, #12]
 800f846:	899b      	ldrh	r3, [r3, #12]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fa fc16 	bl	800a07c <lwip_htons>
 800f850:	4603      	mov	r3, r0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d130      	bne.n	800f8be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f85c:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <tcp_receive+0x88c>)
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	899b      	ldrh	r3, [r3, #12]
 800f862:	b29c      	uxth	r4, r3
 800f864:	2001      	movs	r0, #1
 800f866:	f7fa fc09 	bl	800a07c <lwip_htons>
 800f86a:	4603      	mov	r3, r0
 800f86c:	461a      	mov	r2, r3
 800f86e:	4b0c      	ldr	r3, [pc, #48]	; (800f8a0 <tcp_receive+0x88c>)
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	4322      	orrs	r2, r4
 800f874:	b292      	uxth	r2, r2
 800f876:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f878:	4b09      	ldr	r3, [pc, #36]	; (800f8a0 <tcp_receive+0x88c>)
 800f87a:	891c      	ldrh	r4, [r3, #8]
 800f87c:	4b08      	ldr	r3, [pc, #32]	; (800f8a0 <tcp_receive+0x88c>)
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	b29b      	uxth	r3, r3
 800f884:	4618      	mov	r0, r3
 800f886:	f7fa fbf9 	bl	800a07c <lwip_htons>
 800f88a:	4603      	mov	r3, r0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f003 0303 	and.w	r3, r3, #3
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00e      	beq.n	800f8b4 <tcp_receive+0x8a0>
 800f896:	2301      	movs	r3, #1
 800f898:	e00d      	b.n	800f8b6 <tcp_receive+0x8a2>
 800f89a:	bf00      	nop
 800f89c:	20010954 	.word	0x20010954
 800f8a0:	20010934 	.word	0x20010934
 800f8a4:	2001095e 	.word	0x2001095e
 800f8a8:	0801a0d4 	.word	0x0801a0d4
 800f8ac:	0801a47c 	.word	0x0801a47c
 800f8b0:	0801a120 	.word	0x0801a120
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4423      	add	r3, r4
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	4b98      	ldr	r3, [pc, #608]	; (800fb1c <tcp_receive+0xb08>)
 800f8bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f8c8:	6938      	ldr	r0, [r7, #16]
 800f8ca:	f7fd fc68 	bl	800d19e <tcp_seg_free>
            while (next &&
 800f8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00e      	beq.n	800f8f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f8d4:	4b91      	ldr	r3, [pc, #580]	; (800fb1c <tcp_receive+0xb08>)
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b91      	ldr	r3, [pc, #580]	; (800fb20 <tcp_receive+0xb0c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	441a      	add	r2, r3
 800f8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8e8:	8909      	ldrh	r1, [r1, #8]
 800f8ea:	440b      	add	r3, r1
 800f8ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	da9a      	bge.n	800f828 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d059      	beq.n	800f9ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f8f8:	4b88      	ldr	r3, [pc, #544]	; (800fb1c <tcp_receive+0xb08>)
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	4b88      	ldr	r3, [pc, #544]	; (800fb20 <tcp_receive+0xb0c>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	441a      	add	r2, r3
 800f904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dd4d      	ble.n	800f9ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	b29a      	uxth	r2, r3
 800f918:	4b81      	ldr	r3, [pc, #516]	; (800fb20 <tcp_receive+0xb0c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	b29a      	uxth	r2, r3
 800f922:	4b80      	ldr	r3, [pc, #512]	; (800fb24 <tcp_receive+0xb10>)
 800f924:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f926:	4b7f      	ldr	r3, [pc, #508]	; (800fb24 <tcp_receive+0xb10>)
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	899b      	ldrh	r3, [r3, #12]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fa fba4 	bl	800a07c <lwip_htons>
 800f934:	4603      	mov	r3, r0
 800f936:	b2db      	uxtb	r3, r3
 800f938:	f003 0302 	and.w	r3, r3, #2
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <tcp_receive+0x938>
                inseg.len -= 1;
 800f940:	4b78      	ldr	r3, [pc, #480]	; (800fb24 <tcp_receive+0xb10>)
 800f942:	891b      	ldrh	r3, [r3, #8]
 800f944:	3b01      	subs	r3, #1
 800f946:	b29a      	uxth	r2, r3
 800f948:	4b76      	ldr	r3, [pc, #472]	; (800fb24 <tcp_receive+0xb10>)
 800f94a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f94c:	4b75      	ldr	r3, [pc, #468]	; (800fb24 <tcp_receive+0xb10>)
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	4a74      	ldr	r2, [pc, #464]	; (800fb24 <tcp_receive+0xb10>)
 800f952:	8912      	ldrh	r2, [r2, #8]
 800f954:	4611      	mov	r1, r2
 800f956:	4618      	mov	r0, r3
 800f958:	f7fb fe08 	bl	800b56c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f95c:	4b71      	ldr	r3, [pc, #452]	; (800fb24 <tcp_receive+0xb10>)
 800f95e:	891c      	ldrh	r4, [r3, #8]
 800f960:	4b70      	ldr	r3, [pc, #448]	; (800fb24 <tcp_receive+0xb10>)
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	899b      	ldrh	r3, [r3, #12]
 800f966:	b29b      	uxth	r3, r3
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fa fb87 	bl	800a07c <lwip_htons>
 800f96e:	4603      	mov	r3, r0
 800f970:	b2db      	uxtb	r3, r3
 800f972:	f003 0303 	and.w	r3, r3, #3
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <tcp_receive+0x96a>
 800f97a:	2301      	movs	r3, #1
 800f97c:	e000      	b.n	800f980 <tcp_receive+0x96c>
 800f97e:	2300      	movs	r3, #0
 800f980:	4423      	add	r3, r4
 800f982:	b29a      	uxth	r2, r3
 800f984:	4b65      	ldr	r3, [pc, #404]	; (800fb1c <tcp_receive+0xb08>)
 800f986:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f988:	4b64      	ldr	r3, [pc, #400]	; (800fb1c <tcp_receive+0xb08>)
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	461a      	mov	r2, r3
 800f98e:	4b64      	ldr	r3, [pc, #400]	; (800fb20 <tcp_receive+0xb0c>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	441a      	add	r2, r3
 800f994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d006      	beq.n	800f9ac <tcp_receive+0x998>
 800f99e:	4b62      	ldr	r3, [pc, #392]	; (800fb28 <tcp_receive+0xb14>)
 800f9a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f9a4:	4961      	ldr	r1, [pc, #388]	; (800fb2c <tcp_receive+0xb18>)
 800f9a6:	4862      	ldr	r0, [pc, #392]	; (800fb30 <tcp_receive+0xb1c>)
 800f9a8:	f007 fd22 	bl	80173f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f9b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f9b2:	4b5a      	ldr	r3, [pc, #360]	; (800fb1c <tcp_receive+0xb08>)
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	4b59      	ldr	r3, [pc, #356]	; (800fb20 <tcp_receive+0xb0c>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	441a      	add	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9c6:	4b55      	ldr	r3, [pc, #340]	; (800fb1c <tcp_receive+0xb08>)
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d206      	bcs.n	800f9dc <tcp_receive+0x9c8>
 800f9ce:	4b56      	ldr	r3, [pc, #344]	; (800fb28 <tcp_receive+0xb14>)
 800f9d0:	f240 6207 	movw	r2, #1543	; 0x607
 800f9d4:	4957      	ldr	r1, [pc, #348]	; (800fb34 <tcp_receive+0xb20>)
 800f9d6:	4856      	ldr	r0, [pc, #344]	; (800fb30 <tcp_receive+0xb1c>)
 800f9d8:	f007 fd0a 	bl	80173f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9e0:	4b4e      	ldr	r3, [pc, #312]	; (800fb1c <tcp_receive+0xb08>)
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	1ad3      	subs	r3, r2, r3
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7fc feb1 	bl	800c754 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f9f2:	4b4c      	ldr	r3, [pc, #304]	; (800fb24 <tcp_receive+0xb10>)
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	891b      	ldrh	r3, [r3, #8]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d006      	beq.n	800fa0a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f9fc:	4b49      	ldr	r3, [pc, #292]	; (800fb24 <tcp_receive+0xb10>)
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	4a4d      	ldr	r2, [pc, #308]	; (800fb38 <tcp_receive+0xb24>)
 800fa02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fa04:	4b47      	ldr	r3, [pc, #284]	; (800fb24 <tcp_receive+0xb10>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa0a:	4b46      	ldr	r3, [pc, #280]	; (800fb24 <tcp_receive+0xb10>)
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fa fb32 	bl	800a07c <lwip_htons>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f000 80b8 	beq.w	800fb96 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fa26:	4b45      	ldr	r3, [pc, #276]	; (800fb3c <tcp_receive+0xb28>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	f043 0320 	orr.w	r3, r3, #32
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	4b42      	ldr	r3, [pc, #264]	; (800fb3c <tcp_receive+0xb28>)
 800fa32:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fa34:	e0af      	b.n	800fb96 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	4a36      	ldr	r2, [pc, #216]	; (800fb20 <tcp_receive+0xb0c>)
 800fa46:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	891b      	ldrh	r3, [r3, #8]
 800fa4c:	461c      	mov	r4, r3
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	899b      	ldrh	r3, [r3, #12]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fa fb10 	bl	800a07c <lwip_htons>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	f003 0303 	and.w	r3, r3, #3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <tcp_receive+0xa58>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e000      	b.n	800fa6e <tcp_receive+0xa5a>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	191a      	adds	r2, r3, r4
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	441a      	add	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa7e:	461c      	mov	r4, r3
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	891b      	ldrh	r3, [r3, #8]
 800fa84:	461d      	mov	r5, r3
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	899b      	ldrh	r3, [r3, #12]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fa faf4 	bl	800a07c <lwip_htons>
 800fa94:	4603      	mov	r3, r0
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	f003 0303 	and.w	r3, r3, #3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <tcp_receive+0xa90>
 800faa0:	2301      	movs	r3, #1
 800faa2:	e000      	b.n	800faa6 <tcp_receive+0xa92>
 800faa4:	2300      	movs	r3, #0
 800faa6:	442b      	add	r3, r5
 800faa8:	429c      	cmp	r4, r3
 800faaa:	d206      	bcs.n	800faba <tcp_receive+0xaa6>
 800faac:	4b1e      	ldr	r3, [pc, #120]	; (800fb28 <tcp_receive+0xb14>)
 800faae:	f240 622b 	movw	r2, #1579	; 0x62b
 800fab2:	4923      	ldr	r1, [pc, #140]	; (800fb40 <tcp_receive+0xb2c>)
 800fab4:	481e      	ldr	r0, [pc, #120]	; (800fb30 <tcp_receive+0xb1c>)
 800fab6:	f007 fc9b 	bl	80173f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	891b      	ldrh	r3, [r3, #8]
 800fabe:	461c      	mov	r4, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	899b      	ldrh	r3, [r3, #12]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fa fad7 	bl	800a07c <lwip_htons>
 800face:	4603      	mov	r3, r0
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	f003 0303 	and.w	r3, r3, #3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <tcp_receive+0xaca>
 800fada:	2301      	movs	r3, #1
 800fadc:	e000      	b.n	800fae0 <tcp_receive+0xacc>
 800fade:	2300      	movs	r3, #0
 800fae0:	1919      	adds	r1, r3, r4
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fae6:	b28b      	uxth	r3, r1
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7fc fe2f 	bl	800c754 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	891b      	ldrh	r3, [r3, #8]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d028      	beq.n	800fb52 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fb00:	4b0d      	ldr	r3, [pc, #52]	; (800fb38 <tcp_receive+0xb24>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d01d      	beq.n	800fb44 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fb08:	4b0b      	ldr	r3, [pc, #44]	; (800fb38 <tcp_receive+0xb24>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f7fb ff7e 	bl	800ba14 <pbuf_cat>
 800fb18:	e018      	b.n	800fb4c <tcp_receive+0xb38>
 800fb1a:	bf00      	nop
 800fb1c:	2001095e 	.word	0x2001095e
 800fb20:	20010954 	.word	0x20010954
 800fb24:	20010934 	.word	0x20010934
 800fb28:	0801a0d4 	.word	0x0801a0d4
 800fb2c:	0801a4b4 	.word	0x0801a4b4
 800fb30:	0801a120 	.word	0x0801a120
 800fb34:	0801a4f0 	.word	0x0801a4f0
 800fb38:	20010964 	.word	0x20010964
 800fb3c:	20010961 	.word	0x20010961
 800fb40:	0801a510 	.word	0x0801a510
            } else {
              recv_data = cseg->p;
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	4a70      	ldr	r2, [pc, #448]	; (800fd0c <tcp_receive+0xcf8>)
 800fb4a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	899b      	ldrh	r3, [r3, #12]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fa fa8e 	bl	800a07c <lwip_htons>
 800fb60:	4603      	mov	r3, r0
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00d      	beq.n	800fb88 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fb6c:	4b68      	ldr	r3, [pc, #416]	; (800fd10 <tcp_receive+0xcfc>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	f043 0320 	orr.w	r3, r3, #32
 800fb74:	b2da      	uxtb	r2, r3
 800fb76:	4b66      	ldr	r3, [pc, #408]	; (800fd10 <tcp_receive+0xcfc>)
 800fb78:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	7d1b      	ldrb	r3, [r3, #20]
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d102      	bne.n	800fb88 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2207      	movs	r2, #7
 800fb86:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fb90:	68b8      	ldr	r0, [r7, #8]
 800fb92:	f7fd fb04 	bl	800d19e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d008      	beq.n	800fbb0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	f43f af43 	beq.w	800fa36 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	8b5b      	ldrh	r3, [r3, #26]
 800fbb4:	f003 0301 	and.w	r3, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00e      	beq.n	800fbda <tcp_receive+0xbc6>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	8b5b      	ldrh	r3, [r3, #26]
 800fbc0:	f023 0301 	bic.w	r3, r3, #1
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	835a      	strh	r2, [r3, #26]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	8b5b      	ldrh	r3, [r3, #26]
 800fbce:	f043 0302 	orr.w	r3, r3, #2
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fbd8:	e188      	b.n	800feec <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	8b5b      	ldrh	r3, [r3, #26]
 800fbde:	f043 0301 	orr.w	r3, r3, #1
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fbe8:	e180      	b.n	800feec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fbf2:	4848      	ldr	r0, [pc, #288]	; (800fd14 <tcp_receive+0xd00>)
 800fbf4:	f7fd faec 	bl	800d1d0 <tcp_seg_copy>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	675a      	str	r2, [r3, #116]	; 0x74
 800fbfe:	e16d      	b.n	800fedc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc08:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc0a:	e157      	b.n	800febc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	4b41      	ldr	r3, [pc, #260]	; (800fd18 <tcp_receive+0xd04>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d11d      	bne.n	800fc56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fc1a:	4b3e      	ldr	r3, [pc, #248]	; (800fd14 <tcp_receive+0xd00>)
 800fc1c:	891a      	ldrh	r2, [r3, #8]
 800fc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc20:	891b      	ldrh	r3, [r3, #8]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	f240 814f 	bls.w	800fec6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc28:	483a      	ldr	r0, [pc, #232]	; (800fd14 <tcp_receive+0xd00>)
 800fc2a:	f7fd fad1 	bl	800d1d0 <tcp_seg_copy>
 800fc2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 8149 	beq.w	800feca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d003      	beq.n	800fc46 <tcp_receive+0xc32>
                    prev->next = cseg;
 800fc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	e002      	b.n	800fc4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fc4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc4e:	6978      	ldr	r0, [r7, #20]
 800fc50:	f7ff f8dc 	bl	800ee0c <tcp_oos_insert_segment>
                }
                break;
 800fc54:	e139      	b.n	800feca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d117      	bne.n	800fc8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fc5c:	4b2e      	ldr	r3, [pc, #184]	; (800fd18 <tcp_receive+0xd04>)
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	1ad3      	subs	r3, r2, r3
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	da57      	bge.n	800fd1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc6c:	4829      	ldr	r0, [pc, #164]	; (800fd14 <tcp_receive+0xd00>)
 800fc6e:	f7fd faaf 	bl	800d1d0 <tcp_seg_copy>
 800fc72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 8129 	beq.w	800fece <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	69ba      	ldr	r2, [r7, #24]
 800fc80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fc82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc84:	69b8      	ldr	r0, [r7, #24]
 800fc86:	f7ff f8c1 	bl	800ee0c <tcp_oos_insert_segment>
                  }
                  break;
 800fc8a:	e120      	b.n	800fece <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fc8c:	4b22      	ldr	r3, [pc, #136]	; (800fd18 <tcp_receive+0xd04>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	db3e      	blt.n	800fd1c <tcp_receive+0xd08>
 800fc9e:	4b1e      	ldr	r3, [pc, #120]	; (800fd18 <tcp_receive+0xd04>)
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	3301      	adds	r3, #1
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	dc35      	bgt.n	800fd1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fcb0:	4818      	ldr	r0, [pc, #96]	; (800fd14 <tcp_receive+0xd00>)
 800fcb2:	f7fd fa8d 	bl	800d1d0 <tcp_seg_copy>
 800fcb6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f000 8109 	beq.w	800fed2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcc8:	8912      	ldrh	r2, [r2, #8]
 800fcca:	441a      	add	r2, r3
 800fccc:	4b12      	ldr	r3, [pc, #72]	; (800fd18 <tcp_receive+0xd04>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	dd12      	ble.n	800fcfc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fcd6:	4b10      	ldr	r3, [pc, #64]	; (800fd18 <tcp_receive+0xd04>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcee:	685a      	ldr	r2, [r3, #4]
 800fcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf2:	891b      	ldrh	r3, [r3, #8]
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	f7fb fc38 	bl	800b56c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fcfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fd02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd04:	69f8      	ldr	r0, [r7, #28]
 800fd06:	f7ff f881 	bl	800ee0c <tcp_oos_insert_segment>
                  }
                  break;
 800fd0a:	e0e2      	b.n	800fed2 <tcp_receive+0xebe>
 800fd0c:	20010964 	.word	0x20010964
 800fd10:	20010961 	.word	0x20010961
 800fd14:	20010934 	.word	0x20010934
 800fd18:	20010954 	.word	0x20010954
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 80c6 	bne.w	800feb6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fd2a:	4b80      	ldr	r3, [pc, #512]	; (800ff2c <tcp_receive+0xf18>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f340 80bd 	ble.w	800feb6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fa f999 	bl	800a07c <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f040 80bf 	bne.w	800fed6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fd58:	4875      	ldr	r0, [pc, #468]	; (800ff30 <tcp_receive+0xf1c>)
 800fd5a:	f7fd fa39 	bl	800d1d0 <tcp_seg_copy>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f000 80b6 	beq.w	800feda <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd76:	8912      	ldrh	r2, [r2, #8]
 800fd78:	441a      	add	r2, r3
 800fd7a:	4b6c      	ldr	r3, [pc, #432]	; (800ff2c <tcp_receive+0xf18>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dd12      	ble.n	800fdaa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fd84:	4b69      	ldr	r3, [pc, #420]	; (800ff2c <tcp_receive+0xf18>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	1ad3      	subs	r3, r2, r3
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	685a      	ldr	r2, [r3, #4]
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	891b      	ldrh	r3, [r3, #8]
 800fda2:	4619      	mov	r1, r3
 800fda4:	4610      	mov	r0, r2
 800fda6:	f7fb fbe1 	bl	800b56c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fdaa:	4b62      	ldr	r3, [pc, #392]	; (800ff34 <tcp_receive+0xf20>)
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4b5e      	ldr	r3, [pc, #376]	; (800ff2c <tcp_receive+0xf18>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	441a      	add	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdba:	6879      	ldr	r1, [r7, #4]
 800fdbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdbe:	440b      	add	r3, r1
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f340 8089 	ble.w	800feda <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	899b      	ldrh	r3, [r3, #12]
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fa f952 	bl	800a07c <lwip_htons>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d022      	beq.n	800fe2a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	899b      	ldrh	r3, [r3, #12]
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	b21b      	sxth	r3, r3
 800fdf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fdf4:	b21c      	sxth	r4, r3
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	899b      	ldrh	r3, [r3, #12]
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fa f93b 	bl	800a07c <lwip_htons>
 800fe06:	4603      	mov	r3, r0
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fa f932 	bl	800a07c <lwip_htons>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	b21b      	sxth	r3, r3
 800fe1c:	4323      	orrs	r3, r4
 800fe1e:	b21a      	sxth	r2, r3
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	b292      	uxth	r2, r2
 800fe28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe34:	4413      	add	r3, r2
 800fe36:	b299      	uxth	r1, r3
 800fe38:	4b3c      	ldr	r3, [pc, #240]	; (800ff2c <tcp_receive+0xf18>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	1a8a      	subs	r2, r1, r2
 800fe44:	b292      	uxth	r2, r2
 800fe46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	891b      	ldrh	r3, [r3, #8]
 800fe54:	4619      	mov	r1, r3
 800fe56:	4610      	mov	r0, r2
 800fe58:	f7fb fb88 	bl	800b56c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	891c      	ldrh	r4, [r3, #8]
 800fe62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	899b      	ldrh	r3, [r3, #12]
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fa f905 	bl	800a07c <lwip_htons>
 800fe72:	4603      	mov	r3, r0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	f003 0303 	and.w	r3, r3, #3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <tcp_receive+0xe6e>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <tcp_receive+0xe70>
 800fe82:	2300      	movs	r3, #0
 800fe84:	4423      	add	r3, r4
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	4b2a      	ldr	r3, [pc, #168]	; (800ff34 <tcp_receive+0xf20>)
 800fe8a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fe8c:	4b29      	ldr	r3, [pc, #164]	; (800ff34 <tcp_receive+0xf20>)
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	461a      	mov	r2, r3
 800fe92:	4b26      	ldr	r3, [pc, #152]	; (800ff2c <tcp_receive+0xf18>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	441a      	add	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fea0:	440b      	add	r3, r1
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d019      	beq.n	800feda <tcp_receive+0xec6>
 800fea6:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <tcp_receive+0xf24>)
 800fea8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800feac:	4923      	ldr	r1, [pc, #140]	; (800ff3c <tcp_receive+0xf28>)
 800feae:	4824      	ldr	r0, [pc, #144]	; (800ff40 <tcp_receive+0xf2c>)
 800feb0:	f007 fa9e 	bl	80173f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800feb4:	e011      	b.n	800feda <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	63bb      	str	r3, [r7, #56]	; 0x38
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f47f aea4 	bne.w	800fc0c <tcp_receive+0xbf8>
 800fec4:	e00a      	b.n	800fedc <tcp_receive+0xec8>
                break;
 800fec6:	bf00      	nop
 800fec8:	e008      	b.n	800fedc <tcp_receive+0xec8>
                break;
 800feca:	bf00      	nop
 800fecc:	e006      	b.n	800fedc <tcp_receive+0xec8>
                  break;
 800fece:	bf00      	nop
 800fed0:	e004      	b.n	800fedc <tcp_receive+0xec8>
                  break;
 800fed2:	bf00      	nop
 800fed4:	e002      	b.n	800fedc <tcp_receive+0xec8>
                  break;
 800fed6:	bf00      	nop
 800fed8:	e000      	b.n	800fedc <tcp_receive+0xec8>
                break;
 800feda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f001 fe8b 	bl	8011bf8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fee2:	e003      	b.n	800feec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f001 fe87 	bl	8011bf8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800feea:	e01a      	b.n	800ff22 <tcp_receive+0xf0e>
 800feec:	e019      	b.n	800ff22 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800feee:	4b0f      	ldr	r3, [pc, #60]	; (800ff2c <tcp_receive+0xf18>)
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	db0a      	blt.n	800ff12 <tcp_receive+0xefe>
 800fefc:	4b0b      	ldr	r3, [pc, #44]	; (800ff2c <tcp_receive+0xf18>)
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff08:	440b      	add	r3, r1
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	dd07      	ble.n	800ff22 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	8b5b      	ldrh	r3, [r3, #26]
 800ff16:	f043 0302 	orr.w	r3, r3, #2
 800ff1a:	b29a      	uxth	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ff20:	e7ff      	b.n	800ff22 <tcp_receive+0xf0e>
 800ff22:	bf00      	nop
 800ff24:	3750      	adds	r7, #80	; 0x50
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bdb0      	pop	{r4, r5, r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20010954 	.word	0x20010954
 800ff30:	20010934 	.word	0x20010934
 800ff34:	2001095e 	.word	0x2001095e
 800ff38:	0801a0d4 	.word	0x0801a0d4
 800ff3c:	0801a47c 	.word	0x0801a47c
 800ff40:	0801a120 	.word	0x0801a120

0800ff44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ff4a:	4b15      	ldr	r3, [pc, #84]	; (800ffa0 <tcp_get_next_optbyte+0x5c>)
 800ff4c:	881b      	ldrh	r3, [r3, #0]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	b291      	uxth	r1, r2
 800ff52:	4a13      	ldr	r2, [pc, #76]	; (800ffa0 <tcp_get_next_optbyte+0x5c>)
 800ff54:	8011      	strh	r1, [r2, #0]
 800ff56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ff58:	4b12      	ldr	r3, [pc, #72]	; (800ffa4 <tcp_get_next_optbyte+0x60>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d004      	beq.n	800ff6a <tcp_get_next_optbyte+0x26>
 800ff60:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <tcp_get_next_optbyte+0x64>)
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	88fa      	ldrh	r2, [r7, #6]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d208      	bcs.n	800ff7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ff6a:	4b10      	ldr	r3, [pc, #64]	; (800ffac <tcp_get_next_optbyte+0x68>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	3314      	adds	r3, #20
 800ff70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ff72:	88fb      	ldrh	r3, [r7, #6]
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	4413      	add	r3, r2
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	e00b      	b.n	800ff94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ff7c:	88fb      	ldrh	r3, [r7, #6]
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <tcp_get_next_optbyte+0x64>)
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ff8a:	4b06      	ldr	r3, [pc, #24]	; (800ffa4 <tcp_get_next_optbyte+0x60>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	797b      	ldrb	r3, [r7, #5]
 800ff90:	4413      	add	r3, r2
 800ff92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	370c      	adds	r7, #12
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	20010950 	.word	0x20010950
 800ffa4:	2001094c 	.word	0x2001094c
 800ffa8:	2001094a 	.word	0x2001094a
 800ffac:	20010944 	.word	0x20010944

0800ffb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d106      	bne.n	800ffcc <tcp_parseopt+0x1c>
 800ffbe:	4b32      	ldr	r3, [pc, #200]	; (8010088 <tcp_parseopt+0xd8>)
 800ffc0:	f240 727d 	movw	r2, #1917	; 0x77d
 800ffc4:	4931      	ldr	r1, [pc, #196]	; (801008c <tcp_parseopt+0xdc>)
 800ffc6:	4832      	ldr	r0, [pc, #200]	; (8010090 <tcp_parseopt+0xe0>)
 800ffc8:	f007 fa12 	bl	80173f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ffcc:	4b31      	ldr	r3, [pc, #196]	; (8010094 <tcp_parseopt+0xe4>)
 800ffce:	881b      	ldrh	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d055      	beq.n	8010080 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffd4:	4b30      	ldr	r3, [pc, #192]	; (8010098 <tcp_parseopt+0xe8>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	801a      	strh	r2, [r3, #0]
 800ffda:	e045      	b.n	8010068 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ffdc:	f7ff ffb2 	bl	800ff44 <tcp_get_next_optbyte>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	d006      	beq.n	800fff8 <tcp_parseopt+0x48>
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	dc2b      	bgt.n	8010046 <tcp_parseopt+0x96>
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d041      	beq.n	8010076 <tcp_parseopt+0xc6>
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d127      	bne.n	8010046 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fff6:	e037      	b.n	8010068 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fff8:	f7ff ffa4 	bl	800ff44 <tcp_get_next_optbyte>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b04      	cmp	r3, #4
 8010000:	d13b      	bne.n	801007a <tcp_parseopt+0xca>
 8010002:	4b25      	ldr	r3, [pc, #148]	; (8010098 <tcp_parseopt+0xe8>)
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	3301      	adds	r3, #1
 8010008:	4a22      	ldr	r2, [pc, #136]	; (8010094 <tcp_parseopt+0xe4>)
 801000a:	8812      	ldrh	r2, [r2, #0]
 801000c:	4293      	cmp	r3, r2
 801000e:	da34      	bge.n	801007a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010010:	f7ff ff98 	bl	800ff44 <tcp_get_next_optbyte>
 8010014:	4603      	mov	r3, r0
 8010016:	b29b      	uxth	r3, r3
 8010018:	021b      	lsls	r3, r3, #8
 801001a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801001c:	f7ff ff92 	bl	800ff44 <tcp_get_next_optbyte>
 8010020:	4603      	mov	r3, r0
 8010022:	b29a      	uxth	r2, r3
 8010024:	89bb      	ldrh	r3, [r7, #12]
 8010026:	4313      	orrs	r3, r2
 8010028:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801002a:	89bb      	ldrh	r3, [r7, #12]
 801002c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010030:	d804      	bhi.n	801003c <tcp_parseopt+0x8c>
 8010032:	89bb      	ldrh	r3, [r7, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <tcp_parseopt+0x8c>
 8010038:	89ba      	ldrh	r2, [r7, #12]
 801003a:	e001      	b.n	8010040 <tcp_parseopt+0x90>
 801003c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010044:	e010      	b.n	8010068 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010046:	f7ff ff7d 	bl	800ff44 <tcp_get_next_optbyte>
 801004a:	4603      	mov	r3, r0
 801004c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801004e:	7afb      	ldrb	r3, [r7, #11]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d914      	bls.n	801007e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010054:	7afb      	ldrb	r3, [r7, #11]
 8010056:	b29a      	uxth	r2, r3
 8010058:	4b0f      	ldr	r3, [pc, #60]	; (8010098 <tcp_parseopt+0xe8>)
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	4413      	add	r3, r2
 801005e:	b29b      	uxth	r3, r3
 8010060:	3b02      	subs	r3, #2
 8010062:	b29a      	uxth	r2, r3
 8010064:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <tcp_parseopt+0xe8>)
 8010066:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <tcp_parseopt+0xe8>)
 801006a:	881a      	ldrh	r2, [r3, #0]
 801006c:	4b09      	ldr	r3, [pc, #36]	; (8010094 <tcp_parseopt+0xe4>)
 801006e:	881b      	ldrh	r3, [r3, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d3b3      	bcc.n	800ffdc <tcp_parseopt+0x2c>
 8010074:	e004      	b.n	8010080 <tcp_parseopt+0xd0>
          return;
 8010076:	bf00      	nop
 8010078:	e002      	b.n	8010080 <tcp_parseopt+0xd0>
            return;
 801007a:	bf00      	nop
 801007c:	e000      	b.n	8010080 <tcp_parseopt+0xd0>
            return;
 801007e:	bf00      	nop
      }
    }
  }
}
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	0801a0d4 	.word	0x0801a0d4
 801008c:	0801a538 	.word	0x0801a538
 8010090:	0801a120 	.word	0x0801a120
 8010094:	20010948 	.word	0x20010948
 8010098:	20010950 	.word	0x20010950

0801009c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801009c:	b480      	push	{r7}
 801009e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80100a0:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <tcp_trigger_input_pcb_close+0x1c>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f043 0310 	orr.w	r3, r3, #16
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	4b03      	ldr	r3, [pc, #12]	; (80100b8 <tcp_trigger_input_pcb_close+0x1c>)
 80100ac:	701a      	strb	r2, [r3, #0]
}
 80100ae:	bf00      	nop
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	20010961 	.word	0x20010961

080100bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00a      	beq.n	80100e4 <tcp_route+0x28>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	7a1b      	ldrb	r3, [r3, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d006      	beq.n	80100e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	7a1b      	ldrb	r3, [r3, #8]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fb f83e 	bl	800b15c <netif_get_by_index>
 80100e0:	4603      	mov	r3, r0
 80100e2:	e003      	b.n	80100ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f005 fca9 	bl	8015a3c <ip4_route>
 80100ea:	4603      	mov	r3, r0
  }
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3710      	adds	r7, #16
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b087      	sub	sp, #28
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	603b      	str	r3, [r7, #0]
 8010100:	4613      	mov	r3, r2
 8010102:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d105      	bne.n	8010116 <tcp_create_segment+0x22>
 801010a:	4b44      	ldr	r3, [pc, #272]	; (801021c <tcp_create_segment+0x128>)
 801010c:	22a3      	movs	r2, #163	; 0xa3
 801010e:	4944      	ldr	r1, [pc, #272]	; (8010220 <tcp_create_segment+0x12c>)
 8010110:	4844      	ldr	r0, [pc, #272]	; (8010224 <tcp_create_segment+0x130>)
 8010112:	f007 f96d 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d105      	bne.n	8010128 <tcp_create_segment+0x34>
 801011c:	4b3f      	ldr	r3, [pc, #252]	; (801021c <tcp_create_segment+0x128>)
 801011e:	22a4      	movs	r2, #164	; 0xa4
 8010120:	4941      	ldr	r1, [pc, #260]	; (8010228 <tcp_create_segment+0x134>)
 8010122:	4840      	ldr	r0, [pc, #256]	; (8010224 <tcp_create_segment+0x130>)
 8010124:	f007 f964 	bl	80173f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 0304 	and.w	r3, r3, #4
 8010134:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010136:	2003      	movs	r0, #3
 8010138:	f7fa fc78 	bl	800aa2c <memp_malloc>
 801013c:	6138      	str	r0, [r7, #16]
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d104      	bne.n	801014e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010144:	68b8      	ldr	r0, [r7, #8]
 8010146:	f7fb fb97 	bl	800b878 <pbuf_free>
    return NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	e061      	b.n	8010212 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010154:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2200      	movs	r2, #0
 801015a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	891a      	ldrh	r2, [r3, #8]
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	b29b      	uxth	r3, r3
 801016a:	429a      	cmp	r2, r3
 801016c:	d205      	bcs.n	801017a <tcp_create_segment+0x86>
 801016e:	4b2b      	ldr	r3, [pc, #172]	; (801021c <tcp_create_segment+0x128>)
 8010170:	22b0      	movs	r2, #176	; 0xb0
 8010172:	492e      	ldr	r1, [pc, #184]	; (801022c <tcp_create_segment+0x138>)
 8010174:	482b      	ldr	r0, [pc, #172]	; (8010224 <tcp_create_segment+0x130>)
 8010176:	f007 f93b 	bl	80173f0 <iprintf>
  seg->len = p->tot_len - optlen;
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	891a      	ldrh	r2, [r3, #8]
 801017e:	7dfb      	ldrb	r3, [r7, #23]
 8010180:	b29b      	uxth	r3, r3
 8010182:	1ad3      	subs	r3, r2, r3
 8010184:	b29a      	uxth	r2, r3
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801018a:	2114      	movs	r1, #20
 801018c:	68b8      	ldr	r0, [r7, #8]
 801018e:	f7fb fadd 	bl	800b74c <pbuf_add_header>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d004      	beq.n	80101a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010198:	6938      	ldr	r0, [r7, #16]
 801019a:	f7fd f800 	bl	800d19e <tcp_seg_free>
    return NULL;
 801019e:	2300      	movs	r3, #0
 80101a0:	e037      	b.n	8010212 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	8ada      	ldrh	r2, [r3, #22]
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	68dc      	ldr	r4, [r3, #12]
 80101b4:	4610      	mov	r0, r2
 80101b6:	f7f9 ff61 	bl	800a07c <lwip_htons>
 80101ba:	4603      	mov	r3, r0
 80101bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	8b1a      	ldrh	r2, [r3, #24]
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	68dc      	ldr	r4, [r3, #12]
 80101c6:	4610      	mov	r0, r2
 80101c8:	f7f9 ff58 	bl	800a07c <lwip_htons>
 80101cc:	4603      	mov	r3, r0
 80101ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	68dc      	ldr	r4, [r3, #12]
 80101d4:	6838      	ldr	r0, [r7, #0]
 80101d6:	f7f9 ff66 	bl	800a0a6 <lwip_htonl>
 80101da:	4603      	mov	r3, r0
 80101dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	089b      	lsrs	r3, r3, #2
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	3305      	adds	r3, #5
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	031b      	lsls	r3, r3, #12
 80101ec:	b29a      	uxth	r2, r3
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	4313      	orrs	r3, r2
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	68dc      	ldr	r4, [r3, #12]
 80101fa:	4610      	mov	r0, r2
 80101fc:	f7f9 ff3e 	bl	800a07c <lwip_htons>
 8010200:	4603      	mov	r3, r0
 8010202:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	2200      	movs	r2, #0
 801020a:	749a      	strb	r2, [r3, #18]
 801020c:	2200      	movs	r2, #0
 801020e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010210:	693b      	ldr	r3, [r7, #16]
}
 8010212:	4618      	mov	r0, r3
 8010214:	371c      	adds	r7, #28
 8010216:	46bd      	mov	sp, r7
 8010218:	bd90      	pop	{r4, r7, pc}
 801021a:	bf00      	nop
 801021c:	0801a554 	.word	0x0801a554
 8010220:	0801a588 	.word	0x0801a588
 8010224:	0801a5a8 	.word	0x0801a5a8
 8010228:	0801a5d0 	.word	0x0801a5d0
 801022c:	0801a5f4 	.word	0x0801a5f4

08010230 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af00      	add	r7, sp, #0
 8010236:	607b      	str	r3, [r7, #4]
 8010238:	4603      	mov	r3, r0
 801023a:	73fb      	strb	r3, [r7, #15]
 801023c:	460b      	mov	r3, r1
 801023e:	81bb      	strh	r3, [r7, #12]
 8010240:	4613      	mov	r3, r2
 8010242:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010244:	89bb      	ldrh	r3, [r7, #12]
 8010246:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d105      	bne.n	801025a <tcp_pbuf_prealloc+0x2a>
 801024e:	4b30      	ldr	r3, [pc, #192]	; (8010310 <tcp_pbuf_prealloc+0xe0>)
 8010250:	22e8      	movs	r2, #232	; 0xe8
 8010252:	4930      	ldr	r1, [pc, #192]	; (8010314 <tcp_pbuf_prealloc+0xe4>)
 8010254:	4830      	ldr	r0, [pc, #192]	; (8010318 <tcp_pbuf_prealloc+0xe8>)
 8010256:	f007 f8cb 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d105      	bne.n	801026c <tcp_pbuf_prealloc+0x3c>
 8010260:	4b2b      	ldr	r3, [pc, #172]	; (8010310 <tcp_pbuf_prealloc+0xe0>)
 8010262:	22e9      	movs	r2, #233	; 0xe9
 8010264:	492d      	ldr	r1, [pc, #180]	; (801031c <tcp_pbuf_prealloc+0xec>)
 8010266:	482c      	ldr	r0, [pc, #176]	; (8010318 <tcp_pbuf_prealloc+0xe8>)
 8010268:	f007 f8c2 	bl	80173f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801026c:	89ba      	ldrh	r2, [r7, #12]
 801026e:	897b      	ldrh	r3, [r7, #10]
 8010270:	429a      	cmp	r2, r3
 8010272:	d221      	bcs.n	80102b8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010274:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010278:	f003 0302 	and.w	r3, r3, #2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d111      	bne.n	80102a4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010280:	6a3b      	ldr	r3, [r7, #32]
 8010282:	8b5b      	ldrh	r3, [r3, #26]
 8010284:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010288:	2b00      	cmp	r3, #0
 801028a:	d115      	bne.n	80102b8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801028c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010290:	2b00      	cmp	r3, #0
 8010292:	d007      	beq.n	80102a4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801029c:	6a3b      	ldr	r3, [r7, #32]
 801029e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80102a4:	89bb      	ldrh	r3, [r7, #12]
 80102a6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80102aa:	f023 0203 	bic.w	r2, r3, #3
 80102ae:	897b      	ldrh	r3, [r7, #10]
 80102b0:	4293      	cmp	r3, r2
 80102b2:	bf28      	it	cs
 80102b4:	4613      	movcs	r3, r2
 80102b6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80102b8:	8af9      	ldrh	r1, [r7, #22]
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fa fff5 	bl	800b2b0 <pbuf_alloc>
 80102c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d101      	bne.n	80102d2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80102ce:	2300      	movs	r3, #0
 80102d0:	e019      	b.n	8010306 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d006      	beq.n	80102e8 <tcp_pbuf_prealloc+0xb8>
 80102da:	4b0d      	ldr	r3, [pc, #52]	; (8010310 <tcp_pbuf_prealloc+0xe0>)
 80102dc:	f240 120b 	movw	r2, #267	; 0x10b
 80102e0:	490f      	ldr	r1, [pc, #60]	; (8010320 <tcp_pbuf_prealloc+0xf0>)
 80102e2:	480d      	ldr	r0, [pc, #52]	; (8010318 <tcp_pbuf_prealloc+0xe8>)
 80102e4:	f007 f884 	bl	80173f0 <iprintf>
  *oversize = p->len - length;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	895a      	ldrh	r2, [r3, #10]
 80102ec:	89bb      	ldrh	r3, [r7, #12]
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	89ba      	ldrh	r2, [r7, #12]
 80102fa:	811a      	strh	r2, [r3, #8]
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	891a      	ldrh	r2, [r3, #8]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	815a      	strh	r2, [r3, #10]
  return p;
 8010304:	693b      	ldr	r3, [r7, #16]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3718      	adds	r7, #24
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	0801a554 	.word	0x0801a554
 8010314:	0801a60c 	.word	0x0801a60c
 8010318:	0801a5a8 	.word	0x0801a5a8
 801031c:	0801a630 	.word	0x0801a630
 8010320:	0801a650 	.word	0x0801a650

08010324 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	460b      	mov	r3, r1
 801032e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <tcp_write_checks+0x20>
 8010336:	4b33      	ldr	r3, [pc, #204]	; (8010404 <tcp_write_checks+0xe0>)
 8010338:	f240 1233 	movw	r2, #307	; 0x133
 801033c:	4932      	ldr	r1, [pc, #200]	; (8010408 <tcp_write_checks+0xe4>)
 801033e:	4833      	ldr	r0, [pc, #204]	; (801040c <tcp_write_checks+0xe8>)
 8010340:	f007 f856 	bl	80173f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	7d1b      	ldrb	r3, [r3, #20]
 8010348:	2b04      	cmp	r3, #4
 801034a:	d00e      	beq.n	801036a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010350:	2b07      	cmp	r3, #7
 8010352:	d00a      	beq.n	801036a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010358:	2b02      	cmp	r3, #2
 801035a:	d006      	beq.n	801036a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010360:	2b03      	cmp	r3, #3
 8010362:	d002      	beq.n	801036a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010364:	f06f 030a 	mvn.w	r3, #10
 8010368:	e048      	b.n	80103fc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801036a:	887b      	ldrh	r3, [r7, #2]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d101      	bne.n	8010374 <tcp_write_checks+0x50>
    return ERR_OK;
 8010370:	2300      	movs	r3, #0
 8010372:	e043      	b.n	80103fc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801037a:	887a      	ldrh	r2, [r7, #2]
 801037c:	429a      	cmp	r2, r3
 801037e:	d909      	bls.n	8010394 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8b5b      	ldrh	r3, [r3, #26]
 8010384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010388:	b29a      	uxth	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801038e:	f04f 33ff 	mov.w	r3, #4294967295
 8010392:	e033      	b.n	80103fc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801039a:	2b08      	cmp	r3, #8
 801039c:	d909      	bls.n	80103b2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8b5b      	ldrh	r3, [r3, #26]
 80103a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103a6:	b29a      	uxth	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80103ac:	f04f 33ff 	mov.w	r3, #4294967295
 80103b0:	e024      	b.n	80103fc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00f      	beq.n	80103dc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d11a      	bne.n	80103fa <tcp_write_checks+0xd6>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d116      	bne.n	80103fa <tcp_write_checks+0xd6>
 80103cc:	4b0d      	ldr	r3, [pc, #52]	; (8010404 <tcp_write_checks+0xe0>)
 80103ce:	f240 1255 	movw	r2, #341	; 0x155
 80103d2:	490f      	ldr	r1, [pc, #60]	; (8010410 <tcp_write_checks+0xec>)
 80103d4:	480d      	ldr	r0, [pc, #52]	; (801040c <tcp_write_checks+0xe8>)
 80103d6:	f007 f80b 	bl	80173f0 <iprintf>
 80103da:	e00e      	b.n	80103fa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d103      	bne.n	80103ec <tcp_write_checks+0xc8>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d006      	beq.n	80103fa <tcp_write_checks+0xd6>
 80103ec:	4b05      	ldr	r3, [pc, #20]	; (8010404 <tcp_write_checks+0xe0>)
 80103ee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80103f2:	4908      	ldr	r1, [pc, #32]	; (8010414 <tcp_write_checks+0xf0>)
 80103f4:	4805      	ldr	r0, [pc, #20]	; (801040c <tcp_write_checks+0xe8>)
 80103f6:	f006 fffb 	bl	80173f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	0801a554 	.word	0x0801a554
 8010408:	0801a664 	.word	0x0801a664
 801040c:	0801a5a8 	.word	0x0801a5a8
 8010410:	0801a684 	.word	0x0801a684
 8010414:	0801a6c0 	.word	0x0801a6c0

08010418 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010418:	b590      	push	{r4, r7, lr}
 801041a:	b09b      	sub	sp, #108	; 0x6c
 801041c:	af04      	add	r7, sp, #16
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	4611      	mov	r1, r2
 8010424:	461a      	mov	r2, r3
 8010426:	460b      	mov	r3, r1
 8010428:	80fb      	strh	r3, [r7, #6]
 801042a:	4613      	mov	r3, r2
 801042c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010432:	2300      	movs	r3, #0
 8010434:	653b      	str	r3, [r7, #80]	; 0x50
 8010436:	2300      	movs	r3, #0
 8010438:	64fb      	str	r3, [r7, #76]	; 0x4c
 801043a:	2300      	movs	r3, #0
 801043c:	64bb      	str	r3, [r7, #72]	; 0x48
 801043e:	2300      	movs	r3, #0
 8010440:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010442:	2300      	movs	r3, #0
 8010444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010448:	2300      	movs	r3, #0
 801044a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801044e:	2300      	movs	r3, #0
 8010450:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d109      	bne.n	8010474 <tcp_write+0x5c>
 8010460:	4ba4      	ldr	r3, [pc, #656]	; (80106f4 <tcp_write+0x2dc>)
 8010462:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010466:	49a4      	ldr	r1, [pc, #656]	; (80106f8 <tcp_write+0x2e0>)
 8010468:	48a4      	ldr	r0, [pc, #656]	; (80106fc <tcp_write+0x2e4>)
 801046a:	f006 ffc1 	bl	80173f0 <iprintf>
 801046e:	f06f 030f 	mvn.w	r3, #15
 8010472:	e32a      	b.n	8010aca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801047a:	085b      	lsrs	r3, r3, #1
 801047c:	b29a      	uxth	r2, r3
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010482:	4293      	cmp	r3, r2
 8010484:	bf28      	it	cs
 8010486:	4613      	movcs	r3, r2
 8010488:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801048a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801048c:	2b00      	cmp	r3, #0
 801048e:	d102      	bne.n	8010496 <tcp_write+0x7e>
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010494:	e000      	b.n	8010498 <tcp_write+0x80>
 8010496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010498:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d109      	bne.n	80104b4 <tcp_write+0x9c>
 80104a0:	4b94      	ldr	r3, [pc, #592]	; (80106f4 <tcp_write+0x2dc>)
 80104a2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80104a6:	4996      	ldr	r1, [pc, #600]	; (8010700 <tcp_write+0x2e8>)
 80104a8:	4894      	ldr	r0, [pc, #592]	; (80106fc <tcp_write+0x2e4>)
 80104aa:	f006 ffa1 	bl	80173f0 <iprintf>
 80104ae:	f06f 030f 	mvn.w	r3, #15
 80104b2:	e30a      	b.n	8010aca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80104b4:	88fb      	ldrh	r3, [r7, #6]
 80104b6:	4619      	mov	r1, r3
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f7ff ff33 	bl	8010324 <tcp_write_checks>
 80104be:	4603      	mov	r3, r0
 80104c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80104c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <tcp_write+0xba>
    return err;
 80104cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80104d0:	e2fb      	b.n	8010aca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80104dc:	2300      	movs	r3, #0
 80104de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 80f6 	beq.w	80106d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f0:	653b      	str	r3, [r7, #80]	; 0x50
 80104f2:	e002      	b.n	80104fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80104f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80104fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1f8      	bne.n	80104f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010504:	7a9b      	ldrb	r3, [r3, #10]
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	b29b      	uxth	r3, r3
 801050a:	f003 0304 	and.w	r3, r3, #4
 801050e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010510:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010514:	891b      	ldrh	r3, [r3, #8]
 8010516:	4619      	mov	r1, r3
 8010518:	8c3b      	ldrh	r3, [r7, #32]
 801051a:	440b      	add	r3, r1
 801051c:	429a      	cmp	r2, r3
 801051e:	da06      	bge.n	801052e <tcp_write+0x116>
 8010520:	4b74      	ldr	r3, [pc, #464]	; (80106f4 <tcp_write+0x2dc>)
 8010522:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010526:	4977      	ldr	r1, [pc, #476]	; (8010704 <tcp_write+0x2ec>)
 8010528:	4874      	ldr	r0, [pc, #464]	; (80106fc <tcp_write+0x2e4>)
 801052a:	f006 ff61 	bl	80173f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801052e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010530:	891a      	ldrh	r2, [r3, #8]
 8010532:	8c3b      	ldrh	r3, [r7, #32]
 8010534:	4413      	add	r3, r2
 8010536:	b29b      	uxth	r3, r3
 8010538:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010544:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010546:	8a7b      	ldrh	r3, [r7, #18]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d026      	beq.n	801059a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801054c:	8a7b      	ldrh	r3, [r7, #18]
 801054e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010550:	429a      	cmp	r2, r3
 8010552:	d206      	bcs.n	8010562 <tcp_write+0x14a>
 8010554:	4b67      	ldr	r3, [pc, #412]	; (80106f4 <tcp_write+0x2dc>)
 8010556:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801055a:	496b      	ldr	r1, [pc, #428]	; (8010708 <tcp_write+0x2f0>)
 801055c:	4867      	ldr	r0, [pc, #412]	; (80106fc <tcp_write+0x2e4>)
 801055e:	f006 ff47 	bl	80173f0 <iprintf>
      seg = last_unsent;
 8010562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010564:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010566:	8a7b      	ldrh	r3, [r7, #18]
 8010568:	88fa      	ldrh	r2, [r7, #6]
 801056a:	4293      	cmp	r3, r2
 801056c:	bf28      	it	cs
 801056e:	4613      	movcs	r3, r2
 8010570:	b29b      	uxth	r3, r3
 8010572:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010574:	4293      	cmp	r3, r2
 8010576:	bf28      	it	cs
 8010578:	4613      	movcs	r3, r2
 801057a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801057c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010582:	4413      	add	r3, r2
 8010584:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010588:	8a7a      	ldrh	r2, [r7, #18]
 801058a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	b29b      	uxth	r3, r3
 8010590:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010592:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801059a:	8a7b      	ldrh	r3, [r7, #18]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00b      	beq.n	80105b8 <tcp_write+0x1a0>
 80105a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105a4:	88fb      	ldrh	r3, [r7, #6]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d006      	beq.n	80105b8 <tcp_write+0x1a0>
 80105aa:	4b52      	ldr	r3, [pc, #328]	; (80106f4 <tcp_write+0x2dc>)
 80105ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105b0:	4956      	ldr	r1, [pc, #344]	; (801070c <tcp_write+0x2f4>)
 80105b2:	4852      	ldr	r0, [pc, #328]	; (80106fc <tcp_write+0x2e4>)
 80105b4:	f006 ff1c 	bl	80173f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80105b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105bc:	88fb      	ldrh	r3, [r7, #6]
 80105be:	429a      	cmp	r2, r3
 80105c0:	f080 8167 	bcs.w	8010892 <tcp_write+0x47a>
 80105c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	f000 8163 	beq.w	8010892 <tcp_write+0x47a>
 80105cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ce:	891b      	ldrh	r3, [r3, #8]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f000 815e 	beq.w	8010892 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80105d6:	88fa      	ldrh	r2, [r7, #6]
 80105d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105dc:	1ad2      	subs	r2, r2, r3
 80105de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105e0:	4293      	cmp	r3, r2
 80105e2:	bfa8      	it	ge
 80105e4:	4613      	movge	r3, r2
 80105e6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80105e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80105ec:	797b      	ldrb	r3, [r7, #5]
 80105ee:	f003 0301 	and.w	r3, r3, #1
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d027      	beq.n	8010646 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80105f6:	f107 0012 	add.w	r0, r7, #18
 80105fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105fc:	8bf9      	ldrh	r1, [r7, #30]
 80105fe:	2301      	movs	r3, #1
 8010600:	9302      	str	r3, [sp, #8]
 8010602:	797b      	ldrb	r3, [r7, #5]
 8010604:	9301      	str	r3, [sp, #4]
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	4603      	mov	r3, r0
 801060c:	2000      	movs	r0, #0
 801060e:	f7ff fe0f 	bl	8010230 <tcp_pbuf_prealloc>
 8010612:	6578      	str	r0, [r7, #84]	; 0x54
 8010614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 8225 	beq.w	8010a66 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801061c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801061e:	6858      	ldr	r0, [r3, #4]
 8010620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	4413      	add	r3, r2
 8010628:	8bfa      	ldrh	r2, [r7, #30]
 801062a:	4619      	mov	r1, r3
 801062c:	f007 f810 	bl	8017650 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010632:	f7fb f9af 	bl	800b994 <pbuf_clen>
 8010636:	4603      	mov	r3, r0
 8010638:	461a      	mov	r2, r3
 801063a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801063e:	4413      	add	r3, r2
 8010640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010644:	e041      	b.n	80106ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	637b      	str	r3, [r7, #52]	; 0x34
 801064c:	e002      	b.n	8010654 <tcp_write+0x23c>
 801064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	637b      	str	r3, [r7, #52]	; 0x34
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1f8      	bne.n	801064e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801065c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065e:	7b1b      	ldrb	r3, [r3, #12]
 8010660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d115      	bne.n	8010694 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801066e:	8952      	ldrh	r2, [r2, #10]
 8010670:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	429a      	cmp	r2, r3
 8010676:	d10d      	bne.n	8010694 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801067c:	2b00      	cmp	r3, #0
 801067e:	d006      	beq.n	801068e <tcp_write+0x276>
 8010680:	4b1c      	ldr	r3, [pc, #112]	; (80106f4 <tcp_write+0x2dc>)
 8010682:	f240 2231 	movw	r2, #561	; 0x231
 8010686:	4922      	ldr	r1, [pc, #136]	; (8010710 <tcp_write+0x2f8>)
 8010688:	481c      	ldr	r0, [pc, #112]	; (80106fc <tcp_write+0x2e4>)
 801068a:	f006 feb1 	bl	80173f0 <iprintf>
          extendlen = seglen;
 801068e:	8bfb      	ldrh	r3, [r7, #30]
 8010690:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010692:	e01a      	b.n	80106ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010694:	8bfb      	ldrh	r3, [r7, #30]
 8010696:	2201      	movs	r2, #1
 8010698:	4619      	mov	r1, r3
 801069a:	2000      	movs	r0, #0
 801069c:	f7fa fe08 	bl	800b2b0 <pbuf_alloc>
 80106a0:	6578      	str	r0, [r7, #84]	; 0x54
 80106a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f000 81e0 	beq.w	8010a6a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80106aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	441a      	add	r2, r3
 80106b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80106b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106b8:	f7fb f96c 	bl	800b994 <pbuf_clen>
 80106bc:	4603      	mov	r3, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80106c4:	4413      	add	r3, r2
 80106c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80106ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106ce:	8bfb      	ldrh	r3, [r7, #30]
 80106d0:	4413      	add	r3, r2
 80106d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80106d6:	e0dc      	b.n	8010892 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 80d7 	beq.w	8010892 <tcp_write+0x47a>
 80106e4:	4b03      	ldr	r3, [pc, #12]	; (80106f4 <tcp_write+0x2dc>)
 80106e6:	f240 224a 	movw	r2, #586	; 0x24a
 80106ea:	490a      	ldr	r1, [pc, #40]	; (8010714 <tcp_write+0x2fc>)
 80106ec:	4803      	ldr	r0, [pc, #12]	; (80106fc <tcp_write+0x2e4>)
 80106ee:	f006 fe7f 	bl	80173f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80106f2:	e0ce      	b.n	8010892 <tcp_write+0x47a>
 80106f4:	0801a554 	.word	0x0801a554
 80106f8:	0801a6f4 	.word	0x0801a6f4
 80106fc:	0801a5a8 	.word	0x0801a5a8
 8010700:	0801a70c 	.word	0x0801a70c
 8010704:	0801a740 	.word	0x0801a740
 8010708:	0801a758 	.word	0x0801a758
 801070c:	0801a778 	.word	0x0801a778
 8010710:	0801a798 	.word	0x0801a798
 8010714:	0801a7c4 	.word	0x0801a7c4
    struct pbuf *p;
    u16_t left = len - pos;
 8010718:	88fa      	ldrh	r2, [r7, #6]
 801071a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801071e:	1ad3      	subs	r3, r2, r3
 8010720:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010722:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010726:	b29b      	uxth	r3, r3
 8010728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801072e:	8b7a      	ldrh	r2, [r7, #26]
 8010730:	8bbb      	ldrh	r3, [r7, #28]
 8010732:	4293      	cmp	r3, r2
 8010734:	bf28      	it	cs
 8010736:	4613      	movcs	r3, r2
 8010738:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801073a:	797b      	ldrb	r3, [r7, #5]
 801073c:	f003 0301 	and.w	r3, r3, #1
 8010740:	2b00      	cmp	r3, #0
 8010742:	d036      	beq.n	80107b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010748:	b29a      	uxth	r2, r3
 801074a:	8b3b      	ldrh	r3, [r7, #24]
 801074c:	4413      	add	r3, r2
 801074e:	b299      	uxth	r1, r3
 8010750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010752:	2b00      	cmp	r3, #0
 8010754:	bf0c      	ite	eq
 8010756:	2301      	moveq	r3, #1
 8010758:	2300      	movne	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	f107 0012 	add.w	r0, r7, #18
 8010760:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010762:	9302      	str	r3, [sp, #8]
 8010764:	797b      	ldrb	r3, [r7, #5]
 8010766:	9301      	str	r3, [sp, #4]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	4603      	mov	r3, r0
 801076e:	2036      	movs	r0, #54	; 0x36
 8010770:	f7ff fd5e 	bl	8010230 <tcp_pbuf_prealloc>
 8010774:	6338      	str	r0, [r7, #48]	; 0x30
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 8178 	beq.w	8010a6e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010780:	895b      	ldrh	r3, [r3, #10]
 8010782:	8b3a      	ldrh	r2, [r7, #24]
 8010784:	429a      	cmp	r2, r3
 8010786:	d906      	bls.n	8010796 <tcp_write+0x37e>
 8010788:	4b8c      	ldr	r3, [pc, #560]	; (80109bc <tcp_write+0x5a4>)
 801078a:	f240 2266 	movw	r2, #614	; 0x266
 801078e:	498c      	ldr	r1, [pc, #560]	; (80109c0 <tcp_write+0x5a8>)
 8010790:	488c      	ldr	r0, [pc, #560]	; (80109c4 <tcp_write+0x5ac>)
 8010792:	f006 fe2d 	bl	80173f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010798:	685a      	ldr	r2, [r3, #4]
 801079a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801079e:	18d0      	adds	r0, r2, r3
 80107a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107a4:	68ba      	ldr	r2, [r7, #8]
 80107a6:	4413      	add	r3, r2
 80107a8:	8b3a      	ldrh	r2, [r7, #24]
 80107aa:	4619      	mov	r1, r3
 80107ac:	f006 ff50 	bl	8017650 <memcpy>
 80107b0:	e02f      	b.n	8010812 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80107b2:	8a7b      	ldrh	r3, [r7, #18]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d006      	beq.n	80107c6 <tcp_write+0x3ae>
 80107b8:	4b80      	ldr	r3, [pc, #512]	; (80109bc <tcp_write+0x5a4>)
 80107ba:	f240 2271 	movw	r2, #625	; 0x271
 80107be:	4982      	ldr	r1, [pc, #520]	; (80109c8 <tcp_write+0x5b0>)
 80107c0:	4880      	ldr	r0, [pc, #512]	; (80109c4 <tcp_write+0x5ac>)
 80107c2:	f006 fe15 	bl	80173f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80107c6:	8b3b      	ldrh	r3, [r7, #24]
 80107c8:	2201      	movs	r2, #1
 80107ca:	4619      	mov	r1, r3
 80107cc:	2036      	movs	r0, #54	; 0x36
 80107ce:	f7fa fd6f 	bl	800b2b0 <pbuf_alloc>
 80107d2:	6178      	str	r0, [r7, #20]
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 814b 	beq.w	8010a72 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80107dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	441a      	add	r2, r3
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80107e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107f2:	4619      	mov	r1, r3
 80107f4:	2036      	movs	r0, #54	; 0x36
 80107f6:	f7fa fd5b 	bl	800b2b0 <pbuf_alloc>
 80107fa:	6338      	str	r0, [r7, #48]	; 0x30
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d103      	bne.n	801080a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010802:	6978      	ldr	r0, [r7, #20]
 8010804:	f7fb f838 	bl	800b878 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010808:	e136      	b.n	8010a78 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801080a:	6979      	ldr	r1, [r7, #20]
 801080c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801080e:	f7fb f901 	bl	800ba14 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010814:	f7fb f8be 	bl	800b994 <pbuf_clen>
 8010818:	4603      	mov	r3, r0
 801081a:	461a      	mov	r2, r3
 801081c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010820:	4413      	add	r3, r2
 8010822:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801082a:	2b09      	cmp	r3, #9
 801082c:	d903      	bls.n	8010836 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801082e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010830:	f7fb f822 	bl	800b878 <pbuf_free>
      goto memerr;
 8010834:	e120      	b.n	8010a78 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801083a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801083e:	441a      	add	r2, r3
 8010840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010844:	9300      	str	r3, [sp, #0]
 8010846:	4613      	mov	r3, r2
 8010848:	2200      	movs	r2, #0
 801084a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7ff fc51 	bl	80100f4 <tcp_create_segment>
 8010852:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 810d 	beq.w	8010a76 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801085c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801085e:	2b00      	cmp	r3, #0
 8010860:	d102      	bne.n	8010868 <tcp_write+0x450>
      queue = seg;
 8010862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010864:	647b      	str	r3, [r7, #68]	; 0x44
 8010866:	e00c      	b.n	8010882 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <tcp_write+0x464>
 801086e:	4b53      	ldr	r3, [pc, #332]	; (80109bc <tcp_write+0x5a4>)
 8010870:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010874:	4955      	ldr	r1, [pc, #340]	; (80109cc <tcp_write+0x5b4>)
 8010876:	4853      	ldr	r0, [pc, #332]	; (80109c4 <tcp_write+0x5ac>)
 8010878:	f006 fdba 	bl	80173f0 <iprintf>
      prev_seg->next = seg;
 801087c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801087e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010880:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010884:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010886:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801088a:	8b3b      	ldrh	r3, [r7, #24]
 801088c:	4413      	add	r3, r2
 801088e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010892:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010896:	88fb      	ldrh	r3, [r7, #6]
 8010898:	429a      	cmp	r2, r3
 801089a:	f4ff af3d 	bcc.w	8010718 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801089e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d02c      	beq.n	80108fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80108a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108aa:	e01e      	b.n	80108ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	891a      	ldrh	r2, [r3, #8]
 80108b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108b2:	4413      	add	r3, r2
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80108ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d110      	bne.n	80108e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108c8:	8952      	ldrh	r2, [r2, #10]
 80108ca:	4413      	add	r3, r2
 80108cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80108ce:	68b9      	ldr	r1, [r7, #8]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f006 febd 	bl	8017650 <memcpy>
        p->len += oversize_used;
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	895a      	ldrh	r2, [r3, #10]
 80108da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108dc:	4413      	add	r3, r2
 80108de:	b29a      	uxth	r2, r3
 80108e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80108e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1dd      	bne.n	80108ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80108f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f2:	891a      	ldrh	r2, [r3, #8]
 80108f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108f6:	4413      	add	r3, r2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80108fe:	8a7a      	ldrh	r2, [r7, #18]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010908:	2b00      	cmp	r3, #0
 801090a:	d018      	beq.n	801093e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801090c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <tcp_write+0x508>
 8010912:	4b2a      	ldr	r3, [pc, #168]	; (80109bc <tcp_write+0x5a4>)
 8010914:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010918:	492d      	ldr	r1, [pc, #180]	; (80109d0 <tcp_write+0x5b8>)
 801091a:	482a      	ldr	r0, [pc, #168]	; (80109c4 <tcp_write+0x5ac>)
 801091c:	f006 fd68 	bl	80173f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010926:	4618      	mov	r0, r3
 8010928:	f7fb f874 	bl	800ba14 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801092c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801092e:	891a      	ldrh	r2, [r3, #8]
 8010930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010932:	891b      	ldrh	r3, [r3, #8]
 8010934:	4413      	add	r3, r2
 8010936:	b29a      	uxth	r2, r3
 8010938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801093a:	811a      	strh	r2, [r3, #8]
 801093c:	e037      	b.n	80109ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801093e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010940:	2b00      	cmp	r3, #0
 8010942:	d034      	beq.n	80109ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010946:	2b00      	cmp	r3, #0
 8010948:	d003      	beq.n	8010952 <tcp_write+0x53a>
 801094a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <tcp_write+0x548>
 8010952:	4b1a      	ldr	r3, [pc, #104]	; (80109bc <tcp_write+0x5a4>)
 8010954:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010958:	491e      	ldr	r1, [pc, #120]	; (80109d4 <tcp_write+0x5bc>)
 801095a:	481a      	ldr	r0, [pc, #104]	; (80109c4 <tcp_write+0x5ac>)
 801095c:	f006 fd48 	bl	80173f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	62bb      	str	r3, [r7, #40]	; 0x28
 8010966:	e009      	b.n	801097c <tcp_write+0x564>
      p->tot_len += extendlen;
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	891a      	ldrh	r2, [r3, #8]
 801096c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801096e:	4413      	add	r3, r2
 8010970:	b29a      	uxth	r2, r3
 8010972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010974:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	62bb      	str	r3, [r7, #40]	; 0x28
 801097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d1f1      	bne.n	8010968 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010986:	891a      	ldrh	r2, [r3, #8]
 8010988:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801098a:	4413      	add	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010994:	895a      	ldrh	r2, [r3, #10]
 8010996:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010998:	4413      	add	r3, r2
 801099a:	b29a      	uxth	r2, r3
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80109a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109a2:	891a      	ldrh	r2, [r3, #8]
 80109a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109a6:	4413      	add	r3, r2
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80109ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d111      	bne.n	80109d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80109ba:	e010      	b.n	80109de <tcp_write+0x5c6>
 80109bc:	0801a554 	.word	0x0801a554
 80109c0:	0801a7f4 	.word	0x0801a7f4
 80109c4:	0801a5a8 	.word	0x0801a5a8
 80109c8:	0801a834 	.word	0x0801a834
 80109cc:	0801a844 	.word	0x0801a844
 80109d0:	0801a858 	.word	0x0801a858
 80109d4:	0801a890 	.word	0x0801a890
  } else {
    last_unsent->next = queue;
 80109d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109e2:	88fb      	ldrh	r3, [r7, #6]
 80109e4:	441a      	add	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80109f0:	88fb      	ldrh	r3, [r7, #6]
 80109f2:	1ad3      	subs	r3, r2, r3
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010a02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d00e      	beq.n	8010a2e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10a      	bne.n	8010a2e <tcp_write+0x616>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d106      	bne.n	8010a2e <tcp_write+0x616>
 8010a20:	4b2c      	ldr	r3, [pc, #176]	; (8010ad4 <tcp_write+0x6bc>)
 8010a22:	f240 3212 	movw	r2, #786	; 0x312
 8010a26:	492c      	ldr	r1, [pc, #176]	; (8010ad8 <tcp_write+0x6c0>)
 8010a28:	482c      	ldr	r0, [pc, #176]	; (8010adc <tcp_write+0x6c4>)
 8010a2a:	f006 fce1 	bl	80173f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d016      	beq.n	8010a62 <tcp_write+0x64a>
 8010a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d012      	beq.n	8010a62 <tcp_write+0x64a>
 8010a3c:	797b      	ldrb	r3, [r7, #5]
 8010a3e:	f003 0302 	and.w	r3, r3, #2
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d10d      	bne.n	8010a62 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	899b      	ldrh	r3, [r3, #12]
 8010a4c:	b29c      	uxth	r4, r3
 8010a4e:	2008      	movs	r0, #8
 8010a50:	f7f9 fb14 	bl	800a07c <lwip_htons>
 8010a54:	4603      	mov	r3, r0
 8010a56:	461a      	mov	r2, r3
 8010a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	4322      	orrs	r2, r4
 8010a5e:	b292      	uxth	r2, r2
 8010a60:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010a62:	2300      	movs	r3, #0
 8010a64:	e031      	b.n	8010aca <tcp_write+0x6b2>
          goto memerr;
 8010a66:	bf00      	nop
 8010a68:	e006      	b.n	8010a78 <tcp_write+0x660>
            goto memerr;
 8010a6a:	bf00      	nop
 8010a6c:	e004      	b.n	8010a78 <tcp_write+0x660>
        goto memerr;
 8010a6e:	bf00      	nop
 8010a70:	e002      	b.n	8010a78 <tcp_write+0x660>
        goto memerr;
 8010a72:	bf00      	nop
 8010a74:	e000      	b.n	8010a78 <tcp_write+0x660>
      goto memerr;
 8010a76:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	8b5b      	ldrh	r3, [r3, #26]
 8010a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010a8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010a8e:	f7fa fef3 	bl	800b878 <pbuf_free>
  }
  if (queue != NULL) {
 8010a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <tcp_write+0x686>
    tcp_segs_free(queue);
 8010a98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a9a:	f7fc fb6b 	bl	800d174 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00e      	beq.n	8010ac6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d10a      	bne.n	8010ac6 <tcp_write+0x6ae>
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d106      	bne.n	8010ac6 <tcp_write+0x6ae>
 8010ab8:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <tcp_write+0x6bc>)
 8010aba:	f240 3227 	movw	r2, #807	; 0x327
 8010abe:	4906      	ldr	r1, [pc, #24]	; (8010ad8 <tcp_write+0x6c0>)
 8010ac0:	4806      	ldr	r0, [pc, #24]	; (8010adc <tcp_write+0x6c4>)
 8010ac2:	f006 fc95 	bl	80173f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	375c      	adds	r7, #92	; 0x5c
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd90      	pop	{r4, r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	0801a554 	.word	0x0801a554
 8010ad8:	0801a8c8 	.word	0x0801a8c8
 8010adc:	0801a5a8 	.word	0x0801a5a8

08010ae0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010ae0:	b590      	push	{r4, r7, lr}
 8010ae2:	b08b      	sub	sp, #44	; 0x2c
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	6078      	str	r0, [r7, #4]
 8010ae8:	460b      	mov	r3, r1
 8010aea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010aec:	2300      	movs	r3, #0
 8010aee:	61fb      	str	r3, [r7, #28]
 8010af0:	2300      	movs	r3, #0
 8010af2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010af4:	2300      	movs	r3, #0
 8010af6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <tcp_split_unsent_seg+0x2c>
 8010afe:	4b95      	ldr	r3, [pc, #596]	; (8010d54 <tcp_split_unsent_seg+0x274>)
 8010b00:	f240 324b 	movw	r2, #843	; 0x34b
 8010b04:	4994      	ldr	r1, [pc, #592]	; (8010d58 <tcp_split_unsent_seg+0x278>)
 8010b06:	4895      	ldr	r0, [pc, #596]	; (8010d5c <tcp_split_unsent_seg+0x27c>)
 8010b08:	f006 fc72 	bl	80173f0 <iprintf>

  useg = pcb->unsent;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b10:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d102      	bne.n	8010b1e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010b18:	f04f 33ff 	mov.w	r3, #4294967295
 8010b1c:	e116      	b.n	8010d4c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b1e:	887b      	ldrh	r3, [r7, #2]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d109      	bne.n	8010b38 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b24:	4b8b      	ldr	r3, [pc, #556]	; (8010d54 <tcp_split_unsent_seg+0x274>)
 8010b26:	f240 3253 	movw	r2, #851	; 0x353
 8010b2a:	498d      	ldr	r1, [pc, #564]	; (8010d60 <tcp_split_unsent_seg+0x280>)
 8010b2c:	488b      	ldr	r0, [pc, #556]	; (8010d5c <tcp_split_unsent_seg+0x27c>)
 8010b2e:	f006 fc5f 	bl	80173f0 <iprintf>
    return ERR_VAL;
 8010b32:	f06f 0305 	mvn.w	r3, #5
 8010b36:	e109      	b.n	8010d4c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	891b      	ldrh	r3, [r3, #8]
 8010b3c:	887a      	ldrh	r2, [r7, #2]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d301      	bcc.n	8010b46 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	e102      	b.n	8010d4c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b4a:	887a      	ldrh	r2, [r7, #2]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d906      	bls.n	8010b5e <tcp_split_unsent_seg+0x7e>
 8010b50:	4b80      	ldr	r3, [pc, #512]	; (8010d54 <tcp_split_unsent_seg+0x274>)
 8010b52:	f240 325b 	movw	r2, #859	; 0x35b
 8010b56:	4983      	ldr	r1, [pc, #524]	; (8010d64 <tcp_split_unsent_seg+0x284>)
 8010b58:	4880      	ldr	r0, [pc, #512]	; (8010d5c <tcp_split_unsent_seg+0x27c>)
 8010b5a:	f006 fc49 	bl	80173f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	891b      	ldrh	r3, [r3, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d106      	bne.n	8010b74 <tcp_split_unsent_seg+0x94>
 8010b66:	4b7b      	ldr	r3, [pc, #492]	; (8010d54 <tcp_split_unsent_seg+0x274>)
 8010b68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010b6c:	497e      	ldr	r1, [pc, #504]	; (8010d68 <tcp_split_unsent_seg+0x288>)
 8010b6e:	487b      	ldr	r0, [pc, #492]	; (8010d5c <tcp_split_unsent_seg+0x27c>)
 8010b70:	f006 fc3e 	bl	80173f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	7a9b      	ldrb	r3, [r3, #10]
 8010b78:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010b7a:	7bfb      	ldrb	r3, [r7, #15]
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	f003 0304 	and.w	r3, r3, #4
 8010b84:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	891a      	ldrh	r2, [r3, #8]
 8010b8a:	887b      	ldrh	r3, [r7, #2]
 8010b8c:	1ad3      	subs	r3, r2, r3
 8010b8e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010b90:	7bbb      	ldrb	r3, [r7, #14]
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	89bb      	ldrh	r3, [r7, #12]
 8010b96:	4413      	add	r3, r2
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	2036      	movs	r0, #54	; 0x36
 8010ba2:	f7fa fb85 	bl	800b2b0 <pbuf_alloc>
 8010ba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 80b7 	beq.w	8010d1e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	891a      	ldrh	r2, [r3, #8]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	891b      	ldrh	r3, [r3, #8]
 8010bba:	1ad3      	subs	r3, r2, r3
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	887b      	ldrh	r3, [r7, #2]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	6858      	ldr	r0, [r3, #4]
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	685a      	ldr	r2, [r3, #4]
 8010bcc:	7bbb      	ldrb	r3, [r7, #14]
 8010bce:	18d1      	adds	r1, r2, r3
 8010bd0:	897b      	ldrh	r3, [r7, #10]
 8010bd2:	89ba      	ldrh	r2, [r7, #12]
 8010bd4:	f7fb f856 	bl	800bc84 <pbuf_copy_partial>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	461a      	mov	r2, r3
 8010bdc:	89bb      	ldrh	r3, [r7, #12]
 8010bde:	4293      	cmp	r3, r2
 8010be0:	f040 809f 	bne.w	8010d22 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f9 fa45 	bl	800a07c <lwip_htons>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bfa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010c00:	7efb      	ldrb	r3, [r7, #27]
 8010c02:	f003 0308 	and.w	r3, r3, #8
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d007      	beq.n	8010c1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c0a:	7efb      	ldrb	r3, [r7, #27]
 8010c0c:	f023 0308 	bic.w	r3, r3, #8
 8010c10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c12:	7ebb      	ldrb	r3, [r7, #26]
 8010c14:	f043 0308 	orr.w	r3, r3, #8
 8010c18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010c1a:	7efb      	ldrb	r3, [r7, #27]
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d007      	beq.n	8010c34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c24:	7efb      	ldrb	r3, [r7, #27]
 8010c26:	f023 0301 	bic.w	r3, r3, #1
 8010c2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010c2c:	7ebb      	ldrb	r3, [r7, #26]
 8010c2e:	f043 0301 	orr.w	r3, r3, #1
 8010c32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7f9 fa33 	bl	800a0a6 <lwip_htonl>
 8010c40:	4602      	mov	r2, r0
 8010c42:	887b      	ldrh	r3, [r7, #2]
 8010c44:	18d1      	adds	r1, r2, r3
 8010c46:	7eba      	ldrb	r2, [r7, #26]
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
 8010c4a:	9300      	str	r3, [sp, #0]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	6939      	ldr	r1, [r7, #16]
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7ff fa4f 	bl	80100f4 <tcp_create_segment>
 8010c56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d063      	beq.n	8010d26 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fa fe96 	bl	800b994 <pbuf_clen>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c72:	1a9b      	subs	r3, r3, r2
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	6858      	ldr	r0, [r3, #4]
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	891a      	ldrh	r2, [r3, #8]
 8010c86:	89bb      	ldrh	r3, [r7, #12]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	f7fa fc6d 	bl	800b56c <pbuf_realloc>
  useg->len -= remainder;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	891a      	ldrh	r2, [r3, #8]
 8010c96:	89bb      	ldrh	r3, [r7, #12]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	899b      	ldrh	r3, [r3, #12]
 8010ca6:	b29c      	uxth	r4, r3
 8010ca8:	7efb      	ldrb	r3, [r7, #27]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f9 f9e5 	bl	800a07c <lwip_htons>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	4322      	orrs	r2, r4
 8010cbc:	b292      	uxth	r2, r2
 8010cbe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fa fe65 	bl	800b994 <pbuf_clen>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	461a      	mov	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cd4:	4413      	add	r3, r2
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fa fe56 	bl	800b994 <pbuf_clen>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	461a      	mov	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf2:	4413      	add	r3, r2
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	69fa      	ldr	r2, [r7, #28]
 8010d08:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d103      	bne.n	8010d1a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	e016      	b.n	8010d4c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d1e:	bf00      	nop
 8010d20:	e002      	b.n	8010d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d22:	bf00      	nop
 8010d24:	e000      	b.n	8010d28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d26:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d006      	beq.n	8010d3c <tcp_split_unsent_seg+0x25c>
 8010d2e:	4b09      	ldr	r3, [pc, #36]	; (8010d54 <tcp_split_unsent_seg+0x274>)
 8010d30:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d34:	490d      	ldr	r1, [pc, #52]	; (8010d6c <tcp_split_unsent_seg+0x28c>)
 8010d36:	4809      	ldr	r0, [pc, #36]	; (8010d5c <tcp_split_unsent_seg+0x27c>)
 8010d38:	f006 fb5a 	bl	80173f0 <iprintf>
  if (p != NULL) {
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d002      	beq.n	8010d48 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010d42:	6938      	ldr	r0, [r7, #16]
 8010d44:	f7fa fd98 	bl	800b878 <pbuf_free>
  }

  return ERR_MEM;
 8010d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3724      	adds	r7, #36	; 0x24
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd90      	pop	{r4, r7, pc}
 8010d54:	0801a554 	.word	0x0801a554
 8010d58:	0801a8e8 	.word	0x0801a8e8
 8010d5c:	0801a5a8 	.word	0x0801a5a8
 8010d60:	0801a90c 	.word	0x0801a90c
 8010d64:	0801a930 	.word	0x0801a930
 8010d68:	0801a940 	.word	0x0801a940
 8010d6c:	0801a950 	.word	0x0801a950

08010d70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d106      	bne.n	8010d8c <tcp_send_fin+0x1c>
 8010d7e:	4b21      	ldr	r3, [pc, #132]	; (8010e04 <tcp_send_fin+0x94>)
 8010d80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010d84:	4920      	ldr	r1, [pc, #128]	; (8010e08 <tcp_send_fin+0x98>)
 8010d86:	4821      	ldr	r0, [pc, #132]	; (8010e0c <tcp_send_fin+0x9c>)
 8010d88:	f006 fb32 	bl	80173f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d02e      	beq.n	8010df2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d98:	60fb      	str	r3, [r7, #12]
 8010d9a:	e002      	b.n	8010da2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d1f8      	bne.n	8010d9c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	899b      	ldrh	r3, [r3, #12]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f9 f962 	bl	800a07c <lwip_htons>
 8010db8:	4603      	mov	r3, r0
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 0307 	and.w	r3, r3, #7
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d116      	bne.n	8010df2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	b29c      	uxth	r4, r3
 8010dcc:	2001      	movs	r0, #1
 8010dce:	f7f9 f955 	bl	800a07c <lwip_htons>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	4322      	orrs	r2, r4
 8010ddc:	b292      	uxth	r2, r2
 8010dde:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	8b5b      	ldrh	r3, [r3, #26]
 8010de4:	f043 0320 	orr.w	r3, r3, #32
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e004      	b.n	8010dfc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010df2:	2101      	movs	r1, #1
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f000 f80b 	bl	8010e10 <tcp_enqueue_flags>
 8010dfa:	4603      	mov	r3, r0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd90      	pop	{r4, r7, pc}
 8010e04:	0801a554 	.word	0x0801a554
 8010e08:	0801a95c 	.word	0x0801a95c
 8010e0c:	0801a5a8 	.word	0x0801a5a8

08010e10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08a      	sub	sp, #40	; 0x28
 8010e14:	af02      	add	r7, sp, #8
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	460b      	mov	r3, r1
 8010e1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e20:	2300      	movs	r3, #0
 8010e22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e24:	78fb      	ldrb	r3, [r7, #3]
 8010e26:	f003 0303 	and.w	r3, r3, #3
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d106      	bne.n	8010e3c <tcp_enqueue_flags+0x2c>
 8010e2e:	4b67      	ldr	r3, [pc, #412]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010e30:	f240 4211 	movw	r2, #1041	; 0x411
 8010e34:	4966      	ldr	r1, [pc, #408]	; (8010fd0 <tcp_enqueue_flags+0x1c0>)
 8010e36:	4867      	ldr	r0, [pc, #412]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010e38:	f006 fada 	bl	80173f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <tcp_enqueue_flags+0x40>
 8010e42:	4b62      	ldr	r3, [pc, #392]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010e44:	f240 4213 	movw	r2, #1043	; 0x413
 8010e48:	4963      	ldr	r1, [pc, #396]	; (8010fd8 <tcp_enqueue_flags+0x1c8>)
 8010e4a:	4862      	ldr	r0, [pc, #392]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010e4c:	f006 fad0 	bl	80173f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010e50:	78fb      	ldrb	r3, [r7, #3]
 8010e52:	f003 0302 	and.w	r3, r3, #2
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010e5e:	7ffb      	ldrb	r3, [r7, #31]
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0304 	and.w	r3, r3, #4
 8010e68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010e6a:	7dfb      	ldrb	r3, [r7, #23]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e72:	4619      	mov	r1, r3
 8010e74:	2036      	movs	r0, #54	; 0x36
 8010e76:	f7fa fa1b 	bl	800b2b0 <pbuf_alloc>
 8010e7a:	6138      	str	r0, [r7, #16]
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d109      	bne.n	8010e96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	8b5b      	ldrh	r3, [r3, #26]
 8010e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e90:	f04f 33ff 	mov.w	r3, #4294967295
 8010e94:	e095      	b.n	8010fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	895a      	ldrh	r2, [r3, #10]
 8010e9a:	7dfb      	ldrb	r3, [r7, #23]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d206      	bcs.n	8010eb0 <tcp_enqueue_flags+0xa0>
 8010ea2:	4b4a      	ldr	r3, [pc, #296]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010ea4:	f240 4239 	movw	r2, #1081	; 0x439
 8010ea8:	494c      	ldr	r1, [pc, #304]	; (8010fdc <tcp_enqueue_flags+0x1cc>)
 8010eaa:	484a      	ldr	r0, [pc, #296]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010eac:	f006 faa0 	bl	80173f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010eb4:	78fa      	ldrb	r2, [r7, #3]
 8010eb6:	7ffb      	ldrb	r3, [r7, #31]
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	460b      	mov	r3, r1
 8010ebc:	6939      	ldr	r1, [r7, #16]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff f918 	bl	80100f4 <tcp_create_segment>
 8010ec4:	60f8      	str	r0, [r7, #12]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d109      	bne.n	8010ee0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	8b5b      	ldrh	r3, [r3, #26]
 8010ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010eda:	f04f 33ff 	mov.w	r3, #4294967295
 8010ede:	e070      	b.n	8010fc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	f003 0303 	and.w	r3, r3, #3
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d006      	beq.n	8010efa <tcp_enqueue_flags+0xea>
 8010eec:	4b37      	ldr	r3, [pc, #220]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010eee:	f240 4242 	movw	r2, #1090	; 0x442
 8010ef2:	493b      	ldr	r1, [pc, #236]	; (8010fe0 <tcp_enqueue_flags+0x1d0>)
 8010ef4:	4837      	ldr	r0, [pc, #220]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010ef6:	f006 fa7b 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	891b      	ldrh	r3, [r3, #8]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d006      	beq.n	8010f10 <tcp_enqueue_flags+0x100>
 8010f02:	4b32      	ldr	r3, [pc, #200]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010f04:	f240 4243 	movw	r2, #1091	; 0x443
 8010f08:	4936      	ldr	r1, [pc, #216]	; (8010fe4 <tcp_enqueue_flags+0x1d4>)
 8010f0a:	4832      	ldr	r0, [pc, #200]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010f0c:	f006 fa70 	bl	80173f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d103      	bne.n	8010f20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	68fa      	ldr	r2, [r7, #12]
 8010f1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f1e:	e00d      	b.n	8010f3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f24:	61bb      	str	r3, [r7, #24]
 8010f26:	e002      	b.n	8010f2e <tcp_enqueue_flags+0x11e>
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	61bb      	str	r3, [r7, #24]
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1f8      	bne.n	8010f28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010f44:	78fb      	ldrb	r3, [r7, #3]
 8010f46:	f003 0302 	and.w	r3, r3, #2
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d104      	bne.n	8010f58 <tcp_enqueue_flags+0x148>
 8010f4e:	78fb      	ldrb	r3, [r7, #3]
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d004      	beq.n	8010f62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f5c:	1c5a      	adds	r2, r3, #1
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010f62:	78fb      	ldrb	r3, [r7, #3]
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d006      	beq.n	8010f7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	8b5b      	ldrh	r3, [r3, #26]
 8010f70:	f043 0320 	orr.w	r3, r3, #32
 8010f74:	b29a      	uxth	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fa fd08 	bl	800b994 <pbuf_clen>
 8010f84:	4603      	mov	r3, r0
 8010f86:	461a      	mov	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f8e:	4413      	add	r3, r2
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00e      	beq.n	8010fc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10a      	bne.n	8010fc0 <tcp_enqueue_flags+0x1b0>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <tcp_enqueue_flags+0x1b0>
 8010fb2:	4b06      	ldr	r3, [pc, #24]	; (8010fcc <tcp_enqueue_flags+0x1bc>)
 8010fb4:	f240 4265 	movw	r2, #1125	; 0x465
 8010fb8:	490b      	ldr	r1, [pc, #44]	; (8010fe8 <tcp_enqueue_flags+0x1d8>)
 8010fba:	4806      	ldr	r0, [pc, #24]	; (8010fd4 <tcp_enqueue_flags+0x1c4>)
 8010fbc:	f006 fa18 	bl	80173f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3720      	adds	r7, #32
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	0801a554 	.word	0x0801a554
 8010fd0:	0801a978 	.word	0x0801a978
 8010fd4:	0801a5a8 	.word	0x0801a5a8
 8010fd8:	0801a9d0 	.word	0x0801a9d0
 8010fdc:	0801a9f0 	.word	0x0801a9f0
 8010fe0:	0801aa2c 	.word	0x0801aa2c
 8010fe4:	0801aa44 	.word	0x0801aa44
 8010fe8:	0801aa70 	.word	0x0801aa70

08010fec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010fec:	b5b0      	push	{r4, r5, r7, lr}
 8010fee:	b08a      	sub	sp, #40	; 0x28
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <tcp_output+0x1c>
 8010ffa:	4b8a      	ldr	r3, [pc, #552]	; (8011224 <tcp_output+0x238>)
 8010ffc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011000:	4989      	ldr	r1, [pc, #548]	; (8011228 <tcp_output+0x23c>)
 8011002:	488a      	ldr	r0, [pc, #552]	; (801122c <tcp_output+0x240>)
 8011004:	f006 f9f4 	bl	80173f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d106      	bne.n	801101e <tcp_output+0x32>
 8011010:	4b84      	ldr	r3, [pc, #528]	; (8011224 <tcp_output+0x238>)
 8011012:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011016:	4986      	ldr	r1, [pc, #536]	; (8011230 <tcp_output+0x244>)
 8011018:	4884      	ldr	r0, [pc, #528]	; (801122c <tcp_output+0x240>)
 801101a:	f006 f9e9 	bl	80173f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801101e:	4b85      	ldr	r3, [pc, #532]	; (8011234 <tcp_output+0x248>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	429a      	cmp	r2, r3
 8011026:	d101      	bne.n	801102c <tcp_output+0x40>
    return ERR_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	e1ce      	b.n	80113ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011038:	4293      	cmp	r3, r2
 801103a:	bf28      	it	cs
 801103c:	4613      	movcs	r3, r2
 801103e:	b29b      	uxth	r3, r3
 8011040:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011046:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	2b00      	cmp	r3, #0
 801104c:	d10b      	bne.n	8011066 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	8b5b      	ldrh	r3, [r3, #26]
 8011052:	f003 0302 	and.w	r3, r3, #2
 8011056:	2b00      	cmp	r3, #0
 8011058:	f000 81aa 	beq.w	80113b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 fdcb 	bl	8011bf8 <tcp_send_empty_ack>
 8011062:	4603      	mov	r3, r0
 8011064:	e1b1      	b.n	80113ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	3304      	adds	r3, #4
 801106c:	461a      	mov	r2, r3
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff f824 	bl	80100bc <tcp_route>
 8011074:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d102      	bne.n	8011082 <tcp_output+0x96>
    return ERR_RTE;
 801107c:	f06f 0303 	mvn.w	r3, #3
 8011080:	e1a3      	b.n	80113ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d003      	beq.n	8011090 <tcp_output+0xa4>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d111      	bne.n	80110b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <tcp_output+0xb0>
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	3304      	adds	r3, #4
 801109a:	e000      	b.n	801109e <tcp_output+0xb2>
 801109c:	2300      	movs	r3, #0
 801109e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <tcp_output+0xc0>
      return ERR_RTE;
 80110a6:	f06f 0303 	mvn.w	r3, #3
 80110aa:	e18e      	b.n	80113ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80110b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b6:	68db      	ldr	r3, [r3, #12]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7f8 fff3 	bl	800a0a6 <lwip_htonl>
 80110c0:	4602      	mov	r2, r0
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ca:	8912      	ldrh	r2, [r2, #8]
 80110cc:	4413      	add	r3, r2
 80110ce:	69ba      	ldr	r2, [r7, #24]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d227      	bcs.n	8011124 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110da:	461a      	mov	r2, r3
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	4293      	cmp	r3, r2
 80110e0:	d114      	bne.n	801110c <tcp_output+0x120>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d110      	bne.n	801110c <tcp_output+0x120>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10b      	bne.n	801110c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2201      	movs	r2, #1
 8011100:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8b5b      	ldrh	r3, [r3, #26]
 8011110:	f003 0302 	and.w	r3, r3, #2
 8011114:	2b00      	cmp	r3, #0
 8011116:	f000 814d 	beq.w	80113b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fd6c 	bl	8011bf8 <tcp_send_empty_ack>
 8011120:	4603      	mov	r3, r0
 8011122:	e152      	b.n	80113ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011130:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011132:	6a3b      	ldr	r3, [r7, #32]
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 811c 	beq.w	8011372 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801113a:	e002      	b.n	8011142 <tcp_output+0x156>
 801113c:	6a3b      	ldr	r3, [r7, #32]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	623b      	str	r3, [r7, #32]
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1f8      	bne.n	801113c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801114a:	e112      	b.n	8011372 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	899b      	ldrh	r3, [r3, #12]
 8011152:	b29b      	uxth	r3, r3
 8011154:	4618      	mov	r0, r3
 8011156:	f7f8 ff91 	bl	800a07c <lwip_htons>
 801115a:	4603      	mov	r3, r0
 801115c:	b2db      	uxtb	r3, r3
 801115e:	f003 0304 	and.w	r3, r3, #4
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <tcp_output+0x188>
 8011166:	4b2f      	ldr	r3, [pc, #188]	; (8011224 <tcp_output+0x238>)
 8011168:	f240 5236 	movw	r2, #1334	; 0x536
 801116c:	4932      	ldr	r1, [pc, #200]	; (8011238 <tcp_output+0x24c>)
 801116e:	482f      	ldr	r0, [pc, #188]	; (801122c <tcp_output+0x240>)
 8011170:	f006 f93e 	bl	80173f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011178:	2b00      	cmp	r3, #0
 801117a:	d01f      	beq.n	80111bc <tcp_output+0x1d0>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	8b5b      	ldrh	r3, [r3, #26]
 8011180:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011184:	2b00      	cmp	r3, #0
 8011186:	d119      	bne.n	80111bc <tcp_output+0x1d0>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00b      	beq.n	80111a8 <tcp_output+0x1bc>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d110      	bne.n	80111bc <tcp_output+0x1d0>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119e:	891a      	ldrh	r2, [r3, #8]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d209      	bcs.n	80111bc <tcp_output+0x1d0>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d004      	beq.n	80111bc <tcp_output+0x1d0>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111b8:	2b08      	cmp	r3, #8
 80111ba:	d901      	bls.n	80111c0 <tcp_output+0x1d4>
 80111bc:	2301      	movs	r3, #1
 80111be:	e000      	b.n	80111c2 <tcp_output+0x1d6>
 80111c0:	2300      	movs	r3, #0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d106      	bne.n	80111d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	8b5b      	ldrh	r3, [r3, #26]
 80111ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 80e4 	beq.w	801139c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d00d      	beq.n	80111f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80111dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	899b      	ldrh	r3, [r3, #12]
 80111e2:	b29c      	uxth	r4, r3
 80111e4:	2010      	movs	r0, #16
 80111e6:	f7f8 ff49 	bl	800a07c <lwip_htons>
 80111ea:	4603      	mov	r3, r0
 80111ec:	461a      	mov	r2, r3
 80111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	4322      	orrs	r2, r4
 80111f4:	b292      	uxth	r2, r2
 80111f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80111f8:	697a      	ldr	r2, [r7, #20]
 80111fa:	6879      	ldr	r1, [r7, #4]
 80111fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111fe:	f000 f909 	bl	8011414 <tcp_output_segment>
 8011202:	4603      	mov	r3, r0
 8011204:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d016      	beq.n	801123c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	8b5b      	ldrh	r3, [r3, #26]
 8011212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011216:	b29a      	uxth	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	835a      	strh	r2, [r3, #26]
      return err;
 801121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011220:	e0d3      	b.n	80113ca <tcp_output+0x3de>
 8011222:	bf00      	nop
 8011224:	0801a554 	.word	0x0801a554
 8011228:	0801aa98 	.word	0x0801aa98
 801122c:	0801a5a8 	.word	0x0801a5a8
 8011230:	0801aab0 	.word	0x0801aab0
 8011234:	20010968 	.word	0x20010968
 8011238:	0801aad8 	.word	0x0801aad8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7d1b      	ldrb	r3, [r3, #20]
 8011248:	2b02      	cmp	r3, #2
 801124a:	d006      	beq.n	801125a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	8b5b      	ldrh	r3, [r3, #26]
 8011250:	f023 0303 	bic.w	r3, r3, #3
 8011254:	b29a      	uxth	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	4618      	mov	r0, r3
 8011262:	f7f8 ff20 	bl	800a0a6 <lwip_htonl>
 8011266:	4604      	mov	r4, r0
 8011268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126a:	891b      	ldrh	r3, [r3, #8]
 801126c:	461d      	mov	r5, r3
 801126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	899b      	ldrh	r3, [r3, #12]
 8011274:	b29b      	uxth	r3, r3
 8011276:	4618      	mov	r0, r3
 8011278:	f7f8 ff00 	bl	800a07c <lwip_htons>
 801127c:	4603      	mov	r3, r0
 801127e:	b2db      	uxtb	r3, r3
 8011280:	f003 0303 	and.w	r3, r3, #3
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <tcp_output+0x2a0>
 8011288:	2301      	movs	r3, #1
 801128a:	e000      	b.n	801128e <tcp_output+0x2a2>
 801128c:	2300      	movs	r3, #0
 801128e:	442b      	add	r3, r5
 8011290:	4423      	add	r3, r4
 8011292:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	da02      	bge.n	80112a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	891b      	ldrh	r3, [r3, #8]
 80112aa:	461c      	mov	r4, r3
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	899b      	ldrh	r3, [r3, #12]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f8 fee1 	bl	800a07c <lwip_htons>
 80112ba:	4603      	mov	r3, r0
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	f003 0303 	and.w	r3, r3, #3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d001      	beq.n	80112ca <tcp_output+0x2de>
 80112c6:	2301      	movs	r3, #1
 80112c8:	e000      	b.n	80112cc <tcp_output+0x2e0>
 80112ca:	2300      	movs	r3, #0
 80112cc:	4423      	add	r3, r4
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d049      	beq.n	8011366 <tcp_output+0x37a>
      seg->next = NULL;
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	2200      	movs	r2, #0
 80112d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d105      	bne.n	80112ec <tcp_output+0x300>
        pcb->unacked = seg;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80112e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e8:	623b      	str	r3, [r7, #32]
 80112ea:	e03f      	b.n	801136c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80112ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f8 fed7 	bl	800a0a6 <lwip_htonl>
 80112f8:	4604      	mov	r4, r0
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	f7f8 fed0 	bl	800a0a6 <lwip_htonl>
 8011306:	4603      	mov	r3, r0
 8011308:	1ae3      	subs	r3, r4, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	da24      	bge.n	8011358 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	3370      	adds	r3, #112	; 0x70
 8011312:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011314:	e002      	b.n	801131c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d011      	beq.n	8011348 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	4618      	mov	r0, r3
 801132e:	f7f8 feba 	bl	800a0a6 <lwip_htonl>
 8011332:	4604      	mov	r4, r0
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	4618      	mov	r0, r3
 801133c:	f7f8 feb3 	bl	800a0a6 <lwip_htonl>
 8011340:	4603      	mov	r3, r0
 8011342:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011344:	2b00      	cmp	r3, #0
 8011346:	dbe6      	blt.n	8011316 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011354:	601a      	str	r2, [r3, #0]
 8011356:	e009      	b.n	801136c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801135c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801135e:	6a3b      	ldr	r3, [r7, #32]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	623b      	str	r3, [r7, #32]
 8011364:	e002      	b.n	801136c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011368:	f7fb ff19 	bl	800d19e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011370:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011374:	2b00      	cmp	r3, #0
 8011376:	d012      	beq.n	801139e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	4618      	mov	r0, r3
 8011380:	f7f8 fe91 	bl	800a0a6 <lwip_htonl>
 8011384:	4602      	mov	r2, r0
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801138e:	8912      	ldrh	r2, [r2, #8]
 8011390:	4413      	add	r3, r2
  while (seg != NULL &&
 8011392:	69ba      	ldr	r2, [r7, #24]
 8011394:	429a      	cmp	r2, r3
 8011396:	f4bf aed9 	bcs.w	801114c <tcp_output+0x160>
 801139a:	e000      	b.n	801139e <tcp_output+0x3b2>
      break;
 801139c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d108      	bne.n	80113b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80113ae:	e004      	b.n	80113ba <tcp_output+0x3ce>
    goto output_done;
 80113b0:	bf00      	nop
 80113b2:	e002      	b.n	80113ba <tcp_output+0x3ce>
    goto output_done;
 80113b4:	bf00      	nop
 80113b6:	e000      	b.n	80113ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80113b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	8b5b      	ldrh	r3, [r3, #26]
 80113be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80113c8:	2300      	movs	r3, #0
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3728      	adds	r7, #40	; 0x28
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bdb0      	pop	{r4, r5, r7, pc}
 80113d2:	bf00      	nop

080113d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d106      	bne.n	80113f0 <tcp_output_segment_busy+0x1c>
 80113e2:	4b09      	ldr	r3, [pc, #36]	; (8011408 <tcp_output_segment_busy+0x34>)
 80113e4:	f240 529a 	movw	r2, #1434	; 0x59a
 80113e8:	4908      	ldr	r1, [pc, #32]	; (801140c <tcp_output_segment_busy+0x38>)
 80113ea:	4809      	ldr	r0, [pc, #36]	; (8011410 <tcp_output_segment_busy+0x3c>)
 80113ec:	f006 f800 	bl	80173f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	7b9b      	ldrb	r3, [r3, #14]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d001      	beq.n	80113fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	0801a554 	.word	0x0801a554
 801140c:	0801aaf0 	.word	0x0801aaf0
 8011410:	0801a5a8 	.word	0x0801a5a8

08011414 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011414:	b5b0      	push	{r4, r5, r7, lr}
 8011416:	b08c      	sub	sp, #48	; 0x30
 8011418:	af04      	add	r7, sp, #16
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d106      	bne.n	8011434 <tcp_output_segment+0x20>
 8011426:	4b64      	ldr	r3, [pc, #400]	; (80115b8 <tcp_output_segment+0x1a4>)
 8011428:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801142c:	4963      	ldr	r1, [pc, #396]	; (80115bc <tcp_output_segment+0x1a8>)
 801142e:	4864      	ldr	r0, [pc, #400]	; (80115c0 <tcp_output_segment+0x1ac>)
 8011430:	f005 ffde 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_output_segment+0x34>
 801143a:	4b5f      	ldr	r3, [pc, #380]	; (80115b8 <tcp_output_segment+0x1a4>)
 801143c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011440:	4960      	ldr	r1, [pc, #384]	; (80115c4 <tcp_output_segment+0x1b0>)
 8011442:	485f      	ldr	r0, [pc, #380]	; (80115c0 <tcp_output_segment+0x1ac>)
 8011444:	f005 ffd4 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d106      	bne.n	801145c <tcp_output_segment+0x48>
 801144e:	4b5a      	ldr	r3, [pc, #360]	; (80115b8 <tcp_output_segment+0x1a4>)
 8011450:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011454:	495c      	ldr	r1, [pc, #368]	; (80115c8 <tcp_output_segment+0x1b4>)
 8011456:	485a      	ldr	r0, [pc, #360]	; (80115c0 <tcp_output_segment+0x1ac>)
 8011458:	f005 ffca 	bl	80173f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f7ff ffb9 	bl	80113d4 <tcp_output_segment_busy>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d001      	beq.n	801146c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011468:	2300      	movs	r3, #0
 801146a:	e0a1      	b.n	80115b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	68dc      	ldr	r4, [r3, #12]
 8011474:	4610      	mov	r0, r2
 8011476:	f7f8 fe16 	bl	800a0a6 <lwip_htonl>
 801147a:	4603      	mov	r3, r0
 801147c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	68dc      	ldr	r4, [r3, #12]
 8011486:	4610      	mov	r0, r2
 8011488:	f7f8 fdf8 	bl	800a07c <lwip_htons>
 801148c:	4603      	mov	r3, r0
 801148e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011498:	441a      	add	r2, r3
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	3314      	adds	r3, #20
 80114a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	7a9b      	ldrb	r3, [r3, #10]
 80114aa:	f003 0301 	and.w	r3, r3, #1
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d015      	beq.n	80114de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	3304      	adds	r3, #4
 80114b6:	461a      	mov	r2, r3
 80114b8:	6879      	ldr	r1, [r7, #4]
 80114ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 80114be:	f7fc fa33 	bl	800d928 <tcp_eff_send_mss_netif>
 80114c2:	4603      	mov	r3, r0
 80114c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80114c6:	8b7b      	ldrh	r3, [r7, #26]
 80114c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7f8 fdea 	bl	800a0a6 <lwip_htonl>
 80114d2:	4602      	mov	r2, r0
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	3304      	adds	r3, #4
 80114dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da02      	bge.n	80114ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	2200      	movs	r2, #0
 80114ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10c      	bne.n	8011510 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80114f6:	4b35      	ldr	r3, [pc, #212]	; (80115cc <tcp_output_segment+0x1b8>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f8 fdce 	bl	800a0a6 <lwip_htonl>
 801150a:	4602      	mov	r2, r0
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	68da      	ldr	r2, [r3, #12]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	8959      	ldrh	r1, [r3, #10]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	8b3a      	ldrh	r2, [r7, #24]
 801152a:	1a8a      	subs	r2, r1, r2
 801152c:	b292      	uxth	r2, r2
 801152e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	8919      	ldrh	r1, [r3, #8]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	8b3a      	ldrh	r2, [r7, #24]
 801153c:	1a8a      	subs	r2, r1, r2
 801153e:	b292      	uxth	r2, r2
 8011540:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	68d2      	ldr	r2, [r2, #12]
 801154a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	2200      	movs	r2, #0
 8011552:	741a      	strb	r2, [r3, #16]
 8011554:	2200      	movs	r2, #0
 8011556:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	68da      	ldr	r2, [r3, #12]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	7a9b      	ldrb	r3, [r3, #10]
 8011560:	f003 0301 	and.w	r3, r3, #1
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <tcp_output_segment+0x158>
 8011568:	2318      	movs	r3, #24
 801156a:	e000      	b.n	801156e <tcp_output_segment+0x15a>
 801156c:	2314      	movs	r3, #20
 801156e:	4413      	add	r3, r2
 8011570:	69fa      	ldr	r2, [r7, #28]
 8011572:	429a      	cmp	r2, r3
 8011574:	d006      	beq.n	8011584 <tcp_output_segment+0x170>
 8011576:	4b10      	ldr	r3, [pc, #64]	; (80115b8 <tcp_output_segment+0x1a4>)
 8011578:	f240 621c 	movw	r2, #1564	; 0x61c
 801157c:	4914      	ldr	r1, [pc, #80]	; (80115d0 <tcp_output_segment+0x1bc>)
 801157e:	4810      	ldr	r0, [pc, #64]	; (80115c0 <tcp_output_segment+0x1ac>)
 8011580:	f005 ff36 	bl	80173f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6858      	ldr	r0, [r3, #4]
 8011588:	68b9      	ldr	r1, [r7, #8]
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	1d1c      	adds	r4, r3, #4
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	7add      	ldrb	r5, [r3, #11]
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	7a9b      	ldrb	r3, [r3, #10]
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	9202      	str	r2, [sp, #8]
 801159a:	2206      	movs	r2, #6
 801159c:	9201      	str	r2, [sp, #4]
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	462b      	mov	r3, r5
 80115a2:	4622      	mov	r2, r4
 80115a4:	f004 fc26 	bl	8015df4 <ip4_output_if>
 80115a8:	4603      	mov	r3, r0
 80115aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80115ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3720      	adds	r7, #32
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bdb0      	pop	{r4, r5, r7, pc}
 80115b8:	0801a554 	.word	0x0801a554
 80115bc:	0801ab18 	.word	0x0801ab18
 80115c0:	0801a5a8 	.word	0x0801a5a8
 80115c4:	0801ab38 	.word	0x0801ab38
 80115c8:	0801ab58 	.word	0x0801ab58
 80115cc:	2001091c 	.word	0x2001091c
 80115d0:	0801ab7c 	.word	0x0801ab7c

080115d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80115d4:	b5b0      	push	{r4, r5, r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d106      	bne.n	80115f0 <tcp_rexmit_rto_prepare+0x1c>
 80115e2:	4b31      	ldr	r3, [pc, #196]	; (80116a8 <tcp_rexmit_rto_prepare+0xd4>)
 80115e4:	f240 6263 	movw	r2, #1635	; 0x663
 80115e8:	4930      	ldr	r1, [pc, #192]	; (80116ac <tcp_rexmit_rto_prepare+0xd8>)
 80115ea:	4831      	ldr	r0, [pc, #196]	; (80116b0 <tcp_rexmit_rto_prepare+0xdc>)
 80115ec:	f005 ff00 	bl	80173f0 <iprintf>

  if (pcb->unacked == NULL) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d102      	bne.n	80115fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80115f8:	f06f 0305 	mvn.w	r3, #5
 80115fc:	e050      	b.n	80116a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011602:	60fb      	str	r3, [r7, #12]
 8011604:	e00b      	b.n	801161e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	f7ff fee4 	bl	80113d4 <tcp_output_segment_busy>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011612:	f06f 0305 	mvn.w	r3, #5
 8011616:	e043      	b.n	80116a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	60fb      	str	r3, [r7, #12]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1ef      	bne.n	8011606 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	f7ff fed4 	bl	80113d4 <tcp_output_segment_busy>
 801162c:	4603      	mov	r3, r0
 801162e:	2b00      	cmp	r3, #0
 8011630:	d002      	beq.n	8011638 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011632:	f06f 0305 	mvn.w	r3, #5
 8011636:	e033      	b.n	80116a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2200      	movs	r2, #0
 801164c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	4618      	mov	r0, r3
 8011664:	f7f8 fd1f 	bl	800a0a6 <lwip_htonl>
 8011668:	4604      	mov	r4, r0
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	891b      	ldrh	r3, [r3, #8]
 801166e:	461d      	mov	r5, r3
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	899b      	ldrh	r3, [r3, #12]
 8011676:	b29b      	uxth	r3, r3
 8011678:	4618      	mov	r0, r3
 801167a:	f7f8 fcff 	bl	800a07c <lwip_htons>
 801167e:	4603      	mov	r3, r0
 8011680:	b2db      	uxtb	r3, r3
 8011682:	f003 0303 	and.w	r3, r3, #3
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <tcp_rexmit_rto_prepare+0xba>
 801168a:	2301      	movs	r3, #1
 801168c:	e000      	b.n	8011690 <tcp_rexmit_rto_prepare+0xbc>
 801168e:	2300      	movs	r3, #0
 8011690:	442b      	add	r3, r5
 8011692:	18e2      	adds	r2, r4, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bdb0      	pop	{r4, r5, r7, pc}
 80116a8:	0801a554 	.word	0x0801a554
 80116ac:	0801ab90 	.word	0x0801ab90
 80116b0:	0801a5a8 	.word	0x0801a5a8

080116b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d106      	bne.n	80116d0 <tcp_rexmit_rto_commit+0x1c>
 80116c2:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <tcp_rexmit_rto_commit+0x44>)
 80116c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116c8:	490c      	ldr	r1, [pc, #48]	; (80116fc <tcp_rexmit_rto_commit+0x48>)
 80116ca:	480d      	ldr	r0, [pc, #52]	; (8011700 <tcp_rexmit_rto_commit+0x4c>)
 80116cc:	f005 fe90 	bl	80173f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116d6:	2bff      	cmp	r3, #255	; 0xff
 80116d8:	d007      	beq.n	80116ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116e0:	3301      	adds	r3, #1
 80116e2:	b2da      	uxtb	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f7ff fc7e 	bl	8010fec <tcp_output>
}
 80116f0:	bf00      	nop
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	0801a554 	.word	0x0801a554
 80116fc:	0801abb4 	.word	0x0801abb4
 8011700:	0801a5a8 	.word	0x0801a5a8

08011704 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d106      	bne.n	8011720 <tcp_rexmit_rto+0x1c>
 8011712:	4b0a      	ldr	r3, [pc, #40]	; (801173c <tcp_rexmit_rto+0x38>)
 8011714:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011718:	4909      	ldr	r1, [pc, #36]	; (8011740 <tcp_rexmit_rto+0x3c>)
 801171a:	480a      	ldr	r0, [pc, #40]	; (8011744 <tcp_rexmit_rto+0x40>)
 801171c:	f005 fe68 	bl	80173f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff ff57 	bl	80115d4 <tcp_rexmit_rto_prepare>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d102      	bne.n	8011732 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7ff ffc1 	bl	80116b4 <tcp_rexmit_rto_commit>
  }
}
 8011732:	bf00      	nop
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	0801a554 	.word	0x0801a554
 8011740:	0801abd8 	.word	0x0801abd8
 8011744:	0801a5a8 	.word	0x0801a5a8

08011748 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d106      	bne.n	8011764 <tcp_rexmit+0x1c>
 8011756:	4b2f      	ldr	r3, [pc, #188]	; (8011814 <tcp_rexmit+0xcc>)
 8011758:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801175c:	492e      	ldr	r1, [pc, #184]	; (8011818 <tcp_rexmit+0xd0>)
 801175e:	482f      	ldr	r0, [pc, #188]	; (801181c <tcp_rexmit+0xd4>)
 8011760:	f005 fe46 	bl	80173f0 <iprintf>

  if (pcb->unacked == NULL) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011768:	2b00      	cmp	r3, #0
 801176a:	d102      	bne.n	8011772 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801176c:	f06f 0305 	mvn.w	r3, #5
 8011770:	e04c      	b.n	801180c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011776:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011778:	68b8      	ldr	r0, [r7, #8]
 801177a:	f7ff fe2b 	bl	80113d4 <tcp_output_segment_busy>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011784:	f06f 0305 	mvn.w	r3, #5
 8011788:	e040      	b.n	801180c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	336c      	adds	r3, #108	; 0x6c
 8011796:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011798:	e002      	b.n	80117a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d011      	beq.n	80117cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f8 fc78 	bl	800a0a6 <lwip_htonl>
 80117b6:	4604      	mov	r4, r0
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	f7f8 fc71 	bl	800a0a6 <lwip_htonl>
 80117c4:	4603      	mov	r3, r0
 80117c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	dbe6      	blt.n	801179a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d103      	bne.n	80117ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117f0:	2bff      	cmp	r3, #255	; 0xff
 80117f2:	d007      	beq.n	8011804 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117fa:	3301      	adds	r3, #1
 80117fc:	b2da      	uxtb	r2, r3
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3714      	adds	r7, #20
 8011810:	46bd      	mov	sp, r7
 8011812:	bd90      	pop	{r4, r7, pc}
 8011814:	0801a554 	.word	0x0801a554
 8011818:	0801abf4 	.word	0x0801abf4
 801181c:	0801a5a8 	.word	0x0801a5a8

08011820 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d106      	bne.n	801183c <tcp_rexmit_fast+0x1c>
 801182e:	4b2a      	ldr	r3, [pc, #168]	; (80118d8 <tcp_rexmit_fast+0xb8>)
 8011830:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011834:	4929      	ldr	r1, [pc, #164]	; (80118dc <tcp_rexmit_fast+0xbc>)
 8011836:	482a      	ldr	r0, [pc, #168]	; (80118e0 <tcp_rexmit_fast+0xc0>)
 8011838:	f005 fdda 	bl	80173f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011840:	2b00      	cmp	r3, #0
 8011842:	d044      	beq.n	80118ce <tcp_rexmit_fast+0xae>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	8b5b      	ldrh	r3, [r3, #26]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d13e      	bne.n	80118ce <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ff79 	bl	8011748 <tcp_rexmit>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d138      	bne.n	80118ce <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011868:	4293      	cmp	r3, r2
 801186a:	bf28      	it	cs
 801186c:	4613      	movcs	r3, r2
 801186e:	b29b      	uxth	r3, r3
 8011870:	0fda      	lsrs	r2, r3, #31
 8011872:	4413      	add	r3, r2
 8011874:	105b      	asrs	r3, r3, #1
 8011876:	b29a      	uxth	r2, r3
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011884:	461a      	mov	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188a:	005b      	lsls	r3, r3, #1
 801188c:	429a      	cmp	r2, r3
 801188e:	d206      	bcs.n	801189e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011894:	005b      	lsls	r3, r3, #1
 8011896:	b29a      	uxth	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a8:	4619      	mov	r1, r3
 80118aa:	0049      	lsls	r1, r1, #1
 80118ac:	440b      	add	r3, r1
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	4413      	add	r3, r2
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8b5b      	ldrh	r3, [r3, #26]
 80118be:	f043 0304 	orr.w	r3, r3, #4
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80118ce:	bf00      	nop
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	0801a554 	.word	0x0801a554
 80118dc:	0801ac0c 	.word	0x0801ac0c
 80118e0:	0801a5a8 	.word	0x0801a5a8

080118e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b086      	sub	sp, #24
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	607b      	str	r3, [r7, #4]
 80118ee:	460b      	mov	r3, r1
 80118f0:	817b      	strh	r3, [r7, #10]
 80118f2:	4613      	mov	r3, r2
 80118f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80118f6:	897a      	ldrh	r2, [r7, #10]
 80118f8:	893b      	ldrh	r3, [r7, #8]
 80118fa:	4413      	add	r3, r2
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	3314      	adds	r3, #20
 8011900:	b29b      	uxth	r3, r3
 8011902:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011906:	4619      	mov	r1, r3
 8011908:	2022      	movs	r0, #34	; 0x22
 801190a:	f7f9 fcd1 	bl	800b2b0 <pbuf_alloc>
 801190e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d04d      	beq.n	80119b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011916:	897b      	ldrh	r3, [r7, #10]
 8011918:	3313      	adds	r3, #19
 801191a:	697a      	ldr	r2, [r7, #20]
 801191c:	8952      	ldrh	r2, [r2, #10]
 801191e:	4293      	cmp	r3, r2
 8011920:	db06      	blt.n	8011930 <tcp_output_alloc_header_common+0x4c>
 8011922:	4b26      	ldr	r3, [pc, #152]	; (80119bc <tcp_output_alloc_header_common+0xd8>)
 8011924:	f240 7223 	movw	r2, #1827	; 0x723
 8011928:	4925      	ldr	r1, [pc, #148]	; (80119c0 <tcp_output_alloc_header_common+0xdc>)
 801192a:	4826      	ldr	r0, [pc, #152]	; (80119c4 <tcp_output_alloc_header_common+0xe0>)
 801192c:	f005 fd60 	bl	80173f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011936:	8c3b      	ldrh	r3, [r7, #32]
 8011938:	4618      	mov	r0, r3
 801193a:	f7f8 fb9f 	bl	800a07c <lwip_htons>
 801193e:	4603      	mov	r3, r0
 8011940:	461a      	mov	r2, r3
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011948:	4618      	mov	r0, r3
 801194a:	f7f8 fb97 	bl	800a07c <lwip_htons>
 801194e:	4603      	mov	r3, r0
 8011950:	461a      	mov	r2, r3
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801195c:	68f8      	ldr	r0, [r7, #12]
 801195e:	f7f8 fba2 	bl	800a0a6 <lwip_htonl>
 8011962:	4602      	mov	r2, r0
 8011964:	693b      	ldr	r3, [r7, #16]
 8011966:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011968:	897b      	ldrh	r3, [r7, #10]
 801196a:	089b      	lsrs	r3, r3, #2
 801196c:	b29b      	uxth	r3, r3
 801196e:	3305      	adds	r3, #5
 8011970:	b29b      	uxth	r3, r3
 8011972:	031b      	lsls	r3, r3, #12
 8011974:	b29a      	uxth	r2, r3
 8011976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801197a:	b29b      	uxth	r3, r3
 801197c:	4313      	orrs	r3, r2
 801197e:	b29b      	uxth	r3, r3
 8011980:	4618      	mov	r0, r3
 8011982:	f7f8 fb7b 	bl	800a07c <lwip_htons>
 8011986:	4603      	mov	r3, r0
 8011988:	461a      	mov	r2, r3
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801198e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011990:	4618      	mov	r0, r3
 8011992:	f7f8 fb73 	bl	800a07c <lwip_htons>
 8011996:	4603      	mov	r3, r0
 8011998:	461a      	mov	r2, r3
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	2200      	movs	r2, #0
 80119a2:	741a      	strb	r2, [r3, #16]
 80119a4:	2200      	movs	r2, #0
 80119a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2200      	movs	r2, #0
 80119ac:	749a      	strb	r2, [r3, #18]
 80119ae:	2200      	movs	r2, #0
 80119b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80119b2:	697b      	ldr	r3, [r7, #20]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3718      	adds	r7, #24
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	0801a554 	.word	0x0801a554
 80119c0:	0801ac2c 	.word	0x0801ac2c
 80119c4:	0801a5a8 	.word	0x0801a5a8

080119c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80119c8:	b5b0      	push	{r4, r5, r7, lr}
 80119ca:	b08a      	sub	sp, #40	; 0x28
 80119cc:	af04      	add	r7, sp, #16
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	607b      	str	r3, [r7, #4]
 80119d2:	460b      	mov	r3, r1
 80119d4:	817b      	strh	r3, [r7, #10]
 80119d6:	4613      	mov	r3, r2
 80119d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d106      	bne.n	80119ee <tcp_output_alloc_header+0x26>
 80119e0:	4b15      	ldr	r3, [pc, #84]	; (8011a38 <tcp_output_alloc_header+0x70>)
 80119e2:	f240 7242 	movw	r2, #1858	; 0x742
 80119e6:	4915      	ldr	r1, [pc, #84]	; (8011a3c <tcp_output_alloc_header+0x74>)
 80119e8:	4815      	ldr	r0, [pc, #84]	; (8011a40 <tcp_output_alloc_header+0x78>)
 80119ea:	f005 fd01 	bl	80173f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	8adb      	ldrh	r3, [r3, #22]
 80119f6:	68fa      	ldr	r2, [r7, #12]
 80119f8:	8b12      	ldrh	r2, [r2, #24]
 80119fa:	68f9      	ldr	r1, [r7, #12]
 80119fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80119fe:	893d      	ldrh	r5, [r7, #8]
 8011a00:	897c      	ldrh	r4, [r7, #10]
 8011a02:	9103      	str	r1, [sp, #12]
 8011a04:	2110      	movs	r1, #16
 8011a06:	9102      	str	r1, [sp, #8]
 8011a08:	9201      	str	r2, [sp, #4]
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	462a      	mov	r2, r5
 8011a10:	4621      	mov	r1, r4
 8011a12:	f7ff ff67 	bl	80118e4 <tcp_output_alloc_header_common>
 8011a16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d006      	beq.n	8011a2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a26:	441a      	add	r2, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a2c:	697b      	ldr	r3, [r7, #20]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3718      	adds	r7, #24
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bdb0      	pop	{r4, r5, r7, pc}
 8011a36:	bf00      	nop
 8011a38:	0801a554 	.word	0x0801a554
 8011a3c:	0801ac5c 	.word	0x0801ac5c
 8011a40:	0801a5a8 	.word	0x0801a5a8

08011a44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b088      	sub	sp, #32
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	4611      	mov	r1, r2
 8011a50:	461a      	mov	r2, r3
 8011a52:	460b      	mov	r3, r1
 8011a54:	71fb      	strb	r3, [r7, #7]
 8011a56:	4613      	mov	r3, r2
 8011a58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d106      	bne.n	8011a72 <tcp_output_fill_options+0x2e>
 8011a64:	4b12      	ldr	r3, [pc, #72]	; (8011ab0 <tcp_output_fill_options+0x6c>)
 8011a66:	f240 7256 	movw	r2, #1878	; 0x756
 8011a6a:	4912      	ldr	r1, [pc, #72]	; (8011ab4 <tcp_output_fill_options+0x70>)
 8011a6c:	4812      	ldr	r0, [pc, #72]	; (8011ab8 <tcp_output_fill_options+0x74>)
 8011a6e:	f005 fcbf 	bl	80173f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	3314      	adds	r3, #20
 8011a7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011a7e:	8bfb      	ldrh	r3, [r7, #30]
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	461a      	mov	r2, r3
 8011a84:	79fb      	ldrb	r3, [r7, #7]
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	f003 0304 	and.w	r3, r3, #4
 8011a8c:	4413      	add	r3, r2
 8011a8e:	3314      	adds	r3, #20
 8011a90:	69ba      	ldr	r2, [r7, #24]
 8011a92:	4413      	add	r3, r2
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d006      	beq.n	8011aa8 <tcp_output_fill_options+0x64>
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <tcp_output_fill_options+0x6c>)
 8011a9c:	f240 7275 	movw	r2, #1909	; 0x775
 8011aa0:	4906      	ldr	r1, [pc, #24]	; (8011abc <tcp_output_fill_options+0x78>)
 8011aa2:	4805      	ldr	r0, [pc, #20]	; (8011ab8 <tcp_output_fill_options+0x74>)
 8011aa4:	f005 fca4 	bl	80173f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011aa8:	bf00      	nop
 8011aaa:	3720      	adds	r7, #32
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	0801a554 	.word	0x0801a554
 8011ab4:	0801ac84 	.word	0x0801ac84
 8011ab8:	0801a5a8 	.word	0x0801a5a8
 8011abc:	0801ab7c 	.word	0x0801ab7c

08011ac0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08a      	sub	sp, #40	; 0x28
 8011ac4:	af04      	add	r7, sp, #16
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
 8011acc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d106      	bne.n	8011ae2 <tcp_output_control_segment+0x22>
 8011ad4:	4b1c      	ldr	r3, [pc, #112]	; (8011b48 <tcp_output_control_segment+0x88>)
 8011ad6:	f240 7287 	movw	r2, #1927	; 0x787
 8011ada:	491c      	ldr	r1, [pc, #112]	; (8011b4c <tcp_output_control_segment+0x8c>)
 8011adc:	481c      	ldr	r0, [pc, #112]	; (8011b50 <tcp_output_control_segment+0x90>)
 8011ade:	f005 fc87 	bl	80173f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	6879      	ldr	r1, [r7, #4]
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7fe fae8 	bl	80100bc <tcp_route>
 8011aec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d102      	bne.n	8011afa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011af4:	23fc      	movs	r3, #252	; 0xfc
 8011af6:	75fb      	strb	r3, [r7, #23]
 8011af8:	e01c      	b.n	8011b34 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d006      	beq.n	8011b0e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	7adb      	ldrb	r3, [r3, #11]
 8011b04:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	7a9b      	ldrb	r3, [r3, #10]
 8011b0a:	757b      	strb	r3, [r7, #21]
 8011b0c:	e003      	b.n	8011b16 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b0e:	23ff      	movs	r3, #255	; 0xff
 8011b10:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b16:	7dba      	ldrb	r2, [r7, #22]
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	9302      	str	r3, [sp, #8]
 8011b1c:	2306      	movs	r3, #6
 8011b1e:	9301      	str	r3, [sp, #4]
 8011b20:	7d7b      	ldrb	r3, [r7, #21]
 8011b22:	9300      	str	r3, [sp, #0]
 8011b24:	4613      	mov	r3, r2
 8011b26:	683a      	ldr	r2, [r7, #0]
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	68b8      	ldr	r0, [r7, #8]
 8011b2c:	f004 f962 	bl	8015df4 <ip4_output_if>
 8011b30:	4603      	mov	r3, r0
 8011b32:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011b34:	68b8      	ldr	r0, [r7, #8]
 8011b36:	f7f9 fe9f 	bl	800b878 <pbuf_free>
  return err;
 8011b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	0801a554 	.word	0x0801a554
 8011b4c:	0801acac 	.word	0x0801acac
 8011b50:	0801a5a8 	.word	0x0801a5a8

08011b54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b08b      	sub	sp, #44	; 0x2c
 8011b58:	af04      	add	r7, sp, #16
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
 8011b60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d106      	bne.n	8011b76 <tcp_rst+0x22>
 8011b68:	4b1f      	ldr	r3, [pc, #124]	; (8011be8 <tcp_rst+0x94>)
 8011b6a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011b6e:	491f      	ldr	r1, [pc, #124]	; (8011bec <tcp_rst+0x98>)
 8011b70:	481f      	ldr	r0, [pc, #124]	; (8011bf0 <tcp_rst+0x9c>)
 8011b72:	f005 fc3d 	bl	80173f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d106      	bne.n	8011b8a <tcp_rst+0x36>
 8011b7c:	4b1a      	ldr	r3, [pc, #104]	; (8011be8 <tcp_rst+0x94>)
 8011b7e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011b82:	491c      	ldr	r1, [pc, #112]	; (8011bf4 <tcp_rst+0xa0>)
 8011b84:	481a      	ldr	r0, [pc, #104]	; (8011bf0 <tcp_rst+0x9c>)
 8011b86:	f005 fc33 	bl	80173f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011b8e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011b92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011b94:	7dfb      	ldrb	r3, [r7, #23]
 8011b96:	b29c      	uxth	r4, r3
 8011b98:	68b8      	ldr	r0, [r7, #8]
 8011b9a:	f7f8 fa84 	bl	800a0a6 <lwip_htonl>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	8abb      	ldrh	r3, [r7, #20]
 8011ba2:	9303      	str	r3, [sp, #12]
 8011ba4:	2314      	movs	r3, #20
 8011ba6:	9302      	str	r3, [sp, #8]
 8011ba8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011baa:	9301      	str	r3, [sp, #4]
 8011bac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f7ff fe94 	bl	80118e4 <tcp_output_alloc_header_common>
 8011bbc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00c      	beq.n	8011bde <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011bc4:	7dfb      	ldrb	r3, [r7, #23]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	6939      	ldr	r1, [r7, #16]
 8011bca:	68f8      	ldr	r0, [r7, #12]
 8011bcc:	f7ff ff3a 	bl	8011a44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd2:	683a      	ldr	r2, [r7, #0]
 8011bd4:	6939      	ldr	r1, [r7, #16]
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f7ff ff72 	bl	8011ac0 <tcp_output_control_segment>
 8011bdc:	e000      	b.n	8011be0 <tcp_rst+0x8c>
    return;
 8011bde:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011be0:	371c      	adds	r7, #28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd90      	pop	{r4, r7, pc}
 8011be6:	bf00      	nop
 8011be8:	0801a554 	.word	0x0801a554
 8011bec:	0801acd8 	.word	0x0801acd8
 8011bf0:	0801a5a8 	.word	0x0801a5a8
 8011bf4:	0801acf4 	.word	0x0801acf4

08011bf8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011bf8:	b590      	push	{r4, r7, lr}
 8011bfa:	b087      	sub	sp, #28
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_send_empty_ack+0x24>
 8011c0e:	4b28      	ldr	r3, [pc, #160]	; (8011cb0 <tcp_send_empty_ack+0xb8>)
 8011c10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c14:	4927      	ldr	r1, [pc, #156]	; (8011cb4 <tcp_send_empty_ack+0xbc>)
 8011c16:	4828      	ldr	r0, [pc, #160]	; (8011cb8 <tcp_send_empty_ack+0xc0>)
 8011c18:	f005 fbea 	bl	80173f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	f003 0304 	and.w	r3, r3, #4
 8011c26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c28:	7d7b      	ldrb	r3, [r7, #21]
 8011c2a:	b29c      	uxth	r4, r3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7f8 fa38 	bl	800a0a6 <lwip_htonl>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2200      	movs	r2, #0
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f7ff fec3 	bl	80119c8 <tcp_output_alloc_header>
 8011c42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d109      	bne.n	8011c5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	8b5b      	ldrh	r3, [r3, #26]
 8011c4e:	f043 0303 	orr.w	r3, r3, #3
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011c58:	f06f 0301 	mvn.w	r3, #1
 8011c5c:	e023      	b.n	8011ca6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011c5e:	7dbb      	ldrb	r3, [r7, #22]
 8011c60:	7dfa      	ldrb	r2, [r7, #23]
 8011c62:	6939      	ldr	r1, [r7, #16]
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ff feed 	bl	8011a44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	3304      	adds	r3, #4
 8011c70:	6939      	ldr	r1, [r7, #16]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f7ff ff24 	bl	8011ac0 <tcp_output_control_segment>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d007      	beq.n	8011c94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	8b5b      	ldrh	r3, [r3, #26]
 8011c88:	f043 0303 	orr.w	r3, r3, #3
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	835a      	strh	r2, [r3, #26]
 8011c92:	e006      	b.n	8011ca2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	8b5b      	ldrh	r3, [r3, #26]
 8011c98:	f023 0303 	bic.w	r3, r3, #3
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	371c      	adds	r7, #28
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd90      	pop	{r4, r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	0801a554 	.word	0x0801a554
 8011cb4:	0801ad10 	.word	0x0801ad10
 8011cb8:	0801a5a8 	.word	0x0801a5a8

08011cbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011cbc:	b590      	push	{r4, r7, lr}
 8011cbe:	b087      	sub	sp, #28
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_keepalive+0x20>
 8011cce:	4b18      	ldr	r3, [pc, #96]	; (8011d30 <tcp_keepalive+0x74>)
 8011cd0:	f640 0224 	movw	r2, #2084	; 0x824
 8011cd4:	4917      	ldr	r1, [pc, #92]	; (8011d34 <tcp_keepalive+0x78>)
 8011cd6:	4818      	ldr	r0, [pc, #96]	; (8011d38 <tcp_keepalive+0x7c>)
 8011cd8:	f005 fb8a 	bl	80173f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011cdc:	7dfb      	ldrb	r3, [r7, #23]
 8011cde:	b29c      	uxth	r4, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7f8 f9dd 	bl	800a0a6 <lwip_htonl>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2200      	movs	r2, #0
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff fe68 	bl	80119c8 <tcp_output_alloc_header>
 8011cf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295
 8011d04:	e010      	b.n	8011d28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d06:	7dfb      	ldrb	r3, [r7, #23]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	6939      	ldr	r1, [r7, #16]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff fe99 	bl	8011a44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	3304      	adds	r3, #4
 8011d18:	6939      	ldr	r1, [r7, #16]
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7ff fed0 	bl	8011ac0 <tcp_output_control_segment>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	371c      	adds	r7, #28
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd90      	pop	{r4, r7, pc}
 8011d30:	0801a554 	.word	0x0801a554
 8011d34:	0801ad30 	.word	0x0801ad30
 8011d38:	0801a5a8 	.word	0x0801a5a8

08011d3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011d3c:	b590      	push	{r4, r7, lr}
 8011d3e:	b08b      	sub	sp, #44	; 0x2c
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d44:	2300      	movs	r3, #0
 8011d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d106      	bne.n	8011d5e <tcp_zero_window_probe+0x22>
 8011d50:	4b4c      	ldr	r3, [pc, #304]	; (8011e84 <tcp_zero_window_probe+0x148>)
 8011d52:	f640 024f 	movw	r2, #2127	; 0x84f
 8011d56:	494c      	ldr	r1, [pc, #304]	; (8011e88 <tcp_zero_window_probe+0x14c>)
 8011d58:	484c      	ldr	r0, [pc, #304]	; (8011e8c <tcp_zero_window_probe+0x150>)
 8011d5a:	f005 fb49 	bl	80173f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d101      	bne.n	8011d6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e086      	b.n	8011e7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d74:	2bff      	cmp	r3, #255	; 0xff
 8011d76:	d007      	beq.n	8011d88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d7e:	3301      	adds	r3, #1
 8011d80:	b2da      	uxtb	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011d88:	6a3b      	ldr	r3, [r7, #32]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7f8 f973 	bl	800a07c <lwip_htons>
 8011d96:	4603      	mov	r3, r0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f003 0301 	and.w	r3, r3, #1
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d005      	beq.n	8011dae <tcp_zero_window_probe+0x72>
 8011da2:	6a3b      	ldr	r3, [r7, #32]
 8011da4:	891b      	ldrh	r3, [r3, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <tcp_zero_window_probe+0x72>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <tcp_zero_window_probe+0x74>
 8011dae:	2300      	movs	r3, #0
 8011db0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011db2:	7ffb      	ldrb	r3, [r7, #31]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	bf0c      	ite	eq
 8011db8:	2301      	moveq	r3, #1
 8011dba:	2300      	movne	r3, #0
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dc4:	b299      	uxth	r1, r3
 8011dc6:	6a3b      	ldr	r3, [r7, #32]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	8bba      	ldrh	r2, [r7, #28]
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7ff fdfa 	bl	80119c8 <tcp_output_alloc_header>
 8011dd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d102      	bne.n	8011de2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8011de0:	e04c      	b.n	8011e7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011de8:	7ffb      	ldrb	r3, [r7, #31]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d011      	beq.n	8011e12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	899b      	ldrh	r3, [r3, #12]
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	b21b      	sxth	r3, r3
 8011df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011dfa:	b21c      	sxth	r4, r3
 8011dfc:	2011      	movs	r0, #17
 8011dfe:	f7f8 f93d 	bl	800a07c <lwip_htons>
 8011e02:	4603      	mov	r3, r0
 8011e04:	b21b      	sxth	r3, r3
 8011e06:	4323      	orrs	r3, r4
 8011e08:	b21b      	sxth	r3, r3
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	819a      	strh	r2, [r3, #12]
 8011e10:	e010      	b.n	8011e34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	3314      	adds	r3, #20
 8011e18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	6858      	ldr	r0, [r3, #4]
 8011e1e:	6a3b      	ldr	r3, [r7, #32]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	891a      	ldrh	r2, [r3, #8]
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	891b      	ldrh	r3, [r3, #8]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	6939      	ldr	r1, [r7, #16]
 8011e30:	f7f9 ff28 	bl	800bc84 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e34:	6a3b      	ldr	r3, [r7, #32]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f8 f933 	bl	800a0a6 <lwip_htonl>
 8011e40:	4603      	mov	r3, r0
 8011e42:	3301      	adds	r3, #1
 8011e44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	da02      	bge.n	8011e58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	69b9      	ldr	r1, [r7, #24]
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff fdef 	bl	8011a44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	69b9      	ldr	r1, [r7, #24]
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff fe26 	bl	8011ac0 <tcp_output_control_segment>
 8011e74:	4603      	mov	r3, r0
 8011e76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	372c      	adds	r7, #44	; 0x2c
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd90      	pop	{r4, r7, pc}
 8011e84:	0801a554 	.word	0x0801a554
 8011e88:	0801ad4c 	.word	0x0801ad4c
 8011e8c:	0801a5a8 	.word	0x0801a5a8

08011e90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011e98:	f7f9 ffe2 	bl	800be60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011e9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <tcpip_tcp_timer+0x38>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d103      	bne.n	8011eac <tcpip_tcp_timer+0x1c>
 8011ea4:	4b09      	ldr	r3, [pc, #36]	; (8011ecc <tcpip_tcp_timer+0x3c>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d005      	beq.n	8011eb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011eac:	2200      	movs	r2, #0
 8011eae:	4908      	ldr	r1, [pc, #32]	; (8011ed0 <tcpip_tcp_timer+0x40>)
 8011eb0:	20fa      	movs	r0, #250	; 0xfa
 8011eb2:	f000 f8f3 	bl	801209c <sys_timeout>
 8011eb6:	e003      	b.n	8011ec0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011eb8:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <tcpip_tcp_timer+0x44>)
 8011eba:	2200      	movs	r2, #0
 8011ebc:	601a      	str	r2, [r3, #0]
  }
}
 8011ebe:	bf00      	nop
 8011ec0:	bf00      	nop
 8011ec2:	3708      	adds	r7, #8
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20010928 	.word	0x20010928
 8011ecc:	2001092c 	.word	0x2001092c
 8011ed0:	08011e91 	.word	0x08011e91
 8011ed4:	20010974 	.word	0x20010974

08011ed8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011edc:	4b0a      	ldr	r3, [pc, #40]	; (8011f08 <tcp_timer_needed+0x30>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10f      	bne.n	8011f04 <tcp_timer_needed+0x2c>
 8011ee4:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <tcp_timer_needed+0x34>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d103      	bne.n	8011ef4 <tcp_timer_needed+0x1c>
 8011eec:	4b08      	ldr	r3, [pc, #32]	; (8011f10 <tcp_timer_needed+0x38>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d007      	beq.n	8011f04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011ef4:	4b04      	ldr	r3, [pc, #16]	; (8011f08 <tcp_timer_needed+0x30>)
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011efa:	2200      	movs	r2, #0
 8011efc:	4905      	ldr	r1, [pc, #20]	; (8011f14 <tcp_timer_needed+0x3c>)
 8011efe:	20fa      	movs	r0, #250	; 0xfa
 8011f00:	f000 f8cc 	bl	801209c <sys_timeout>
  }
}
 8011f04:	bf00      	nop
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	20010974 	.word	0x20010974
 8011f0c:	20010928 	.word	0x20010928
 8011f10:	2001092c 	.word	0x2001092c
 8011f14:	08011e91 	.word	0x08011e91

08011f18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011f24:	200a      	movs	r0, #10
 8011f26:	f7f8 fd81 	bl	800aa2c <memp_malloc>
 8011f2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d109      	bne.n	8011f46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d151      	bne.n	8011fdc <sys_timeout_abs+0xc4>
 8011f38:	4b2a      	ldr	r3, [pc, #168]	; (8011fe4 <sys_timeout_abs+0xcc>)
 8011f3a:	22be      	movs	r2, #190	; 0xbe
 8011f3c:	492a      	ldr	r1, [pc, #168]	; (8011fe8 <sys_timeout_abs+0xd0>)
 8011f3e:	482b      	ldr	r0, [pc, #172]	; (8011fec <sys_timeout_abs+0xd4>)
 8011f40:	f005 fa56 	bl	80173f0 <iprintf>
    return;
 8011f44:	e04a      	b.n	8011fdc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011f5e:	4b24      	ldr	r3, [pc, #144]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d103      	bne.n	8011f6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011f66:	4a22      	ldr	r2, [pc, #136]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	6013      	str	r3, [r2, #0]
    return;
 8011f6c:	e037      	b.n	8011fde <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	685a      	ldr	r2, [r3, #4]
 8011f72:	4b1f      	ldr	r3, [pc, #124]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	0fdb      	lsrs	r3, r3, #31
 8011f7c:	f003 0301 	and.w	r3, r3, #1
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d007      	beq.n	8011f96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011f86:	4b1a      	ldr	r3, [pc, #104]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011f8e:	4a18      	ldr	r2, [pc, #96]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	e023      	b.n	8011fde <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f96:	4b16      	ldr	r3, [pc, #88]	; (8011ff0 <sys_timeout_abs+0xd8>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	617b      	str	r3, [r7, #20]
 8011f9c:	e01a      	b.n	8011fd4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d00b      	beq.n	8011fbe <sys_timeout_abs+0xa6>
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	0fdb      	lsrs	r3, r3, #31
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d007      	beq.n	8011fce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	693a      	ldr	r2, [r7, #16]
 8011fca:	601a      	str	r2, [r3, #0]
        break;
 8011fcc:	e007      	b.n	8011fde <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	617b      	str	r3, [r7, #20]
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e1      	bne.n	8011f9e <sys_timeout_abs+0x86>
 8011fda:	e000      	b.n	8011fde <sys_timeout_abs+0xc6>
    return;
 8011fdc:	bf00      	nop
      }
    }
  }
}
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	0801ad70 	.word	0x0801ad70
 8011fe8:	0801ada4 	.word	0x0801ada4
 8011fec:	0801ade4 	.word	0x0801ade4
 8011ff0:	2001096c 	.word	0x2001096c

08011ff4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b086      	sub	sp, #24
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	4798      	blx	r3

  now = sys_now();
 8012006:	f7f2 fb07 	bl	8004618 <sys_now>
 801200a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	4b0f      	ldr	r3, [pc, #60]	; (8012050 <lwip_cyclic_timer+0x5c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4413      	add	r3, r2
 8012016:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	1ad3      	subs	r3, r2, r3
 801201e:	0fdb      	lsrs	r3, r3, #31
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d009      	beq.n	801203e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	4413      	add	r3, r2
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	4907      	ldr	r1, [pc, #28]	; (8012054 <lwip_cyclic_timer+0x60>)
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff ff6e 	bl	8011f18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801203c:	e004      	b.n	8012048 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	4904      	ldr	r1, [pc, #16]	; (8012054 <lwip_cyclic_timer+0x60>)
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f7ff ff68 	bl	8011f18 <sys_timeout_abs>
}
 8012048:	bf00      	nop
 801204a:	3718      	adds	r7, #24
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	20010970 	.word	0x20010970
 8012054:	08011ff5 	.word	0x08011ff5

08012058 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801205e:	2301      	movs	r3, #1
 8012060:	607b      	str	r3, [r7, #4]
 8012062:	e00e      	b.n	8012082 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012064:	4a0b      	ldr	r2, [pc, #44]	; (8012094 <sys_timeouts_init+0x3c>)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	4a08      	ldr	r2, [pc, #32]	; (8012094 <sys_timeouts_init+0x3c>)
 8012072:	4413      	add	r3, r2
 8012074:	461a      	mov	r2, r3
 8012076:	4908      	ldr	r1, [pc, #32]	; (8012098 <sys_timeouts_init+0x40>)
 8012078:	f000 f810 	bl	801209c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	3301      	adds	r3, #1
 8012080:	607b      	str	r3, [r7, #4]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2b04      	cmp	r3, #4
 8012086:	d9ed      	bls.n	8012064 <sys_timeouts_init+0xc>
  }
}
 8012088:	bf00      	nop
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	0801bd40 	.word	0x0801bd40
 8012098:	08011ff5 	.word	0x08011ff5

0801209c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120ae:	d306      	bcc.n	80120be <sys_timeout+0x22>
 80120b0:	4b0a      	ldr	r3, [pc, #40]	; (80120dc <sys_timeout+0x40>)
 80120b2:	f240 1229 	movw	r2, #297	; 0x129
 80120b6:	490a      	ldr	r1, [pc, #40]	; (80120e0 <sys_timeout+0x44>)
 80120b8:	480a      	ldr	r0, [pc, #40]	; (80120e4 <sys_timeout+0x48>)
 80120ba:	f005 f999 	bl	80173f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80120be:	f7f2 faab 	bl	8004618 <sys_now>
 80120c2:	4602      	mov	r2, r0
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	4413      	add	r3, r2
 80120c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	68b9      	ldr	r1, [r7, #8]
 80120ce:	6978      	ldr	r0, [r7, #20]
 80120d0:	f7ff ff22 	bl	8011f18 <sys_timeout_abs>
#endif
}
 80120d4:	bf00      	nop
 80120d6:	3718      	adds	r7, #24
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	0801ad70 	.word	0x0801ad70
 80120e0:	0801ae0c 	.word	0x0801ae0c
 80120e4:	0801ade4 	.word	0x0801ade4

080120e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80120ee:	f7f2 fa93 	bl	8004618 <sys_now>
 80120f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80120f4:	4b17      	ldr	r3, [pc, #92]	; (8012154 <sys_check_timeouts+0x6c>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d022      	beq.n	8012146 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	68fa      	ldr	r2, [r7, #12]
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	0fdb      	lsrs	r3, r3, #31
 801210a:	f003 0301 	and.w	r3, r3, #1
 801210e:	b2db      	uxtb	r3, r3
 8012110:	2b00      	cmp	r3, #0
 8012112:	d11a      	bne.n	801214a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	4a0e      	ldr	r2, [pc, #56]	; (8012154 <sys_check_timeouts+0x6c>)
 801211a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	4a0a      	ldr	r2, [pc, #40]	; (8012158 <sys_check_timeouts+0x70>)
 801212e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012130:	68b9      	ldr	r1, [r7, #8]
 8012132:	200a      	movs	r0, #10
 8012134:	f7f8 fcf0 	bl	800ab18 <memp_free>
    if (handler != NULL) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0da      	beq.n	80120f4 <sys_check_timeouts+0xc>
      handler(arg);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6838      	ldr	r0, [r7, #0]
 8012142:	4798      	blx	r3
  do {
 8012144:	e7d6      	b.n	80120f4 <sys_check_timeouts+0xc>
      return;
 8012146:	bf00      	nop
 8012148:	e000      	b.n	801214c <sys_check_timeouts+0x64>
      return;
 801214a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	2001096c 	.word	0x2001096c
 8012158:	20010970 	.word	0x20010970

0801215c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012162:	4b16      	ldr	r3, [pc, #88]	; (80121bc <sys_timeouts_sleeptime+0x60>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d102      	bne.n	8012170 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801216a:	f04f 33ff 	mov.w	r3, #4294967295
 801216e:	e020      	b.n	80121b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012170:	f7f2 fa52 	bl	8004618 <sys_now>
 8012174:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012176:	4b11      	ldr	r3, [pc, #68]	; (80121bc <sys_timeouts_sleeptime+0x60>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	685a      	ldr	r2, [r3, #4]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	0fdb      	lsrs	r3, r3, #31
 8012182:	f003 0301 	and.w	r3, r3, #1
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <sys_timeouts_sleeptime+0x34>
    return 0;
 801218c:	2300      	movs	r3, #0
 801218e:	e010      	b.n	80121b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012190:	4b0a      	ldr	r3, [pc, #40]	; (80121bc <sys_timeouts_sleeptime+0x60>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	da06      	bge.n	80121b0 <sys_timeouts_sleeptime+0x54>
 80121a2:	4b07      	ldr	r3, [pc, #28]	; (80121c0 <sys_timeouts_sleeptime+0x64>)
 80121a4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80121a8:	4906      	ldr	r1, [pc, #24]	; (80121c4 <sys_timeouts_sleeptime+0x68>)
 80121aa:	4807      	ldr	r0, [pc, #28]	; (80121c8 <sys_timeouts_sleeptime+0x6c>)
 80121ac:	f005 f920 	bl	80173f0 <iprintf>
    return ret;
 80121b0:	683b      	ldr	r3, [r7, #0]
  }
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	2001096c 	.word	0x2001096c
 80121c0:	0801ad70 	.word	0x0801ad70
 80121c4:	0801ae44 	.word	0x0801ae44
 80121c8:	0801ade4 	.word	0x0801ade4

080121cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80121d0:	f005 f820 	bl	8017214 <rand>
 80121d4:	4603      	mov	r3, r0
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80121dc:	b29b      	uxth	r3, r3
 80121de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	4b01      	ldr	r3, [pc, #4]	; (80121ec <udp_init+0x20>)
 80121e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80121e8:	bf00      	nop
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	2000002c 	.word	0x2000002c

080121f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80121fa:	4b17      	ldr	r3, [pc, #92]	; (8012258 <udp_new_port+0x68>)
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	1c5a      	adds	r2, r3, #1
 8012200:	b291      	uxth	r1, r2
 8012202:	4a15      	ldr	r2, [pc, #84]	; (8012258 <udp_new_port+0x68>)
 8012204:	8011      	strh	r1, [r2, #0]
 8012206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801220a:	4293      	cmp	r3, r2
 801220c:	d103      	bne.n	8012216 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801220e:	4b12      	ldr	r3, [pc, #72]	; (8012258 <udp_new_port+0x68>)
 8012210:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012214:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012216:	4b11      	ldr	r3, [pc, #68]	; (801225c <udp_new_port+0x6c>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	603b      	str	r3, [r7, #0]
 801221c:	e011      	b.n	8012242 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	8a5a      	ldrh	r2, [r3, #18]
 8012222:	4b0d      	ldr	r3, [pc, #52]	; (8012258 <udp_new_port+0x68>)
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	429a      	cmp	r2, r3
 8012228:	d108      	bne.n	801223c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801222a:	88fb      	ldrh	r3, [r7, #6]
 801222c:	3301      	adds	r3, #1
 801222e:	80fb      	strh	r3, [r7, #6]
 8012230:	88fb      	ldrh	r3, [r7, #6]
 8012232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012236:	d3e0      	bcc.n	80121fa <udp_new_port+0xa>
        return 0;
 8012238:	2300      	movs	r3, #0
 801223a:	e007      	b.n	801224c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	603b      	str	r3, [r7, #0]
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d1ea      	bne.n	801221e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012248:	4b03      	ldr	r3, [pc, #12]	; (8012258 <udp_new_port+0x68>)
 801224a:	881b      	ldrh	r3, [r3, #0]
}
 801224c:	4618      	mov	r0, r3
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr
 8012258:	2000002c 	.word	0x2000002c
 801225c:	20010978 	.word	0x20010978

08012260 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	4613      	mov	r3, r2
 801226c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d105      	bne.n	8012280 <udp_input_local_match+0x20>
 8012274:	4b27      	ldr	r3, [pc, #156]	; (8012314 <udp_input_local_match+0xb4>)
 8012276:	2287      	movs	r2, #135	; 0x87
 8012278:	4927      	ldr	r1, [pc, #156]	; (8012318 <udp_input_local_match+0xb8>)
 801227a:	4828      	ldr	r0, [pc, #160]	; (801231c <udp_input_local_match+0xbc>)
 801227c:	f005 f8b8 	bl	80173f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d105      	bne.n	8012292 <udp_input_local_match+0x32>
 8012286:	4b23      	ldr	r3, [pc, #140]	; (8012314 <udp_input_local_match+0xb4>)
 8012288:	2288      	movs	r2, #136	; 0x88
 801228a:	4925      	ldr	r1, [pc, #148]	; (8012320 <udp_input_local_match+0xc0>)
 801228c:	4823      	ldr	r0, [pc, #140]	; (801231c <udp_input_local_match+0xbc>)
 801228e:	f005 f8af 	bl	80173f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	7a1b      	ldrb	r3, [r3, #8]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d00b      	beq.n	80122b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	7a1a      	ldrb	r2, [r3, #8]
 801229e:	4b21      	ldr	r3, [pc, #132]	; (8012324 <udp_input_local_match+0xc4>)
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122a6:	3301      	adds	r3, #1
 80122a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d001      	beq.n	80122b2 <udp_input_local_match+0x52>
    return 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	e02b      	b.n	801230a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d018      	beq.n	80122ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d013      	beq.n	80122e6 <udp_input_local_match+0x86>
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d00f      	beq.n	80122e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80122c6:	4b17      	ldr	r3, [pc, #92]	; (8012324 <udp_input_local_match+0xc4>)
 80122c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ce:	d00a      	beq.n	80122e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	4b13      	ldr	r3, [pc, #76]	; (8012324 <udp_input_local_match+0xc4>)
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	405a      	eors	r2, r3
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	3308      	adds	r3, #8
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d110      	bne.n	8012308 <udp_input_local_match+0xa8>
          return 1;
 80122e6:	2301      	movs	r3, #1
 80122e8:	e00f      	b.n	801230a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <udp_input_local_match+0xa4>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d005      	beq.n	8012304 <udp_input_local_match+0xa4>
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	4b09      	ldr	r3, [pc, #36]	; (8012324 <udp_input_local_match+0xc4>)
 80122fe:	695b      	ldr	r3, [r3, #20]
 8012300:	429a      	cmp	r2, r3
 8012302:	d101      	bne.n	8012308 <udp_input_local_match+0xa8>
        return 1;
 8012304:	2301      	movs	r3, #1
 8012306:	e000      	b.n	801230a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012308:	2300      	movs	r3, #0
}
 801230a:	4618      	mov	r0, r3
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	0801ae58 	.word	0x0801ae58
 8012318:	0801ae88 	.word	0x0801ae88
 801231c:	0801aeac 	.word	0x0801aeac
 8012320:	0801aed4 	.word	0x0801aed4
 8012324:	2000d1a8 	.word	0x2000d1a8

08012328 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012328:	b590      	push	{r4, r7, lr}
 801232a:	b08d      	sub	sp, #52	; 0x34
 801232c:	af02      	add	r7, sp, #8
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d105      	bne.n	8012348 <udp_input+0x20>
 801233c:	4b7c      	ldr	r3, [pc, #496]	; (8012530 <udp_input+0x208>)
 801233e:	22cf      	movs	r2, #207	; 0xcf
 8012340:	497c      	ldr	r1, [pc, #496]	; (8012534 <udp_input+0x20c>)
 8012342:	487d      	ldr	r0, [pc, #500]	; (8012538 <udp_input+0x210>)
 8012344:	f005 f854 	bl	80173f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d105      	bne.n	801235a <udp_input+0x32>
 801234e:	4b78      	ldr	r3, [pc, #480]	; (8012530 <udp_input+0x208>)
 8012350:	22d0      	movs	r2, #208	; 0xd0
 8012352:	497a      	ldr	r1, [pc, #488]	; (801253c <udp_input+0x214>)
 8012354:	4878      	ldr	r0, [pc, #480]	; (8012538 <udp_input+0x210>)
 8012356:	f005 f84b 	bl	80173f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	895b      	ldrh	r3, [r3, #10]
 801235e:	2b07      	cmp	r3, #7
 8012360:	d803      	bhi.n	801236a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7f9 fa88 	bl	800b878 <pbuf_free>
    goto end;
 8012368:	e0de      	b.n	8012528 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012370:	4b73      	ldr	r3, [pc, #460]	; (8012540 <udp_input+0x218>)
 8012372:	695b      	ldr	r3, [r3, #20]
 8012374:	4a72      	ldr	r2, [pc, #456]	; (8012540 <udp_input+0x218>)
 8012376:	6812      	ldr	r2, [r2, #0]
 8012378:	4611      	mov	r1, r2
 801237a:	4618      	mov	r0, r3
 801237c:	f003 fe12 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8012380:	4603      	mov	r3, r0
 8012382:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	881b      	ldrh	r3, [r3, #0]
 8012388:	b29b      	uxth	r3, r3
 801238a:	4618      	mov	r0, r3
 801238c:	f7f7 fe76 	bl	800a07c <lwip_htons>
 8012390:	4603      	mov	r3, r0
 8012392:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	885b      	ldrh	r3, [r3, #2]
 8012398:	b29b      	uxth	r3, r3
 801239a:	4618      	mov	r0, r3
 801239c:	f7f7 fe6e 	bl	800a07c <lwip_htons>
 80123a0:	4603      	mov	r3, r0
 80123a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80123a4:	2300      	movs	r3, #0
 80123a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80123a8:	2300      	movs	r3, #0
 80123aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80123ac:	2300      	movs	r3, #0
 80123ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80123b0:	4b64      	ldr	r3, [pc, #400]	; (8012544 <udp_input+0x21c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	627b      	str	r3, [r7, #36]	; 0x24
 80123b6:	e054      	b.n	8012462 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80123b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ba:	8a5b      	ldrh	r3, [r3, #18]
 80123bc:	89fa      	ldrh	r2, [r7, #14]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d14a      	bne.n	8012458 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80123c2:	7cfb      	ldrb	r3, [r7, #19]
 80123c4:	461a      	mov	r2, r3
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123ca:	f7ff ff49 	bl	8012260 <udp_input_local_match>
 80123ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d041      	beq.n	8012458 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	7c1b      	ldrb	r3, [r3, #16]
 80123d8:	f003 0304 	and.w	r3, r3, #4
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d11d      	bne.n	801241c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d102      	bne.n	80123ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	61fb      	str	r3, [r7, #28]
 80123ea:	e017      	b.n	801241c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80123ec:	7cfb      	ldrb	r3, [r7, #19]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d014      	beq.n	801241c <udp_input+0xf4>
 80123f2:	4b53      	ldr	r3, [pc, #332]	; (8012540 <udp_input+0x218>)
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fa:	d10f      	bne.n	801241c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	3304      	adds	r3, #4
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	429a      	cmp	r2, r3
 8012408:	d008      	beq.n	801241c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	3304      	adds	r3, #4
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	429a      	cmp	r2, r3
 8012416:	d101      	bne.n	801241c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241e:	8a9b      	ldrh	r3, [r3, #20]
 8012420:	8a3a      	ldrh	r2, [r7, #16]
 8012422:	429a      	cmp	r2, r3
 8012424:	d118      	bne.n	8012458 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801242a:	2b00      	cmp	r3, #0
 801242c:	d005      	beq.n	801243a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012430:	685a      	ldr	r2, [r3, #4]
 8012432:	4b43      	ldr	r3, [pc, #268]	; (8012540 <udp_input+0x218>)
 8012434:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012436:	429a      	cmp	r2, r3
 8012438:	d10e      	bne.n	8012458 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d014      	beq.n	801246a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	68da      	ldr	r2, [r3, #12]
 8012444:	6a3b      	ldr	r3, [r7, #32]
 8012446:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012448:	4b3e      	ldr	r3, [pc, #248]	; (8012544 <udp_input+0x21c>)
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012450:	4a3c      	ldr	r2, [pc, #240]	; (8012544 <udp_input+0x21c>)
 8012452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012454:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012456:	e008      	b.n	801246a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	627b      	str	r3, [r7, #36]	; 0x24
 8012462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1a7      	bne.n	80123b8 <udp_input+0x90>
 8012468:	e000      	b.n	801246c <udp_input+0x144>
        break;
 801246a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	2b00      	cmp	r3, #0
 8012470:	d101      	bne.n	8012476 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012478:	2b00      	cmp	r3, #0
 801247a:	d002      	beq.n	8012482 <udp_input+0x15a>
    for_us = 1;
 801247c:	2301      	movs	r3, #1
 801247e:	76fb      	strb	r3, [r7, #27]
 8012480:	e00a      	b.n	8012498 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	3304      	adds	r3, #4
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	4b2d      	ldr	r3, [pc, #180]	; (8012540 <udp_input+0x218>)
 801248a:	695b      	ldr	r3, [r3, #20]
 801248c:	429a      	cmp	r2, r3
 801248e:	bf0c      	ite	eq
 8012490:	2301      	moveq	r3, #1
 8012492:	2300      	movne	r3, #0
 8012494:	b2db      	uxtb	r3, r3
 8012496:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012498:	7efb      	ldrb	r3, [r7, #27]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d041      	beq.n	8012522 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801249e:	2108      	movs	r1, #8
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7f9 f963 	bl	800b76c <pbuf_remove_header>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00a      	beq.n	80124c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80124ac:	4b20      	ldr	r3, [pc, #128]	; (8012530 <udp_input+0x208>)
 80124ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80124b2:	4925      	ldr	r1, [pc, #148]	; (8012548 <udp_input+0x220>)
 80124b4:	4820      	ldr	r0, [pc, #128]	; (8012538 <udp_input+0x210>)
 80124b6:	f004 ff9b 	bl	80173f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7f9 f9dc 	bl	800b878 <pbuf_free>
      goto end;
 80124c0:	e032      	b.n	8012528 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80124c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d012      	beq.n	80124ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80124c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ca:	699b      	ldr	r3, [r3, #24]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00a      	beq.n	80124e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	699c      	ldr	r4, [r3, #24]
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	69d8      	ldr	r0, [r3, #28]
 80124d8:	8a3b      	ldrh	r3, [r7, #16]
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	4b1b      	ldr	r3, [pc, #108]	; (801254c <udp_input+0x224>)
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80124e4:	e021      	b.n	801252a <udp_input+0x202>
        pbuf_free(p);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7f9 f9c6 	bl	800b878 <pbuf_free>
        goto end;
 80124ec:	e01c      	b.n	8012528 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80124ee:	7cfb      	ldrb	r3, [r7, #19]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d112      	bne.n	801251a <udp_input+0x1f2>
 80124f4:	4b12      	ldr	r3, [pc, #72]	; (8012540 <udp_input+0x218>)
 80124f6:	695b      	ldr	r3, [r3, #20]
 80124f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124fc:	2be0      	cmp	r3, #224	; 0xe0
 80124fe:	d00c      	beq.n	801251a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012500:	4b0f      	ldr	r3, [pc, #60]	; (8012540 <udp_input+0x218>)
 8012502:	899b      	ldrh	r3, [r3, #12]
 8012504:	3308      	adds	r3, #8
 8012506:	b29b      	uxth	r3, r3
 8012508:	b21b      	sxth	r3, r3
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7f9 f9a0 	bl	800b852 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012512:	2103      	movs	r1, #3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f003 fa07 	bl	8015928 <icmp_dest_unreach>
      pbuf_free(p);
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7f9 f9ac 	bl	800b878 <pbuf_free>
  return;
 8012520:	e003      	b.n	801252a <udp_input+0x202>
    pbuf_free(p);
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7f9 f9a8 	bl	800b878 <pbuf_free>
  return;
 8012528:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801252a:	372c      	adds	r7, #44	; 0x2c
 801252c:	46bd      	mov	sp, r7
 801252e:	bd90      	pop	{r4, r7, pc}
 8012530:	0801ae58 	.word	0x0801ae58
 8012534:	0801aefc 	.word	0x0801aefc
 8012538:	0801aeac 	.word	0x0801aeac
 801253c:	0801af14 	.word	0x0801af14
 8012540:	2000d1a8 	.word	0x2000d1a8
 8012544:	20010978 	.word	0x20010978
 8012548:	0801af30 	.word	0x0801af30
 801254c:	2000d1b8 	.word	0x2000d1b8

08012550 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af02      	add	r7, sp, #8
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d109      	bne.n	8012578 <udp_sendto_if+0x28>
 8012564:	4b2e      	ldr	r3, [pc, #184]	; (8012620 <udp_sendto_if+0xd0>)
 8012566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801256a:	492e      	ldr	r1, [pc, #184]	; (8012624 <udp_sendto_if+0xd4>)
 801256c:	482e      	ldr	r0, [pc, #184]	; (8012628 <udp_sendto_if+0xd8>)
 801256e:	f004 ff3f 	bl	80173f0 <iprintf>
 8012572:	f06f 030f 	mvn.w	r3, #15
 8012576:	e04f      	b.n	8012618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d109      	bne.n	8012592 <udp_sendto_if+0x42>
 801257e:	4b28      	ldr	r3, [pc, #160]	; (8012620 <udp_sendto_if+0xd0>)
 8012580:	f240 2281 	movw	r2, #641	; 0x281
 8012584:	4929      	ldr	r1, [pc, #164]	; (801262c <udp_sendto_if+0xdc>)
 8012586:	4828      	ldr	r0, [pc, #160]	; (8012628 <udp_sendto_if+0xd8>)
 8012588:	f004 ff32 	bl	80173f0 <iprintf>
 801258c:	f06f 030f 	mvn.w	r3, #15
 8012590:	e042      	b.n	8012618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d109      	bne.n	80125ac <udp_sendto_if+0x5c>
 8012598:	4b21      	ldr	r3, [pc, #132]	; (8012620 <udp_sendto_if+0xd0>)
 801259a:	f240 2282 	movw	r2, #642	; 0x282
 801259e:	4924      	ldr	r1, [pc, #144]	; (8012630 <udp_sendto_if+0xe0>)
 80125a0:	4821      	ldr	r0, [pc, #132]	; (8012628 <udp_sendto_if+0xd8>)
 80125a2:	f004 ff25 	bl	80173f0 <iprintf>
 80125a6:	f06f 030f 	mvn.w	r3, #15
 80125aa:	e035      	b.n	8012618 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80125ac:	6a3b      	ldr	r3, [r7, #32]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d109      	bne.n	80125c6 <udp_sendto_if+0x76>
 80125b2:	4b1b      	ldr	r3, [pc, #108]	; (8012620 <udp_sendto_if+0xd0>)
 80125b4:	f240 2283 	movw	r2, #643	; 0x283
 80125b8:	491e      	ldr	r1, [pc, #120]	; (8012634 <udp_sendto_if+0xe4>)
 80125ba:	481b      	ldr	r0, [pc, #108]	; (8012628 <udp_sendto_if+0xd8>)
 80125bc:	f004 ff18 	bl	80173f0 <iprintf>
 80125c0:	f06f 030f 	mvn.w	r3, #15
 80125c4:	e028      	b.n	8012618 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d009      	beq.n	80125e0 <udp_sendto_if+0x90>
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d005      	beq.n	80125e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125dc:	2be0      	cmp	r3, #224	; 0xe0
 80125de:	d103      	bne.n	80125e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	3304      	adds	r3, #4
 80125e4:	617b      	str	r3, [r7, #20]
 80125e6:	e00b      	b.n	8012600 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	3304      	adds	r3, #4
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d002      	beq.n	80125fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80125f6:	f06f 0303 	mvn.w	r3, #3
 80125fa:	e00d      	b.n	8012618 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012600:	887a      	ldrh	r2, [r7, #2]
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	9301      	str	r3, [sp, #4]
 8012606:	6a3b      	ldr	r3, [r7, #32]
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	4613      	mov	r3, r2
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	68b9      	ldr	r1, [r7, #8]
 8012610:	68f8      	ldr	r0, [r7, #12]
 8012612:	f000 f811 	bl	8012638 <udp_sendto_if_src>
 8012616:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012618:	4618      	mov	r0, r3
 801261a:	3718      	adds	r7, #24
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	0801ae58 	.word	0x0801ae58
 8012624:	0801afcc 	.word	0x0801afcc
 8012628:	0801aeac 	.word	0x0801aeac
 801262c:	0801afe8 	.word	0x0801afe8
 8012630:	0801b004 	.word	0x0801b004
 8012634:	0801b024 	.word	0x0801b024

08012638 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b08c      	sub	sp, #48	; 0x30
 801263c:	af04      	add	r7, sp, #16
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
 8012644:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d109      	bne.n	8012660 <udp_sendto_if_src+0x28>
 801264c:	4b65      	ldr	r3, [pc, #404]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 801264e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012652:	4965      	ldr	r1, [pc, #404]	; (80127e8 <udp_sendto_if_src+0x1b0>)
 8012654:	4865      	ldr	r0, [pc, #404]	; (80127ec <udp_sendto_if_src+0x1b4>)
 8012656:	f004 fecb 	bl	80173f0 <iprintf>
 801265a:	f06f 030f 	mvn.w	r3, #15
 801265e:	e0bc      	b.n	80127da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d109      	bne.n	801267a <udp_sendto_if_src+0x42>
 8012666:	4b5f      	ldr	r3, [pc, #380]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 8012668:	f240 22d2 	movw	r2, #722	; 0x2d2
 801266c:	4960      	ldr	r1, [pc, #384]	; (80127f0 <udp_sendto_if_src+0x1b8>)
 801266e:	485f      	ldr	r0, [pc, #380]	; (80127ec <udp_sendto_if_src+0x1b4>)
 8012670:	f004 febe 	bl	80173f0 <iprintf>
 8012674:	f06f 030f 	mvn.w	r3, #15
 8012678:	e0af      	b.n	80127da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d109      	bne.n	8012694 <udp_sendto_if_src+0x5c>
 8012680:	4b58      	ldr	r3, [pc, #352]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 8012682:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012686:	495b      	ldr	r1, [pc, #364]	; (80127f4 <udp_sendto_if_src+0x1bc>)
 8012688:	4858      	ldr	r0, [pc, #352]	; (80127ec <udp_sendto_if_src+0x1b4>)
 801268a:	f004 feb1 	bl	80173f0 <iprintf>
 801268e:	f06f 030f 	mvn.w	r3, #15
 8012692:	e0a2      	b.n	80127da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012696:	2b00      	cmp	r3, #0
 8012698:	d109      	bne.n	80126ae <udp_sendto_if_src+0x76>
 801269a:	4b52      	ldr	r3, [pc, #328]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 801269c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80126a0:	4955      	ldr	r1, [pc, #340]	; (80127f8 <udp_sendto_if_src+0x1c0>)
 80126a2:	4852      	ldr	r0, [pc, #328]	; (80127ec <udp_sendto_if_src+0x1b4>)
 80126a4:	f004 fea4 	bl	80173f0 <iprintf>
 80126a8:	f06f 030f 	mvn.w	r3, #15
 80126ac:	e095      	b.n	80127da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80126ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d109      	bne.n	80126c8 <udp_sendto_if_src+0x90>
 80126b4:	4b4b      	ldr	r3, [pc, #300]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 80126b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80126ba:	4950      	ldr	r1, [pc, #320]	; (80127fc <udp_sendto_if_src+0x1c4>)
 80126bc:	484b      	ldr	r0, [pc, #300]	; (80127ec <udp_sendto_if_src+0x1b4>)
 80126be:	f004 fe97 	bl	80173f0 <iprintf>
 80126c2:	f06f 030f 	mvn.w	r3, #15
 80126c6:	e088      	b.n	80127da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	8a5b      	ldrh	r3, [r3, #18]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d10f      	bne.n	80126f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80126d0:	68f9      	ldr	r1, [r7, #12]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	8a5b      	ldrh	r3, [r3, #18]
 80126d6:	461a      	mov	r2, r3
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f000 f893 	bl	8012804 <udp_bind>
 80126de:	4603      	mov	r3, r0
 80126e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80126e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d002      	beq.n	80126f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80126ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80126ee:	e074      	b.n	80127da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	891b      	ldrh	r3, [r3, #8]
 80126f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80126f8:	4293      	cmp	r3, r2
 80126fa:	d902      	bls.n	8012702 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80126fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012700:	e06b      	b.n	80127da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012702:	2108      	movs	r1, #8
 8012704:	68b8      	ldr	r0, [r7, #8]
 8012706:	f7f9 f821 	bl	800b74c <pbuf_add_header>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d015      	beq.n	801273c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012710:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012714:	2108      	movs	r1, #8
 8012716:	2022      	movs	r0, #34	; 0x22
 8012718:	f7f8 fdca 	bl	800b2b0 <pbuf_alloc>
 801271c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d102      	bne.n	801272a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012724:	f04f 33ff 	mov.w	r3, #4294967295
 8012728:	e057      	b.n	80127da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	891b      	ldrh	r3, [r3, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d006      	beq.n	8012740 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012732:	68b9      	ldr	r1, [r7, #8]
 8012734:	69f8      	ldr	r0, [r7, #28]
 8012736:	f7f9 f9c3 	bl	800bac0 <pbuf_chain>
 801273a:	e001      	b.n	8012740 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	895b      	ldrh	r3, [r3, #10]
 8012744:	2b07      	cmp	r3, #7
 8012746:	d806      	bhi.n	8012756 <udp_sendto_if_src+0x11e>
 8012748:	4b26      	ldr	r3, [pc, #152]	; (80127e4 <udp_sendto_if_src+0x1ac>)
 801274a:	f240 320d 	movw	r2, #781	; 0x30d
 801274e:	492c      	ldr	r1, [pc, #176]	; (8012800 <udp_sendto_if_src+0x1c8>)
 8012750:	4826      	ldr	r0, [pc, #152]	; (80127ec <udp_sendto_if_src+0x1b4>)
 8012752:	f004 fe4d 	bl	80173f0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	8a5b      	ldrh	r3, [r3, #18]
 8012760:	4618      	mov	r0, r3
 8012762:	f7f7 fc8b 	bl	800a07c <lwip_htons>
 8012766:	4603      	mov	r3, r0
 8012768:	461a      	mov	r2, r3
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801276e:	887b      	ldrh	r3, [r7, #2]
 8012770:	4618      	mov	r0, r3
 8012772:	f7f7 fc83 	bl	800a07c <lwip_htons>
 8012776:	4603      	mov	r3, r0
 8012778:	461a      	mov	r2, r3
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	2200      	movs	r2, #0
 8012782:	719a      	strb	r2, [r3, #6]
 8012784:	2200      	movs	r2, #0
 8012786:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	891b      	ldrh	r3, [r3, #8]
 801278c:	4618      	mov	r0, r3
 801278e:	f7f7 fc75 	bl	800a07c <lwip_htons>
 8012792:	4603      	mov	r3, r0
 8012794:	461a      	mov	r2, r3
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801279a:	2311      	movs	r3, #17
 801279c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	7adb      	ldrb	r3, [r3, #11]
 80127a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	7a9b      	ldrb	r3, [r3, #10]
 80127a8:	7cb9      	ldrb	r1, [r7, #18]
 80127aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127ac:	9202      	str	r2, [sp, #8]
 80127ae:	7cfa      	ldrb	r2, [r7, #19]
 80127b0:	9201      	str	r2, [sp, #4]
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	460b      	mov	r3, r1
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ba:	69f8      	ldr	r0, [r7, #28]
 80127bc:	f003 fb44 	bl	8015e48 <ip4_output_if_src>
 80127c0:	4603      	mov	r3, r0
 80127c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d004      	beq.n	80127d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80127cc:	69f8      	ldr	r0, [r7, #28]
 80127ce:	f7f9 f853 	bl	800b878 <pbuf_free>
    q = NULL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80127d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3720      	adds	r7, #32
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	0801ae58 	.word	0x0801ae58
 80127e8:	0801b044 	.word	0x0801b044
 80127ec:	0801aeac 	.word	0x0801aeac
 80127f0:	0801b064 	.word	0x0801b064
 80127f4:	0801b084 	.word	0x0801b084
 80127f8:	0801b0a8 	.word	0x0801b0a8
 80127fc:	0801b0cc 	.word	0x0801b0cc
 8012800:	0801b0f0 	.word	0x0801b0f0

08012804 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b086      	sub	sp, #24
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	4613      	mov	r3, r2
 8012810:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d101      	bne.n	801281c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012818:	4b39      	ldr	r3, [pc, #228]	; (8012900 <udp_bind+0xfc>)
 801281a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d109      	bne.n	8012836 <udp_bind+0x32>
 8012822:	4b38      	ldr	r3, [pc, #224]	; (8012904 <udp_bind+0x100>)
 8012824:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012828:	4937      	ldr	r1, [pc, #220]	; (8012908 <udp_bind+0x104>)
 801282a:	4838      	ldr	r0, [pc, #224]	; (801290c <udp_bind+0x108>)
 801282c:	f004 fde0 	bl	80173f0 <iprintf>
 8012830:	f06f 030f 	mvn.w	r3, #15
 8012834:	e060      	b.n	80128f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012836:	2300      	movs	r3, #0
 8012838:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801283a:	4b35      	ldr	r3, [pc, #212]	; (8012910 <udp_bind+0x10c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	617b      	str	r3, [r7, #20]
 8012840:	e009      	b.n	8012856 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	429a      	cmp	r2, r3
 8012848:	d102      	bne.n	8012850 <udp_bind+0x4c>
      rebind = 1;
 801284a:	2301      	movs	r3, #1
 801284c:	74fb      	strb	r3, [r7, #19]
      break;
 801284e:	e005      	b.n	801285c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	617b      	str	r3, [r7, #20]
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1f2      	bne.n	8012842 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801285c:	88fb      	ldrh	r3, [r7, #6]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d109      	bne.n	8012876 <udp_bind+0x72>
    port = udp_new_port();
 8012862:	f7ff fcc5 	bl	80121f0 <udp_new_port>
 8012866:	4603      	mov	r3, r0
 8012868:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801286a:	88fb      	ldrh	r3, [r7, #6]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d12c      	bne.n	80128ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012870:	f06f 0307 	mvn.w	r3, #7
 8012874:	e040      	b.n	80128f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012876:	4b26      	ldr	r3, [pc, #152]	; (8012910 <udp_bind+0x10c>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	617b      	str	r3, [r7, #20]
 801287c:	e022      	b.n	80128c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	429a      	cmp	r2, r3
 8012884:	d01b      	beq.n	80128be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	8a5b      	ldrh	r3, [r3, #18]
 801288a:	88fa      	ldrh	r2, [r7, #6]
 801288c:	429a      	cmp	r2, r3
 801288e:	d116      	bne.n	80128be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012898:	429a      	cmp	r2, r3
 801289a:	d00d      	beq.n	80128b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00a      	beq.n	80128b8 <udp_bind+0xb4>
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d006      	beq.n	80128b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d003      	beq.n	80128b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d102      	bne.n	80128be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80128b8:	f06f 0307 	mvn.w	r3, #7
 80128bc:	e01c      	b.n	80128f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	617b      	str	r3, [r7, #20]
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d1d9      	bne.n	801287e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <udp_bind+0xd2>
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	e000      	b.n	80128d8 <udp_bind+0xd4>
 80128d6:	2300      	movs	r3, #0
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	88fa      	ldrh	r2, [r7, #6]
 80128e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80128e2:	7cfb      	ldrb	r3, [r7, #19]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d106      	bne.n	80128f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80128e8:	4b09      	ldr	r3, [pc, #36]	; (8012910 <udp_bind+0x10c>)
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80128f0:	4a07      	ldr	r2, [pc, #28]	; (8012910 <udp_bind+0x10c>)
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3718      	adds	r7, #24
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	0801bd68 	.word	0x0801bd68
 8012904:	0801ae58 	.word	0x0801ae58
 8012908:	0801b120 	.word	0x0801b120
 801290c:	0801aeac 	.word	0x0801aeac
 8012910:	20010978 	.word	0x20010978

08012914 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	60b9      	str	r1, [r7, #8]
 801291e:	4613      	mov	r3, r2
 8012920:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d109      	bne.n	801293c <udp_connect+0x28>
 8012928:	4b2c      	ldr	r3, [pc, #176]	; (80129dc <udp_connect+0xc8>)
 801292a:	f240 4235 	movw	r2, #1077	; 0x435
 801292e:	492c      	ldr	r1, [pc, #176]	; (80129e0 <udp_connect+0xcc>)
 8012930:	482c      	ldr	r0, [pc, #176]	; (80129e4 <udp_connect+0xd0>)
 8012932:	f004 fd5d 	bl	80173f0 <iprintf>
 8012936:	f06f 030f 	mvn.w	r3, #15
 801293a:	e04b      	b.n	80129d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d109      	bne.n	8012956 <udp_connect+0x42>
 8012942:	4b26      	ldr	r3, [pc, #152]	; (80129dc <udp_connect+0xc8>)
 8012944:	f240 4236 	movw	r2, #1078	; 0x436
 8012948:	4927      	ldr	r1, [pc, #156]	; (80129e8 <udp_connect+0xd4>)
 801294a:	4826      	ldr	r0, [pc, #152]	; (80129e4 <udp_connect+0xd0>)
 801294c:	f004 fd50 	bl	80173f0 <iprintf>
 8012950:	f06f 030f 	mvn.w	r3, #15
 8012954:	e03e      	b.n	80129d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	8a5b      	ldrh	r3, [r3, #18]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10f      	bne.n	801297e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801295e:	68f9      	ldr	r1, [r7, #12]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	8a5b      	ldrh	r3, [r3, #18]
 8012964:	461a      	mov	r2, r3
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f7ff ff4c 	bl	8012804 <udp_bind>
 801296c:	4603      	mov	r3, r0
 801296e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <udp_connect+0x6a>
      return err;
 8012978:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801297c:	e02a      	b.n	80129d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <udp_connect+0x76>
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	e000      	b.n	801298c <udp_connect+0x78>
 801298a:	2300      	movs	r3, #0
 801298c:	68fa      	ldr	r2, [r7, #12]
 801298e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	88fa      	ldrh	r2, [r7, #6]
 8012994:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	7c1b      	ldrb	r3, [r3, #16]
 801299a:	f043 0304 	orr.w	r3, r3, #4
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129a4:	4b11      	ldr	r3, [pc, #68]	; (80129ec <udp_connect+0xd8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	617b      	str	r3, [r7, #20]
 80129aa:	e008      	b.n	80129be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d101      	bne.n	80129b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80129b4:	2300      	movs	r3, #0
 80129b6:	e00d      	b.n	80129d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	617b      	str	r3, [r7, #20]
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1f3      	bne.n	80129ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80129c4:	4b09      	ldr	r3, [pc, #36]	; (80129ec <udp_connect+0xd8>)
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80129cc:	4a07      	ldr	r2, [pc, #28]	; (80129ec <udp_connect+0xd8>)
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80129d2:	2300      	movs	r3, #0
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	0801ae58 	.word	0x0801ae58
 80129e0:	0801b138 	.word	0x0801b138
 80129e4:	0801aeac 	.word	0x0801aeac
 80129e8:	0801b154 	.word	0x0801b154
 80129ec:	20010978 	.word	0x20010978

080129f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	60f8      	str	r0, [r7, #12]
 80129f8:	60b9      	str	r1, [r7, #8]
 80129fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d107      	bne.n	8012a12 <udp_recv+0x22>
 8012a02:	4b08      	ldr	r3, [pc, #32]	; (8012a24 <udp_recv+0x34>)
 8012a04:	f240 428a 	movw	r2, #1162	; 0x48a
 8012a08:	4907      	ldr	r1, [pc, #28]	; (8012a28 <udp_recv+0x38>)
 8012a0a:	4808      	ldr	r0, [pc, #32]	; (8012a2c <udp_recv+0x3c>)
 8012a0c:	f004 fcf0 	bl	80173f0 <iprintf>
 8012a10:	e005      	b.n	8012a1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	68ba      	ldr	r2, [r7, #8]
 8012a16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	61da      	str	r2, [r3, #28]
}
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	0801ae58 	.word	0x0801ae58
 8012a28:	0801b18c 	.word	0x0801b18c
 8012a2c:	0801aeac 	.word	0x0801aeac

08012a30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d107      	bne.n	8012a4e <udp_remove+0x1e>
 8012a3e:	4b19      	ldr	r3, [pc, #100]	; (8012aa4 <udp_remove+0x74>)
 8012a40:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012a44:	4918      	ldr	r1, [pc, #96]	; (8012aa8 <udp_remove+0x78>)
 8012a46:	4819      	ldr	r0, [pc, #100]	; (8012aac <udp_remove+0x7c>)
 8012a48:	f004 fcd2 	bl	80173f0 <iprintf>
 8012a4c:	e026      	b.n	8012a9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012a4e:	4b18      	ldr	r3, [pc, #96]	; (8012ab0 <udp_remove+0x80>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d105      	bne.n	8012a64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012a58:	4b15      	ldr	r3, [pc, #84]	; (8012ab0 <udp_remove+0x80>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	4a14      	ldr	r2, [pc, #80]	; (8012ab0 <udp_remove+0x80>)
 8012a60:	6013      	str	r3, [r2, #0]
 8012a62:	e017      	b.n	8012a94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a64:	4b12      	ldr	r3, [pc, #72]	; (8012ab0 <udp_remove+0x80>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	60fb      	str	r3, [r7, #12]
 8012a6a:	e010      	b.n	8012a8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d009      	beq.n	8012a88 <udp_remove+0x58>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d104      	bne.n	8012a88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	68da      	ldr	r2, [r3, #12]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	60da      	str	r2, [r3, #12]
        break;
 8012a86:	e005      	b.n	8012a94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	60fb      	str	r3, [r7, #12]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d1eb      	bne.n	8012a6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012a94:	6879      	ldr	r1, [r7, #4]
 8012a96:	2000      	movs	r0, #0
 8012a98:	f7f8 f83e 	bl	800ab18 <memp_free>
}
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	0801ae58 	.word	0x0801ae58
 8012aa8:	0801b1a4 	.word	0x0801b1a4
 8012aac:	0801aeac 	.word	0x0801aeac
 8012ab0:	20010978 	.word	0x20010978

08012ab4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012aba:	2000      	movs	r0, #0
 8012abc:	f7f7 ffb6 	bl	800aa2c <memp_malloc>
 8012ac0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d007      	beq.n	8012ad8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ac8:	2220      	movs	r2, #32
 8012aca:	2100      	movs	r1, #0
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f004 fcf4 	bl	80174ba <memset>
    pcb->ttl = UDP_TTL;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	22ff      	movs	r2, #255	; 0xff
 8012ad6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012ad8:	687b      	ldr	r3, [r7, #4]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b084      	sub	sp, #16
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	4603      	mov	r3, r0
 8012aea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012aec:	f7ff ffe2 	bl	8012ab4 <udp_new>
 8012af0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012af2:	68fb      	ldr	r3, [r7, #12]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012afc:	b480      	push	{r7}
 8012afe:	b085      	sub	sp, #20
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d01e      	beq.n	8012b4a <udp_netif_ip_addr_changed+0x4e>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d01a      	beq.n	8012b4a <udp_netif_ip_addr_changed+0x4e>
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d017      	beq.n	8012b4a <udp_netif_ip_addr_changed+0x4e>
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d013      	beq.n	8012b4a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012b22:	4b0d      	ldr	r3, [pc, #52]	; (8012b58 <udp_netif_ip_addr_changed+0x5c>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	60fb      	str	r3, [r7, #12]
 8012b28:	e00c      	b.n	8012b44 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d103      	bne.n	8012b3e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	60fb      	str	r3, [r7, #12]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1ef      	bne.n	8012b2a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012b4a:	bf00      	nop
 8012b4c:	3714      	adds	r7, #20
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	20010978 	.word	0x20010978

08012b5c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012b60:	4b20      	ldr	r3, [pc, #128]	; (8012be4 <dhcp_inc_pcb_refcount+0x88>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d133      	bne.n	8012bd0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012b68:	4b1f      	ldr	r3, [pc, #124]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d005      	beq.n	8012b7c <dhcp_inc_pcb_refcount+0x20>
 8012b70:	4b1e      	ldr	r3, [pc, #120]	; (8012bec <dhcp_inc_pcb_refcount+0x90>)
 8012b72:	22e5      	movs	r2, #229	; 0xe5
 8012b74:	491e      	ldr	r1, [pc, #120]	; (8012bf0 <dhcp_inc_pcb_refcount+0x94>)
 8012b76:	481f      	ldr	r0, [pc, #124]	; (8012bf4 <dhcp_inc_pcb_refcount+0x98>)
 8012b78:	f004 fc3a 	bl	80173f0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012b7c:	f7ff ff9a 	bl	8012ab4 <udp_new>
 8012b80:	4603      	mov	r3, r0
 8012b82:	4a19      	ldr	r2, [pc, #100]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012b84:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012b86:	4b18      	ldr	r3, [pc, #96]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d102      	bne.n	8012b94 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b92:	e024      	b.n	8012bde <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012b94:	4b14      	ldr	r3, [pc, #80]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	7a5a      	ldrb	r2, [r3, #9]
 8012b9a:	4b13      	ldr	r3, [pc, #76]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f042 0220 	orr.w	r2, r2, #32
 8012ba2:	b2d2      	uxtb	r2, r2
 8012ba4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012ba6:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2244      	movs	r2, #68	; 0x44
 8012bac:	4912      	ldr	r1, [pc, #72]	; (8012bf8 <dhcp_inc_pcb_refcount+0x9c>)
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7ff fe28 	bl	8012804 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012bb4:	4b0c      	ldr	r3, [pc, #48]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2243      	movs	r2, #67	; 0x43
 8012bba:	490f      	ldr	r1, [pc, #60]	; (8012bf8 <dhcp_inc_pcb_refcount+0x9c>)
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7ff fea9 	bl	8012914 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012bc2:	4b09      	ldr	r3, [pc, #36]	; (8012be8 <dhcp_inc_pcb_refcount+0x8c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	490c      	ldr	r1, [pc, #48]	; (8012bfc <dhcp_inc_pcb_refcount+0xa0>)
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7ff ff10 	bl	80129f0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012bd0:	4b04      	ldr	r3, [pc, #16]	; (8012be4 <dhcp_inc_pcb_refcount+0x88>)
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	4b02      	ldr	r3, [pc, #8]	; (8012be4 <dhcp_inc_pcb_refcount+0x88>)
 8012bda:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	200109a8 	.word	0x200109a8
 8012be8:	200109a4 	.word	0x200109a4
 8012bec:	0801b1bc 	.word	0x0801b1bc
 8012bf0:	0801b1f4 	.word	0x0801b1f4
 8012bf4:	0801b21c 	.word	0x0801b21c
 8012bf8:	0801bd68 	.word	0x0801bd68
 8012bfc:	08014491 	.word	0x08014491

08012c00 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012c04:	4b0e      	ldr	r3, [pc, #56]	; (8012c40 <dhcp_dec_pcb_refcount+0x40>)
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d105      	bne.n	8012c18 <dhcp_dec_pcb_refcount+0x18>
 8012c0c:	4b0d      	ldr	r3, [pc, #52]	; (8012c44 <dhcp_dec_pcb_refcount+0x44>)
 8012c0e:	22ff      	movs	r2, #255	; 0xff
 8012c10:	490d      	ldr	r1, [pc, #52]	; (8012c48 <dhcp_dec_pcb_refcount+0x48>)
 8012c12:	480e      	ldr	r0, [pc, #56]	; (8012c4c <dhcp_dec_pcb_refcount+0x4c>)
 8012c14:	f004 fbec 	bl	80173f0 <iprintf>
  dhcp_pcb_refcount--;
 8012c18:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <dhcp_dec_pcb_refcount+0x40>)
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <dhcp_dec_pcb_refcount+0x40>)
 8012c22:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012c24:	4b06      	ldr	r3, [pc, #24]	; (8012c40 <dhcp_dec_pcb_refcount+0x40>)
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d107      	bne.n	8012c3c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012c2c:	4b08      	ldr	r3, [pc, #32]	; (8012c50 <dhcp_dec_pcb_refcount+0x50>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff fefd 	bl	8012a30 <udp_remove>
    dhcp_pcb = NULL;
 8012c36:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <dhcp_dec_pcb_refcount+0x50>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	601a      	str	r2, [r3, #0]
  }
}
 8012c3c:	bf00      	nop
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	200109a8 	.word	0x200109a8
 8012c44:	0801b1bc 	.word	0x0801b1bc
 8012c48:	0801b244 	.word	0x0801b244
 8012c4c:	0801b21c 	.word	0x0801b21c
 8012c50:	200109a4 	.word	0x200109a4

08012c54 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012c62:	210c      	movs	r1, #12
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f001 f855 	bl	8013d14 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012c6a:	4b06      	ldr	r3, [pc, #24]	; (8012c84 <dhcp_handle_nak+0x30>)
 8012c6c:	4a05      	ldr	r2, [pc, #20]	; (8012c84 <dhcp_handle_nak+0x30>)
 8012c6e:	4905      	ldr	r1, [pc, #20]	; (8012c84 <dhcp_handle_nak+0x30>)
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7f8 f8f3 	bl	800ae5c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f000 fc48 	bl	801350c <dhcp_discover>
}
 8012c7c:	bf00      	nop
 8012c7e:	3710      	adds	r7, #16
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	0801bd68 	.word	0x0801bd68

08012c88 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c94:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012c96:	2108      	movs	r1, #8
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f001 f83b 	bl	8013d14 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	331c      	adds	r3, #28
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f002 fb3c 	bl	8015324 <etharp_query>
 8012cac:	4603      	mov	r3, r0
 8012cae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	799b      	ldrb	r3, [r3, #6]
 8012cb4:	2bff      	cmp	r3, #255	; 0xff
 8012cb6:	d005      	beq.n	8012cc4 <dhcp_check+0x3c>
    dhcp->tries++;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	799b      	ldrb	r3, [r3, #6]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	b2da      	uxtb	r2, r3
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012cc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012cc8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012cca:	893b      	ldrh	r3, [r7, #8]
 8012ccc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cd0:	4a06      	ldr	r2, [pc, #24]	; (8012cec <dhcp_check+0x64>)
 8012cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8012cd6:	1152      	asrs	r2, r2, #5
 8012cd8:	17db      	asrs	r3, r3, #31
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012ce2:	bf00      	nop
 8012ce4:	3710      	adds	r7, #16
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
 8012cea:	bf00      	nop
 8012cec:	10624dd3 	.word	0x10624dd3

08012cf0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012d00:	4b0c      	ldr	r3, [pc, #48]	; (8012d34 <dhcp_handle_offer+0x44>)
 8012d02:	789b      	ldrb	r3, [r3, #2]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d011      	beq.n	8012d2c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012d0e:	4b0a      	ldr	r3, [pc, #40]	; (8012d38 <dhcp_handle_offer+0x48>)
 8012d10:	689b      	ldr	r3, [r3, #8]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f7 f9c7 	bl	800a0a6 <lwip_htonl>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	691a      	ldr	r2, [r3, #16]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 f808 	bl	8012d3c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012d2c:	bf00      	nop
 8012d2e:	3710      	adds	r7, #16
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	2001099c 	.word	0x2001099c
 8012d38:	2001097c 	.word	0x2001097c

08012d3c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012d3c:	b5b0      	push	{r4, r5, r7, lr}
 8012d3e:	b08a      	sub	sp, #40	; 0x28
 8012d40:	af02      	add	r7, sp, #8
 8012d42:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d109      	bne.n	8012d5e <dhcp_select+0x22>
 8012d4a:	4b71      	ldr	r3, [pc, #452]	; (8012f10 <dhcp_select+0x1d4>)
 8012d4c:	f240 1277 	movw	r2, #375	; 0x177
 8012d50:	4970      	ldr	r1, [pc, #448]	; (8012f14 <dhcp_select+0x1d8>)
 8012d52:	4871      	ldr	r0, [pc, #452]	; (8012f18 <dhcp_select+0x1dc>)
 8012d54:	f004 fb4c 	bl	80173f0 <iprintf>
 8012d58:	f06f 030f 	mvn.w	r3, #15
 8012d5c:	e0d3      	b.n	8012f06 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d109      	bne.n	8012d7e <dhcp_select+0x42>
 8012d6a:	4b69      	ldr	r3, [pc, #420]	; (8012f10 <dhcp_select+0x1d4>)
 8012d6c:	f240 1279 	movw	r2, #377	; 0x179
 8012d70:	496a      	ldr	r1, [pc, #424]	; (8012f1c <dhcp_select+0x1e0>)
 8012d72:	4869      	ldr	r0, [pc, #420]	; (8012f18 <dhcp_select+0x1dc>)
 8012d74:	f004 fb3c 	bl	80173f0 <iprintf>
 8012d78:	f06f 0305 	mvn.w	r3, #5
 8012d7c:	e0c3      	b.n	8012f06 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012d7e:	2101      	movs	r1, #1
 8012d80:	69b8      	ldr	r0, [r7, #24]
 8012d82:	f000 ffc7 	bl	8013d14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012d86:	f107 030c 	add.w	r3, r7, #12
 8012d8a:	2203      	movs	r2, #3
 8012d8c:	69b9      	ldr	r1, [r7, #24]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f001 fc4c 	bl	801462c <dhcp_create_msg>
 8012d94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f000 8085 	beq.w	8012ea8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012da4:	89b8      	ldrh	r0, [r7, #12]
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dac:	2302      	movs	r3, #2
 8012dae:	2239      	movs	r2, #57	; 0x39
 8012db0:	f000 ffca 	bl	8013d48 <dhcp_option>
 8012db4:	4603      	mov	r3, r0
 8012db6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012db8:	89b8      	ldrh	r0, [r7, #12]
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	f001 f819 	bl	8013dfc <dhcp_option_short>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012dce:	89b8      	ldrh	r0, [r7, #12]
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dd6:	2304      	movs	r3, #4
 8012dd8:	2232      	movs	r2, #50	; 0x32
 8012dda:	f000 ffb5 	bl	8013d48 <dhcp_option>
 8012dde:	4603      	mov	r3, r0
 8012de0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012de2:	89bc      	ldrh	r4, [r7, #12]
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	69db      	ldr	r3, [r3, #28]
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f7 f959 	bl	800a0a6 <lwip_htonl>
 8012df4:	4603      	mov	r3, r0
 8012df6:	461a      	mov	r2, r3
 8012df8:	4629      	mov	r1, r5
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f001 f830 	bl	8013e60 <dhcp_option_long>
 8012e00:	4603      	mov	r3, r0
 8012e02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012e04:	89b8      	ldrh	r0, [r7, #12]
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e0c:	2304      	movs	r3, #4
 8012e0e:	2236      	movs	r2, #54	; 0x36
 8012e10:	f000 ff9a 	bl	8013d48 <dhcp_option>
 8012e14:	4603      	mov	r3, r0
 8012e16:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012e18:	89bc      	ldrh	r4, [r7, #12]
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	699b      	ldr	r3, [r3, #24]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f7 f93e 	bl	800a0a6 <lwip_htonl>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	4629      	mov	r1, r5
 8012e30:	4620      	mov	r0, r4
 8012e32:	f001 f815 	bl	8013e60 <dhcp_option_long>
 8012e36:	4603      	mov	r3, r0
 8012e38:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e3a:	89b8      	ldrh	r0, [r7, #12]
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e42:	2303      	movs	r3, #3
 8012e44:	2237      	movs	r2, #55	; 0x37
 8012e46:	f000 ff7f 	bl	8013d48 <dhcp_option>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e4e:	2300      	movs	r3, #0
 8012e50:	77bb      	strb	r3, [r7, #30]
 8012e52:	e00e      	b.n	8012e72 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e54:	89b8      	ldrh	r0, [r7, #12]
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e5c:	7fbb      	ldrb	r3, [r7, #30]
 8012e5e:	4a30      	ldr	r2, [pc, #192]	; (8012f20 <dhcp_select+0x1e4>)
 8012e60:	5cd3      	ldrb	r3, [r2, r3]
 8012e62:	461a      	mov	r2, r3
 8012e64:	f000 ffa4 	bl	8013db0 <dhcp_option_byte>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e6c:	7fbb      	ldrb	r3, [r7, #30]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	77bb      	strb	r3, [r7, #30]
 8012e72:	7fbb      	ldrb	r3, [r7, #30]
 8012e74:	2b02      	cmp	r3, #2
 8012e76:	d9ed      	bls.n	8012e54 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e78:	89b8      	ldrh	r0, [r7, #12]
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	33f0      	adds	r3, #240	; 0xf0
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	4619      	mov	r1, r3
 8012e82:	f001 fca9 	bl	80147d8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012e86:	4b27      	ldr	r3, [pc, #156]	; (8012f24 <dhcp_select+0x1e8>)
 8012e88:	6818      	ldr	r0, [r3, #0]
 8012e8a:	4b27      	ldr	r3, [pc, #156]	; (8012f28 <dhcp_select+0x1ec>)
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	2343      	movs	r3, #67	; 0x43
 8012e94:	4a25      	ldr	r2, [pc, #148]	; (8012f2c <dhcp_select+0x1f0>)
 8012e96:	6979      	ldr	r1, [r7, #20]
 8012e98:	f7ff fbce 	bl	8012638 <udp_sendto_if_src>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ea0:	6978      	ldr	r0, [r7, #20]
 8012ea2:	f7f8 fce9 	bl	800b878 <pbuf_free>
 8012ea6:	e001      	b.n	8012eac <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012ea8:	23ff      	movs	r3, #255	; 0xff
 8012eaa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	799b      	ldrb	r3, [r3, #6]
 8012eb0:	2bff      	cmp	r3, #255	; 0xff
 8012eb2:	d005      	beq.n	8012ec0 <dhcp_select+0x184>
    dhcp->tries++;
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	799b      	ldrb	r3, [r3, #6]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	799b      	ldrb	r3, [r3, #6]
 8012ec4:	2b05      	cmp	r3, #5
 8012ec6:	d80d      	bhi.n	8012ee4 <dhcp_select+0x1a8>
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	799b      	ldrb	r3, [r3, #6]
 8012ecc:	461a      	mov	r2, r3
 8012ece:	2301      	movs	r3, #1
 8012ed0:	4093      	lsls	r3, r2
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	0152      	lsls	r2, r2, #5
 8012ed8:	1ad2      	subs	r2, r2, r3
 8012eda:	0092      	lsls	r2, r2, #2
 8012edc:	4413      	add	r3, r2
 8012ede:	00db      	lsls	r3, r3, #3
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	e001      	b.n	8012ee8 <dhcp_select+0x1ac>
 8012ee4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012ee8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012eea:	89fb      	ldrh	r3, [r7, #14]
 8012eec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ef0:	4a0f      	ldr	r2, [pc, #60]	; (8012f30 <dhcp_select+0x1f4>)
 8012ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8012ef6:	1152      	asrs	r2, r2, #5
 8012ef8:	17db      	asrs	r3, r3, #31
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012f02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3720      	adds	r7, #32
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	0801b1bc 	.word	0x0801b1bc
 8012f14:	0801b268 	.word	0x0801b268
 8012f18:	0801b21c 	.word	0x0801b21c
 8012f1c:	0801b284 	.word	0x0801b284
 8012f20:	20000030 	.word	0x20000030
 8012f24:	200109a4 	.word	0x200109a4
 8012f28:	0801bd68 	.word	0x0801bd68
 8012f2c:	0801bd6c 	.word	0x0801bd6c
 8012f30:	10624dd3 	.word	0x10624dd3

08012f34 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012f3a:	4b27      	ldr	r3, [pc, #156]	; (8012fd8 <dhcp_coarse_tmr+0xa4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	607b      	str	r3, [r7, #4]
 8012f40:	e042      	b.n	8012fc8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f46:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d039      	beq.n	8012fc2 <dhcp_coarse_tmr+0x8e>
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	795b      	ldrb	r3, [r3, #5]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d035      	beq.n	8012fc2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	8a9b      	ldrh	r3, [r3, #20]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d012      	beq.n	8012f84 <dhcp_coarse_tmr+0x50>
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	8a5b      	ldrh	r3, [r3, #18]
 8012f62:	3301      	adds	r3, #1
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	825a      	strh	r2, [r3, #18]
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	8a5a      	ldrh	r2, [r3, #18]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	8a9b      	ldrh	r3, [r3, #20]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d106      	bne.n	8012f84 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f000 fe32 	bl	8013be0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f000 f969 	bl	8013254 <dhcp_start>
 8012f82:	e01e      	b.n	8012fc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	8a1b      	ldrh	r3, [r3, #16]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00b      	beq.n	8012fa4 <dhcp_coarse_tmr+0x70>
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	8a1b      	ldrh	r3, [r3, #16]
 8012f90:	1e5a      	subs	r2, r3, #1
 8012f92:	b291      	uxth	r1, r2
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	8211      	strh	r1, [r2, #16]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d103      	bne.n	8012fa4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 f8c6 	bl	801312e <dhcp_t2_timeout>
 8012fa2:	e00e      	b.n	8012fc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	89db      	ldrh	r3, [r3, #14]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00a      	beq.n	8012fc2 <dhcp_coarse_tmr+0x8e>
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	89db      	ldrh	r3, [r3, #14]
 8012fb0:	1e5a      	subs	r2, r3, #1
 8012fb2:	b291      	uxth	r1, r2
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	81d1      	strh	r1, [r2, #14]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d102      	bne.n	8012fc2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f888 	bl	80130d2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	607b      	str	r3, [r7, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d1b9      	bne.n	8012f42 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012fce:	bf00      	nop
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	20010910 	.word	0x20010910

08012fdc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012fe2:	4b16      	ldr	r3, [pc, #88]	; (801303c <dhcp_fine_tmr+0x60>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	607b      	str	r3, [r7, #4]
 8012fe8:	e020      	b.n	801302c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fee:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d017      	beq.n	8013026 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	891b      	ldrh	r3, [r3, #8]
 8012ffa:	2b01      	cmp	r3, #1
 8012ffc:	d906      	bls.n	801300c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	891b      	ldrh	r3, [r3, #8]
 8013002:	3b01      	subs	r3, #1
 8013004:	b29a      	uxth	r2, r3
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	811a      	strh	r2, [r3, #8]
 801300a:	e00c      	b.n	8013026 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	891b      	ldrh	r3, [r3, #8]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d108      	bne.n	8013026 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	891b      	ldrh	r3, [r3, #8]
 8013018:	3b01      	subs	r3, #1
 801301a:	b29a      	uxth	r2, r3
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013020:	6878      	ldr	r0, [r7, #4]
 8013022:	f000 f80d 	bl	8013040 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	607b      	str	r3, [r7, #4]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d1db      	bne.n	8012fea <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013032:	bf00      	nop
 8013034:	bf00      	nop
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	20010910 	.word	0x20010910

08013040 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	795b      	ldrb	r3, [r3, #5]
 8013052:	2b0c      	cmp	r3, #12
 8013054:	d003      	beq.n	801305e <dhcp_timeout+0x1e>
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	795b      	ldrb	r3, [r3, #5]
 801305a:	2b06      	cmp	r3, #6
 801305c:	d103      	bne.n	8013066 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fa54 	bl	801350c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013064:	e031      	b.n	80130ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	795b      	ldrb	r3, [r3, #5]
 801306a:	2b01      	cmp	r3, #1
 801306c:	d10e      	bne.n	801308c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	799b      	ldrb	r3, [r3, #6]
 8013072:	2b05      	cmp	r3, #5
 8013074:	d803      	bhi.n	801307e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f7ff fe60 	bl	8012d3c <dhcp_select>
}
 801307c:	e025      	b.n	80130ca <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f000 fdae 	bl	8013be0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f000 f8e5 	bl	8013254 <dhcp_start>
}
 801308a:	e01e      	b.n	80130ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	795b      	ldrb	r3, [r3, #5]
 8013090:	2b08      	cmp	r3, #8
 8013092:	d10b      	bne.n	80130ac <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	799b      	ldrb	r3, [r3, #6]
 8013098:	2b01      	cmp	r3, #1
 801309a:	d803      	bhi.n	80130a4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7ff fdf3 	bl	8012c88 <dhcp_check>
}
 80130a2:	e012      	b.n	80130ca <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 fad3 	bl	8013650 <dhcp_bind>
}
 80130aa:	e00e      	b.n	80130ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	795b      	ldrb	r3, [r3, #5]
 80130b0:	2b03      	cmp	r3, #3
 80130b2:	d10a      	bne.n	80130ca <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	799b      	ldrb	r3, [r3, #6]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d803      	bhi.n	80130c4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 fcd9 	bl	8013a74 <dhcp_reboot>
}
 80130c2:	e002      	b.n	80130ca <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f000 fa21 	bl	801350c <dhcp_discover>
}
 80130ca:	bf00      	nop
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	795b      	ldrb	r3, [r3, #5]
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	d007      	beq.n	80130f8 <dhcp_t1_timeout+0x26>
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	795b      	ldrb	r3, [r3, #5]
 80130ec:	2b0a      	cmp	r3, #10
 80130ee:	d003      	beq.n	80130f8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130f4:	2b05      	cmp	r3, #5
 80130f6:	d116      	bne.n	8013126 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fb83 	bl	8013804 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	899b      	ldrh	r3, [r3, #12]
 8013102:	461a      	mov	r2, r3
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	8a5b      	ldrh	r3, [r3, #18]
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	2b01      	cmp	r3, #1
 801310c:	dd0b      	ble.n	8013126 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	899b      	ldrh	r3, [r3, #12]
 8013112:	461a      	mov	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	8a5b      	ldrh	r3, [r3, #18]
 8013118:	1ad3      	subs	r3, r2, r3
 801311a:	0fda      	lsrs	r2, r3, #31
 801311c:	4413      	add	r3, r2
 801311e:	105b      	asrs	r3, r3, #1
 8013120:	b29a      	uxth	r2, r3
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013126:	bf00      	nop
 8013128:	3710      	adds	r7, #16
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}

0801312e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801312e:	b580      	push	{r7, lr}
 8013130:	b084      	sub	sp, #16
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	795b      	ldrb	r3, [r3, #5]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d00b      	beq.n	801315c <dhcp_t2_timeout+0x2e>
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	795b      	ldrb	r3, [r3, #5]
 8013148:	2b0a      	cmp	r3, #10
 801314a:	d007      	beq.n	801315c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013150:	2b05      	cmp	r3, #5
 8013152:	d003      	beq.n	801315c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	795b      	ldrb	r3, [r3, #5]
 8013158:	2b04      	cmp	r3, #4
 801315a:	d116      	bne.n	801318a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f000 fbed 	bl	801393c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	8a9b      	ldrh	r3, [r3, #20]
 8013166:	461a      	mov	r2, r3
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	8a5b      	ldrh	r3, [r3, #18]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	2b01      	cmp	r3, #1
 8013170:	dd0b      	ble.n	801318a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	8a9b      	ldrh	r3, [r3, #20]
 8013176:	461a      	mov	r2, r3
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	8a5b      	ldrh	r3, [r3, #18]
 801317c:	1ad3      	subs	r3, r2, r3
 801317e:	0fda      	lsrs	r2, r3, #31
 8013180:	4413      	add	r3, r2
 8013182:	105b      	asrs	r3, r3, #1
 8013184:	b29a      	uxth	r2, r3
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801318a:	bf00      	nop
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
	...

08013194 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2200      	movs	r2, #0
 80131a8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80131b0:	4b26      	ldr	r3, [pc, #152]	; (801324c <dhcp_handle_ack+0xb8>)
 80131b2:	78db      	ldrb	r3, [r3, #3]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d003      	beq.n	80131c0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80131b8:	4b25      	ldr	r3, [pc, #148]	; (8013250 <dhcp_handle_ack+0xbc>)
 80131ba:	68da      	ldr	r2, [r3, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80131c0:	4b22      	ldr	r3, [pc, #136]	; (801324c <dhcp_handle_ack+0xb8>)
 80131c2:	791b      	ldrb	r3, [r3, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d004      	beq.n	80131d2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80131c8:	4b21      	ldr	r3, [pc, #132]	; (8013250 <dhcp_handle_ack+0xbc>)
 80131ca:	691a      	ldr	r2, [r3, #16]
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80131d0:	e004      	b.n	80131dc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d6:	085a      	lsrs	r2, r3, #1
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80131dc:	4b1b      	ldr	r3, [pc, #108]	; (801324c <dhcp_handle_ack+0xb8>)
 80131de:	795b      	ldrb	r3, [r3, #5]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d004      	beq.n	80131ee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80131e4:	4b1a      	ldr	r3, [pc, #104]	; (8013250 <dhcp_handle_ack+0xbc>)
 80131e6:	695a      	ldr	r2, [r3, #20]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	631a      	str	r2, [r3, #48]	; 0x30
 80131ec:	e007      	b.n	80131fe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131f2:	4613      	mov	r3, r2
 80131f4:	00db      	lsls	r3, r3, #3
 80131f6:	1a9b      	subs	r3, r3, r2
 80131f8:	08da      	lsrs	r2, r3, #3
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	691a      	ldr	r2, [r3, #16]
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013206:	4b11      	ldr	r3, [pc, #68]	; (801324c <dhcp_handle_ack+0xb8>)
 8013208:	799b      	ldrb	r3, [r3, #6]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d00b      	beq.n	8013226 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801320e:	4b10      	ldr	r3, [pc, #64]	; (8013250 <dhcp_handle_ack+0xbc>)
 8013210:	699b      	ldr	r3, [r3, #24]
 8013212:	4618      	mov	r0, r3
 8013214:	f7f6 ff47 	bl	800a0a6 <lwip_htonl>
 8013218:	4602      	mov	r2, r0
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2201      	movs	r2, #1
 8013222:	71da      	strb	r2, [r3, #7]
 8013224:	e002      	b.n	801322c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2200      	movs	r2, #0
 801322a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801322c:	4b07      	ldr	r3, [pc, #28]	; (801324c <dhcp_handle_ack+0xb8>)
 801322e:	79db      	ldrb	r3, [r3, #7]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d007      	beq.n	8013244 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013234:	4b06      	ldr	r3, [pc, #24]	; (8013250 <dhcp_handle_ack+0xbc>)
 8013236:	69db      	ldr	r3, [r3, #28]
 8013238:	4618      	mov	r0, r3
 801323a:	f7f6 ff34 	bl	800a0a6 <lwip_htonl>
 801323e:	4602      	mov	r2, r0
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013244:	bf00      	nop
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	2001099c 	.word	0x2001099c
 8013250:	2001097c 	.word	0x2001097c

08013254 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <dhcp_start+0x22>
 8013262:	4b37      	ldr	r3, [pc, #220]	; (8013340 <dhcp_start+0xec>)
 8013264:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013268:	4936      	ldr	r1, [pc, #216]	; (8013344 <dhcp_start+0xf0>)
 801326a:	4837      	ldr	r0, [pc, #220]	; (8013348 <dhcp_start+0xf4>)
 801326c:	f004 f8c0 	bl	80173f0 <iprintf>
 8013270:	f06f 030f 	mvn.w	r3, #15
 8013274:	e060      	b.n	8013338 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801327c:	f003 0301 	and.w	r3, r3, #1
 8013280:	2b00      	cmp	r3, #0
 8013282:	d109      	bne.n	8013298 <dhcp_start+0x44>
 8013284:	4b2e      	ldr	r3, [pc, #184]	; (8013340 <dhcp_start+0xec>)
 8013286:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801328a:	4930      	ldr	r1, [pc, #192]	; (801334c <dhcp_start+0xf8>)
 801328c:	482e      	ldr	r0, [pc, #184]	; (8013348 <dhcp_start+0xf4>)
 801328e:	f004 f8af 	bl	80173f0 <iprintf>
 8013292:	f06f 030f 	mvn.w	r3, #15
 8013296:	e04f      	b.n	8013338 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132a2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80132a6:	d202      	bcs.n	80132ae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80132a8:	f04f 33ff 	mov.w	r3, #4294967295
 80132ac:	e044      	b.n	8013338 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10d      	bne.n	80132d0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80132b4:	2034      	movs	r0, #52	; 0x34
 80132b6:	f7f7 fa15 	bl	800a6e4 <mem_malloc>
 80132ba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d102      	bne.n	80132c8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80132c2:	f04f 33ff 	mov.w	r3, #4294967295
 80132c6:	e037      	b.n	8013338 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	68fa      	ldr	r2, [r7, #12]
 80132cc:	625a      	str	r2, [r3, #36]	; 0x24
 80132ce:	e005      	b.n	80132dc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	791b      	ldrb	r3, [r3, #4]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d001      	beq.n	80132dc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80132d8:	f7ff fc92 	bl	8012c00 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80132dc:	2234      	movs	r2, #52	; 0x34
 80132de:	2100      	movs	r1, #0
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f004 f8ea 	bl	80174ba <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80132e6:	f7ff fc39 	bl	8012b5c <dhcp_inc_pcb_refcount>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d002      	beq.n	80132f6 <dhcp_start+0xa2>
    return ERR_MEM;
 80132f0:	f04f 33ff 	mov.w	r3, #4294967295
 80132f4:	e020      	b.n	8013338 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2201      	movs	r2, #1
 80132fa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013302:	f003 0304 	and.w	r3, r3, #4
 8013306:	2b00      	cmp	r3, #0
 8013308:	d105      	bne.n	8013316 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801330a:	2102      	movs	r1, #2
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f000 fd01 	bl	8013d14 <dhcp_set_state>
    return ERR_OK;
 8013312:	2300      	movs	r3, #0
 8013314:	e010      	b.n	8013338 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f000 f8f8 	bl	801350c <dhcp_discover>
 801331c:	4603      	mov	r3, r0
 801331e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013320:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d005      	beq.n	8013334 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 fc59 	bl	8013be0 <dhcp_release_and_stop>
    return ERR_MEM;
 801332e:	f04f 33ff 	mov.w	r3, #4294967295
 8013332:	e001      	b.n	8013338 <dhcp_start+0xe4>
  }
  return result;
 8013334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3710      	adds	r7, #16
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	0801b1bc 	.word	0x0801b1bc
 8013344:	0801b2a0 	.word	0x0801b2a0
 8013348:	0801b21c 	.word	0x0801b21c
 801334c:	0801b2e4 	.word	0x0801b2e4

08013350 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801335c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d025      	beq.n	80133b0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	795b      	ldrb	r3, [r3, #5]
 8013368:	2b0a      	cmp	r3, #10
 801336a:	d008      	beq.n	801337e <dhcp_network_changed+0x2e>
 801336c:	2b0a      	cmp	r3, #10
 801336e:	dc0d      	bgt.n	801338c <dhcp_network_changed+0x3c>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d01f      	beq.n	80133b4 <dhcp_network_changed+0x64>
 8013374:	2b00      	cmp	r3, #0
 8013376:	db09      	blt.n	801338c <dhcp_network_changed+0x3c>
 8013378:	3b03      	subs	r3, #3
 801337a:	2b02      	cmp	r3, #2
 801337c:	d806      	bhi.n	801338c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2200      	movs	r2, #0
 8013382:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f000 fb75 	bl	8013a74 <dhcp_reboot>
      break;
 801338a:	e014      	b.n	80133b6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	795b      	ldrb	r3, [r3, #5]
 8013390:	2b0c      	cmp	r3, #12
 8013392:	d906      	bls.n	80133a2 <dhcp_network_changed+0x52>
 8013394:	4b09      	ldr	r3, [pc, #36]	; (80133bc <dhcp_network_changed+0x6c>)
 8013396:	f240 326d 	movw	r2, #877	; 0x36d
 801339a:	4909      	ldr	r1, [pc, #36]	; (80133c0 <dhcp_network_changed+0x70>)
 801339c:	4809      	ldr	r0, [pc, #36]	; (80133c4 <dhcp_network_changed+0x74>)
 801339e:	f004 f827 	bl	80173f0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2200      	movs	r2, #0
 80133a6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f000 f8af 	bl	801350c <dhcp_discover>
      break;
 80133ae:	e002      	b.n	80133b6 <dhcp_network_changed+0x66>
    return;
 80133b0:	bf00      	nop
 80133b2:	e000      	b.n	80133b6 <dhcp_network_changed+0x66>
      break;
 80133b4:	bf00      	nop
  }
}
 80133b6:	3710      	adds	r7, #16
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	0801b1bc 	.word	0x0801b1bc
 80133c0:	0801b308 	.word	0x0801b308
 80133c4:	0801b21c 	.word	0x0801b21c

080133c8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d107      	bne.n	80133e8 <dhcp_arp_reply+0x20>
 80133d8:	4b0e      	ldr	r3, [pc, #56]	; (8013414 <dhcp_arp_reply+0x4c>)
 80133da:	f240 328b 	movw	r2, #907	; 0x38b
 80133de:	490e      	ldr	r1, [pc, #56]	; (8013418 <dhcp_arp_reply+0x50>)
 80133e0:	480e      	ldr	r0, [pc, #56]	; (801341c <dhcp_arp_reply+0x54>)
 80133e2:	f004 f805 	bl	80173f0 <iprintf>
 80133e6:	e012      	b.n	801340e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d00c      	beq.n	801340e <dhcp_arp_reply+0x46>
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	795b      	ldrb	r3, [r3, #5]
 80133f8:	2b08      	cmp	r3, #8
 80133fa:	d108      	bne.n	801340e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	69db      	ldr	r3, [r3, #28]
 8013404:	429a      	cmp	r2, r3
 8013406:	d102      	bne.n	801340e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f000 f809 	bl	8013420 <dhcp_decline>
    }
  }
}
 801340e:	3710      	adds	r7, #16
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	0801b1bc 	.word	0x0801b1bc
 8013418:	0801b2a0 	.word	0x0801b2a0
 801341c:	0801b21c 	.word	0x0801b21c

08013420 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013420:	b5b0      	push	{r4, r5, r7, lr}
 8013422:	b08a      	sub	sp, #40	; 0x28
 8013424:	af02      	add	r7, sp, #8
 8013426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801342e:	210c      	movs	r1, #12
 8013430:	69b8      	ldr	r0, [r7, #24]
 8013432:	f000 fc6f 	bl	8013d14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013436:	f107 030c 	add.w	r3, r7, #12
 801343a:	2204      	movs	r2, #4
 801343c:	69b9      	ldr	r1, [r7, #24]
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f001 f8f4 	bl	801462c <dhcp_create_msg>
 8013444:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d035      	beq.n	80134b8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013452:	89b8      	ldrh	r0, [r7, #12]
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801345a:	2304      	movs	r3, #4
 801345c:	2232      	movs	r2, #50	; 0x32
 801345e:	f000 fc73 	bl	8013d48 <dhcp_option>
 8013462:	4603      	mov	r3, r0
 8013464:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013466:	89bc      	ldrh	r4, [r7, #12]
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	69db      	ldr	r3, [r3, #28]
 8013472:	4618      	mov	r0, r3
 8013474:	f7f6 fe17 	bl	800a0a6 <lwip_htonl>
 8013478:	4603      	mov	r3, r0
 801347a:	461a      	mov	r2, r3
 801347c:	4629      	mov	r1, r5
 801347e:	4620      	mov	r0, r4
 8013480:	f000 fcee 	bl	8013e60 <dhcp_option_long>
 8013484:	4603      	mov	r3, r0
 8013486:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013488:	89b8      	ldrh	r0, [r7, #12]
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	33f0      	adds	r3, #240	; 0xf0
 801348e:	697a      	ldr	r2, [r7, #20]
 8013490:	4619      	mov	r1, r3
 8013492:	f001 f9a1 	bl	80147d8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013496:	4b19      	ldr	r3, [pc, #100]	; (80134fc <dhcp_decline+0xdc>)
 8013498:	6818      	ldr	r0, [r3, #0]
 801349a:	4b19      	ldr	r3, [pc, #100]	; (8013500 <dhcp_decline+0xe0>)
 801349c:	9301      	str	r3, [sp, #4]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	9300      	str	r3, [sp, #0]
 80134a2:	2343      	movs	r3, #67	; 0x43
 80134a4:	4a17      	ldr	r2, [pc, #92]	; (8013504 <dhcp_decline+0xe4>)
 80134a6:	6979      	ldr	r1, [r7, #20]
 80134a8:	f7ff f8c6 	bl	8012638 <udp_sendto_if_src>
 80134ac:	4603      	mov	r3, r0
 80134ae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80134b0:	6978      	ldr	r0, [r7, #20]
 80134b2:	f7f8 f9e1 	bl	800b878 <pbuf_free>
 80134b6:	e001      	b.n	80134bc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80134b8:	23ff      	movs	r3, #255	; 0xff
 80134ba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	799b      	ldrb	r3, [r3, #6]
 80134c0:	2bff      	cmp	r3, #255	; 0xff
 80134c2:	d005      	beq.n	80134d0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	799b      	ldrb	r3, [r3, #6]
 80134c8:	3301      	adds	r3, #1
 80134ca:	b2da      	uxtb	r2, r3
 80134cc:	69bb      	ldr	r3, [r7, #24]
 80134ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80134d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80134d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134d6:	89fb      	ldrh	r3, [r7, #14]
 80134d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80134dc:	4a0a      	ldr	r2, [pc, #40]	; (8013508 <dhcp_decline+0xe8>)
 80134de:	fb82 1203 	smull	r1, r2, r2, r3
 80134e2:	1152      	asrs	r2, r2, #5
 80134e4:	17db      	asrs	r3, r3, #31
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	b29a      	uxth	r2, r3
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80134ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3720      	adds	r7, #32
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bdb0      	pop	{r4, r5, r7, pc}
 80134fa:	bf00      	nop
 80134fc:	200109a4 	.word	0x200109a4
 8013500:	0801bd68 	.word	0x0801bd68
 8013504:	0801bd6c 	.word	0x0801bd6c
 8013508:	10624dd3 	.word	0x10624dd3

0801350c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b08a      	sub	sp, #40	; 0x28
 8013510:	af02      	add	r7, sp, #8
 8013512:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801351a:	2300      	movs	r3, #0
 801351c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	2200      	movs	r2, #0
 8013522:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013524:	2106      	movs	r1, #6
 8013526:	69b8      	ldr	r0, [r7, #24]
 8013528:	f000 fbf4 	bl	8013d14 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801352c:	f107 0308 	add.w	r3, r7, #8
 8013530:	2201      	movs	r2, #1
 8013532:	69b9      	ldr	r1, [r7, #24]
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f001 f879 	bl	801462c <dhcp_create_msg>
 801353a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d04b      	beq.n	80135da <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013548:	8938      	ldrh	r0, [r7, #8]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013550:	2302      	movs	r3, #2
 8013552:	2239      	movs	r2, #57	; 0x39
 8013554:	f000 fbf8 	bl	8013d48 <dhcp_option>
 8013558:	4603      	mov	r3, r0
 801355a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801355c:	8938      	ldrh	r0, [r7, #8]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013568:	461a      	mov	r2, r3
 801356a:	f000 fc47 	bl	8013dfc <dhcp_option_short>
 801356e:	4603      	mov	r3, r0
 8013570:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013572:	8938      	ldrh	r0, [r7, #8]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801357a:	2303      	movs	r3, #3
 801357c:	2237      	movs	r2, #55	; 0x37
 801357e:	f000 fbe3 	bl	8013d48 <dhcp_option>
 8013582:	4603      	mov	r3, r0
 8013584:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013586:	2300      	movs	r3, #0
 8013588:	77fb      	strb	r3, [r7, #31]
 801358a:	e00e      	b.n	80135aa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801358c:	8938      	ldrh	r0, [r7, #8]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013594:	7ffb      	ldrb	r3, [r7, #31]
 8013596:	4a29      	ldr	r2, [pc, #164]	; (801363c <dhcp_discover+0x130>)
 8013598:	5cd3      	ldrb	r3, [r2, r3]
 801359a:	461a      	mov	r2, r3
 801359c:	f000 fc08 	bl	8013db0 <dhcp_option_byte>
 80135a0:	4603      	mov	r3, r0
 80135a2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80135a4:	7ffb      	ldrb	r3, [r7, #31]
 80135a6:	3301      	adds	r3, #1
 80135a8:	77fb      	strb	r3, [r7, #31]
 80135aa:	7ffb      	ldrb	r3, [r7, #31]
 80135ac:	2b02      	cmp	r3, #2
 80135ae:	d9ed      	bls.n	801358c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80135b0:	8938      	ldrh	r0, [r7, #8]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	33f0      	adds	r3, #240	; 0xf0
 80135b6:	693a      	ldr	r2, [r7, #16]
 80135b8:	4619      	mov	r1, r3
 80135ba:	f001 f90d 	bl	80147d8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80135be:	4b20      	ldr	r3, [pc, #128]	; (8013640 <dhcp_discover+0x134>)
 80135c0:	6818      	ldr	r0, [r3, #0]
 80135c2:	4b20      	ldr	r3, [pc, #128]	; (8013644 <dhcp_discover+0x138>)
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	2343      	movs	r3, #67	; 0x43
 80135cc:	4a1e      	ldr	r2, [pc, #120]	; (8013648 <dhcp_discover+0x13c>)
 80135ce:	6939      	ldr	r1, [r7, #16]
 80135d0:	f7ff f832 	bl	8012638 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80135d4:	6938      	ldr	r0, [r7, #16]
 80135d6:	f7f8 f94f 	bl	800b878 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	799b      	ldrb	r3, [r3, #6]
 80135de:	2bff      	cmp	r3, #255	; 0xff
 80135e0:	d005      	beq.n	80135ee <dhcp_discover+0xe2>
    dhcp->tries++;
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	799b      	ldrb	r3, [r3, #6]
 80135e6:	3301      	adds	r3, #1
 80135e8:	b2da      	uxtb	r2, r3
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	799b      	ldrb	r3, [r3, #6]
 80135f2:	2b05      	cmp	r3, #5
 80135f4:	d80d      	bhi.n	8013612 <dhcp_discover+0x106>
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	799b      	ldrb	r3, [r3, #6]
 80135fa:	461a      	mov	r2, r3
 80135fc:	2301      	movs	r3, #1
 80135fe:	4093      	lsls	r3, r2
 8013600:	b29b      	uxth	r3, r3
 8013602:	461a      	mov	r2, r3
 8013604:	0152      	lsls	r2, r2, #5
 8013606:	1ad2      	subs	r2, r2, r3
 8013608:	0092      	lsls	r2, r2, #2
 801360a:	4413      	add	r3, r2
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	b29b      	uxth	r3, r3
 8013610:	e001      	b.n	8013616 <dhcp_discover+0x10a>
 8013612:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013616:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013618:	897b      	ldrh	r3, [r7, #10]
 801361a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801361e:	4a0b      	ldr	r2, [pc, #44]	; (801364c <dhcp_discover+0x140>)
 8013620:	fb82 1203 	smull	r1, r2, r2, r3
 8013624:	1152      	asrs	r2, r2, #5
 8013626:	17db      	asrs	r3, r3, #31
 8013628:	1ad3      	subs	r3, r2, r3
 801362a:	b29a      	uxth	r2, r3
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013634:	4618      	mov	r0, r3
 8013636:	3720      	adds	r7, #32
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	20000030 	.word	0x20000030
 8013640:	200109a4 	.word	0x200109a4
 8013644:	0801bd68 	.word	0x0801bd68
 8013648:	0801bd6c 	.word	0x0801bd6c
 801364c:	10624dd3 	.word	0x10624dd3

08013650 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b088      	sub	sp, #32
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d107      	bne.n	801366e <dhcp_bind+0x1e>
 801365e:	4b64      	ldr	r3, [pc, #400]	; (80137f0 <dhcp_bind+0x1a0>)
 8013660:	f240 4215 	movw	r2, #1045	; 0x415
 8013664:	4963      	ldr	r1, [pc, #396]	; (80137f4 <dhcp_bind+0x1a4>)
 8013666:	4864      	ldr	r0, [pc, #400]	; (80137f8 <dhcp_bind+0x1a8>)
 8013668:	f003 fec2 	bl	80173f0 <iprintf>
 801366c:	e0bc      	b.n	80137e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013672:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d107      	bne.n	801368a <dhcp_bind+0x3a>
 801367a:	4b5d      	ldr	r3, [pc, #372]	; (80137f0 <dhcp_bind+0x1a0>)
 801367c:	f240 4217 	movw	r2, #1047	; 0x417
 8013680:	495e      	ldr	r1, [pc, #376]	; (80137fc <dhcp_bind+0x1ac>)
 8013682:	485d      	ldr	r0, [pc, #372]	; (80137f8 <dhcp_bind+0x1a8>)
 8013684:	f003 feb4 	bl	80173f0 <iprintf>
 8013688:	e0ae      	b.n	80137e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	2200      	movs	r2, #0
 801368e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013698:	d019      	beq.n	80136ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801369e:	331e      	adds	r3, #30
 80136a0:	4a57      	ldr	r2, [pc, #348]	; (8013800 <dhcp_bind+0x1b0>)
 80136a2:	fba2 2303 	umull	r2, r3, r2, r3
 80136a6:	095b      	lsrs	r3, r3, #5
 80136a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136b0:	d302      	bcc.n	80136b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80136b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	8a9b      	ldrh	r3, [r3, #20]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d102      	bne.n	80136ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	2201      	movs	r2, #1
 80136cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136d6:	d01d      	beq.n	8013714 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136dc:	331e      	adds	r3, #30
 80136de:	4a48      	ldr	r2, [pc, #288]	; (8013800 <dhcp_bind+0x1b0>)
 80136e0:	fba2 2303 	umull	r2, r3, r2, r3
 80136e4:	095b      	lsrs	r3, r3, #5
 80136e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136ee:	d302      	bcc.n	80136f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80136f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	895b      	ldrh	r3, [r3, #10]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d102      	bne.n	801370c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	2201      	movs	r2, #1
 801370a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	895a      	ldrh	r2, [r3, #10]
 8013710:	69bb      	ldr	r3, [r7, #24]
 8013712:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371c:	d01d      	beq.n	801375a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013722:	331e      	adds	r3, #30
 8013724:	4a36      	ldr	r2, [pc, #216]	; (8013800 <dhcp_bind+0x1b0>)
 8013726:	fba2 2303 	umull	r2, r3, r2, r3
 801372a:	095b      	lsrs	r3, r3, #5
 801372c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013734:	d302      	bcc.n	801373c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801373a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	b29a      	uxth	r2, r3
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	899b      	ldrh	r3, [r3, #12]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d102      	bne.n	8013752 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	2201      	movs	r2, #1
 8013750:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	899a      	ldrh	r2, [r3, #12]
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	895a      	ldrh	r2, [r3, #10]
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	899b      	ldrh	r3, [r3, #12]
 8013762:	429a      	cmp	r2, r3
 8013764:	d306      	bcc.n	8013774 <dhcp_bind+0x124>
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	899b      	ldrh	r3, [r3, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d002      	beq.n	8013774 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	2200      	movs	r2, #0
 8013772:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	79db      	ldrb	r3, [r3, #7]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d003      	beq.n	8013784 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	6a1b      	ldr	r3, [r3, #32]
 8013780:	613b      	str	r3, [r7, #16]
 8013782:	e014      	b.n	80137ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	331c      	adds	r3, #28
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801378c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013790:	2b00      	cmp	r3, #0
 8013792:	db02      	blt.n	801379a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013794:	23ff      	movs	r3, #255	; 0xff
 8013796:	613b      	str	r3, [r7, #16]
 8013798:	e009      	b.n	80137ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801379a:	7dfb      	ldrb	r3, [r7, #23]
 801379c:	2bbf      	cmp	r3, #191	; 0xbf
 801379e:	d903      	bls.n	80137a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80137a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80137a4:	613b      	str	r3, [r7, #16]
 80137a6:	e002      	b.n	80137ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80137a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d108      	bne.n	80137cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	69da      	ldr	r2, [r3, #28]
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	4013      	ands	r3, r2
 80137c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80137ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80137cc:	210a      	movs	r1, #10
 80137ce:	69b8      	ldr	r0, [r7, #24]
 80137d0:	f000 faa0 	bl	8013d14 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	f103 011c 	add.w	r1, r3, #28
 80137da:	f107 030c 	add.w	r3, r7, #12
 80137de:	f107 0210 	add.w	r2, r7, #16
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	f7f7 fb3a 	bl	800ae5c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80137e8:	3720      	adds	r7, #32
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	0801b1bc 	.word	0x0801b1bc
 80137f4:	0801b31c 	.word	0x0801b31c
 80137f8:	0801b21c 	.word	0x0801b21c
 80137fc:	0801b338 	.word	0x0801b338
 8013800:	88888889 	.word	0x88888889

08013804 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b08a      	sub	sp, #40	; 0x28
 8013808:	af02      	add	r7, sp, #8
 801380a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013810:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013812:	2105      	movs	r1, #5
 8013814:	69b8      	ldr	r0, [r7, #24]
 8013816:	f000 fa7d 	bl	8013d14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801381a:	f107 030c 	add.w	r3, r7, #12
 801381e:	2203      	movs	r2, #3
 8013820:	69b9      	ldr	r1, [r7, #24]
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 ff02 	bl	801462c <dhcp_create_msg>
 8013828:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d04e      	beq.n	80138ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013836:	89b8      	ldrh	r0, [r7, #12]
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801383e:	2302      	movs	r3, #2
 8013840:	2239      	movs	r2, #57	; 0x39
 8013842:	f000 fa81 	bl	8013d48 <dhcp_option>
 8013846:	4603      	mov	r3, r0
 8013848:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801384a:	89b8      	ldrh	r0, [r7, #12]
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013856:	461a      	mov	r2, r3
 8013858:	f000 fad0 	bl	8013dfc <dhcp_option_short>
 801385c:	4603      	mov	r3, r0
 801385e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013860:	89b8      	ldrh	r0, [r7, #12]
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013868:	2303      	movs	r3, #3
 801386a:	2237      	movs	r2, #55	; 0x37
 801386c:	f000 fa6c 	bl	8013d48 <dhcp_option>
 8013870:	4603      	mov	r3, r0
 8013872:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013874:	2300      	movs	r3, #0
 8013876:	77bb      	strb	r3, [r7, #30]
 8013878:	e00e      	b.n	8013898 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801387a:	89b8      	ldrh	r0, [r7, #12]
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013882:	7fbb      	ldrb	r3, [r7, #30]
 8013884:	4a2a      	ldr	r2, [pc, #168]	; (8013930 <dhcp_renew+0x12c>)
 8013886:	5cd3      	ldrb	r3, [r2, r3]
 8013888:	461a      	mov	r2, r3
 801388a:	f000 fa91 	bl	8013db0 <dhcp_option_byte>
 801388e:	4603      	mov	r3, r0
 8013890:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013892:	7fbb      	ldrb	r3, [r7, #30]
 8013894:	3301      	adds	r3, #1
 8013896:	77bb      	strb	r3, [r7, #30]
 8013898:	7fbb      	ldrb	r3, [r7, #30]
 801389a:	2b02      	cmp	r3, #2
 801389c:	d9ed      	bls.n	801387a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801389e:	89b8      	ldrh	r0, [r7, #12]
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	33f0      	adds	r3, #240	; 0xf0
 80138a4:	697a      	ldr	r2, [r7, #20]
 80138a6:	4619      	mov	r1, r3
 80138a8:	f000 ff96 	bl	80147d8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138ac:	4b21      	ldr	r3, [pc, #132]	; (8013934 <dhcp_renew+0x130>)
 80138ae:	6818      	ldr	r0, [r3, #0]
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	f103 0218 	add.w	r2, r3, #24
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	9300      	str	r3, [sp, #0]
 80138ba:	2343      	movs	r3, #67	; 0x43
 80138bc:	6979      	ldr	r1, [r7, #20]
 80138be:	f7fe fe47 	bl	8012550 <udp_sendto_if>
 80138c2:	4603      	mov	r3, r0
 80138c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80138c6:	6978      	ldr	r0, [r7, #20]
 80138c8:	f7f7 ffd6 	bl	800b878 <pbuf_free>
 80138cc:	e001      	b.n	80138d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80138ce:	23ff      	movs	r3, #255	; 0xff
 80138d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	799b      	ldrb	r3, [r3, #6]
 80138d6:	2bff      	cmp	r3, #255	; 0xff
 80138d8:	d005      	beq.n	80138e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	799b      	ldrb	r3, [r3, #6]
 80138de:	3301      	adds	r3, #1
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	799b      	ldrb	r3, [r3, #6]
 80138ea:	2b09      	cmp	r3, #9
 80138ec:	d80a      	bhi.n	8013904 <dhcp_renew+0x100>
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	799b      	ldrb	r3, [r3, #6]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	461a      	mov	r2, r3
 80138f6:	0152      	lsls	r2, r2, #5
 80138f8:	1ad2      	subs	r2, r2, r3
 80138fa:	0092      	lsls	r2, r2, #2
 80138fc:	4413      	add	r3, r2
 80138fe:	011b      	lsls	r3, r3, #4
 8013900:	b29b      	uxth	r3, r3
 8013902:	e001      	b.n	8013908 <dhcp_renew+0x104>
 8013904:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013908:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801390a:	89fb      	ldrh	r3, [r7, #14]
 801390c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013910:	4a09      	ldr	r2, [pc, #36]	; (8013938 <dhcp_renew+0x134>)
 8013912:	fb82 1203 	smull	r1, r2, r2, r3
 8013916:	1152      	asrs	r2, r2, #5
 8013918:	17db      	asrs	r3, r3, #31
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	b29a      	uxth	r2, r3
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013922:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013926:	4618      	mov	r0, r3
 8013928:	3720      	adds	r7, #32
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	20000030 	.word	0x20000030
 8013934:	200109a4 	.word	0x200109a4
 8013938:	10624dd3 	.word	0x10624dd3

0801393c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08a      	sub	sp, #40	; 0x28
 8013940:	af02      	add	r7, sp, #8
 8013942:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013948:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801394a:	2104      	movs	r1, #4
 801394c:	69b8      	ldr	r0, [r7, #24]
 801394e:	f000 f9e1 	bl	8013d14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013952:	f107 030c 	add.w	r3, r7, #12
 8013956:	2203      	movs	r2, #3
 8013958:	69b9      	ldr	r1, [r7, #24]
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fe66 	bl	801462c <dhcp_create_msg>
 8013960:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d04c      	beq.n	8013a02 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801396e:	89b8      	ldrh	r0, [r7, #12]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013976:	2302      	movs	r3, #2
 8013978:	2239      	movs	r2, #57	; 0x39
 801397a:	f000 f9e5 	bl	8013d48 <dhcp_option>
 801397e:	4603      	mov	r3, r0
 8013980:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013982:	89b8      	ldrh	r0, [r7, #12]
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801398e:	461a      	mov	r2, r3
 8013990:	f000 fa34 	bl	8013dfc <dhcp_option_short>
 8013994:	4603      	mov	r3, r0
 8013996:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013998:	89b8      	ldrh	r0, [r7, #12]
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139a0:	2303      	movs	r3, #3
 80139a2:	2237      	movs	r2, #55	; 0x37
 80139a4:	f000 f9d0 	bl	8013d48 <dhcp_option>
 80139a8:	4603      	mov	r3, r0
 80139aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80139ac:	2300      	movs	r3, #0
 80139ae:	77bb      	strb	r3, [r7, #30]
 80139b0:	e00e      	b.n	80139d0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80139b2:	89b8      	ldrh	r0, [r7, #12]
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80139ba:	7fbb      	ldrb	r3, [r7, #30]
 80139bc:	4a29      	ldr	r2, [pc, #164]	; (8013a64 <dhcp_rebind+0x128>)
 80139be:	5cd3      	ldrb	r3, [r2, r3]
 80139c0:	461a      	mov	r2, r3
 80139c2:	f000 f9f5 	bl	8013db0 <dhcp_option_byte>
 80139c6:	4603      	mov	r3, r0
 80139c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80139ca:	7fbb      	ldrb	r3, [r7, #30]
 80139cc:	3301      	adds	r3, #1
 80139ce:	77bb      	strb	r3, [r7, #30]
 80139d0:	7fbb      	ldrb	r3, [r7, #30]
 80139d2:	2b02      	cmp	r3, #2
 80139d4:	d9ed      	bls.n	80139b2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80139d6:	89b8      	ldrh	r0, [r7, #12]
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	33f0      	adds	r3, #240	; 0xf0
 80139dc:	697a      	ldr	r2, [r7, #20]
 80139de:	4619      	mov	r1, r3
 80139e0:	f000 fefa 	bl	80147d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80139e4:	4b20      	ldr	r3, [pc, #128]	; (8013a68 <dhcp_rebind+0x12c>)
 80139e6:	6818      	ldr	r0, [r3, #0]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	2343      	movs	r3, #67	; 0x43
 80139ee:	4a1f      	ldr	r2, [pc, #124]	; (8013a6c <dhcp_rebind+0x130>)
 80139f0:	6979      	ldr	r1, [r7, #20]
 80139f2:	f7fe fdad 	bl	8012550 <udp_sendto_if>
 80139f6:	4603      	mov	r3, r0
 80139f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80139fa:	6978      	ldr	r0, [r7, #20]
 80139fc:	f7f7 ff3c 	bl	800b878 <pbuf_free>
 8013a00:	e001      	b.n	8013a06 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013a02:	23ff      	movs	r3, #255	; 0xff
 8013a04:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	799b      	ldrb	r3, [r3, #6]
 8013a0a:	2bff      	cmp	r3, #255	; 0xff
 8013a0c:	d005      	beq.n	8013a1a <dhcp_rebind+0xde>
    dhcp->tries++;
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	799b      	ldrb	r3, [r3, #6]
 8013a12:	3301      	adds	r3, #1
 8013a14:	b2da      	uxtb	r2, r3
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	799b      	ldrb	r3, [r3, #6]
 8013a1e:	2b09      	cmp	r3, #9
 8013a20:	d80a      	bhi.n	8013a38 <dhcp_rebind+0xfc>
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	799b      	ldrb	r3, [r3, #6]
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	461a      	mov	r2, r3
 8013a2a:	0152      	lsls	r2, r2, #5
 8013a2c:	1ad2      	subs	r2, r2, r3
 8013a2e:	0092      	lsls	r2, r2, #2
 8013a30:	4413      	add	r3, r2
 8013a32:	00db      	lsls	r3, r3, #3
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	e001      	b.n	8013a3c <dhcp_rebind+0x100>
 8013a38:	f242 7310 	movw	r3, #10000	; 0x2710
 8013a3c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013a3e:	89fb      	ldrh	r3, [r7, #14]
 8013a40:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013a44:	4a0a      	ldr	r2, [pc, #40]	; (8013a70 <dhcp_rebind+0x134>)
 8013a46:	fb82 1203 	smull	r1, r2, r2, r3
 8013a4a:	1152      	asrs	r2, r2, #5
 8013a4c:	17db      	asrs	r3, r3, #31
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3720      	adds	r7, #32
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	20000030 	.word	0x20000030
 8013a68:	200109a4 	.word	0x200109a4
 8013a6c:	0801bd6c 	.word	0x0801bd6c
 8013a70:	10624dd3 	.word	0x10624dd3

08013a74 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013a74:	b5b0      	push	{r4, r5, r7, lr}
 8013a76:	b08a      	sub	sp, #40	; 0x28
 8013a78:	af02      	add	r7, sp, #8
 8013a7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a80:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013a82:	2103      	movs	r1, #3
 8013a84:	69b8      	ldr	r0, [r7, #24]
 8013a86:	f000 f945 	bl	8013d14 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013a8a:	f107 030c 	add.w	r3, r7, #12
 8013a8e:	2203      	movs	r2, #3
 8013a90:	69b9      	ldr	r1, [r7, #24]
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f000 fdca 	bl	801462c <dhcp_create_msg>
 8013a98:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d066      	beq.n	8013b6e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013aa6:	89b8      	ldrh	r0, [r7, #12]
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013aae:	2302      	movs	r3, #2
 8013ab0:	2239      	movs	r2, #57	; 0x39
 8013ab2:	f000 f949 	bl	8013d48 <dhcp_option>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013aba:	89b8      	ldrh	r0, [r7, #12]
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	33f0      	adds	r3, #240	; 0xf0
 8013ac0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	f000 f999 	bl	8013dfc <dhcp_option_short>
 8013aca:	4603      	mov	r3, r0
 8013acc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013ace:	89b8      	ldrh	r0, [r7, #12]
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ad6:	2304      	movs	r3, #4
 8013ad8:	2232      	movs	r2, #50	; 0x32
 8013ada:	f000 f935 	bl	8013d48 <dhcp_option>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013ae2:	89bc      	ldrh	r4, [r7, #12]
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	69db      	ldr	r3, [r3, #28]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7f6 fad9 	bl	800a0a6 <lwip_htonl>
 8013af4:	4603      	mov	r3, r0
 8013af6:	461a      	mov	r2, r3
 8013af8:	4629      	mov	r1, r5
 8013afa:	4620      	mov	r0, r4
 8013afc:	f000 f9b0 	bl	8013e60 <dhcp_option_long>
 8013b00:	4603      	mov	r3, r0
 8013b02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b04:	89b8      	ldrh	r0, [r7, #12]
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b0c:	2303      	movs	r3, #3
 8013b0e:	2237      	movs	r2, #55	; 0x37
 8013b10:	f000 f91a 	bl	8013d48 <dhcp_option>
 8013b14:	4603      	mov	r3, r0
 8013b16:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b18:	2300      	movs	r3, #0
 8013b1a:	77bb      	strb	r3, [r7, #30]
 8013b1c:	e00e      	b.n	8013b3c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013b1e:	89b8      	ldrh	r0, [r7, #12]
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013b26:	7fbb      	ldrb	r3, [r7, #30]
 8013b28:	4a29      	ldr	r2, [pc, #164]	; (8013bd0 <dhcp_reboot+0x15c>)
 8013b2a:	5cd3      	ldrb	r3, [r2, r3]
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	f000 f93f 	bl	8013db0 <dhcp_option_byte>
 8013b32:	4603      	mov	r3, r0
 8013b34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b36:	7fbb      	ldrb	r3, [r7, #30]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	77bb      	strb	r3, [r7, #30]
 8013b3c:	7fbb      	ldrb	r3, [r7, #30]
 8013b3e:	2b02      	cmp	r3, #2
 8013b40:	d9ed      	bls.n	8013b1e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013b42:	89b8      	ldrh	r0, [r7, #12]
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	33f0      	adds	r3, #240	; 0xf0
 8013b48:	697a      	ldr	r2, [r7, #20]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	f000 fe44 	bl	80147d8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013b50:	4b20      	ldr	r3, [pc, #128]	; (8013bd4 <dhcp_reboot+0x160>)
 8013b52:	6818      	ldr	r0, [r3, #0]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	9300      	str	r3, [sp, #0]
 8013b58:	2343      	movs	r3, #67	; 0x43
 8013b5a:	4a1f      	ldr	r2, [pc, #124]	; (8013bd8 <dhcp_reboot+0x164>)
 8013b5c:	6979      	ldr	r1, [r7, #20]
 8013b5e:	f7fe fcf7 	bl	8012550 <udp_sendto_if>
 8013b62:	4603      	mov	r3, r0
 8013b64:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013b66:	6978      	ldr	r0, [r7, #20]
 8013b68:	f7f7 fe86 	bl	800b878 <pbuf_free>
 8013b6c:	e001      	b.n	8013b72 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013b6e:	23ff      	movs	r3, #255	; 0xff
 8013b70:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	799b      	ldrb	r3, [r3, #6]
 8013b76:	2bff      	cmp	r3, #255	; 0xff
 8013b78:	d005      	beq.n	8013b86 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	799b      	ldrb	r3, [r3, #6]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	799b      	ldrb	r3, [r3, #6]
 8013b8a:	2b09      	cmp	r3, #9
 8013b8c:	d80a      	bhi.n	8013ba4 <dhcp_reboot+0x130>
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	799b      	ldrb	r3, [r3, #6]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	461a      	mov	r2, r3
 8013b96:	0152      	lsls	r2, r2, #5
 8013b98:	1ad2      	subs	r2, r2, r3
 8013b9a:	0092      	lsls	r2, r2, #2
 8013b9c:	4413      	add	r3, r2
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	e001      	b.n	8013ba8 <dhcp_reboot+0x134>
 8013ba4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ba8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013baa:	89fb      	ldrh	r3, [r7, #14]
 8013bac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013bb0:	4a0a      	ldr	r2, [pc, #40]	; (8013bdc <dhcp_reboot+0x168>)
 8013bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8013bb6:	1152      	asrs	r2, r2, #5
 8013bb8:	17db      	asrs	r3, r3, #31
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	b29a      	uxth	r2, r3
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013bc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3720      	adds	r7, #32
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	20000030 	.word	0x20000030
 8013bd4:	200109a4 	.word	0x200109a4
 8013bd8:	0801bd6c 	.word	0x0801bd6c
 8013bdc:	10624dd3 	.word	0x10624dd3

08013be0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013be0:	b5b0      	push	{r4, r5, r7, lr}
 8013be2:	b08a      	sub	sp, #40	; 0x28
 8013be4:	af02      	add	r7, sp, #8
 8013be6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bec:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 8084 	beq.w	8013cfe <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	795b      	ldrb	r3, [r3, #5]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f000 8081 	beq.w	8013d02 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	699b      	ldr	r3, [r3, #24]
 8013c04:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	2200      	movs	r2, #0
 8013c16:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013c1e:	69fb      	ldr	r3, [r7, #28]
 8013c20:	2200      	movs	r2, #0
 8013c22:	631a      	str	r2, [r3, #48]	; 0x30
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013c34:	69fb      	ldr	r3, [r7, #28]
 8013c36:	2200      	movs	r2, #0
 8013c38:	829a      	strh	r2, [r3, #20]
 8013c3a:	69fb      	ldr	r3, [r7, #28]
 8013c3c:	8a9a      	ldrh	r2, [r3, #20]
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	825a      	strh	r2, [r3, #18]
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	8a5a      	ldrh	r2, [r3, #18]
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	821a      	strh	r2, [r3, #16]
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	8a1a      	ldrh	r2, [r3, #16]
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f000 fdee 	bl	8014834 <dhcp_supplied_address>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d03b      	beq.n	8013cd6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013c5e:	f107 030e 	add.w	r3, r7, #14
 8013c62:	2207      	movs	r2, #7
 8013c64:	69f9      	ldr	r1, [r7, #28]
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 fce0 	bl	801462c <dhcp_create_msg>
 8013c6c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d030      	beq.n	8013cd6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c74:	69bb      	ldr	r3, [r7, #24]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013c7a:	89f8      	ldrh	r0, [r7, #14]
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013c82:	2304      	movs	r3, #4
 8013c84:	2236      	movs	r2, #54	; 0x36
 8013c86:	f000 f85f 	bl	8013d48 <dhcp_option>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013c8e:	89fc      	ldrh	r4, [r7, #14]
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7f6 fa04 	bl	800a0a6 <lwip_htonl>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f000 f8db 	bl	8013e60 <dhcp_option_long>
 8013caa:	4603      	mov	r3, r0
 8013cac:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013cae:	89f8      	ldrh	r0, [r7, #14]
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	33f0      	adds	r3, #240	; 0xf0
 8013cb4:	69ba      	ldr	r2, [r7, #24]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	f000 fd8e 	bl	80147d8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013cbc:	4b13      	ldr	r3, [pc, #76]	; (8013d0c <dhcp_release_and_stop+0x12c>)
 8013cbe:	6818      	ldr	r0, [r3, #0]
 8013cc0:	f107 0210 	add.w	r2, r7, #16
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	2343      	movs	r3, #67	; 0x43
 8013cca:	69b9      	ldr	r1, [r7, #24]
 8013ccc:	f7fe fc40 	bl	8012550 <udp_sendto_if>
      pbuf_free(p_out);
 8013cd0:	69b8      	ldr	r0, [r7, #24]
 8013cd2:	f7f7 fdd1 	bl	800b878 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013cd6:	4b0e      	ldr	r3, [pc, #56]	; (8013d10 <dhcp_release_and_stop+0x130>)
 8013cd8:	4a0d      	ldr	r2, [pc, #52]	; (8013d10 <dhcp_release_and_stop+0x130>)
 8013cda:	490d      	ldr	r1, [pc, #52]	; (8013d10 <dhcp_release_and_stop+0x130>)
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7f7 f8bd 	bl	800ae5c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013ce2:	2100      	movs	r1, #0
 8013ce4:	69f8      	ldr	r0, [r7, #28]
 8013ce6:	f000 f815 	bl	8013d14 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	791b      	ldrb	r3, [r3, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d008      	beq.n	8013d04 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013cf2:	f7fe ff85 	bl	8012c00 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	711a      	strb	r2, [r3, #4]
 8013cfc:	e002      	b.n	8013d04 <dhcp_release_and_stop+0x124>
    return;
 8013cfe:	bf00      	nop
 8013d00:	e000      	b.n	8013d04 <dhcp_release_and_stop+0x124>
    return;
 8013d02:	bf00      	nop
  }
}
 8013d04:	3720      	adds	r7, #32
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bdb0      	pop	{r4, r5, r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	200109a4 	.word	0x200109a4
 8013d10:	0801bd68 	.word	0x0801bd68

08013d14 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	795b      	ldrb	r3, [r3, #5]
 8013d24:	78fa      	ldrb	r2, [r7, #3]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d008      	beq.n	8013d3c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	78fa      	ldrb	r2, [r7, #3]
 8013d2e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	811a      	strh	r2, [r3, #8]
  }
}
 8013d3c:	bf00      	nop
 8013d3e:	370c      	adds	r7, #12
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr

08013d48 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6039      	str	r1, [r7, #0]
 8013d50:	4611      	mov	r1, r2
 8013d52:	461a      	mov	r2, r3
 8013d54:	4603      	mov	r3, r0
 8013d56:	80fb      	strh	r3, [r7, #6]
 8013d58:	460b      	mov	r3, r1
 8013d5a:	717b      	strb	r3, [r7, #5]
 8013d5c:	4613      	mov	r3, r2
 8013d5e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013d60:	88fa      	ldrh	r2, [r7, #6]
 8013d62:	793b      	ldrb	r3, [r7, #4]
 8013d64:	4413      	add	r3, r2
 8013d66:	3302      	adds	r3, #2
 8013d68:	2b44      	cmp	r3, #68	; 0x44
 8013d6a:	d906      	bls.n	8013d7a <dhcp_option+0x32>
 8013d6c:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <dhcp_option+0x5c>)
 8013d6e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013d72:	490d      	ldr	r1, [pc, #52]	; (8013da8 <dhcp_option+0x60>)
 8013d74:	480d      	ldr	r0, [pc, #52]	; (8013dac <dhcp_option+0x64>)
 8013d76:	f003 fb3b 	bl	80173f0 <iprintf>
  options[options_out_len++] = option_type;
 8013d7a:	88fb      	ldrh	r3, [r7, #6]
 8013d7c:	1c5a      	adds	r2, r3, #1
 8013d7e:	80fa      	strh	r2, [r7, #6]
 8013d80:	461a      	mov	r2, r3
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	4413      	add	r3, r2
 8013d86:	797a      	ldrb	r2, [r7, #5]
 8013d88:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013d8a:	88fb      	ldrh	r3, [r7, #6]
 8013d8c:	1c5a      	adds	r2, r3, #1
 8013d8e:	80fa      	strh	r2, [r7, #6]
 8013d90:	461a      	mov	r2, r3
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	4413      	add	r3, r2
 8013d96:	793a      	ldrb	r2, [r7, #4]
 8013d98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d9a:	88fb      	ldrh	r3, [r7, #6]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	0801b1bc 	.word	0x0801b1bc
 8013da8:	0801b350 	.word	0x0801b350
 8013dac:	0801b21c 	.word	0x0801b21c

08013db0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	4603      	mov	r3, r0
 8013db8:	6039      	str	r1, [r7, #0]
 8013dba:	80fb      	strh	r3, [r7, #6]
 8013dbc:	4613      	mov	r3, r2
 8013dbe:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013dc0:	88fb      	ldrh	r3, [r7, #6]
 8013dc2:	2b43      	cmp	r3, #67	; 0x43
 8013dc4:	d906      	bls.n	8013dd4 <dhcp_option_byte+0x24>
 8013dc6:	4b0a      	ldr	r3, [pc, #40]	; (8013df0 <dhcp_option_byte+0x40>)
 8013dc8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013dcc:	4909      	ldr	r1, [pc, #36]	; (8013df4 <dhcp_option_byte+0x44>)
 8013dce:	480a      	ldr	r0, [pc, #40]	; (8013df8 <dhcp_option_byte+0x48>)
 8013dd0:	f003 fb0e 	bl	80173f0 <iprintf>
  options[options_out_len++] = value;
 8013dd4:	88fb      	ldrh	r3, [r7, #6]
 8013dd6:	1c5a      	adds	r2, r3, #1
 8013dd8:	80fa      	strh	r2, [r7, #6]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	4413      	add	r3, r2
 8013de0:	797a      	ldrb	r2, [r7, #5]
 8013de2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013de4:	88fb      	ldrh	r3, [r7, #6]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3708      	adds	r7, #8
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	0801b1bc 	.word	0x0801b1bc
 8013df4:	0801b394 	.word	0x0801b394
 8013df8:	0801b21c 	.word	0x0801b21c

08013dfc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	4603      	mov	r3, r0
 8013e04:	6039      	str	r1, [r7, #0]
 8013e06:	80fb      	strh	r3, [r7, #6]
 8013e08:	4613      	mov	r3, r2
 8013e0a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013e0c:	88fb      	ldrh	r3, [r7, #6]
 8013e0e:	3302      	adds	r3, #2
 8013e10:	2b44      	cmp	r3, #68	; 0x44
 8013e12:	d906      	bls.n	8013e22 <dhcp_option_short+0x26>
 8013e14:	4b0f      	ldr	r3, [pc, #60]	; (8013e54 <dhcp_option_short+0x58>)
 8013e16:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013e1a:	490f      	ldr	r1, [pc, #60]	; (8013e58 <dhcp_option_short+0x5c>)
 8013e1c:	480f      	ldr	r0, [pc, #60]	; (8013e5c <dhcp_option_short+0x60>)
 8013e1e:	f003 fae7 	bl	80173f0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013e22:	88bb      	ldrh	r3, [r7, #4]
 8013e24:	0a1b      	lsrs	r3, r3, #8
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	88fb      	ldrh	r3, [r7, #6]
 8013e2a:	1c59      	adds	r1, r3, #1
 8013e2c:	80f9      	strh	r1, [r7, #6]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	440b      	add	r3, r1
 8013e34:	b2d2      	uxtb	r2, r2
 8013e36:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013e38:	88fb      	ldrh	r3, [r7, #6]
 8013e3a:	1c5a      	adds	r2, r3, #1
 8013e3c:	80fa      	strh	r2, [r7, #6]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	4413      	add	r3, r2
 8013e44:	88ba      	ldrh	r2, [r7, #4]
 8013e46:	b2d2      	uxtb	r2, r2
 8013e48:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013e4a:	88fb      	ldrh	r3, [r7, #6]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	0801b1bc 	.word	0x0801b1bc
 8013e58:	0801b3cc 	.word	0x0801b3cc
 8013e5c:	0801b21c 	.word	0x0801b21c

08013e60 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	4603      	mov	r3, r0
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	607a      	str	r2, [r7, #4]
 8013e6c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013e6e:	89fb      	ldrh	r3, [r7, #14]
 8013e70:	3304      	adds	r3, #4
 8013e72:	2b44      	cmp	r3, #68	; 0x44
 8013e74:	d906      	bls.n	8013e84 <dhcp_option_long+0x24>
 8013e76:	4b19      	ldr	r3, [pc, #100]	; (8013edc <dhcp_option_long+0x7c>)
 8013e78:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013e7c:	4918      	ldr	r1, [pc, #96]	; (8013ee0 <dhcp_option_long+0x80>)
 8013e7e:	4819      	ldr	r0, [pc, #100]	; (8013ee4 <dhcp_option_long+0x84>)
 8013e80:	f003 fab6 	bl	80173f0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	0e1a      	lsrs	r2, r3, #24
 8013e88:	89fb      	ldrh	r3, [r7, #14]
 8013e8a:	1c59      	adds	r1, r3, #1
 8013e8c:	81f9      	strh	r1, [r7, #14]
 8013e8e:	4619      	mov	r1, r3
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	440b      	add	r3, r1
 8013e94:	b2d2      	uxtb	r2, r2
 8013e96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	0c1a      	lsrs	r2, r3, #16
 8013e9c:	89fb      	ldrh	r3, [r7, #14]
 8013e9e:	1c59      	adds	r1, r3, #1
 8013ea0:	81f9      	strh	r1, [r7, #14]
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	440b      	add	r3, r1
 8013ea8:	b2d2      	uxtb	r2, r2
 8013eaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	0a1a      	lsrs	r2, r3, #8
 8013eb0:	89fb      	ldrh	r3, [r7, #14]
 8013eb2:	1c59      	adds	r1, r3, #1
 8013eb4:	81f9      	strh	r1, [r7, #14]
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	440b      	add	r3, r1
 8013ebc:	b2d2      	uxtb	r2, r2
 8013ebe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013ec0:	89fb      	ldrh	r3, [r7, #14]
 8013ec2:	1c5a      	adds	r2, r3, #1
 8013ec4:	81fa      	strh	r2, [r7, #14]
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	4413      	add	r3, r2
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	b2d2      	uxtb	r2, r2
 8013ed0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3710      	adds	r7, #16
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	0801b1bc 	.word	0x0801b1bc
 8013ee0:	0801b408 	.word	0x0801b408
 8013ee4:	0801b21c 	.word	0x0801b21c

08013ee8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b090      	sub	sp, #64	; 0x40
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013efa:	2208      	movs	r2, #8
 8013efc:	2100      	movs	r1, #0
 8013efe:	48b5      	ldr	r0, [pc, #724]	; (80141d4 <dhcp_parse_reply+0x2ec>)
 8013f00:	f003 fadb 	bl	80174ba <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	895b      	ldrh	r3, [r3, #10]
 8013f08:	2b2b      	cmp	r3, #43	; 0x2b
 8013f0a:	d802      	bhi.n	8013f12 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013f0c:	f06f 0301 	mvn.w	r3, #1
 8013f10:	e2a7      	b.n	8014462 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013f18:	23f0      	movs	r3, #240	; 0xf0
 8013f1a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	891b      	ldrh	r3, [r3, #8]
 8013f20:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f26:	e00c      	b.n	8013f42 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2a:	895b      	ldrh	r3, [r3, #10]
 8013f2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	895b      	ldrh	r3, [r3, #10]
 8013f36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013f38:	1ad3      	subs	r3, r2, r3
 8013f3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d004      	beq.n	8013f52 <dhcp_parse_reply+0x6a>
 8013f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4a:	895b      	ldrh	r3, [r3, #10]
 8013f4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d2ea      	bcs.n	8013f28 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d102      	bne.n	8013f5e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013f58:	f06f 0301 	mvn.w	r3, #1
 8013f5c:	e281      	b.n	8014462 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8013f5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013f60:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013f62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f64:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013f6c:	e239      	b.n	80143e2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8013f6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f72:	4413      	add	r3, r2
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f82:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013f84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f86:	3302      	adds	r3, #2
 8013f88:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013f8a:	8bfa      	ldrh	r2, [r7, #30]
 8013f8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d202      	bcs.n	8013f98 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013f92:	f06f 0301 	mvn.w	r3, #1
 8013f96:	e264      	b.n	8014462 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013f98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f9e:	8952      	ldrh	r2, [r2, #10]
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	da07      	bge.n	8013fb4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013fa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013faa:	4413      	add	r3, r2
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013fb2:	e00b      	b.n	8013fcc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d004      	beq.n	8013fc6 <dhcp_parse_reply+0xde>
 8013fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	e000      	b.n	8013fc8 <dhcp_parse_reply+0xe0>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013fd4:	7dfb      	ldrb	r3, [r7, #23]
 8013fd6:	2b3b      	cmp	r3, #59	; 0x3b
 8013fd8:	f200 812c 	bhi.w	8014234 <dhcp_parse_reply+0x34c>
 8013fdc:	a201      	add	r2, pc, #4	; (adr r2, 8013fe4 <dhcp_parse_reply+0xfc>)
 8013fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fe2:	bf00      	nop
 8013fe4:	080140d5 	.word	0x080140d5
 8013fe8:	080140e5 	.word	0x080140e5
 8013fec:	08014235 	.word	0x08014235
 8013ff0:	08014107 	.word	0x08014107
 8013ff4:	08014235 	.word	0x08014235
 8013ff8:	08014235 	.word	0x08014235
 8013ffc:	08014235 	.word	0x08014235
 8014000:	08014235 	.word	0x08014235
 8014004:	08014235 	.word	0x08014235
 8014008:	08014235 	.word	0x08014235
 801400c:	08014235 	.word	0x08014235
 8014010:	08014235 	.word	0x08014235
 8014014:	08014235 	.word	0x08014235
 8014018:	08014235 	.word	0x08014235
 801401c:	08014235 	.word	0x08014235
 8014020:	08014235 	.word	0x08014235
 8014024:	08014235 	.word	0x08014235
 8014028:	08014235 	.word	0x08014235
 801402c:	08014235 	.word	0x08014235
 8014030:	08014235 	.word	0x08014235
 8014034:	08014235 	.word	0x08014235
 8014038:	08014235 	.word	0x08014235
 801403c:	08014235 	.word	0x08014235
 8014040:	08014235 	.word	0x08014235
 8014044:	08014235 	.word	0x08014235
 8014048:	08014235 	.word	0x08014235
 801404c:	08014235 	.word	0x08014235
 8014050:	08014235 	.word	0x08014235
 8014054:	08014235 	.word	0x08014235
 8014058:	08014235 	.word	0x08014235
 801405c:	08014235 	.word	0x08014235
 8014060:	08014235 	.word	0x08014235
 8014064:	08014235 	.word	0x08014235
 8014068:	08014235 	.word	0x08014235
 801406c:	08014235 	.word	0x08014235
 8014070:	08014235 	.word	0x08014235
 8014074:	08014235 	.word	0x08014235
 8014078:	08014235 	.word	0x08014235
 801407c:	08014235 	.word	0x08014235
 8014080:	08014235 	.word	0x08014235
 8014084:	08014235 	.word	0x08014235
 8014088:	08014235 	.word	0x08014235
 801408c:	08014235 	.word	0x08014235
 8014090:	08014235 	.word	0x08014235
 8014094:	08014235 	.word	0x08014235
 8014098:	08014235 	.word	0x08014235
 801409c:	08014235 	.word	0x08014235
 80140a0:	08014235 	.word	0x08014235
 80140a4:	08014235 	.word	0x08014235
 80140a8:	08014235 	.word	0x08014235
 80140ac:	08014235 	.word	0x08014235
 80140b0:	08014133 	.word	0x08014133
 80140b4:	08014155 	.word	0x08014155
 80140b8:	08014191 	.word	0x08014191
 80140bc:	080141b3 	.word	0x080141b3
 80140c0:	08014235 	.word	0x08014235
 80140c4:	08014235 	.word	0x08014235
 80140c8:	08014235 	.word	0x08014235
 80140cc:	080141f1 	.word	0x080141f1
 80140d0:	08014213 	.word	0x08014213
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80140d4:	2300      	movs	r3, #0
 80140d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80140e2:	e0ab      	b.n	801423c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e8:	2b04      	cmp	r3, #4
 80140ea:	d009      	beq.n	8014100 <dhcp_parse_reply+0x218>
 80140ec:	4b3a      	ldr	r3, [pc, #232]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 80140ee:	f240 622e 	movw	r2, #1582	; 0x62e
 80140f2:	493a      	ldr	r1, [pc, #232]	; (80141dc <dhcp_parse_reply+0x2f4>)
 80140f4:	483a      	ldr	r0, [pc, #232]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 80140f6:	f003 f97b 	bl	80173f0 <iprintf>
 80140fa:	f06f 0305 	mvn.w	r3, #5
 80140fe:	e1b0      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014100:	2306      	movs	r3, #6
 8014102:	623b      	str	r3, [r7, #32]
        break;
 8014104:	e09a      	b.n	801423c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014106:	2304      	movs	r3, #4
 8014108:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801410c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014114:	429a      	cmp	r2, r3
 8014116:	d209      	bcs.n	801412c <dhcp_parse_reply+0x244>
 8014118:	4b2f      	ldr	r3, [pc, #188]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 801411a:	f240 6233 	movw	r2, #1587	; 0x633
 801411e:	4931      	ldr	r1, [pc, #196]	; (80141e4 <dhcp_parse_reply+0x2fc>)
 8014120:	482f      	ldr	r0, [pc, #188]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 8014122:	f003 f965 	bl	80173f0 <iprintf>
 8014126:	f06f 0305 	mvn.w	r3, #5
 801412a:	e19a      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801412c:	2307      	movs	r3, #7
 801412e:	623b      	str	r3, [r7, #32]
        break;
 8014130:	e084      	b.n	801423c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014136:	2b04      	cmp	r3, #4
 8014138:	d009      	beq.n	801414e <dhcp_parse_reply+0x266>
 801413a:	4b27      	ldr	r3, [pc, #156]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 801413c:	f240 6241 	movw	r2, #1601	; 0x641
 8014140:	4926      	ldr	r1, [pc, #152]	; (80141dc <dhcp_parse_reply+0x2f4>)
 8014142:	4827      	ldr	r0, [pc, #156]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 8014144:	f003 f954 	bl	80173f0 <iprintf>
 8014148:	f06f 0305 	mvn.w	r3, #5
 801414c:	e189      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801414e:	2303      	movs	r3, #3
 8014150:	623b      	str	r3, [r7, #32]
        break;
 8014152:	e073      	b.n	801423c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014158:	2b01      	cmp	r3, #1
 801415a:	d009      	beq.n	8014170 <dhcp_parse_reply+0x288>
 801415c:	4b1e      	ldr	r3, [pc, #120]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 801415e:	f240 624f 	movw	r2, #1615	; 0x64f
 8014162:	4921      	ldr	r1, [pc, #132]	; (80141e8 <dhcp_parse_reply+0x300>)
 8014164:	481e      	ldr	r0, [pc, #120]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 8014166:	f003 f943 	bl	80173f0 <iprintf>
 801416a:	f06f 0305 	mvn.w	r3, #5
 801416e:	e178      	b.n	8014462 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014172:	2bf0      	cmp	r3, #240	; 0xf0
 8014174:	d009      	beq.n	801418a <dhcp_parse_reply+0x2a2>
 8014176:	4b18      	ldr	r3, [pc, #96]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 8014178:	f240 6251 	movw	r2, #1617	; 0x651
 801417c:	491b      	ldr	r1, [pc, #108]	; (80141ec <dhcp_parse_reply+0x304>)
 801417e:	4818      	ldr	r0, [pc, #96]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 8014180:	f003 f936 	bl	80173f0 <iprintf>
 8014184:	f06f 0305 	mvn.w	r3, #5
 8014188:	e16b      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801418a:	2300      	movs	r3, #0
 801418c:	623b      	str	r3, [r7, #32]
        break;
 801418e:	e055      	b.n	801423c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014194:	2b01      	cmp	r3, #1
 8014196:	d009      	beq.n	80141ac <dhcp_parse_reply+0x2c4>
 8014198:	4b0f      	ldr	r3, [pc, #60]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 801419a:	f240 6255 	movw	r2, #1621	; 0x655
 801419e:	4912      	ldr	r1, [pc, #72]	; (80141e8 <dhcp_parse_reply+0x300>)
 80141a0:	480f      	ldr	r0, [pc, #60]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 80141a2:	f003 f925 	bl	80173f0 <iprintf>
 80141a6:	f06f 0305 	mvn.w	r3, #5
 80141aa:	e15a      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80141ac:	2301      	movs	r3, #1
 80141ae:	623b      	str	r3, [r7, #32]
        break;
 80141b0:	e044      	b.n	801423c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141b6:	2b04      	cmp	r3, #4
 80141b8:	d009      	beq.n	80141ce <dhcp_parse_reply+0x2e6>
 80141ba:	4b07      	ldr	r3, [pc, #28]	; (80141d8 <dhcp_parse_reply+0x2f0>)
 80141bc:	f240 6259 	movw	r2, #1625	; 0x659
 80141c0:	4906      	ldr	r1, [pc, #24]	; (80141dc <dhcp_parse_reply+0x2f4>)
 80141c2:	4807      	ldr	r0, [pc, #28]	; (80141e0 <dhcp_parse_reply+0x2f8>)
 80141c4:	f003 f914 	bl	80173f0 <iprintf>
 80141c8:	f06f 0305 	mvn.w	r3, #5
 80141cc:	e149      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80141ce:	2302      	movs	r3, #2
 80141d0:	623b      	str	r3, [r7, #32]
        break;
 80141d2:	e033      	b.n	801423c <dhcp_parse_reply+0x354>
 80141d4:	2001099c 	.word	0x2001099c
 80141d8:	0801b1bc 	.word	0x0801b1bc
 80141dc:	0801b444 	.word	0x0801b444
 80141e0:	0801b21c 	.word	0x0801b21c
 80141e4:	0801b450 	.word	0x0801b450
 80141e8:	0801b464 	.word	0x0801b464
 80141ec:	0801b470 	.word	0x0801b470
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f4:	2b04      	cmp	r3, #4
 80141f6:	d009      	beq.n	801420c <dhcp_parse_reply+0x324>
 80141f8:	4b9c      	ldr	r3, [pc, #624]	; (801446c <dhcp_parse_reply+0x584>)
 80141fa:	f240 625d 	movw	r2, #1629	; 0x65d
 80141fe:	499c      	ldr	r1, [pc, #624]	; (8014470 <dhcp_parse_reply+0x588>)
 8014200:	489c      	ldr	r0, [pc, #624]	; (8014474 <dhcp_parse_reply+0x58c>)
 8014202:	f003 f8f5 	bl	80173f0 <iprintf>
 8014206:	f06f 0305 	mvn.w	r3, #5
 801420a:	e12a      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801420c:	2304      	movs	r3, #4
 801420e:	623b      	str	r3, [r7, #32]
        break;
 8014210:	e014      	b.n	801423c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014216:	2b04      	cmp	r3, #4
 8014218:	d009      	beq.n	801422e <dhcp_parse_reply+0x346>
 801421a:	4b94      	ldr	r3, [pc, #592]	; (801446c <dhcp_parse_reply+0x584>)
 801421c:	f240 6261 	movw	r2, #1633	; 0x661
 8014220:	4993      	ldr	r1, [pc, #588]	; (8014470 <dhcp_parse_reply+0x588>)
 8014222:	4894      	ldr	r0, [pc, #592]	; (8014474 <dhcp_parse_reply+0x58c>)
 8014224:	f003 f8e4 	bl	80173f0 <iprintf>
 8014228:	f06f 0305 	mvn.w	r3, #5
 801422c:	e119      	b.n	8014462 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801422e:	2305      	movs	r3, #5
 8014230:	623b      	str	r3, [r7, #32]
        break;
 8014232:	e003      	b.n	801423c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014234:	2300      	movs	r3, #0
 8014236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801423a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801423c:	7dfb      	ldrb	r3, [r7, #23]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d103      	bne.n	801424a <dhcp_parse_reply+0x362>
      offset++;
 8014242:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014244:	3301      	adds	r3, #1
 8014246:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014248:	e0a1      	b.n	801438e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801424a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801424c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014250:	4413      	add	r3, r2
 8014252:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014256:	4293      	cmp	r3, r2
 8014258:	dd02      	ble.n	8014260 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801425a:	f06f 0301 	mvn.w	r3, #1
 801425e:	e100      	b.n	8014462 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014264:	b29a      	uxth	r2, r3
 8014266:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014268:	4413      	add	r3, r2
 801426a:	b29b      	uxth	r3, r3
 801426c:	3302      	adds	r3, #2
 801426e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014274:	2b00      	cmp	r3, #0
 8014276:	f000 808a 	beq.w	801438e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801427e:	6a3b      	ldr	r3, [r7, #32]
 8014280:	2b00      	cmp	r3, #0
 8014282:	db02      	blt.n	801428a <dhcp_parse_reply+0x3a2>
 8014284:	6a3b      	ldr	r3, [r7, #32]
 8014286:	2b07      	cmp	r3, #7
 8014288:	dd06      	ble.n	8014298 <dhcp_parse_reply+0x3b0>
 801428a:	4b78      	ldr	r3, [pc, #480]	; (801446c <dhcp_parse_reply+0x584>)
 801428c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014290:	4979      	ldr	r1, [pc, #484]	; (8014478 <dhcp_parse_reply+0x590>)
 8014292:	4878      	ldr	r0, [pc, #480]	; (8014474 <dhcp_parse_reply+0x58c>)
 8014294:	f003 f8ac 	bl	80173f0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014298:	4a78      	ldr	r2, [pc, #480]	; (801447c <dhcp_parse_reply+0x594>)
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	4413      	add	r3, r2
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d174      	bne.n	801438e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80142a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142a8:	2b04      	cmp	r3, #4
 80142aa:	bf28      	it	cs
 80142ac:	2304      	movcs	r3, #4
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80142b2:	8bfb      	ldrh	r3, [r7, #30]
 80142b4:	8aba      	ldrh	r2, [r7, #20]
 80142b6:	f107 0108 	add.w	r1, r7, #8
 80142ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142bc:	f7f7 fce2 	bl	800bc84 <pbuf_copy_partial>
 80142c0:	4603      	mov	r3, r0
 80142c2:	461a      	mov	r2, r3
 80142c4:	8abb      	ldrh	r3, [r7, #20]
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d002      	beq.n	80142d0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80142ca:	f06f 0301 	mvn.w	r3, #1
 80142ce:	e0c8      	b.n	8014462 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80142d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142d4:	2b04      	cmp	r3, #4
 80142d6:	d933      	bls.n	8014340 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80142d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80142dc:	f003 0303 	and.w	r3, r3, #3
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d009      	beq.n	80142fa <dhcp_parse_reply+0x412>
 80142e6:	4b61      	ldr	r3, [pc, #388]	; (801446c <dhcp_parse_reply+0x584>)
 80142e8:	f240 6281 	movw	r2, #1665	; 0x681
 80142ec:	4964      	ldr	r1, [pc, #400]	; (8014480 <dhcp_parse_reply+0x598>)
 80142ee:	4861      	ldr	r0, [pc, #388]	; (8014474 <dhcp_parse_reply+0x58c>)
 80142f0:	f003 f87e 	bl	80173f0 <iprintf>
 80142f4:	f06f 0305 	mvn.w	r3, #5
 80142f8:	e0b3      	b.n	8014462 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80142fa:	4a60      	ldr	r2, [pc, #384]	; (801447c <dhcp_parse_reply+0x594>)
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	4413      	add	r3, r2
 8014300:	2201      	movs	r2, #1
 8014302:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	4618      	mov	r0, r3
 8014308:	f7f5 fecd 	bl	800a0a6 <lwip_htonl>
 801430c:	4602      	mov	r2, r0
 801430e:	495d      	ldr	r1, [pc, #372]	; (8014484 <dhcp_parse_reply+0x59c>)
 8014310:	6a3b      	ldr	r3, [r7, #32]
 8014312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801431a:	3b04      	subs	r3, #4
 801431c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014320:	8bfb      	ldrh	r3, [r7, #30]
 8014322:	3304      	adds	r3, #4
 8014324:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014326:	8a7a      	ldrh	r2, [r7, #18]
 8014328:	8bfb      	ldrh	r3, [r7, #30]
 801432a:	429a      	cmp	r2, r3
 801432c:	d202      	bcs.n	8014334 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801432e:	f06f 0301 	mvn.w	r3, #1
 8014332:	e096      	b.n	8014462 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014334:	8a7b      	ldrh	r3, [r7, #18]
 8014336:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	3301      	adds	r3, #1
 801433c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801433e:	e79e      	b.n	801427e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014344:	2b04      	cmp	r3, #4
 8014346:	d106      	bne.n	8014356 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	4618      	mov	r0, r3
 801434c:	f7f5 feab 	bl	800a0a6 <lwip_htonl>
 8014350:	4603      	mov	r3, r0
 8014352:	60bb      	str	r3, [r7, #8]
 8014354:	e011      	b.n	801437a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801435a:	2b01      	cmp	r3, #1
 801435c:	d009      	beq.n	8014372 <dhcp_parse_reply+0x48a>
 801435e:	4b43      	ldr	r3, [pc, #268]	; (801446c <dhcp_parse_reply+0x584>)
 8014360:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014364:	4948      	ldr	r1, [pc, #288]	; (8014488 <dhcp_parse_reply+0x5a0>)
 8014366:	4843      	ldr	r0, [pc, #268]	; (8014474 <dhcp_parse_reply+0x58c>)
 8014368:	f003 f842 	bl	80173f0 <iprintf>
 801436c:	f06f 0305 	mvn.w	r3, #5
 8014370:	e077      	b.n	8014462 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014372:	f107 0308 	add.w	r3, r7, #8
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801437a:	4a40      	ldr	r2, [pc, #256]	; (801447c <dhcp_parse_reply+0x594>)
 801437c:	6a3b      	ldr	r3, [r7, #32]
 801437e:	4413      	add	r3, r2
 8014380:	2201      	movs	r2, #1
 8014382:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014384:	68ba      	ldr	r2, [r7, #8]
 8014386:	493f      	ldr	r1, [pc, #252]	; (8014484 <dhcp_parse_reply+0x59c>)
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	895b      	ldrh	r3, [r3, #10]
 8014392:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014394:	429a      	cmp	r2, r3
 8014396:	d324      	bcc.n	80143e2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801439a:	895b      	ldrh	r3, [r3, #10]
 801439c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801439e:	1ad3      	subs	r3, r2, r3
 80143a0:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80143a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a4:	895b      	ldrh	r3, [r3, #10]
 80143a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80143a8:	1ad3      	subs	r3, r2, r3
 80143aa:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80143ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d213      	bcs.n	80143dc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80143b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80143ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d109      	bne.n	80143d4 <dhcp_parse_reply+0x4ec>
 80143c0:	4b2a      	ldr	r3, [pc, #168]	; (801446c <dhcp_parse_reply+0x584>)
 80143c2:	f240 629d 	movw	r2, #1693	; 0x69d
 80143c6:	4931      	ldr	r1, [pc, #196]	; (801448c <dhcp_parse_reply+0x5a4>)
 80143c8:	482a      	ldr	r0, [pc, #168]	; (8014474 <dhcp_parse_reply+0x58c>)
 80143ca:	f003 f811 	bl	80173f0 <iprintf>
 80143ce:	f06f 0305 	mvn.w	r3, #5
 80143d2:	e046      	b.n	8014462 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80143d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80143da:	e002      	b.n	80143e2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80143dc:	f06f 0301 	mvn.w	r3, #1
 80143e0:	e03f      	b.n	8014462 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80143e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d00a      	beq.n	80143fe <dhcp_parse_reply+0x516>
 80143e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80143ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d206      	bcs.n	80143fe <dhcp_parse_reply+0x516>
 80143f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80143f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80143f4:	4413      	add	r3, r2
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2bff      	cmp	r3, #255	; 0xff
 80143fa:	f47f adb8 	bne.w	8013f6e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80143fe:	4b1f      	ldr	r3, [pc, #124]	; (801447c <dhcp_parse_reply+0x594>)
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d018      	beq.n	8014438 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014406:	4b1f      	ldr	r3, [pc, #124]	; (8014484 <dhcp_parse_reply+0x59c>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801440c:	4b1b      	ldr	r3, [pc, #108]	; (801447c <dhcp_parse_reply+0x594>)
 801440e:	2200      	movs	r2, #0
 8014410:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d102      	bne.n	801441e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8014418:	2301      	movs	r3, #1
 801441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801441c:	e00c      	b.n	8014438 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2b02      	cmp	r3, #2
 8014422:	d102      	bne.n	801442a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014424:	2301      	movs	r3, #1
 8014426:	62bb      	str	r3, [r7, #40]	; 0x28
 8014428:	e006      	b.n	8014438 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2b03      	cmp	r3, #3
 801442e:	d103      	bne.n	8014438 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014430:	2301      	movs	r3, #1
 8014432:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014434:	2301      	movs	r3, #1
 8014436:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443a:	2b00      	cmp	r3, #0
 801443c:	d006      	beq.n	801444c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801443e:	2300      	movs	r3, #0
 8014440:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014442:	236c      	movs	r3, #108	; 0x6c
 8014444:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014446:	23ec      	movs	r3, #236	; 0xec
 8014448:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801444a:	e56a      	b.n	8013f22 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444e:	2b00      	cmp	r3, #0
 8014450:	d006      	beq.n	8014460 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014456:	232c      	movs	r3, #44	; 0x2c
 8014458:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801445a:	236c      	movs	r3, #108	; 0x6c
 801445c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801445e:	e560      	b.n	8013f22 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014460:	2300      	movs	r3, #0
}
 8014462:	4618      	mov	r0, r3
 8014464:	3740      	adds	r7, #64	; 0x40
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	0801b1bc 	.word	0x0801b1bc
 8014470:	0801b444 	.word	0x0801b444
 8014474:	0801b21c 	.word	0x0801b21c
 8014478:	0801b488 	.word	0x0801b488
 801447c:	2001099c 	.word	0x2001099c
 8014480:	0801b49c 	.word	0x0801b49c
 8014484:	2001097c 	.word	0x2001097c
 8014488:	0801b4b4 	.word	0x0801b4b4
 801448c:	0801b4c8 	.word	0x0801b4c8

08014490 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b08a      	sub	sp, #40	; 0x28
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
 801449c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801449e:	4b60      	ldr	r3, [pc, #384]	; (8014620 <dhcp_recv+0x190>)
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144a4:	6a3b      	ldr	r3, [r7, #32]
 80144a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 809d 	beq.w	80145f2 <dhcp_recv+0x162>
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	791b      	ldrb	r3, [r3, #4]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f000 8098 	beq.w	80145f2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	895b      	ldrh	r3, [r3, #10]
 80144c6:	2b2b      	cmp	r3, #43	; 0x2b
 80144c8:	f240 8095 	bls.w	80145f6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	2b02      	cmp	r3, #2
 80144d2:	f040 8092 	bne.w	80145fa <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144d6:	2300      	movs	r3, #0
 80144d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80144dc:	e012      	b.n	8014504 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80144de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144e2:	6a3a      	ldr	r2, [r7, #32]
 80144e4:	4413      	add	r3, r2
 80144e6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80144ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144ee:	69b9      	ldr	r1, [r7, #24]
 80144f0:	440b      	add	r3, r1
 80144f2:	7f1b      	ldrb	r3, [r3, #28]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	f040 8082 	bne.w	80145fe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144fe:	3301      	adds	r3, #1
 8014500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014504:	6a3b      	ldr	r3, [r7, #32]
 8014506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801450a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801450e:	429a      	cmp	r2, r3
 8014510:	d203      	bcs.n	801451a <dhcp_recv+0x8a>
 8014512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014516:	2b05      	cmp	r3, #5
 8014518:	d9e1      	bls.n	80144de <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	4618      	mov	r0, r3
 8014520:	f7f5 fdc1 	bl	800a0a6 <lwip_htonl>
 8014524:	4602      	mov	r2, r0
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	429a      	cmp	r2, r3
 801452c:	d169      	bne.n	8014602 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801452e:	69f9      	ldr	r1, [r7, #28]
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff fcd9 	bl	8013ee8 <dhcp_parse_reply>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d164      	bne.n	8014606 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801453c:	4b39      	ldr	r3, [pc, #228]	; (8014624 <dhcp_recv+0x194>)
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d062      	beq.n	801460a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801454a:	4b37      	ldr	r3, [pc, #220]	; (8014628 <dhcp_recv+0x198>)
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014550:	7cfb      	ldrb	r3, [r7, #19]
 8014552:	2b05      	cmp	r3, #5
 8014554:	d12a      	bne.n	80145ac <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	795b      	ldrb	r3, [r3, #5]
 801455a:	2b01      	cmp	r3, #1
 801455c:	d112      	bne.n	8014584 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801455e:	6979      	ldr	r1, [r7, #20]
 8014560:	6a38      	ldr	r0, [r7, #32]
 8014562:	f7fe fe17 	bl	8013194 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014566:	6a3b      	ldr	r3, [r7, #32]
 8014568:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801456c:	f003 0308 	and.w	r3, r3, #8
 8014570:	2b00      	cmp	r3, #0
 8014572:	d003      	beq.n	801457c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014574:	6a38      	ldr	r0, [r7, #32]
 8014576:	f7fe fb87 	bl	8012c88 <dhcp_check>
 801457a:	e049      	b.n	8014610 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801457c:	6a38      	ldr	r0, [r7, #32]
 801457e:	f7ff f867 	bl	8013650 <dhcp_bind>
 8014582:	e045      	b.n	8014610 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014584:	69fb      	ldr	r3, [r7, #28]
 8014586:	795b      	ldrb	r3, [r3, #5]
 8014588:	2b03      	cmp	r3, #3
 801458a:	d007      	beq.n	801459c <dhcp_recv+0x10c>
 801458c:	69fb      	ldr	r3, [r7, #28]
 801458e:	795b      	ldrb	r3, [r3, #5]
 8014590:	2b04      	cmp	r3, #4
 8014592:	d003      	beq.n	801459c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014598:	2b05      	cmp	r3, #5
 801459a:	d139      	bne.n	8014610 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801459c:	6979      	ldr	r1, [r7, #20]
 801459e:	6a38      	ldr	r0, [r7, #32]
 80145a0:	f7fe fdf8 	bl	8013194 <dhcp_handle_ack>
      dhcp_bind(netif);
 80145a4:	6a38      	ldr	r0, [r7, #32]
 80145a6:	f7ff f853 	bl	8013650 <dhcp_bind>
 80145aa:	e031      	b.n	8014610 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80145ac:	7cfb      	ldrb	r3, [r7, #19]
 80145ae:	2b06      	cmp	r3, #6
 80145b0:	d113      	bne.n	80145da <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80145b6:	2b03      	cmp	r3, #3
 80145b8:	d00b      	beq.n	80145d2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145ba:	69fb      	ldr	r3, [r7, #28]
 80145bc:	795b      	ldrb	r3, [r3, #5]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d007      	beq.n	80145d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80145c6:	2b04      	cmp	r3, #4
 80145c8:	d003      	beq.n	80145d2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80145ca:	69fb      	ldr	r3, [r7, #28]
 80145cc:	795b      	ldrb	r3, [r3, #5]
 80145ce:	2b05      	cmp	r3, #5
 80145d0:	d103      	bne.n	80145da <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80145d2:	6a38      	ldr	r0, [r7, #32]
 80145d4:	f7fe fb3e 	bl	8012c54 <dhcp_handle_nak>
 80145d8:	e01a      	b.n	8014610 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80145da:	7cfb      	ldrb	r3, [r7, #19]
 80145dc:	2b02      	cmp	r3, #2
 80145de:	d116      	bne.n	801460e <dhcp_recv+0x17e>
 80145e0:	69fb      	ldr	r3, [r7, #28]
 80145e2:	795b      	ldrb	r3, [r3, #5]
 80145e4:	2b06      	cmp	r3, #6
 80145e6:	d112      	bne.n	801460e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80145e8:	6979      	ldr	r1, [r7, #20]
 80145ea:	6a38      	ldr	r0, [r7, #32]
 80145ec:	f7fe fb80 	bl	8012cf0 <dhcp_handle_offer>
 80145f0:	e00e      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145f2:	bf00      	nop
 80145f4:	e00c      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145f6:	bf00      	nop
 80145f8:	e00a      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80145fa:	bf00      	nop
 80145fc:	e008      	b.n	8014610 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80145fe:	bf00      	nop
 8014600:	e006      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014602:	bf00      	nop
 8014604:	e004      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014606:	bf00      	nop
 8014608:	e002      	b.n	8014610 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801460a:	bf00      	nop
 801460c:	e000      	b.n	8014610 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801460e:	bf00      	nop
  pbuf_free(p);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7f7 f931 	bl	800b878 <pbuf_free>
}
 8014616:	bf00      	nop
 8014618:	3728      	adds	r7, #40	; 0x28
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	2000d1a8 	.word	0x2000d1a8
 8014624:	2001099c 	.word	0x2001099c
 8014628:	2001097c 	.word	0x2001097c

0801462c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b088      	sub	sp, #32
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	603b      	str	r3, [r7, #0]
 8014638:	4613      	mov	r3, r2
 801463a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d108      	bne.n	8014654 <dhcp_create_msg+0x28>
 8014642:	4b5f      	ldr	r3, [pc, #380]	; (80147c0 <dhcp_create_msg+0x194>)
 8014644:	f240 7269 	movw	r2, #1897	; 0x769
 8014648:	495e      	ldr	r1, [pc, #376]	; (80147c4 <dhcp_create_msg+0x198>)
 801464a:	485f      	ldr	r0, [pc, #380]	; (80147c8 <dhcp_create_msg+0x19c>)
 801464c:	f002 fed0 	bl	80173f0 <iprintf>
 8014650:	2300      	movs	r3, #0
 8014652:	e0b1      	b.n	80147b8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d108      	bne.n	801466c <dhcp_create_msg+0x40>
 801465a:	4b59      	ldr	r3, [pc, #356]	; (80147c0 <dhcp_create_msg+0x194>)
 801465c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014660:	495a      	ldr	r1, [pc, #360]	; (80147cc <dhcp_create_msg+0x1a0>)
 8014662:	4859      	ldr	r0, [pc, #356]	; (80147c8 <dhcp_create_msg+0x19c>)
 8014664:	f002 fec4 	bl	80173f0 <iprintf>
 8014668:	2300      	movs	r3, #0
 801466a:	e0a5      	b.n	80147b8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801466c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014670:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014674:	2036      	movs	r0, #54	; 0x36
 8014676:	f7f6 fe1b 	bl	800b2b0 <pbuf_alloc>
 801467a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d101      	bne.n	8014686 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014682:	2300      	movs	r3, #0
 8014684:	e098      	b.n	80147b8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	895b      	ldrh	r3, [r3, #10]
 801468a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801468e:	d206      	bcs.n	801469e <dhcp_create_msg+0x72>
 8014690:	4b4b      	ldr	r3, [pc, #300]	; (80147c0 <dhcp_create_msg+0x194>)
 8014692:	f240 7271 	movw	r2, #1905	; 0x771
 8014696:	494e      	ldr	r1, [pc, #312]	; (80147d0 <dhcp_create_msg+0x1a4>)
 8014698:	484b      	ldr	r0, [pc, #300]	; (80147c8 <dhcp_create_msg+0x19c>)
 801469a:	f002 fea9 	bl	80173f0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801469e:	79fb      	ldrb	r3, [r7, #7]
 80146a0:	2b03      	cmp	r3, #3
 80146a2:	d103      	bne.n	80146ac <dhcp_create_msg+0x80>
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	795b      	ldrb	r3, [r3, #5]
 80146a8:	2b03      	cmp	r3, #3
 80146aa:	d10d      	bne.n	80146c8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	799b      	ldrb	r3, [r3, #6]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d105      	bne.n	80146c0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80146b4:	f002 fdae 	bl	8017214 <rand>
 80146b8:	4603      	mov	r3, r0
 80146ba:	461a      	mov	r2, r3
 80146bc:	4b45      	ldr	r3, [pc, #276]	; (80147d4 <dhcp_create_msg+0x1a8>)
 80146be:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80146c0:	4b44      	ldr	r3, [pc, #272]	; (80147d4 <dhcp_create_msg+0x1a8>)
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80146ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 80146d2:	2100      	movs	r1, #0
 80146d4:	6978      	ldr	r0, [r7, #20]
 80146d6:	f002 fef0 	bl	80174ba <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	2201      	movs	r2, #1
 80146de:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	2201      	movs	r2, #1
 80146e4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f5 fcd6 	bl	800a0a6 <lwip_htonl>
 80146fa:	4602      	mov	r2, r0
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014700:	79fb      	ldrb	r3, [r7, #7]
 8014702:	2b08      	cmp	r3, #8
 8014704:	d010      	beq.n	8014728 <dhcp_create_msg+0xfc>
 8014706:	79fb      	ldrb	r3, [r7, #7]
 8014708:	2b04      	cmp	r3, #4
 801470a:	d00d      	beq.n	8014728 <dhcp_create_msg+0xfc>
 801470c:	79fb      	ldrb	r3, [r7, #7]
 801470e:	2b07      	cmp	r3, #7
 8014710:	d00a      	beq.n	8014728 <dhcp_create_msg+0xfc>
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	2b03      	cmp	r3, #3
 8014716:	d10c      	bne.n	8014732 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801471c:	2b05      	cmp	r3, #5
 801471e:	d003      	beq.n	8014728 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	795b      	ldrb	r3, [r3, #5]
 8014724:	2b04      	cmp	r3, #4
 8014726:	d104      	bne.n	8014732 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	3304      	adds	r3, #4
 801472c:	681a      	ldr	r2, [r3, #0]
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014732:	2300      	movs	r3, #0
 8014734:	83fb      	strh	r3, [r7, #30]
 8014736:	e00c      	b.n	8014752 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014738:	8bfa      	ldrh	r2, [r7, #30]
 801473a:	8bfb      	ldrh	r3, [r7, #30]
 801473c:	68f9      	ldr	r1, [r7, #12]
 801473e:	440a      	add	r2, r1
 8014740:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014744:	697a      	ldr	r2, [r7, #20]
 8014746:	4413      	add	r3, r2
 8014748:	460a      	mov	r2, r1
 801474a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801474c:	8bfb      	ldrh	r3, [r7, #30]
 801474e:	3301      	adds	r3, #1
 8014750:	83fb      	strh	r3, [r7, #30]
 8014752:	8bfb      	ldrh	r3, [r7, #30]
 8014754:	2b05      	cmp	r3, #5
 8014756:	d9ef      	bls.n	8014738 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	2200      	movs	r2, #0
 801475c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014760:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014764:	2200      	movs	r2, #0
 8014766:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801476a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801476e:	2200      	movs	r2, #0
 8014770:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014774:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014778:	2200      	movs	r2, #0
 801477a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801477e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014788:	2301      	movs	r3, #1
 801478a:	2235      	movs	r2, #53	; 0x35
 801478c:	2000      	movs	r0, #0
 801478e:	f7ff fadb 	bl	8013d48 <dhcp_option>
 8014792:	4603      	mov	r3, r0
 8014794:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801479c:	79fa      	ldrb	r2, [r7, #7]
 801479e:	8a7b      	ldrh	r3, [r7, #18]
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7ff fb05 	bl	8013db0 <dhcp_option_byte>
 80147a6:	4603      	mov	r3, r0
 80147a8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	8a7a      	ldrh	r2, [r7, #18]
 80147b4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80147b6:	69bb      	ldr	r3, [r7, #24]
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	3720      	adds	r7, #32
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	0801b1bc 	.word	0x0801b1bc
 80147c4:	0801b4dc 	.word	0x0801b4dc
 80147c8:	0801b21c 	.word	0x0801b21c
 80147cc:	0801b4fc 	.word	0x0801b4fc
 80147d0:	0801b51c 	.word	0x0801b51c
 80147d4:	200109ac 	.word	0x200109ac

080147d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	4603      	mov	r3, r0
 80147e0:	60b9      	str	r1, [r7, #8]
 80147e2:	607a      	str	r2, [r7, #4]
 80147e4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80147e6:	89fb      	ldrh	r3, [r7, #14]
 80147e8:	1c5a      	adds	r2, r3, #1
 80147ea:	81fa      	strh	r2, [r7, #14]
 80147ec:	461a      	mov	r2, r3
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	4413      	add	r3, r2
 80147f2:	22ff      	movs	r2, #255	; 0xff
 80147f4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80147f6:	e007      	b.n	8014808 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80147f8:	89fb      	ldrh	r3, [r7, #14]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	81fa      	strh	r2, [r7, #14]
 80147fe:	461a      	mov	r2, r3
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	4413      	add	r3, r2
 8014804:	2200      	movs	r2, #0
 8014806:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014808:	89fb      	ldrh	r3, [r7, #14]
 801480a:	2b43      	cmp	r3, #67	; 0x43
 801480c:	d904      	bls.n	8014818 <dhcp_option_trailer+0x40>
 801480e:	89fb      	ldrh	r3, [r7, #14]
 8014810:	f003 0303 	and.w	r3, r3, #3
 8014814:	2b00      	cmp	r3, #0
 8014816:	d002      	beq.n	801481e <dhcp_option_trailer+0x46>
 8014818:	89fb      	ldrh	r3, [r7, #14]
 801481a:	2b43      	cmp	r3, #67	; 0x43
 801481c:	d9ec      	bls.n	80147f8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801481e:	89fb      	ldrh	r3, [r7, #14]
 8014820:	33f0      	adds	r3, #240	; 0xf0
 8014822:	b29b      	uxth	r3, r3
 8014824:	4619      	mov	r1, r3
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f7f6 fea0 	bl	800b56c <pbuf_realloc>
}
 801482c:	bf00      	nop
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014834:	b480      	push	{r7}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d017      	beq.n	8014872 <dhcp_supplied_address+0x3e>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014846:	2b00      	cmp	r3, #0
 8014848:	d013      	beq.n	8014872 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	795b      	ldrb	r3, [r3, #5]
 8014854:	2b0a      	cmp	r3, #10
 8014856:	d007      	beq.n	8014868 <dhcp_supplied_address+0x34>
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	795b      	ldrb	r3, [r3, #5]
 801485c:	2b05      	cmp	r3, #5
 801485e:	d003      	beq.n	8014868 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014864:	2b04      	cmp	r3, #4
 8014866:	d101      	bne.n	801486c <dhcp_supplied_address+0x38>
 8014868:	2301      	movs	r3, #1
 801486a:	e000      	b.n	801486e <dhcp_supplied_address+0x3a>
 801486c:	2300      	movs	r3, #0
 801486e:	b2db      	uxtb	r3, r3
 8014870:	e000      	b.n	8014874 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014872:	2300      	movs	r3, #0
}
 8014874:	4618      	mov	r0, r3
 8014876:	3714      	adds	r7, #20
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014888:	4915      	ldr	r1, [pc, #84]	; (80148e0 <etharp_free_entry+0x60>)
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	4613      	mov	r3, r2
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	4413      	add	r3, r2
 8014892:	00db      	lsls	r3, r3, #3
 8014894:	440b      	add	r3, r1
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d013      	beq.n	80148c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801489c:	4910      	ldr	r1, [pc, #64]	; (80148e0 <etharp_free_entry+0x60>)
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	4613      	mov	r3, r2
 80148a2:	005b      	lsls	r3, r3, #1
 80148a4:	4413      	add	r3, r2
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	440b      	add	r3, r1
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7f6 ffe3 	bl	800b878 <pbuf_free>
    arp_table[i].q = NULL;
 80148b2:	490b      	ldr	r1, [pc, #44]	; (80148e0 <etharp_free_entry+0x60>)
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	4613      	mov	r3, r2
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	00db      	lsls	r3, r3, #3
 80148be:	440b      	add	r3, r1
 80148c0:	2200      	movs	r2, #0
 80148c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80148c4:	4906      	ldr	r1, [pc, #24]	; (80148e0 <etharp_free_entry+0x60>)
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	3314      	adds	r3, #20
 80148d4:	2200      	movs	r2, #0
 80148d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80148d8:	bf00      	nop
 80148da:	3708      	adds	r7, #8
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	200109b0 	.word	0x200109b0

080148e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148ea:	2300      	movs	r3, #0
 80148ec:	607b      	str	r3, [r7, #4]
 80148ee:	e096      	b.n	8014a1e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80148f0:	494f      	ldr	r1, [pc, #316]	; (8014a30 <etharp_tmr+0x14c>)
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	440b      	add	r3, r1
 80148fe:	3314      	adds	r3, #20
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014904:	78fb      	ldrb	r3, [r7, #3]
 8014906:	2b00      	cmp	r3, #0
 8014908:	f000 8086 	beq.w	8014a18 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801490c:	4948      	ldr	r1, [pc, #288]	; (8014a30 <etharp_tmr+0x14c>)
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	4613      	mov	r3, r2
 8014912:	005b      	lsls	r3, r3, #1
 8014914:	4413      	add	r3, r2
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	440b      	add	r3, r1
 801491a:	3312      	adds	r3, #18
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	3301      	adds	r3, #1
 8014920:	b298      	uxth	r0, r3
 8014922:	4943      	ldr	r1, [pc, #268]	; (8014a30 <etharp_tmr+0x14c>)
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	4613      	mov	r3, r2
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4413      	add	r3, r2
 801492c:	00db      	lsls	r3, r3, #3
 801492e:	440b      	add	r3, r1
 8014930:	3312      	adds	r3, #18
 8014932:	4602      	mov	r2, r0
 8014934:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014936:	493e      	ldr	r1, [pc, #248]	; (8014a30 <etharp_tmr+0x14c>)
 8014938:	687a      	ldr	r2, [r7, #4]
 801493a:	4613      	mov	r3, r2
 801493c:	005b      	lsls	r3, r3, #1
 801493e:	4413      	add	r3, r2
 8014940:	00db      	lsls	r3, r3, #3
 8014942:	440b      	add	r3, r1
 8014944:	3312      	adds	r3, #18
 8014946:	881b      	ldrh	r3, [r3, #0]
 8014948:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801494c:	d215      	bcs.n	801497a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801494e:	4938      	ldr	r1, [pc, #224]	; (8014a30 <etharp_tmr+0x14c>)
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	4613      	mov	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4413      	add	r3, r2
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	440b      	add	r3, r1
 801495c:	3314      	adds	r3, #20
 801495e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014960:	2b01      	cmp	r3, #1
 8014962:	d10e      	bne.n	8014982 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014964:	4932      	ldr	r1, [pc, #200]	; (8014a30 <etharp_tmr+0x14c>)
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	4613      	mov	r3, r2
 801496a:	005b      	lsls	r3, r3, #1
 801496c:	4413      	add	r3, r2
 801496e:	00db      	lsls	r3, r3, #3
 8014970:	440b      	add	r3, r1
 8014972:	3312      	adds	r3, #18
 8014974:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014976:	2b04      	cmp	r3, #4
 8014978:	d903      	bls.n	8014982 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7ff ff80 	bl	8014880 <etharp_free_entry>
 8014980:	e04a      	b.n	8014a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014982:	492b      	ldr	r1, [pc, #172]	; (8014a30 <etharp_tmr+0x14c>)
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	440b      	add	r3, r1
 8014990:	3314      	adds	r3, #20
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	2b03      	cmp	r3, #3
 8014996:	d10a      	bne.n	80149ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014998:	4925      	ldr	r1, [pc, #148]	; (8014a30 <etharp_tmr+0x14c>)
 801499a:	687a      	ldr	r2, [r7, #4]
 801499c:	4613      	mov	r3, r2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	440b      	add	r3, r1
 80149a6:	3314      	adds	r3, #20
 80149a8:	2204      	movs	r2, #4
 80149aa:	701a      	strb	r2, [r3, #0]
 80149ac:	e034      	b.n	8014a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80149ae:	4920      	ldr	r1, [pc, #128]	; (8014a30 <etharp_tmr+0x14c>)
 80149b0:	687a      	ldr	r2, [r7, #4]
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	440b      	add	r3, r1
 80149bc:	3314      	adds	r3, #20
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	2b04      	cmp	r3, #4
 80149c2:	d10a      	bne.n	80149da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80149c4:	491a      	ldr	r1, [pc, #104]	; (8014a30 <etharp_tmr+0x14c>)
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	4613      	mov	r3, r2
 80149ca:	005b      	lsls	r3, r3, #1
 80149cc:	4413      	add	r3, r2
 80149ce:	00db      	lsls	r3, r3, #3
 80149d0:	440b      	add	r3, r1
 80149d2:	3314      	adds	r3, #20
 80149d4:	2202      	movs	r2, #2
 80149d6:	701a      	strb	r2, [r3, #0]
 80149d8:	e01e      	b.n	8014a18 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80149da:	4915      	ldr	r1, [pc, #84]	; (8014a30 <etharp_tmr+0x14c>)
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	4613      	mov	r3, r2
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	4413      	add	r3, r2
 80149e4:	00db      	lsls	r3, r3, #3
 80149e6:	440b      	add	r3, r1
 80149e8:	3314      	adds	r3, #20
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d113      	bne.n	8014a18 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80149f0:	490f      	ldr	r1, [pc, #60]	; (8014a30 <etharp_tmr+0x14c>)
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	4613      	mov	r3, r2
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	4413      	add	r3, r2
 80149fa:	00db      	lsls	r3, r3, #3
 80149fc:	440b      	add	r3, r1
 80149fe:	3308      	adds	r3, #8
 8014a00:	6818      	ldr	r0, [r3, #0]
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	00db      	lsls	r3, r3, #3
 8014a0c:	4a08      	ldr	r2, [pc, #32]	; (8014a30 <etharp_tmr+0x14c>)
 8014a0e:	4413      	add	r3, r2
 8014a10:	3304      	adds	r3, #4
 8014a12:	4619      	mov	r1, r3
 8014a14:	f000 fe72 	bl	80156fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	607b      	str	r3, [r7, #4]
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2b09      	cmp	r3, #9
 8014a22:	f77f af65 	ble.w	80148f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014a26:	bf00      	nop
 8014a28:	bf00      	nop
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	200109b0 	.word	0x200109b0

08014a34 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08a      	sub	sp, #40	; 0x28
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	607a      	str	r2, [r7, #4]
 8014a40:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014a42:	230a      	movs	r3, #10
 8014a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014a46:	230a      	movs	r3, #10
 8014a48:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014a4a:	230a      	movs	r3, #10
 8014a4c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014a52:	230a      	movs	r3, #10
 8014a54:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	83bb      	strh	r3, [r7, #28]
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	837b      	strh	r3, [r7, #26]
 8014a5e:	2300      	movs	r3, #0
 8014a60:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a62:	2300      	movs	r3, #0
 8014a64:	843b      	strh	r3, [r7, #32]
 8014a66:	e0ae      	b.n	8014bc6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014a68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a6c:	49a6      	ldr	r1, [pc, #664]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014a6e:	4613      	mov	r3, r2
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	4413      	add	r3, r2
 8014a74:	00db      	lsls	r3, r3, #3
 8014a76:	440b      	add	r3, r1
 8014a78:	3314      	adds	r3, #20
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014a7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a82:	2b0a      	cmp	r3, #10
 8014a84:	d105      	bne.n	8014a92 <etharp_find_entry+0x5e>
 8014a86:	7dfb      	ldrb	r3, [r7, #23]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d102      	bne.n	8014a92 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014a8c:	8c3b      	ldrh	r3, [r7, #32]
 8014a8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014a90:	e095      	b.n	8014bbe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014a92:	7dfb      	ldrb	r3, [r7, #23]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f000 8092 	beq.w	8014bbe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014a9a:	7dfb      	ldrb	r3, [r7, #23]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d009      	beq.n	8014ab4 <etharp_find_entry+0x80>
 8014aa0:	7dfb      	ldrb	r3, [r7, #23]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d806      	bhi.n	8014ab4 <etharp_find_entry+0x80>
 8014aa6:	4b99      	ldr	r3, [pc, #612]	; (8014d0c <etharp_find_entry+0x2d8>)
 8014aa8:	f240 1223 	movw	r2, #291	; 0x123
 8014aac:	4998      	ldr	r1, [pc, #608]	; (8014d10 <etharp_find_entry+0x2dc>)
 8014aae:	4899      	ldr	r0, [pc, #612]	; (8014d14 <etharp_find_entry+0x2e0>)
 8014ab0:	f002 fc9e 	bl	80173f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d020      	beq.n	8014afc <etharp_find_entry+0xc8>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	6819      	ldr	r1, [r3, #0]
 8014abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ac2:	4891      	ldr	r0, [pc, #580]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	4403      	add	r3, r0
 8014ace:	3304      	adds	r3, #4
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	4299      	cmp	r1, r3
 8014ad4:	d112      	bne.n	8014afc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00c      	beq.n	8014af6 <etharp_find_entry+0xc2>
 8014adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ae0:	4989      	ldr	r1, [pc, #548]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	005b      	lsls	r3, r3, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	440b      	add	r3, r1
 8014aec:	3308      	adds	r3, #8
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d102      	bne.n	8014afc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014af6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014afa:	e100      	b.n	8014cfe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014afc:	7dfb      	ldrb	r3, [r7, #23]
 8014afe:	2b01      	cmp	r3, #1
 8014b00:	d140      	bne.n	8014b84 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b06:	4980      	ldr	r1, [pc, #512]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b08:	4613      	mov	r3, r2
 8014b0a:	005b      	lsls	r3, r3, #1
 8014b0c:	4413      	add	r3, r2
 8014b0e:	00db      	lsls	r3, r3, #3
 8014b10:	440b      	add	r3, r1
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d01a      	beq.n	8014b4e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014b18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b1c:	497a      	ldr	r1, [pc, #488]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b1e:	4613      	mov	r3, r2
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	4413      	add	r3, r2
 8014b24:	00db      	lsls	r3, r3, #3
 8014b26:	440b      	add	r3, r1
 8014b28:	3312      	adds	r3, #18
 8014b2a:	881b      	ldrh	r3, [r3, #0]
 8014b2c:	8bba      	ldrh	r2, [r7, #28]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d845      	bhi.n	8014bbe <etharp_find_entry+0x18a>
            old_queue = i;
 8014b32:	8c3b      	ldrh	r3, [r7, #32]
 8014b34:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b3a:	4973      	ldr	r1, [pc, #460]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	4413      	add	r3, r2
 8014b42:	00db      	lsls	r3, r3, #3
 8014b44:	440b      	add	r3, r1
 8014b46:	3312      	adds	r3, #18
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	83bb      	strh	r3, [r7, #28]
 8014b4c:	e037      	b.n	8014bbe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b52:	496d      	ldr	r1, [pc, #436]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b54:	4613      	mov	r3, r2
 8014b56:	005b      	lsls	r3, r3, #1
 8014b58:	4413      	add	r3, r2
 8014b5a:	00db      	lsls	r3, r3, #3
 8014b5c:	440b      	add	r3, r1
 8014b5e:	3312      	adds	r3, #18
 8014b60:	881b      	ldrh	r3, [r3, #0]
 8014b62:	8b7a      	ldrh	r2, [r7, #26]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d82a      	bhi.n	8014bbe <etharp_find_entry+0x18a>
            old_pending = i;
 8014b68:	8c3b      	ldrh	r3, [r7, #32]
 8014b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b70:	4965      	ldr	r1, [pc, #404]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b72:	4613      	mov	r3, r2
 8014b74:	005b      	lsls	r3, r3, #1
 8014b76:	4413      	add	r3, r2
 8014b78:	00db      	lsls	r3, r3, #3
 8014b7a:	440b      	add	r3, r1
 8014b7c:	3312      	adds	r3, #18
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	837b      	strh	r3, [r7, #26]
 8014b82:	e01c      	b.n	8014bbe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014b84:	7dfb      	ldrb	r3, [r7, #23]
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d919      	bls.n	8014bbe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b8e:	495e      	ldr	r1, [pc, #376]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	440b      	add	r3, r1
 8014b9a:	3312      	adds	r3, #18
 8014b9c:	881b      	ldrh	r3, [r3, #0]
 8014b9e:	8b3a      	ldrh	r2, [r7, #24]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d80c      	bhi.n	8014bbe <etharp_find_entry+0x18a>
            old_stable = i;
 8014ba4:	8c3b      	ldrh	r3, [r7, #32]
 8014ba6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bac:	4956      	ldr	r1, [pc, #344]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014bae:	4613      	mov	r3, r2
 8014bb0:	005b      	lsls	r3, r3, #1
 8014bb2:	4413      	add	r3, r2
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	440b      	add	r3, r1
 8014bb8:	3312      	adds	r3, #18
 8014bba:	881b      	ldrh	r3, [r3, #0]
 8014bbc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014bbe:	8c3b      	ldrh	r3, [r7, #32]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	843b      	strh	r3, [r7, #32]
 8014bc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014bca:	2b09      	cmp	r3, #9
 8014bcc:	f77f af4c 	ble.w	8014a68 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014bd0:	7afb      	ldrb	r3, [r7, #11]
 8014bd2:	f003 0302 	and.w	r3, r3, #2
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d108      	bne.n	8014bec <etharp_find_entry+0x1b8>
 8014bda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014bde:	2b0a      	cmp	r3, #10
 8014be0:	d107      	bne.n	8014bf2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014be2:	7afb      	ldrb	r3, [r7, #11]
 8014be4:	f003 0301 	and.w	r3, r3, #1
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d102      	bne.n	8014bf2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014bec:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf0:	e085      	b.n	8014cfe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014bf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	dc02      	bgt.n	8014c00 <etharp_find_entry+0x1cc>
    i = empty;
 8014bfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bfc:	843b      	strh	r3, [r7, #32]
 8014bfe:	e039      	b.n	8014c74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014c04:	2b09      	cmp	r3, #9
 8014c06:	dc14      	bgt.n	8014c32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014c0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c10:	493d      	ldr	r1, [pc, #244]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d018      	beq.n	8014c54 <etharp_find_entry+0x220>
 8014c22:	4b3a      	ldr	r3, [pc, #232]	; (8014d0c <etharp_find_entry+0x2d8>)
 8014c24:	f240 126d 	movw	r2, #365	; 0x16d
 8014c28:	493b      	ldr	r1, [pc, #236]	; (8014d18 <etharp_find_entry+0x2e4>)
 8014c2a:	483a      	ldr	r0, [pc, #232]	; (8014d14 <etharp_find_entry+0x2e0>)
 8014c2c:	f002 fbe0 	bl	80173f0 <iprintf>
 8014c30:	e010      	b.n	8014c54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014c32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014c36:	2b09      	cmp	r3, #9
 8014c38:	dc02      	bgt.n	8014c40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c3c:	843b      	strh	r3, [r7, #32]
 8014c3e:	e009      	b.n	8014c54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014c40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014c44:	2b09      	cmp	r3, #9
 8014c46:	dc02      	bgt.n	8014c4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014c48:	8bfb      	ldrh	r3, [r7, #30]
 8014c4a:	843b      	strh	r3, [r7, #32]
 8014c4c:	e002      	b.n	8014c54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c52:	e054      	b.n	8014cfe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c58:	2b09      	cmp	r3, #9
 8014c5a:	dd06      	ble.n	8014c6a <etharp_find_entry+0x236>
 8014c5c:	4b2b      	ldr	r3, [pc, #172]	; (8014d0c <etharp_find_entry+0x2d8>)
 8014c5e:	f240 127f 	movw	r2, #383	; 0x17f
 8014c62:	492e      	ldr	r1, [pc, #184]	; (8014d1c <etharp_find_entry+0x2e8>)
 8014c64:	482b      	ldr	r0, [pc, #172]	; (8014d14 <etharp_find_entry+0x2e0>)
 8014c66:	f002 fbc3 	bl	80173f0 <iprintf>
    etharp_free_entry(i);
 8014c6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7ff fe06 	bl	8014880 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c78:	2b09      	cmp	r3, #9
 8014c7a:	dd06      	ble.n	8014c8a <etharp_find_entry+0x256>
 8014c7c:	4b23      	ldr	r3, [pc, #140]	; (8014d0c <etharp_find_entry+0x2d8>)
 8014c7e:	f240 1283 	movw	r2, #387	; 0x183
 8014c82:	4926      	ldr	r1, [pc, #152]	; (8014d1c <etharp_find_entry+0x2e8>)
 8014c84:	4823      	ldr	r0, [pc, #140]	; (8014d14 <etharp_find_entry+0x2e0>)
 8014c86:	f002 fbb3 	bl	80173f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c8e:	491e      	ldr	r1, [pc, #120]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014c90:	4613      	mov	r3, r2
 8014c92:	005b      	lsls	r3, r3, #1
 8014c94:	4413      	add	r3, r2
 8014c96:	00db      	lsls	r3, r3, #3
 8014c98:	440b      	add	r3, r1
 8014c9a:	3314      	adds	r3, #20
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d006      	beq.n	8014cb0 <etharp_find_entry+0x27c>
 8014ca2:	4b1a      	ldr	r3, [pc, #104]	; (8014d0c <etharp_find_entry+0x2d8>)
 8014ca4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014ca8:	491d      	ldr	r1, [pc, #116]	; (8014d20 <etharp_find_entry+0x2ec>)
 8014caa:	481a      	ldr	r0, [pc, #104]	; (8014d14 <etharp_find_entry+0x2e0>)
 8014cac:	f002 fba0 	bl	80173f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d00b      	beq.n	8014cce <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	6819      	ldr	r1, [r3, #0]
 8014cbe:	4812      	ldr	r0, [pc, #72]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	005b      	lsls	r3, r3, #1
 8014cc4:	4413      	add	r3, r2
 8014cc6:	00db      	lsls	r3, r3, #3
 8014cc8:	4403      	add	r3, r0
 8014cca:	3304      	adds	r3, #4
 8014ccc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cd2:	490d      	ldr	r1, [pc, #52]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	4413      	add	r3, r2
 8014cda:	00db      	lsls	r3, r3, #3
 8014cdc:	440b      	add	r3, r1
 8014cde:	3312      	adds	r3, #18
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ce8:	4907      	ldr	r1, [pc, #28]	; (8014d08 <etharp_find_entry+0x2d4>)
 8014cea:	4613      	mov	r3, r2
 8014cec:	005b      	lsls	r3, r3, #1
 8014cee:	4413      	add	r3, r2
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	440b      	add	r3, r1
 8014cf4:	3308      	adds	r3, #8
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3728      	adds	r7, #40	; 0x28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	200109b0 	.word	0x200109b0
 8014d0c:	0801b55c 	.word	0x0801b55c
 8014d10:	0801b594 	.word	0x0801b594
 8014d14:	0801b5d4 	.word	0x0801b5d4
 8014d18:	0801b5fc 	.word	0x0801b5fc
 8014d1c:	0801b614 	.word	0x0801b614
 8014d20:	0801b628 	.word	0x0801b628

08014d24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b088      	sub	sp, #32
 8014d28:	af02      	add	r7, sp, #8
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d38:	2b06      	cmp	r3, #6
 8014d3a:	d006      	beq.n	8014d4a <etharp_update_arp_entry+0x26>
 8014d3c:	4b48      	ldr	r3, [pc, #288]	; (8014e60 <etharp_update_arp_entry+0x13c>)
 8014d3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014d42:	4948      	ldr	r1, [pc, #288]	; (8014e64 <etharp_update_arp_entry+0x140>)
 8014d44:	4848      	ldr	r0, [pc, #288]	; (8014e68 <etharp_update_arp_entry+0x144>)
 8014d46:	f002 fb53 	bl	80173f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d012      	beq.n	8014d76 <etharp_update_arp_entry+0x52>
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00e      	beq.n	8014d76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	68f9      	ldr	r1, [r7, #12]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f001 f920 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8014d64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d105      	bne.n	8014d76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014d6a:	68bb      	ldr	r3, [r7, #8]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d72:	2be0      	cmp	r3, #224	; 0xe0
 8014d74:	d102      	bne.n	8014d7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d76:	f06f 030f 	mvn.w	r3, #15
 8014d7a:	e06c      	b.n	8014e56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014d7c:	78fb      	ldrb	r3, [r7, #3]
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	4619      	mov	r1, r3
 8014d82:	68b8      	ldr	r0, [r7, #8]
 8014d84:	f7ff fe56 	bl	8014a34 <etharp_find_entry>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014d8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	da02      	bge.n	8014d9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014d94:	8afb      	ldrh	r3, [r7, #22]
 8014d96:	b25b      	sxtb	r3, r3
 8014d98:	e05d      	b.n	8014e56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014d9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d9e:	4933      	ldr	r1, [pc, #204]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	00db      	lsls	r3, r3, #3
 8014da8:	440b      	add	r3, r1
 8014daa:	3314      	adds	r3, #20
 8014dac:	2202      	movs	r2, #2
 8014dae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014db0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014db4:	492d      	ldr	r1, [pc, #180]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014db6:	4613      	mov	r3, r2
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	4413      	add	r3, r2
 8014dbc:	00db      	lsls	r3, r3, #3
 8014dbe:	440b      	add	r3, r1
 8014dc0:	3308      	adds	r3, #8
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014dc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	3308      	adds	r3, #8
 8014dd4:	4a25      	ldr	r2, [pc, #148]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014dd6:	4413      	add	r3, r2
 8014dd8:	3304      	adds	r3, #4
 8014dda:	2206      	movs	r2, #6
 8014ddc:	6879      	ldr	r1, [r7, #4]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f002 fc36 	bl	8017650 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014de4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014de8:	4920      	ldr	r1, [pc, #128]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014dea:	4613      	mov	r3, r2
 8014dec:	005b      	lsls	r3, r3, #1
 8014dee:	4413      	add	r3, r2
 8014df0:	00db      	lsls	r3, r3, #3
 8014df2:	440b      	add	r3, r1
 8014df4:	3312      	adds	r3, #18
 8014df6:	2200      	movs	r2, #0
 8014df8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014dfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dfe:	491b      	ldr	r1, [pc, #108]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014e00:	4613      	mov	r3, r2
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	4413      	add	r3, r2
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	440b      	add	r3, r1
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d021      	beq.n	8014e54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014e10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e14:	4915      	ldr	r1, [pc, #84]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014e16:	4613      	mov	r3, r2
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	4413      	add	r3, r2
 8014e1c:	00db      	lsls	r3, r3, #3
 8014e1e:	440b      	add	r3, r1
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014e24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e28:	4910      	ldr	r1, [pc, #64]	; (8014e6c <etharp_update_arp_entry+0x148>)
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4413      	add	r3, r2
 8014e30:	00db      	lsls	r3, r3, #3
 8014e32:	440b      	add	r3, r1
 8014e34:	2200      	movs	r2, #0
 8014e36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6939      	ldr	r1, [r7, #16]
 8014e48:	68f8      	ldr	r0, [r7, #12]
 8014e4a:	f001 ffb9 	bl	8016dc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014e4e:	6938      	ldr	r0, [r7, #16]
 8014e50:	f7f6 fd12 	bl	800b878 <pbuf_free>
  }
  return ERR_OK;
 8014e54:	2300      	movs	r3, #0
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3718      	adds	r7, #24
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	0801b55c 	.word	0x0801b55c
 8014e64:	0801b654 	.word	0x0801b654
 8014e68:	0801b5d4 	.word	0x0801b5d4
 8014e6c:	200109b0 	.word	0x200109b0

08014e70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b084      	sub	sp, #16
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e78:	2300      	movs	r3, #0
 8014e7a:	60fb      	str	r3, [r7, #12]
 8014e7c:	e01e      	b.n	8014ebc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014e7e:	4913      	ldr	r1, [pc, #76]	; (8014ecc <etharp_cleanup_netif+0x5c>)
 8014e80:	68fa      	ldr	r2, [r7, #12]
 8014e82:	4613      	mov	r3, r2
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	4413      	add	r3, r2
 8014e88:	00db      	lsls	r3, r3, #3
 8014e8a:	440b      	add	r3, r1
 8014e8c:	3314      	adds	r3, #20
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014e92:	7afb      	ldrb	r3, [r7, #11]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d00e      	beq.n	8014eb6 <etharp_cleanup_netif+0x46>
 8014e98:	490c      	ldr	r1, [pc, #48]	; (8014ecc <etharp_cleanup_netif+0x5c>)
 8014e9a:	68fa      	ldr	r2, [r7, #12]
 8014e9c:	4613      	mov	r3, r2
 8014e9e:	005b      	lsls	r3, r3, #1
 8014ea0:	4413      	add	r3, r2
 8014ea2:	00db      	lsls	r3, r3, #3
 8014ea4:	440b      	add	r3, r1
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d102      	bne.n	8014eb6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f7ff fce5 	bl	8014880 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	3301      	adds	r3, #1
 8014eba:	60fb      	str	r3, [r7, #12]
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2b09      	cmp	r3, #9
 8014ec0:	dddd      	ble.n	8014e7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014ec2:	bf00      	nop
 8014ec4:	bf00      	nop
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	200109b0 	.word	0x200109b0

08014ed0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014ed0:	b5b0      	push	{r4, r5, r7, lr}
 8014ed2:	b08a      	sub	sp, #40	; 0x28
 8014ed4:	af04      	add	r7, sp, #16
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d107      	bne.n	8014ef0 <etharp_input+0x20>
 8014ee0:	4b3f      	ldr	r3, [pc, #252]	; (8014fe0 <etharp_input+0x110>)
 8014ee2:	f240 228a 	movw	r2, #650	; 0x28a
 8014ee6:	493f      	ldr	r1, [pc, #252]	; (8014fe4 <etharp_input+0x114>)
 8014ee8:	483f      	ldr	r0, [pc, #252]	; (8014fe8 <etharp_input+0x118>)
 8014eea:	f002 fa81 	bl	80173f0 <iprintf>
 8014eee:	e074      	b.n	8014fda <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f00:	d10c      	bne.n	8014f1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014f06:	2b06      	cmp	r3, #6
 8014f08:	d108      	bne.n	8014f1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f0e:	2b04      	cmp	r3, #4
 8014f10:	d104      	bne.n	8014f1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	885b      	ldrh	r3, [r3, #2]
 8014f16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f18:	2b08      	cmp	r3, #8
 8014f1a:	d003      	beq.n	8014f24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7f6 fcab 	bl	800b878 <pbuf_free>
    return;
 8014f22:	e05a      	b.n	8014fda <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	330e      	adds	r3, #14
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	3318      	adds	r3, #24
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	3304      	adds	r3, #4
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d102      	bne.n	8014f44 <etharp_input+0x74>
    for_us = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	75fb      	strb	r3, [r7, #23]
 8014f42:	e009      	b.n	8014f58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014f44:	68ba      	ldr	r2, [r7, #8]
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	bf0c      	ite	eq
 8014f50:	2301      	moveq	r3, #1
 8014f52:	2300      	movne	r3, #0
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	f103 0208 	add.w	r2, r3, #8
 8014f5e:	7dfb      	ldrb	r3, [r7, #23]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <etharp_input+0x98>
 8014f64:	2301      	movs	r3, #1
 8014f66:	e000      	b.n	8014f6a <etharp_input+0x9a>
 8014f68:	2302      	movs	r3, #2
 8014f6a:	f107 010c 	add.w	r1, r7, #12
 8014f6e:	6838      	ldr	r0, [r7, #0]
 8014f70:	f7ff fed8 	bl	8014d24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	88db      	ldrh	r3, [r3, #6]
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f7e:	d003      	beq.n	8014f88 <etharp_input+0xb8>
 8014f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f84:	d01e      	beq.n	8014fc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014f86:	e025      	b.n	8014fd4 <etharp_input+0x104>
      if (for_us) {
 8014f88:	7dfb      	ldrb	r3, [r7, #23]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d021      	beq.n	8014fd2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014fa4:	693a      	ldr	r2, [r7, #16]
 8014fa6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014fa8:	2102      	movs	r1, #2
 8014faa:	9103      	str	r1, [sp, #12]
 8014fac:	f107 010c 	add.w	r1, r7, #12
 8014fb0:	9102      	str	r1, [sp, #8]
 8014fb2:	9201      	str	r2, [sp, #4]
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	462b      	mov	r3, r5
 8014fb8:	4622      	mov	r2, r4
 8014fba:	4601      	mov	r1, r0
 8014fbc:	6838      	ldr	r0, [r7, #0]
 8014fbe:	f000 faef 	bl	80155a0 <etharp_raw>
      break;
 8014fc2:	e006      	b.n	8014fd2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014fc4:	f107 030c 	add.w	r3, r7, #12
 8014fc8:	4619      	mov	r1, r3
 8014fca:	6838      	ldr	r0, [r7, #0]
 8014fcc:	f7fe f9fc 	bl	80133c8 <dhcp_arp_reply>
      break;
 8014fd0:	e000      	b.n	8014fd4 <etharp_input+0x104>
      break;
 8014fd2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f7f6 fc4f 	bl	800b878 <pbuf_free>
}
 8014fda:	3718      	adds	r7, #24
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bdb0      	pop	{r4, r5, r7, pc}
 8014fe0:	0801b55c 	.word	0x0801b55c
 8014fe4:	0801b6ac 	.word	0x0801b6ac
 8014fe8:	0801b5d4 	.word	0x0801b5d4

08014fec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b086      	sub	sp, #24
 8014ff0:	af02      	add	r7, sp, #8
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ffa:	79fa      	ldrb	r2, [r7, #7]
 8014ffc:	4944      	ldr	r1, [pc, #272]	; (8015110 <etharp_output_to_arp_index+0x124>)
 8014ffe:	4613      	mov	r3, r2
 8015000:	005b      	lsls	r3, r3, #1
 8015002:	4413      	add	r3, r2
 8015004:	00db      	lsls	r3, r3, #3
 8015006:	440b      	add	r3, r1
 8015008:	3314      	adds	r3, #20
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d806      	bhi.n	801501e <etharp_output_to_arp_index+0x32>
 8015010:	4b40      	ldr	r3, [pc, #256]	; (8015114 <etharp_output_to_arp_index+0x128>)
 8015012:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015016:	4940      	ldr	r1, [pc, #256]	; (8015118 <etharp_output_to_arp_index+0x12c>)
 8015018:	4840      	ldr	r0, [pc, #256]	; (801511c <etharp_output_to_arp_index+0x130>)
 801501a:	f002 f9e9 	bl	80173f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801501e:	79fa      	ldrb	r2, [r7, #7]
 8015020:	493b      	ldr	r1, [pc, #236]	; (8015110 <etharp_output_to_arp_index+0x124>)
 8015022:	4613      	mov	r3, r2
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	4413      	add	r3, r2
 8015028:	00db      	lsls	r3, r3, #3
 801502a:	440b      	add	r3, r1
 801502c:	3314      	adds	r3, #20
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	2b02      	cmp	r3, #2
 8015032:	d153      	bne.n	80150dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015034:	79fa      	ldrb	r2, [r7, #7]
 8015036:	4936      	ldr	r1, [pc, #216]	; (8015110 <etharp_output_to_arp_index+0x124>)
 8015038:	4613      	mov	r3, r2
 801503a:	005b      	lsls	r3, r3, #1
 801503c:	4413      	add	r3, r2
 801503e:	00db      	lsls	r3, r3, #3
 8015040:	440b      	add	r3, r1
 8015042:	3312      	adds	r3, #18
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801504a:	d919      	bls.n	8015080 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801504c:	79fa      	ldrb	r2, [r7, #7]
 801504e:	4613      	mov	r3, r2
 8015050:	005b      	lsls	r3, r3, #1
 8015052:	4413      	add	r3, r2
 8015054:	00db      	lsls	r3, r3, #3
 8015056:	4a2e      	ldr	r2, [pc, #184]	; (8015110 <etharp_output_to_arp_index+0x124>)
 8015058:	4413      	add	r3, r2
 801505a:	3304      	adds	r3, #4
 801505c:	4619      	mov	r1, r3
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f000 fb4c 	bl	80156fc <etharp_request>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d138      	bne.n	80150dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801506a:	79fa      	ldrb	r2, [r7, #7]
 801506c:	4928      	ldr	r1, [pc, #160]	; (8015110 <etharp_output_to_arp_index+0x124>)
 801506e:	4613      	mov	r3, r2
 8015070:	005b      	lsls	r3, r3, #1
 8015072:	4413      	add	r3, r2
 8015074:	00db      	lsls	r3, r3, #3
 8015076:	440b      	add	r3, r1
 8015078:	3314      	adds	r3, #20
 801507a:	2203      	movs	r2, #3
 801507c:	701a      	strb	r2, [r3, #0]
 801507e:	e02d      	b.n	80150dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015080:	79fa      	ldrb	r2, [r7, #7]
 8015082:	4923      	ldr	r1, [pc, #140]	; (8015110 <etharp_output_to_arp_index+0x124>)
 8015084:	4613      	mov	r3, r2
 8015086:	005b      	lsls	r3, r3, #1
 8015088:	4413      	add	r3, r2
 801508a:	00db      	lsls	r3, r3, #3
 801508c:	440b      	add	r3, r1
 801508e:	3312      	adds	r3, #18
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015096:	d321      	bcc.n	80150dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015098:	79fa      	ldrb	r2, [r7, #7]
 801509a:	4613      	mov	r3, r2
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	4413      	add	r3, r2
 80150a0:	00db      	lsls	r3, r3, #3
 80150a2:	4a1b      	ldr	r2, [pc, #108]	; (8015110 <etharp_output_to_arp_index+0x124>)
 80150a4:	4413      	add	r3, r2
 80150a6:	1d19      	adds	r1, r3, #4
 80150a8:	79fa      	ldrb	r2, [r7, #7]
 80150aa:	4613      	mov	r3, r2
 80150ac:	005b      	lsls	r3, r3, #1
 80150ae:	4413      	add	r3, r2
 80150b0:	00db      	lsls	r3, r3, #3
 80150b2:	3308      	adds	r3, #8
 80150b4:	4a16      	ldr	r2, [pc, #88]	; (8015110 <etharp_output_to_arp_index+0x124>)
 80150b6:	4413      	add	r3, r2
 80150b8:	3304      	adds	r3, #4
 80150ba:	461a      	mov	r2, r3
 80150bc:	68f8      	ldr	r0, [r7, #12]
 80150be:	f000 fafb 	bl	80156b8 <etharp_request_dst>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d109      	bne.n	80150dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80150c8:	79fa      	ldrb	r2, [r7, #7]
 80150ca:	4911      	ldr	r1, [pc, #68]	; (8015110 <etharp_output_to_arp_index+0x124>)
 80150cc:	4613      	mov	r3, r2
 80150ce:	005b      	lsls	r3, r3, #1
 80150d0:	4413      	add	r3, r2
 80150d2:	00db      	lsls	r3, r3, #3
 80150d4:	440b      	add	r3, r1
 80150d6:	3314      	adds	r3, #20
 80150d8:	2203      	movs	r2, #3
 80150da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80150e2:	79fa      	ldrb	r2, [r7, #7]
 80150e4:	4613      	mov	r3, r2
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	4413      	add	r3, r2
 80150ea:	00db      	lsls	r3, r3, #3
 80150ec:	3308      	adds	r3, #8
 80150ee:	4a08      	ldr	r2, [pc, #32]	; (8015110 <etharp_output_to_arp_index+0x124>)
 80150f0:	4413      	add	r3, r2
 80150f2:	3304      	adds	r3, #4
 80150f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150f8:	9200      	str	r2, [sp, #0]
 80150fa:	460a      	mov	r2, r1
 80150fc:	68b9      	ldr	r1, [r7, #8]
 80150fe:	68f8      	ldr	r0, [r7, #12]
 8015100:	f001 fe5e 	bl	8016dc0 <ethernet_output>
 8015104:	4603      	mov	r3, r0
}
 8015106:	4618      	mov	r0, r3
 8015108:	3710      	adds	r7, #16
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	200109b0 	.word	0x200109b0
 8015114:	0801b55c 	.word	0x0801b55c
 8015118:	0801b6cc 	.word	0x0801b6cc
 801511c:	0801b5d4 	.word	0x0801b5d4

08015120 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b08a      	sub	sp, #40	; 0x28
 8015124:	af02      	add	r7, sp, #8
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d106      	bne.n	8015144 <etharp_output+0x24>
 8015136:	4b73      	ldr	r3, [pc, #460]	; (8015304 <etharp_output+0x1e4>)
 8015138:	f240 321e 	movw	r2, #798	; 0x31e
 801513c:	4972      	ldr	r1, [pc, #456]	; (8015308 <etharp_output+0x1e8>)
 801513e:	4873      	ldr	r0, [pc, #460]	; (801530c <etharp_output+0x1ec>)
 8015140:	f002 f956 	bl	80173f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d106      	bne.n	8015158 <etharp_output+0x38>
 801514a:	4b6e      	ldr	r3, [pc, #440]	; (8015304 <etharp_output+0x1e4>)
 801514c:	f240 321f 	movw	r2, #799	; 0x31f
 8015150:	496f      	ldr	r1, [pc, #444]	; (8015310 <etharp_output+0x1f0>)
 8015152:	486e      	ldr	r0, [pc, #440]	; (801530c <etharp_output+0x1ec>)
 8015154:	f002 f94c 	bl	80173f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d106      	bne.n	801516c <etharp_output+0x4c>
 801515e:	4b69      	ldr	r3, [pc, #420]	; (8015304 <etharp_output+0x1e4>)
 8015160:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015164:	496b      	ldr	r1, [pc, #428]	; (8015314 <etharp_output+0x1f4>)
 8015166:	4869      	ldr	r0, [pc, #420]	; (801530c <etharp_output+0x1ec>)
 8015168:	f002 f942 	bl	80173f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68f9      	ldr	r1, [r7, #12]
 8015172:	4618      	mov	r0, r3
 8015174:	f000 ff16 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d002      	beq.n	8015184 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801517e:	4b66      	ldr	r3, [pc, #408]	; (8015318 <etharp_output+0x1f8>)
 8015180:	61fb      	str	r3, [r7, #28]
 8015182:	e0af      	b.n	80152e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801518c:	2be0      	cmp	r3, #224	; 0xe0
 801518e:	d118      	bne.n	80151c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015190:	2301      	movs	r3, #1
 8015192:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015194:	2300      	movs	r3, #0
 8015196:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015198:	235e      	movs	r3, #94	; 0x5e
 801519a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	3301      	adds	r3, #1
 80151a0:	781b      	ldrb	r3, [r3, #0]
 80151a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	3302      	adds	r3, #2
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	3303      	adds	r3, #3
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80151ba:	f107 0310 	add.w	r3, r7, #16
 80151be:	61fb      	str	r3, [r7, #28]
 80151c0:	e090      	b.n	80152e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	3304      	adds	r3, #4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	405a      	eors	r2, r3
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	3308      	adds	r3, #8
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	4013      	ands	r3, r2
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d012      	beq.n	8015200 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80151e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d00b      	beq.n	8015200 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	330c      	adds	r3, #12
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d003      	beq.n	80151fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	330c      	adds	r3, #12
 80151f6:	61bb      	str	r3, [r7, #24]
 80151f8:	e002      	b.n	8015200 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80151fa:	f06f 0303 	mvn.w	r3, #3
 80151fe:	e07d      	b.n	80152fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015200:	4b46      	ldr	r3, [pc, #280]	; (801531c <etharp_output+0x1fc>)
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	4619      	mov	r1, r3
 8015206:	4a46      	ldr	r2, [pc, #280]	; (8015320 <etharp_output+0x200>)
 8015208:	460b      	mov	r3, r1
 801520a:	005b      	lsls	r3, r3, #1
 801520c:	440b      	add	r3, r1
 801520e:	00db      	lsls	r3, r3, #3
 8015210:	4413      	add	r3, r2
 8015212:	3314      	adds	r3, #20
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d925      	bls.n	8015266 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801521a:	4b40      	ldr	r3, [pc, #256]	; (801531c <etharp_output+0x1fc>)
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	4619      	mov	r1, r3
 8015220:	4a3f      	ldr	r2, [pc, #252]	; (8015320 <etharp_output+0x200>)
 8015222:	460b      	mov	r3, r1
 8015224:	005b      	lsls	r3, r3, #1
 8015226:	440b      	add	r3, r1
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	4413      	add	r3, r2
 801522c:	3308      	adds	r3, #8
 801522e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	429a      	cmp	r2, r3
 8015234:	d117      	bne.n	8015266 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	4b38      	ldr	r3, [pc, #224]	; (801531c <etharp_output+0x1fc>)
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	4618      	mov	r0, r3
 8015240:	4937      	ldr	r1, [pc, #220]	; (8015320 <etharp_output+0x200>)
 8015242:	4603      	mov	r3, r0
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4403      	add	r3, r0
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	3304      	adds	r3, #4
 801524e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015250:	429a      	cmp	r2, r3
 8015252:	d108      	bne.n	8015266 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015254:	4b31      	ldr	r3, [pc, #196]	; (801531c <etharp_output+0x1fc>)
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	461a      	mov	r2, r3
 801525a:	68b9      	ldr	r1, [r7, #8]
 801525c:	68f8      	ldr	r0, [r7, #12]
 801525e:	f7ff fec5 	bl	8014fec <etharp_output_to_arp_index>
 8015262:	4603      	mov	r3, r0
 8015264:	e04a      	b.n	80152fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015266:	2300      	movs	r3, #0
 8015268:	75fb      	strb	r3, [r7, #23]
 801526a:	e031      	b.n	80152d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801526c:	7dfa      	ldrb	r2, [r7, #23]
 801526e:	492c      	ldr	r1, [pc, #176]	; (8015320 <etharp_output+0x200>)
 8015270:	4613      	mov	r3, r2
 8015272:	005b      	lsls	r3, r3, #1
 8015274:	4413      	add	r3, r2
 8015276:	00db      	lsls	r3, r3, #3
 8015278:	440b      	add	r3, r1
 801527a:	3314      	adds	r3, #20
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	2b01      	cmp	r3, #1
 8015280:	d923      	bls.n	80152ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015282:	7dfa      	ldrb	r2, [r7, #23]
 8015284:	4926      	ldr	r1, [pc, #152]	; (8015320 <etharp_output+0x200>)
 8015286:	4613      	mov	r3, r2
 8015288:	005b      	lsls	r3, r3, #1
 801528a:	4413      	add	r3, r2
 801528c:	00db      	lsls	r3, r3, #3
 801528e:	440b      	add	r3, r1
 8015290:	3308      	adds	r3, #8
 8015292:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015294:	68fa      	ldr	r2, [r7, #12]
 8015296:	429a      	cmp	r2, r3
 8015298:	d117      	bne.n	80152ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	6819      	ldr	r1, [r3, #0]
 801529e:	7dfa      	ldrb	r2, [r7, #23]
 80152a0:	481f      	ldr	r0, [pc, #124]	; (8015320 <etharp_output+0x200>)
 80152a2:	4613      	mov	r3, r2
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	00db      	lsls	r3, r3, #3
 80152aa:	4403      	add	r3, r0
 80152ac:	3304      	adds	r3, #4
 80152ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80152b0:	4299      	cmp	r1, r3
 80152b2:	d10a      	bne.n	80152ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80152b4:	4a19      	ldr	r2, [pc, #100]	; (801531c <etharp_output+0x1fc>)
 80152b6:	7dfb      	ldrb	r3, [r7, #23]
 80152b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	461a      	mov	r2, r3
 80152be:	68b9      	ldr	r1, [r7, #8]
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f7ff fe93 	bl	8014fec <etharp_output_to_arp_index>
 80152c6:	4603      	mov	r3, r0
 80152c8:	e018      	b.n	80152fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80152ca:	7dfb      	ldrb	r3, [r7, #23]
 80152cc:	3301      	adds	r3, #1
 80152ce:	75fb      	strb	r3, [r7, #23]
 80152d0:	7dfb      	ldrb	r3, [r7, #23]
 80152d2:	2b09      	cmp	r3, #9
 80152d4:	d9ca      	bls.n	801526c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80152d6:	68ba      	ldr	r2, [r7, #8]
 80152d8:	69b9      	ldr	r1, [r7, #24]
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	f000 f822 	bl	8015324 <etharp_query>
 80152e0:	4603      	mov	r3, r0
 80152e2:	e00b      	b.n	80152fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80152ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	68b9      	ldr	r1, [r7, #8]
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f001 fd63 	bl	8016dc0 <ethernet_output>
 80152fa:	4603      	mov	r3, r0
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3720      	adds	r7, #32
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}
 8015304:	0801b55c 	.word	0x0801b55c
 8015308:	0801b6ac 	.word	0x0801b6ac
 801530c:	0801b5d4 	.word	0x0801b5d4
 8015310:	0801b6fc 	.word	0x0801b6fc
 8015314:	0801b69c 	.word	0x0801b69c
 8015318:	0801bd70 	.word	0x0801bd70
 801531c:	20010aa0 	.word	0x20010aa0
 8015320:	200109b0 	.word	0x200109b0

08015324 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b08c      	sub	sp, #48	; 0x30
 8015328:	af02      	add	r7, sp, #8
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	332a      	adds	r3, #42	; 0x2a
 8015334:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015336:	23ff      	movs	r3, #255	; 0xff
 8015338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801533c:	2300      	movs	r3, #0
 801533e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	68f9      	ldr	r1, [r7, #12]
 8015346:	4618      	mov	r0, r3
 8015348:	f000 fe2c 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 801534c:	4603      	mov	r3, r0
 801534e:	2b00      	cmp	r3, #0
 8015350:	d10c      	bne.n	801536c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801535a:	2be0      	cmp	r3, #224	; 0xe0
 801535c:	d006      	beq.n	801536c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d003      	beq.n	801536c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d102      	bne.n	8015372 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801536c:	f06f 030f 	mvn.w	r3, #15
 8015370:	e101      	b.n	8015576 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015372:	68fa      	ldr	r2, [r7, #12]
 8015374:	2101      	movs	r1, #1
 8015376:	68b8      	ldr	r0, [r7, #8]
 8015378:	f7ff fb5c 	bl	8014a34 <etharp_find_entry>
 801537c:	4603      	mov	r3, r0
 801537e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015384:	2b00      	cmp	r3, #0
 8015386:	da02      	bge.n	801538e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015388:	8a7b      	ldrh	r3, [r7, #18]
 801538a:	b25b      	sxtb	r3, r3
 801538c:	e0f3      	b.n	8015576 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801538e:	8a7b      	ldrh	r3, [r7, #18]
 8015390:	2b7e      	cmp	r3, #126	; 0x7e
 8015392:	d906      	bls.n	80153a2 <etharp_query+0x7e>
 8015394:	4b7a      	ldr	r3, [pc, #488]	; (8015580 <etharp_query+0x25c>)
 8015396:	f240 32c1 	movw	r2, #961	; 0x3c1
 801539a:	497a      	ldr	r1, [pc, #488]	; (8015584 <etharp_query+0x260>)
 801539c:	487a      	ldr	r0, [pc, #488]	; (8015588 <etharp_query+0x264>)
 801539e:	f002 f827 	bl	80173f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80153a2:	8a7b      	ldrh	r3, [r7, #18]
 80153a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80153a6:	7c7a      	ldrb	r2, [r7, #17]
 80153a8:	4978      	ldr	r1, [pc, #480]	; (801558c <etharp_query+0x268>)
 80153aa:	4613      	mov	r3, r2
 80153ac:	005b      	lsls	r3, r3, #1
 80153ae:	4413      	add	r3, r2
 80153b0:	00db      	lsls	r3, r3, #3
 80153b2:	440b      	add	r3, r1
 80153b4:	3314      	adds	r3, #20
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d115      	bne.n	80153e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80153bc:	2301      	movs	r3, #1
 80153be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80153c0:	7c7a      	ldrb	r2, [r7, #17]
 80153c2:	4972      	ldr	r1, [pc, #456]	; (801558c <etharp_query+0x268>)
 80153c4:	4613      	mov	r3, r2
 80153c6:	005b      	lsls	r3, r3, #1
 80153c8:	4413      	add	r3, r2
 80153ca:	00db      	lsls	r3, r3, #3
 80153cc:	440b      	add	r3, r1
 80153ce:	3314      	adds	r3, #20
 80153d0:	2201      	movs	r2, #1
 80153d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80153d4:	7c7a      	ldrb	r2, [r7, #17]
 80153d6:	496d      	ldr	r1, [pc, #436]	; (801558c <etharp_query+0x268>)
 80153d8:	4613      	mov	r3, r2
 80153da:	005b      	lsls	r3, r3, #1
 80153dc:	4413      	add	r3, r2
 80153de:	00db      	lsls	r3, r3, #3
 80153e0:	440b      	add	r3, r1
 80153e2:	3308      	adds	r3, #8
 80153e4:	68fa      	ldr	r2, [r7, #12]
 80153e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80153e8:	7c7a      	ldrb	r2, [r7, #17]
 80153ea:	4968      	ldr	r1, [pc, #416]	; (801558c <etharp_query+0x268>)
 80153ec:	4613      	mov	r3, r2
 80153ee:	005b      	lsls	r3, r3, #1
 80153f0:	4413      	add	r3, r2
 80153f2:	00db      	lsls	r3, r3, #3
 80153f4:	440b      	add	r3, r1
 80153f6:	3314      	adds	r3, #20
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	2b01      	cmp	r3, #1
 80153fc:	d011      	beq.n	8015422 <etharp_query+0xfe>
 80153fe:	7c7a      	ldrb	r2, [r7, #17]
 8015400:	4962      	ldr	r1, [pc, #392]	; (801558c <etharp_query+0x268>)
 8015402:	4613      	mov	r3, r2
 8015404:	005b      	lsls	r3, r3, #1
 8015406:	4413      	add	r3, r2
 8015408:	00db      	lsls	r3, r3, #3
 801540a:	440b      	add	r3, r1
 801540c:	3314      	adds	r3, #20
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d806      	bhi.n	8015422 <etharp_query+0xfe>
 8015414:	4b5a      	ldr	r3, [pc, #360]	; (8015580 <etharp_query+0x25c>)
 8015416:	f240 32cd 	movw	r2, #973	; 0x3cd
 801541a:	495d      	ldr	r1, [pc, #372]	; (8015590 <etharp_query+0x26c>)
 801541c:	485a      	ldr	r0, [pc, #360]	; (8015588 <etharp_query+0x264>)
 801541e:	f001 ffe7 	bl	80173f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015422:	6a3b      	ldr	r3, [r7, #32]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d102      	bne.n	801542e <etharp_query+0x10a>
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10c      	bne.n	8015448 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801542e:	68b9      	ldr	r1, [r7, #8]
 8015430:	68f8      	ldr	r0, [r7, #12]
 8015432:	f000 f963 	bl	80156fc <etharp_request>
 8015436:	4603      	mov	r3, r0
 8015438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d102      	bne.n	8015448 <etharp_query+0x124>
      return result;
 8015442:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015446:	e096      	b.n	8015576 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d106      	bne.n	801545c <etharp_query+0x138>
 801544e:	4b4c      	ldr	r3, [pc, #304]	; (8015580 <etharp_query+0x25c>)
 8015450:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015454:	494f      	ldr	r1, [pc, #316]	; (8015594 <etharp_query+0x270>)
 8015456:	484c      	ldr	r0, [pc, #304]	; (8015588 <etharp_query+0x264>)
 8015458:	f001 ffca 	bl	80173f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801545c:	7c7a      	ldrb	r2, [r7, #17]
 801545e:	494b      	ldr	r1, [pc, #300]	; (801558c <etharp_query+0x268>)
 8015460:	4613      	mov	r3, r2
 8015462:	005b      	lsls	r3, r3, #1
 8015464:	4413      	add	r3, r2
 8015466:	00db      	lsls	r3, r3, #3
 8015468:	440b      	add	r3, r1
 801546a:	3314      	adds	r3, #20
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	2b01      	cmp	r3, #1
 8015470:	d917      	bls.n	80154a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015472:	4a49      	ldr	r2, [pc, #292]	; (8015598 <etharp_query+0x274>)
 8015474:	7c7b      	ldrb	r3, [r7, #17]
 8015476:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015478:	7c7a      	ldrb	r2, [r7, #17]
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	3308      	adds	r3, #8
 8015484:	4a41      	ldr	r2, [pc, #260]	; (801558c <etharp_query+0x268>)
 8015486:	4413      	add	r3, r2
 8015488:	3304      	adds	r3, #4
 801548a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801548e:	9200      	str	r2, [sp, #0]
 8015490:	697a      	ldr	r2, [r7, #20]
 8015492:	6879      	ldr	r1, [r7, #4]
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f001 fc93 	bl	8016dc0 <ethernet_output>
 801549a:	4603      	mov	r3, r0
 801549c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154a0:	e067      	b.n	8015572 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80154a2:	7c7a      	ldrb	r2, [r7, #17]
 80154a4:	4939      	ldr	r1, [pc, #228]	; (801558c <etharp_query+0x268>)
 80154a6:	4613      	mov	r3, r2
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	4413      	add	r3, r2
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	440b      	add	r3, r1
 80154b0:	3314      	adds	r3, #20
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d15c      	bne.n	8015572 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80154b8:	2300      	movs	r3, #0
 80154ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80154c0:	e01c      	b.n	80154fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	895a      	ldrh	r2, [r3, #10]
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	891b      	ldrh	r3, [r3, #8]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d10a      	bne.n	80154e4 <etharp_query+0x1c0>
 80154ce:	69fb      	ldr	r3, [r7, #28]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d006      	beq.n	80154e4 <etharp_query+0x1c0>
 80154d6:	4b2a      	ldr	r3, [pc, #168]	; (8015580 <etharp_query+0x25c>)
 80154d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80154dc:	492f      	ldr	r1, [pc, #188]	; (801559c <etharp_query+0x278>)
 80154de:	482a      	ldr	r0, [pc, #168]	; (8015588 <etharp_query+0x264>)
 80154e0:	f001 ff86 	bl	80173f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	7b1b      	ldrb	r3, [r3, #12]
 80154e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d002      	beq.n	80154f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80154f0:	2301      	movs	r3, #1
 80154f2:	61bb      	str	r3, [r7, #24]
        break;
 80154f4:	e005      	b.n	8015502 <etharp_query+0x1de>
      }
      p = p->next;
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1df      	bne.n	80154c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015502:	69bb      	ldr	r3, [r7, #24]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d007      	beq.n	8015518 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801550e:	200e      	movs	r0, #14
 8015510:	f7f6 fc2a 	bl	800bd68 <pbuf_clone>
 8015514:	61f8      	str	r0, [r7, #28]
 8015516:	e004      	b.n	8015522 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801551c:	69f8      	ldr	r0, [r7, #28]
 801551e:	f7f6 fa51 	bl	800b9c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d021      	beq.n	801556c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015528:	7c7a      	ldrb	r2, [r7, #17]
 801552a:	4918      	ldr	r1, [pc, #96]	; (801558c <etharp_query+0x268>)
 801552c:	4613      	mov	r3, r2
 801552e:	005b      	lsls	r3, r3, #1
 8015530:	4413      	add	r3, r2
 8015532:	00db      	lsls	r3, r3, #3
 8015534:	440b      	add	r3, r1
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d00a      	beq.n	8015552 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801553c:	7c7a      	ldrb	r2, [r7, #17]
 801553e:	4913      	ldr	r1, [pc, #76]	; (801558c <etharp_query+0x268>)
 8015540:	4613      	mov	r3, r2
 8015542:	005b      	lsls	r3, r3, #1
 8015544:	4413      	add	r3, r2
 8015546:	00db      	lsls	r3, r3, #3
 8015548:	440b      	add	r3, r1
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	4618      	mov	r0, r3
 801554e:	f7f6 f993 	bl	800b878 <pbuf_free>
      }
      arp_table[i].q = p;
 8015552:	7c7a      	ldrb	r2, [r7, #17]
 8015554:	490d      	ldr	r1, [pc, #52]	; (801558c <etharp_query+0x268>)
 8015556:	4613      	mov	r3, r2
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	4413      	add	r3, r2
 801555c:	00db      	lsls	r3, r3, #3
 801555e:	440b      	add	r3, r1
 8015560:	69fa      	ldr	r2, [r7, #28]
 8015562:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801556a:	e002      	b.n	8015572 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801556c:	23ff      	movs	r3, #255	; 0xff
 801556e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015572:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015576:	4618      	mov	r0, r3
 8015578:	3728      	adds	r7, #40	; 0x28
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
 801557e:	bf00      	nop
 8015580:	0801b55c 	.word	0x0801b55c
 8015584:	0801b708 	.word	0x0801b708
 8015588:	0801b5d4 	.word	0x0801b5d4
 801558c:	200109b0 	.word	0x200109b0
 8015590:	0801b718 	.word	0x0801b718
 8015594:	0801b6fc 	.word	0x0801b6fc
 8015598:	20010aa0 	.word	0x20010aa0
 801559c:	0801b740 	.word	0x0801b740

080155a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b08a      	sub	sp, #40	; 0x28
 80155a4:	af02      	add	r7, sp, #8
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	60b9      	str	r1, [r7, #8]
 80155aa:	607a      	str	r2, [r7, #4]
 80155ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80155ae:	2300      	movs	r3, #0
 80155b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d106      	bne.n	80155c6 <etharp_raw+0x26>
 80155b8:	4b3a      	ldr	r3, [pc, #232]	; (80156a4 <etharp_raw+0x104>)
 80155ba:	f240 4257 	movw	r2, #1111	; 0x457
 80155be:	493a      	ldr	r1, [pc, #232]	; (80156a8 <etharp_raw+0x108>)
 80155c0:	483a      	ldr	r0, [pc, #232]	; (80156ac <etharp_raw+0x10c>)
 80155c2:	f001 ff15 	bl	80173f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80155c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155ca:	211c      	movs	r1, #28
 80155cc:	200e      	movs	r0, #14
 80155ce:	f7f5 fe6f 	bl	800b2b0 <pbuf_alloc>
 80155d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d102      	bne.n	80155e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80155da:	f04f 33ff 	mov.w	r3, #4294967295
 80155de:	e05d      	b.n	801569c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	895b      	ldrh	r3, [r3, #10]
 80155e4:	2b1b      	cmp	r3, #27
 80155e6:	d806      	bhi.n	80155f6 <etharp_raw+0x56>
 80155e8:	4b2e      	ldr	r3, [pc, #184]	; (80156a4 <etharp_raw+0x104>)
 80155ea:	f240 4262 	movw	r2, #1122	; 0x462
 80155ee:	4930      	ldr	r1, [pc, #192]	; (80156b0 <etharp_raw+0x110>)
 80155f0:	482e      	ldr	r0, [pc, #184]	; (80156ac <etharp_raw+0x10c>)
 80155f2:	f001 fefd 	bl	80173f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80155f6:	69bb      	ldr	r3, [r7, #24]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80155fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80155fe:	4618      	mov	r0, r3
 8015600:	f7f4 fd3c 	bl	800a07c <lwip_htons>
 8015604:	4603      	mov	r3, r0
 8015606:	461a      	mov	r2, r3
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015612:	2b06      	cmp	r3, #6
 8015614:	d006      	beq.n	8015624 <etharp_raw+0x84>
 8015616:	4b23      	ldr	r3, [pc, #140]	; (80156a4 <etharp_raw+0x104>)
 8015618:	f240 4269 	movw	r2, #1129	; 0x469
 801561c:	4925      	ldr	r1, [pc, #148]	; (80156b4 <etharp_raw+0x114>)
 801561e:	4823      	ldr	r0, [pc, #140]	; (80156ac <etharp_raw+0x10c>)
 8015620:	f001 fee6 	bl	80173f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	3308      	adds	r3, #8
 8015628:	2206      	movs	r2, #6
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	4618      	mov	r0, r3
 801562e:	f002 f80f 	bl	8017650 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	3312      	adds	r3, #18
 8015636:	2206      	movs	r2, #6
 8015638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801563a:	4618      	mov	r0, r3
 801563c:	f002 f808 	bl	8017650 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	330e      	adds	r3, #14
 8015644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015646:	6812      	ldr	r2, [r2, #0]
 8015648:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	3318      	adds	r3, #24
 801564e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015650:	6812      	ldr	r2, [r2, #0]
 8015652:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2200      	movs	r2, #0
 8015658:	701a      	strb	r2, [r3, #0]
 801565a:	2200      	movs	r2, #0
 801565c:	f042 0201 	orr.w	r2, r2, #1
 8015660:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	2200      	movs	r2, #0
 8015666:	f042 0208 	orr.w	r2, r2, #8
 801566a:	709a      	strb	r2, [r3, #2]
 801566c:	2200      	movs	r2, #0
 801566e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	2206      	movs	r2, #6
 8015674:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	2204      	movs	r2, #4
 801567a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801567c:	f640 0306 	movw	r3, #2054	; 0x806
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	68ba      	ldr	r2, [r7, #8]
 8015686:	69b9      	ldr	r1, [r7, #24]
 8015688:	68f8      	ldr	r0, [r7, #12]
 801568a:	f001 fb99 	bl	8016dc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801568e:	69b8      	ldr	r0, [r7, #24]
 8015690:	f7f6 f8f2 	bl	800b878 <pbuf_free>
  p = NULL;
 8015694:	2300      	movs	r3, #0
 8015696:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015698:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801569c:	4618      	mov	r0, r3
 801569e:	3720      	adds	r7, #32
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	0801b55c 	.word	0x0801b55c
 80156a8:	0801b6ac 	.word	0x0801b6ac
 80156ac:	0801b5d4 	.word	0x0801b5d4
 80156b0:	0801b75c 	.word	0x0801b75c
 80156b4:	0801b790 	.word	0x0801b790

080156b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b088      	sub	sp, #32
 80156bc:	af04      	add	r7, sp, #16
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80156d4:	2201      	movs	r2, #1
 80156d6:	9203      	str	r2, [sp, #12]
 80156d8:	68ba      	ldr	r2, [r7, #8]
 80156da:	9202      	str	r2, [sp, #8]
 80156dc:	4a06      	ldr	r2, [pc, #24]	; (80156f8 <etharp_request_dst+0x40>)
 80156de:	9201      	str	r2, [sp, #4]
 80156e0:	9300      	str	r3, [sp, #0]
 80156e2:	4603      	mov	r3, r0
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	f7ff ff5a 	bl	80155a0 <etharp_raw>
 80156ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3710      	adds	r7, #16
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop
 80156f8:	0801bd78 	.word	0x0801bd78

080156fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015706:	4a05      	ldr	r2, [pc, #20]	; (801571c <etharp_request+0x20>)
 8015708:	6839      	ldr	r1, [r7, #0]
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f7ff ffd4 	bl	80156b8 <etharp_request_dst>
 8015710:	4603      	mov	r3, r0
}
 8015712:	4618      	mov	r0, r3
 8015714:	3708      	adds	r7, #8
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	0801bd70 	.word	0x0801bd70

08015720 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08e      	sub	sp, #56	; 0x38
 8015724:	af04      	add	r7, sp, #16
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801572a:	4b79      	ldr	r3, [pc, #484]	; (8015910 <icmp_input+0x1f0>)
 801572c:	689b      	ldr	r3, [r3, #8]
 801572e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	f003 030f 	and.w	r3, r3, #15
 8015738:	b2db      	uxtb	r3, r3
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	b2db      	uxtb	r3, r3
 801573e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015742:	2b13      	cmp	r3, #19
 8015744:	f240 80cd 	bls.w	80158e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	895b      	ldrh	r3, [r3, #10]
 801574c:	2b03      	cmp	r3, #3
 801574e:	f240 80ca 	bls.w	80158e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801575c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015760:	2b00      	cmp	r3, #0
 8015762:	f000 80b7 	beq.w	80158d4 <icmp_input+0x1b4>
 8015766:	2b08      	cmp	r3, #8
 8015768:	f040 80b7 	bne.w	80158da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801576c:	4b69      	ldr	r3, [pc, #420]	; (8015914 <icmp_input+0x1f4>)
 801576e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015770:	4b67      	ldr	r3, [pc, #412]	; (8015910 <icmp_input+0x1f0>)
 8015772:	695b      	ldr	r3, [r3, #20]
 8015774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015778:	2be0      	cmp	r3, #224	; 0xe0
 801577a:	f000 80bb 	beq.w	80158f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801577e:	4b64      	ldr	r3, [pc, #400]	; (8015910 <icmp_input+0x1f0>)
 8015780:	695b      	ldr	r3, [r3, #20]
 8015782:	4a63      	ldr	r2, [pc, #396]	; (8015910 <icmp_input+0x1f0>)
 8015784:	6812      	ldr	r2, [r2, #0]
 8015786:	4611      	mov	r1, r2
 8015788:	4618      	mov	r0, r3
 801578a:	f000 fc0b 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 801578e:	4603      	mov	r3, r0
 8015790:	2b00      	cmp	r3, #0
 8015792:	f040 80b1 	bne.w	80158f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	891b      	ldrh	r3, [r3, #8]
 801579a:	2b07      	cmp	r3, #7
 801579c:	f240 80a5 	bls.w	80158ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157a2:	330e      	adds	r3, #14
 80157a4:	4619      	mov	r1, r3
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f7f5 ffd0 	bl	800b74c <pbuf_add_header>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d04b      	beq.n	801584a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	891a      	ldrh	r2, [r3, #8]
 80157b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157b8:	4413      	add	r3, r2
 80157ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	891b      	ldrh	r3, [r3, #8]
 80157c0:	8b7a      	ldrh	r2, [r7, #26]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	f0c0 809a 	bcc.w	80158fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80157c8:	8b7b      	ldrh	r3, [r7, #26]
 80157ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157ce:	4619      	mov	r1, r3
 80157d0:	200e      	movs	r0, #14
 80157d2:	f7f5 fd6d 	bl	800b2b0 <pbuf_alloc>
 80157d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f000 8090 	beq.w	8015900 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	895b      	ldrh	r3, [r3, #10]
 80157e4:	461a      	mov	r2, r3
 80157e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157e8:	3308      	adds	r3, #8
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d203      	bcs.n	80157f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80157ee:	6978      	ldr	r0, [r7, #20]
 80157f0:	f7f6 f842 	bl	800b878 <pbuf_free>
          goto icmperr;
 80157f4:	e085      	b.n	8015902 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80157fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157fe:	4618      	mov	r0, r3
 8015800:	f001 ff26 	bl	8017650 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015806:	4619      	mov	r1, r3
 8015808:	6978      	ldr	r0, [r7, #20]
 801580a:	f7f5 ffaf 	bl	800b76c <pbuf_remove_header>
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d009      	beq.n	8015828 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015814:	4b40      	ldr	r3, [pc, #256]	; (8015918 <icmp_input+0x1f8>)
 8015816:	22b6      	movs	r2, #182	; 0xb6
 8015818:	4940      	ldr	r1, [pc, #256]	; (801591c <icmp_input+0x1fc>)
 801581a:	4841      	ldr	r0, [pc, #260]	; (8015920 <icmp_input+0x200>)
 801581c:	f001 fde8 	bl	80173f0 <iprintf>
          pbuf_free(r);
 8015820:	6978      	ldr	r0, [r7, #20]
 8015822:	f7f6 f829 	bl	800b878 <pbuf_free>
          goto icmperr;
 8015826:	e06c      	b.n	8015902 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015828:	6879      	ldr	r1, [r7, #4]
 801582a:	6978      	ldr	r0, [r7, #20]
 801582c:	f7f6 f958 	bl	800bae0 <pbuf_copy>
 8015830:	4603      	mov	r3, r0
 8015832:	2b00      	cmp	r3, #0
 8015834:	d003      	beq.n	801583e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015836:	6978      	ldr	r0, [r7, #20]
 8015838:	f7f6 f81e 	bl	800b878 <pbuf_free>
          goto icmperr;
 801583c:	e061      	b.n	8015902 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f7f6 f81a 	bl	800b878 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	607b      	str	r3, [r7, #4]
 8015848:	e00f      	b.n	801586a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801584a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801584c:	330e      	adds	r3, #14
 801584e:	4619      	mov	r1, r3
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7f5 ff8b 	bl	800b76c <pbuf_remove_header>
 8015856:	4603      	mov	r3, r0
 8015858:	2b00      	cmp	r3, #0
 801585a:	d006      	beq.n	801586a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801585c:	4b2e      	ldr	r3, [pc, #184]	; (8015918 <icmp_input+0x1f8>)
 801585e:	22c7      	movs	r2, #199	; 0xc7
 8015860:	4930      	ldr	r1, [pc, #192]	; (8015924 <icmp_input+0x204>)
 8015862:	482f      	ldr	r0, [pc, #188]	; (8015920 <icmp_input+0x200>)
 8015864:	f001 fdc4 	bl	80173f0 <iprintf>
          goto icmperr;
 8015868:	e04b      	b.n	8015902 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	685b      	ldr	r3, [r3, #4]
 801586e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015872:	4619      	mov	r1, r3
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f7f5 ff69 	bl	800b74c <pbuf_add_header>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	d12b      	bne.n	80158d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801588e:	4b20      	ldr	r3, [pc, #128]	; (8015910 <icmp_input+0x1f0>)
 8015890:	691a      	ldr	r2, [r3, #16]
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	2200      	movs	r2, #0
 801589a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801589c:	693b      	ldr	r3, [r7, #16]
 801589e:	2200      	movs	r2, #0
 80158a0:	709a      	strb	r2, [r3, #2]
 80158a2:	2200      	movs	r2, #0
 80158a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	22ff      	movs	r2, #255	; 0xff
 80158aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	2200      	movs	r2, #0
 80158b0:	729a      	strb	r2, [r3, #10]
 80158b2:	2200      	movs	r2, #0
 80158b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	9302      	str	r3, [sp, #8]
 80158ba:	2301      	movs	r3, #1
 80158bc:	9301      	str	r3, [sp, #4]
 80158be:	2300      	movs	r3, #0
 80158c0:	9300      	str	r3, [sp, #0]
 80158c2:	23ff      	movs	r3, #255	; 0xff
 80158c4:	2200      	movs	r2, #0
 80158c6:	69f9      	ldr	r1, [r7, #28]
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f000 fa93 	bl	8015df4 <ip4_output_if>
 80158ce:	4603      	mov	r3, r0
 80158d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80158d2:	e001      	b.n	80158d8 <icmp_input+0x1b8>
      break;
 80158d4:	bf00      	nop
 80158d6:	e000      	b.n	80158da <icmp_input+0x1ba>
      break;
 80158d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f7f5 ffcc 	bl	800b878 <pbuf_free>
  return;
 80158e0:	e013      	b.n	801590a <icmp_input+0x1ea>
    goto lenerr;
 80158e2:	bf00      	nop
 80158e4:	e002      	b.n	80158ec <icmp_input+0x1cc>
    goto lenerr;
 80158e6:	bf00      	nop
 80158e8:	e000      	b.n	80158ec <icmp_input+0x1cc>
        goto lenerr;
 80158ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7f5 ffc3 	bl	800b878 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158f2:	e00a      	b.n	801590a <icmp_input+0x1ea>
        goto icmperr;
 80158f4:	bf00      	nop
 80158f6:	e004      	b.n	8015902 <icmp_input+0x1e2>
        goto icmperr;
 80158f8:	bf00      	nop
 80158fa:	e002      	b.n	8015902 <icmp_input+0x1e2>
          goto icmperr;
 80158fc:	bf00      	nop
 80158fe:	e000      	b.n	8015902 <icmp_input+0x1e2>
          goto icmperr;
 8015900:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f7f5 ffb8 	bl	800b878 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015908:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801590a:	3728      	adds	r7, #40	; 0x28
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	2000d1a8 	.word	0x2000d1a8
 8015914:	2000d1bc 	.word	0x2000d1bc
 8015918:	0801b7d4 	.word	0x0801b7d4
 801591c:	0801b80c 	.word	0x0801b80c
 8015920:	0801b844 	.word	0x0801b844
 8015924:	0801b86c 	.word	0x0801b86c

08015928 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b082      	sub	sp, #8
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	460b      	mov	r3, r1
 8015932:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015934:	78fb      	ldrb	r3, [r7, #3]
 8015936:	461a      	mov	r2, r3
 8015938:	2103      	movs	r1, #3
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f000 f814 	bl	8015968 <icmp_send_response>
}
 8015940:	bf00      	nop
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	460b      	mov	r3, r1
 8015952:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015954:	78fb      	ldrb	r3, [r7, #3]
 8015956:	461a      	mov	r2, r3
 8015958:	210b      	movs	r1, #11
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f000 f804 	bl	8015968 <icmp_send_response>
}
 8015960:	bf00      	nop
 8015962:	3708      	adds	r7, #8
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b08c      	sub	sp, #48	; 0x30
 801596c:	af04      	add	r7, sp, #16
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	460b      	mov	r3, r1
 8015972:	70fb      	strb	r3, [r7, #3]
 8015974:	4613      	mov	r3, r2
 8015976:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015978:	f44f 7220 	mov.w	r2, #640	; 0x280
 801597c:	2124      	movs	r1, #36	; 0x24
 801597e:	2022      	movs	r0, #34	; 0x22
 8015980:	f7f5 fc96 	bl	800b2b0 <pbuf_alloc>
 8015984:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d04c      	beq.n	8015a26 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	895b      	ldrh	r3, [r3, #10]
 8015990:	2b23      	cmp	r3, #35	; 0x23
 8015992:	d806      	bhi.n	80159a2 <icmp_send_response+0x3a>
 8015994:	4b26      	ldr	r3, [pc, #152]	; (8015a30 <icmp_send_response+0xc8>)
 8015996:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801599a:	4926      	ldr	r1, [pc, #152]	; (8015a34 <icmp_send_response+0xcc>)
 801599c:	4826      	ldr	r0, [pc, #152]	; (8015a38 <icmp_send_response+0xd0>)
 801599e:	f001 fd27 	bl	80173f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	78fa      	ldrb	r2, [r7, #3]
 80159b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	78ba      	ldrb	r2, [r7, #2]
 80159b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	2200      	movs	r2, #0
 80159be:	711a      	strb	r2, [r3, #4]
 80159c0:	2200      	movs	r2, #0
 80159c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	2200      	movs	r2, #0
 80159c8:	719a      	strb	r2, [r3, #6]
 80159ca:	2200      	movs	r2, #0
 80159cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80159ce:	69fb      	ldr	r3, [r7, #28]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	f103 0008 	add.w	r0, r3, #8
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	685b      	ldr	r3, [r3, #4]
 80159da:	221c      	movs	r2, #28
 80159dc:	4619      	mov	r1, r3
 80159de:	f001 fe37 	bl	8017650 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80159e8:	f107 030c 	add.w	r3, r7, #12
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 f825 	bl	8015a3c <ip4_route>
 80159f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d011      	beq.n	8015a1e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	2200      	movs	r2, #0
 80159fe:	709a      	strb	r2, [r3, #2]
 8015a00:	2200      	movs	r2, #0
 8015a02:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015a04:	f107 020c 	add.w	r2, r7, #12
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	9302      	str	r3, [sp, #8]
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	9301      	str	r3, [sp, #4]
 8015a10:	2300      	movs	r3, #0
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	23ff      	movs	r3, #255	; 0xff
 8015a16:	2100      	movs	r1, #0
 8015a18:	69f8      	ldr	r0, [r7, #28]
 8015a1a:	f000 f9eb 	bl	8015df4 <ip4_output_if>
  }
  pbuf_free(q);
 8015a1e:	69f8      	ldr	r0, [r7, #28]
 8015a20:	f7f5 ff2a 	bl	800b878 <pbuf_free>
 8015a24:	e000      	b.n	8015a28 <icmp_send_response+0xc0>
    return;
 8015a26:	bf00      	nop
}
 8015a28:	3720      	adds	r7, #32
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	0801b7d4 	.word	0x0801b7d4
 8015a34:	0801b8a0 	.word	0x0801b8a0
 8015a38:	0801b844 	.word	0x0801b844

08015a3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015a44:	4b33      	ldr	r3, [pc, #204]	; (8015b14 <ip4_route+0xd8>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60fb      	str	r3, [r7, #12]
 8015a4a:	e036      	b.n	8015aba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a52:	f003 0301 	and.w	r3, r3, #1
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d02b      	beq.n	8015ab4 <ip4_route+0x78>
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a62:	089b      	lsrs	r3, r3, #2
 8015a64:	f003 0301 	and.w	r3, r3, #1
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d022      	beq.n	8015ab4 <ip4_route+0x78>
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	3304      	adds	r3, #4
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d01d      	beq.n	8015ab4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	3304      	adds	r3, #4
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	405a      	eors	r2, r3
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	3308      	adds	r3, #8
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d101      	bne.n	8015a94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	e038      	b.n	8015b06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a9a:	f003 0302 	and.w	r3, r3, #2
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d108      	bne.n	8015ab4 <ip4_route+0x78>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	330c      	adds	r3, #12
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d101      	bne.n	8015ab4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	e028      	b.n	8015b06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1c5      	bne.n	8015a4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ac0:	4b15      	ldr	r3, [pc, #84]	; (8015b18 <ip4_route+0xdc>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d01a      	beq.n	8015afe <ip4_route+0xc2>
 8015ac8:	4b13      	ldr	r3, [pc, #76]	; (8015b18 <ip4_route+0xdc>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ad0:	f003 0301 	and.w	r3, r3, #1
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d012      	beq.n	8015afe <ip4_route+0xc2>
 8015ad8:	4b0f      	ldr	r3, [pc, #60]	; (8015b18 <ip4_route+0xdc>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ae0:	f003 0304 	and.w	r3, r3, #4
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00a      	beq.n	8015afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ae8:	4b0b      	ldr	r3, [pc, #44]	; (8015b18 <ip4_route+0xdc>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	3304      	adds	r3, #4
 8015aee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d004      	beq.n	8015afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	2b7f      	cmp	r3, #127	; 0x7f
 8015afc:	d101      	bne.n	8015b02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	e001      	b.n	8015b06 <ip4_route+0xca>
  }

  return netif_default;
 8015b02:	4b05      	ldr	r3, [pc, #20]	; (8015b18 <ip4_route+0xdc>)
 8015b04:	681b      	ldr	r3, [r3, #0]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3714      	adds	r7, #20
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop
 8015b14:	20010910 	.word	0x20010910
 8015b18:	20010914 	.word	0x20010914

08015b1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b2a:	f003 0301 	and.w	r3, r3, #1
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d016      	beq.n	8015b62 <ip4_input_accept+0x46>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	3304      	adds	r3, #4
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d011      	beq.n	8015b62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b3e:	4b0b      	ldr	r3, [pc, #44]	; (8015b6c <ip4_input_accept+0x50>)
 8015b40:	695a      	ldr	r2, [r3, #20]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	3304      	adds	r3, #4
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d008      	beq.n	8015b5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015b4c:	4b07      	ldr	r3, [pc, #28]	; (8015b6c <ip4_input_accept+0x50>)
 8015b4e:	695b      	ldr	r3, [r3, #20]
 8015b50:	6879      	ldr	r1, [r7, #4]
 8015b52:	4618      	mov	r0, r3
 8015b54:	f000 fa26 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8015b58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d001      	beq.n	8015b62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015b5e:	2301      	movs	r3, #1
 8015b60:	e000      	b.n	8015b64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015b62:	2300      	movs	r3, #0
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	2000d1a8 	.word	0x2000d1a8

08015b70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b088      	sub	sp, #32
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	091b      	lsrs	r3, r3, #4
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	2b04      	cmp	r3, #4
 8015b8e:	d004      	beq.n	8015b9a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7f5 fe71 	bl	800b878 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	e123      	b.n	8015de2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	f003 030f 	and.w	r3, r3, #15
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	885b      	ldrh	r3, [r3, #2]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f4 fa63 	bl	800a07c <lwip_htons>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	891b      	ldrh	r3, [r3, #8]
 8015bbe:	8a3a      	ldrh	r2, [r7, #16]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d204      	bcs.n	8015bce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015bc4:	8a3b      	ldrh	r3, [r7, #16]
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7f5 fccf 	bl	800b56c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	895b      	ldrh	r3, [r3, #10]
 8015bd2:	8a7a      	ldrh	r2, [r7, #18]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d807      	bhi.n	8015be8 <ip4_input+0x78>
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	891b      	ldrh	r3, [r3, #8]
 8015bdc:	8a3a      	ldrh	r2, [r7, #16]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d802      	bhi.n	8015be8 <ip4_input+0x78>
 8015be2:	8a7b      	ldrh	r3, [r7, #18]
 8015be4:	2b13      	cmp	r3, #19
 8015be6:	d804      	bhi.n	8015bf2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7f5 fe45 	bl	800b878 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	e0f7      	b.n	8015de2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	691b      	ldr	r3, [r3, #16]
 8015bf6:	4a7d      	ldr	r2, [pc, #500]	; (8015dec <ip4_input+0x27c>)
 8015bf8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	4a7b      	ldr	r2, [pc, #492]	; (8015dec <ip4_input+0x27c>)
 8015c00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c02:	4b7a      	ldr	r3, [pc, #488]	; (8015dec <ip4_input+0x27c>)
 8015c04:	695b      	ldr	r3, [r3, #20]
 8015c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c0a:	2be0      	cmp	r3, #224	; 0xe0
 8015c0c:	d112      	bne.n	8015c34 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015c14:	f003 0301 	and.w	r3, r3, #1
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d007      	beq.n	8015c2e <ip4_input+0xbe>
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	3304      	adds	r3, #4
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d002      	beq.n	8015c2e <ip4_input+0xbe>
      netif = inp;
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	61bb      	str	r3, [r7, #24]
 8015c2c:	e02a      	b.n	8015c84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	61bb      	str	r3, [r7, #24]
 8015c32:	e027      	b.n	8015c84 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015c34:	6838      	ldr	r0, [r7, #0]
 8015c36:	f7ff ff71 	bl	8015b1c <ip4_input_accept>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d002      	beq.n	8015c46 <ip4_input+0xd6>
      netif = inp;
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	61bb      	str	r3, [r7, #24]
 8015c44:	e01e      	b.n	8015c84 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015c4a:	4b68      	ldr	r3, [pc, #416]	; (8015dec <ip4_input+0x27c>)
 8015c4c:	695b      	ldr	r3, [r3, #20]
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b7f      	cmp	r3, #127	; 0x7f
 8015c52:	d017      	beq.n	8015c84 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015c54:	4b66      	ldr	r3, [pc, #408]	; (8015df0 <ip4_input+0x280>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	61bb      	str	r3, [r7, #24]
 8015c5a:	e00e      	b.n	8015c7a <ip4_input+0x10a>
          if (netif == inp) {
 8015c5c:	69ba      	ldr	r2, [r7, #24]
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d006      	beq.n	8015c72 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015c64:	69b8      	ldr	r0, [r7, #24]
 8015c66:	f7ff ff59 	bl	8015b1c <ip4_input_accept>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d108      	bne.n	8015c82 <ip4_input+0x112>
 8015c70:	e000      	b.n	8015c74 <ip4_input+0x104>
            continue;
 8015c72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015c74:	69bb      	ldr	r3, [r7, #24]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	61bb      	str	r3, [r7, #24]
 8015c7a:	69bb      	ldr	r3, [r7, #24]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1ed      	bne.n	8015c5c <ip4_input+0xec>
 8015c80:	e000      	b.n	8015c84 <ip4_input+0x114>
            break;
 8015c82:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015c84:	69bb      	ldr	r3, [r7, #24]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d111      	bne.n	8015cae <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015c8a:	69fb      	ldr	r3, [r7, #28]
 8015c8c:	7a5b      	ldrb	r3, [r3, #9]
 8015c8e:	2b11      	cmp	r3, #17
 8015c90:	d10d      	bne.n	8015cae <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015c92:	8a7b      	ldrh	r3, [r7, #18]
 8015c94:	69fa      	ldr	r2, [r7, #28]
 8015c96:	4413      	add	r3, r2
 8015c98:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	885b      	ldrh	r3, [r3, #2]
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015ca4:	d103      	bne.n	8015cae <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015caa:	2300      	movs	r3, #0
 8015cac:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d017      	beq.n	8015ce4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015cb4:	4b4d      	ldr	r3, [pc, #308]	; (8015dec <ip4_input+0x27c>)
 8015cb6:	691b      	ldr	r3, [r3, #16]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d013      	beq.n	8015ce4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cbc:	4b4b      	ldr	r3, [pc, #300]	; (8015dec <ip4_input+0x27c>)
 8015cbe:	691b      	ldr	r3, [r3, #16]
 8015cc0:	6839      	ldr	r1, [r7, #0]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 f96e 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d105      	bne.n	8015cda <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015cce:	4b47      	ldr	r3, [pc, #284]	; (8015dec <ip4_input+0x27c>)
 8015cd0:	691b      	ldr	r3, [r3, #16]
 8015cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cd6:	2be0      	cmp	r3, #224	; 0xe0
 8015cd8:	d104      	bne.n	8015ce4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f7f5 fdcc 	bl	800b878 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	e07e      	b.n	8015de2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d104      	bne.n	8015cf4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7f5 fdc4 	bl	800b878 <pbuf_free>
    return ERR_OK;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	e076      	b.n	8015de2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	88db      	ldrh	r3, [r3, #6]
 8015cf8:	b29b      	uxth	r3, r3
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015d00:	4013      	ands	r3, r2
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d00b      	beq.n	8015d1e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 fc92 	bl	8016630 <ip4_reass>
 8015d0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d101      	bne.n	8015d18 <ip4_input+0x1a8>
      return ERR_OK;
 8015d14:	2300      	movs	r3, #0
 8015d16:	e064      	b.n	8015de2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015d1e:	4a33      	ldr	r2, [pc, #204]	; (8015dec <ip4_input+0x27c>)
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015d24:	4a31      	ldr	r2, [pc, #196]	; (8015dec <ip4_input+0x27c>)
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015d2a:	4a30      	ldr	r2, [pc, #192]	; (8015dec <ip4_input+0x27c>)
 8015d2c:	69fb      	ldr	r3, [r7, #28]
 8015d2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	f003 030f 	and.w	r3, r3, #15
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	4b2a      	ldr	r3, [pc, #168]	; (8015dec <ip4_input+0x27c>)
 8015d42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015d44:	8a7b      	ldrh	r3, [r7, #18]
 8015d46:	4619      	mov	r1, r3
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f7f5 fd0f 	bl	800b76c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	7a5b      	ldrb	r3, [r3, #9]
 8015d52:	2b11      	cmp	r3, #17
 8015d54:	d006      	beq.n	8015d64 <ip4_input+0x1f4>
 8015d56:	2b11      	cmp	r3, #17
 8015d58:	dc13      	bgt.n	8015d82 <ip4_input+0x212>
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d00c      	beq.n	8015d78 <ip4_input+0x208>
 8015d5e:	2b06      	cmp	r3, #6
 8015d60:	d005      	beq.n	8015d6e <ip4_input+0x1fe>
 8015d62:	e00e      	b.n	8015d82 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f7fc fade 	bl	8012328 <udp_input>
        break;
 8015d6c:	e026      	b.n	8015dbc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015d6e:	6839      	ldr	r1, [r7, #0]
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f7f7 fe97 	bl	800daa4 <tcp_input>
        break;
 8015d76:	e021      	b.n	8015dbc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015d78:	6839      	ldr	r1, [r7, #0]
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff fcd0 	bl	8015720 <icmp_input>
        break;
 8015d80:	e01c      	b.n	8015dbc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d82:	4b1a      	ldr	r3, [pc, #104]	; (8015dec <ip4_input+0x27c>)
 8015d84:	695b      	ldr	r3, [r3, #20]
 8015d86:	69b9      	ldr	r1, [r7, #24]
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f000 f90b 	bl	8015fa4 <ip4_addr_isbroadcast_u32>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10f      	bne.n	8015db4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d94:	4b15      	ldr	r3, [pc, #84]	; (8015dec <ip4_input+0x27c>)
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d9c:	2be0      	cmp	r3, #224	; 0xe0
 8015d9e:	d009      	beq.n	8015db4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015da0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015da4:	4619      	mov	r1, r3
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f7f5 fd53 	bl	800b852 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015dac:	2102      	movs	r1, #2
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f7ff fdba 	bl	8015928 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7f5 fd5f 	bl	800b878 <pbuf_free>
        break;
 8015dba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015dbc:	4b0b      	ldr	r3, [pc, #44]	; (8015dec <ip4_input+0x27c>)
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015dc2:	4b0a      	ldr	r3, [pc, #40]	; (8015dec <ip4_input+0x27c>)
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015dc8:	4b08      	ldr	r3, [pc, #32]	; (8015dec <ip4_input+0x27c>)
 8015dca:	2200      	movs	r2, #0
 8015dcc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015dce:	4b07      	ldr	r3, [pc, #28]	; (8015dec <ip4_input+0x27c>)
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015dd4:	4b05      	ldr	r3, [pc, #20]	; (8015dec <ip4_input+0x27c>)
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015dda:	4b04      	ldr	r3, [pc, #16]	; (8015dec <ip4_input+0x27c>)
 8015ddc:	2200      	movs	r2, #0
 8015dde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015de0:	2300      	movs	r3, #0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3720      	adds	r7, #32
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}
 8015dea:	bf00      	nop
 8015dec:	2000d1a8 	.word	0x2000d1a8
 8015df0:	20010910 	.word	0x20010910

08015df4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b08a      	sub	sp, #40	; 0x28
 8015df8:	af04      	add	r7, sp, #16
 8015dfa:	60f8      	str	r0, [r7, #12]
 8015dfc:	60b9      	str	r1, [r7, #8]
 8015dfe:	607a      	str	r2, [r7, #4]
 8015e00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d009      	beq.n	8015e20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d003      	beq.n	8015e1a <ip4_output_if+0x26>
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d102      	bne.n	8015e20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015e20:	78fa      	ldrb	r2, [r7, #3]
 8015e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e24:	9302      	str	r3, [sp, #8]
 8015e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e2a:	9301      	str	r3, [sp, #4]
 8015e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	4613      	mov	r3, r2
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	6979      	ldr	r1, [r7, #20]
 8015e38:	68f8      	ldr	r0, [r7, #12]
 8015e3a:	f000 f805 	bl	8015e48 <ip4_output_if_src>
 8015e3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3718      	adds	r7, #24
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b088      	sub	sp, #32
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	60f8      	str	r0, [r7, #12]
 8015e50:	60b9      	str	r1, [r7, #8]
 8015e52:	607a      	str	r2, [r7, #4]
 8015e54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	7b9b      	ldrb	r3, [r3, #14]
 8015e5a:	2b01      	cmp	r3, #1
 8015e5c:	d006      	beq.n	8015e6c <ip4_output_if_src+0x24>
 8015e5e:	4b4b      	ldr	r3, [pc, #300]	; (8015f8c <ip4_output_if_src+0x144>)
 8015e60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015e64:	494a      	ldr	r1, [pc, #296]	; (8015f90 <ip4_output_if_src+0x148>)
 8015e66:	484b      	ldr	r0, [pc, #300]	; (8015f94 <ip4_output_if_src+0x14c>)
 8015e68:	f001 fac2 	bl	80173f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d060      	beq.n	8015f34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015e72:	2314      	movs	r3, #20
 8015e74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015e76:	2114      	movs	r1, #20
 8015e78:	68f8      	ldr	r0, [r7, #12]
 8015e7a:	f7f5 fc67 	bl	800b74c <pbuf_add_header>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d002      	beq.n	8015e8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e84:	f06f 0301 	mvn.w	r3, #1
 8015e88:	e07c      	b.n	8015f84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	895b      	ldrh	r3, [r3, #10]
 8015e94:	2b13      	cmp	r3, #19
 8015e96:	d806      	bhi.n	8015ea6 <ip4_output_if_src+0x5e>
 8015e98:	4b3c      	ldr	r3, [pc, #240]	; (8015f8c <ip4_output_if_src+0x144>)
 8015e9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015e9e:	493e      	ldr	r1, [pc, #248]	; (8015f98 <ip4_output_if_src+0x150>)
 8015ea0:	483c      	ldr	r0, [pc, #240]	; (8015f94 <ip4_output_if_src+0x14c>)
 8015ea2:	f001 faa5 	bl	80173f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	78fa      	ldrb	r2, [r7, #3]
 8015eaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015eb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	69fb      	ldr	r3, [r7, #28]
 8015eba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015ebc:	8b7b      	ldrh	r3, [r7, #26]
 8015ebe:	089b      	lsrs	r3, r3, #2
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ec8:	b2da      	uxtb	r2, r3
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015ed4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	891b      	ldrh	r3, [r3, #8]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7f4 f8ce 	bl	800a07c <lwip_htons>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	69fb      	ldr	r3, [r7, #28]
 8015ee6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	2200      	movs	r2, #0
 8015eec:	719a      	strb	r2, [r3, #6]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015ef2:	4b2a      	ldr	r3, [pc, #168]	; (8015f9c <ip4_output_if_src+0x154>)
 8015ef4:	881b      	ldrh	r3, [r3, #0]
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7f4 f8c0 	bl	800a07c <lwip_htons>
 8015efc:	4603      	mov	r3, r0
 8015efe:	461a      	mov	r2, r3
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015f04:	4b25      	ldr	r3, [pc, #148]	; (8015f9c <ip4_output_if_src+0x154>)
 8015f06:	881b      	ldrh	r3, [r3, #0]
 8015f08:	3301      	adds	r3, #1
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	4b23      	ldr	r3, [pc, #140]	; (8015f9c <ip4_output_if_src+0x154>)
 8015f0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d104      	bne.n	8015f20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015f16:	4b22      	ldr	r3, [pc, #136]	; (8015fa0 <ip4_output_if_src+0x158>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	69fb      	ldr	r3, [r7, #28]
 8015f1c:	60da      	str	r2, [r3, #12]
 8015f1e:	e003      	b.n	8015f28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	681a      	ldr	r2, [r3, #0]
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	729a      	strb	r2, [r3, #10]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	72da      	strb	r2, [r3, #11]
 8015f32:	e00f      	b.n	8015f54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	895b      	ldrh	r3, [r3, #10]
 8015f38:	2b13      	cmp	r3, #19
 8015f3a:	d802      	bhi.n	8015f42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015f3c:	f06f 0301 	mvn.w	r3, #1
 8015f40:	e020      	b.n	8015f84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	691b      	ldr	r3, [r3, #16]
 8015f4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015f4e:	f107 0314 	add.w	r3, r7, #20
 8015f52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d00c      	beq.n	8015f76 <ip4_output_if_src+0x12e>
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	891a      	ldrh	r2, [r3, #8]
 8015f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d906      	bls.n	8015f76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f000 fd53 	bl	8016a18 <ip4_frag>
 8015f72:	4603      	mov	r3, r0
 8015f74:	e006      	b.n	8015f84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f78:	695b      	ldr	r3, [r3, #20]
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	68f9      	ldr	r1, [r7, #12]
 8015f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f80:	4798      	blx	r3
 8015f82:	4603      	mov	r3, r0
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3720      	adds	r7, #32
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}
 8015f8c:	0801b8cc 	.word	0x0801b8cc
 8015f90:	0801b900 	.word	0x0801b900
 8015f94:	0801b90c 	.word	0x0801b90c
 8015f98:	0801b934 	.word	0x0801b934
 8015f9c:	20010aa2 	.word	0x20010aa2
 8015fa0:	0801bd68 	.word	0x0801bd68

08015fa4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b085      	sub	sp, #20
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fb8:	d002      	beq.n	8015fc0 <ip4_addr_isbroadcast_u32+0x1c>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d101      	bne.n	8015fc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	e02a      	b.n	801601a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015fca:	f003 0302 	and.w	r3, r3, #2
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d101      	bne.n	8015fd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	e021      	b.n	801601a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	3304      	adds	r3, #4
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	687a      	ldr	r2, [r7, #4]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d101      	bne.n	8015fe6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e019      	b.n	801601a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015fe6:	68fa      	ldr	r2, [r7, #12]
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	3304      	adds	r3, #4
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	405a      	eors	r2, r3
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	3308      	adds	r3, #8
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	4013      	ands	r3, r2
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10d      	bne.n	8016018 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	3308      	adds	r3, #8
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	43da      	mvns	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016008:	683b      	ldr	r3, [r7, #0]
 801600a:	3308      	adds	r3, #8
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016010:	429a      	cmp	r2, r3
 8016012:	d101      	bne.n	8016018 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016014:	2301      	movs	r3, #1
 8016016:	e000      	b.n	801601a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016018:	2300      	movs	r3, #0
  }
}
 801601a:	4618      	mov	r0, r3
 801601c:	3714      	adds	r7, #20
 801601e:	46bd      	mov	sp, r7
 8016020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016024:	4770      	bx	lr
	...

08016028 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801602e:	2300      	movs	r3, #0
 8016030:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016032:	4b12      	ldr	r3, [pc, #72]	; (801607c <ip_reass_tmr+0x54>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016038:	e018      	b.n	801606c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	7fdb      	ldrb	r3, [r3, #31]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d00b      	beq.n	801605a <ip_reass_tmr+0x32>
      r->timer--;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	7fdb      	ldrb	r3, [r3, #31]
 8016046:	3b01      	subs	r3, #1
 8016048:	b2da      	uxtb	r2, r3
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	60fb      	str	r3, [r7, #12]
 8016058:	e008      	b.n	801606c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016064:	68b9      	ldr	r1, [r7, #8]
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f000 f80a 	bl	8016080 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1e3      	bne.n	801603a <ip_reass_tmr+0x12>
    }
  }
}
 8016072:	bf00      	nop
 8016074:	bf00      	nop
 8016076:	3710      	adds	r7, #16
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	20010aa4 	.word	0x20010aa4

08016080 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b088      	sub	sp, #32
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801608a:	2300      	movs	r3, #0
 801608c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	429a      	cmp	r2, r3
 8016094:	d105      	bne.n	80160a2 <ip_reass_free_complete_datagram+0x22>
 8016096:	4b45      	ldr	r3, [pc, #276]	; (80161ac <ip_reass_free_complete_datagram+0x12c>)
 8016098:	22ab      	movs	r2, #171	; 0xab
 801609a:	4945      	ldr	r1, [pc, #276]	; (80161b0 <ip_reass_free_complete_datagram+0x130>)
 801609c:	4845      	ldr	r0, [pc, #276]	; (80161b4 <ip_reass_free_complete_datagram+0x134>)
 801609e:	f001 f9a7 	bl	80173f0 <iprintf>
  if (prev != NULL) {
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d00a      	beq.n	80160be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d005      	beq.n	80160be <ip_reass_free_complete_datagram+0x3e>
 80160b2:	4b3e      	ldr	r3, [pc, #248]	; (80161ac <ip_reass_free_complete_datagram+0x12c>)
 80160b4:	22ad      	movs	r2, #173	; 0xad
 80160b6:	4940      	ldr	r1, [pc, #256]	; (80161b8 <ip_reass_free_complete_datagram+0x138>)
 80160b8:	483e      	ldr	r0, [pc, #248]	; (80161b4 <ip_reass_free_complete_datagram+0x134>)
 80160ba:	f001 f999 	bl	80173f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	889b      	ldrh	r3, [r3, #4]
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d12a      	bne.n	8016126 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	6858      	ldr	r0, [r3, #4]
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	3308      	adds	r3, #8
 80160e6:	2214      	movs	r2, #20
 80160e8:	4619      	mov	r1, r3
 80160ea:	f001 fab1 	bl	8017650 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80160ee:	2101      	movs	r1, #1
 80160f0:	69b8      	ldr	r0, [r7, #24]
 80160f2:	f7ff fc29 	bl	8015948 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80160f6:	69b8      	ldr	r0, [r7, #24]
 80160f8:	f7f5 fc4c 	bl	800b994 <pbuf_clen>
 80160fc:	4603      	mov	r3, r0
 80160fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016100:	8bfa      	ldrh	r2, [r7, #30]
 8016102:	8a7b      	ldrh	r3, [r7, #18]
 8016104:	4413      	add	r3, r2
 8016106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801610a:	db05      	blt.n	8016118 <ip_reass_free_complete_datagram+0x98>
 801610c:	4b27      	ldr	r3, [pc, #156]	; (80161ac <ip_reass_free_complete_datagram+0x12c>)
 801610e:	22bc      	movs	r2, #188	; 0xbc
 8016110:	492a      	ldr	r1, [pc, #168]	; (80161bc <ip_reass_free_complete_datagram+0x13c>)
 8016112:	4828      	ldr	r0, [pc, #160]	; (80161b4 <ip_reass_free_complete_datagram+0x134>)
 8016114:	f001 f96c 	bl	80173f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016118:	8bfa      	ldrh	r2, [r7, #30]
 801611a:	8a7b      	ldrh	r3, [r7, #18]
 801611c:	4413      	add	r3, r2
 801611e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016120:	69b8      	ldr	r0, [r7, #24]
 8016122:	f7f5 fba9 	bl	800b878 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801612c:	e01f      	b.n	801616e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801612e:	69bb      	ldr	r3, [r7, #24]
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016138:	697b      	ldr	r3, [r7, #20]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	f7f5 fc28 	bl	800b994 <pbuf_clen>
 8016144:	4603      	mov	r3, r0
 8016146:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016148:	8bfa      	ldrh	r2, [r7, #30]
 801614a:	8a7b      	ldrh	r3, [r7, #18]
 801614c:	4413      	add	r3, r2
 801614e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016152:	db05      	blt.n	8016160 <ip_reass_free_complete_datagram+0xe0>
 8016154:	4b15      	ldr	r3, [pc, #84]	; (80161ac <ip_reass_free_complete_datagram+0x12c>)
 8016156:	22cc      	movs	r2, #204	; 0xcc
 8016158:	4918      	ldr	r1, [pc, #96]	; (80161bc <ip_reass_free_complete_datagram+0x13c>)
 801615a:	4816      	ldr	r0, [pc, #88]	; (80161b4 <ip_reass_free_complete_datagram+0x134>)
 801615c:	f001 f948 	bl	80173f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016160:	8bfa      	ldrh	r2, [r7, #30]
 8016162:	8a7b      	ldrh	r3, [r7, #18]
 8016164:	4413      	add	r3, r2
 8016166:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f7f5 fb85 	bl	800b878 <pbuf_free>
  while (p != NULL) {
 801616e:	69bb      	ldr	r3, [r7, #24]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d1dc      	bne.n	801612e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016174:	6839      	ldr	r1, [r7, #0]
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f000 f8c2 	bl	8016300 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801617c:	4b10      	ldr	r3, [pc, #64]	; (80161c0 <ip_reass_free_complete_datagram+0x140>)
 801617e:	881b      	ldrh	r3, [r3, #0]
 8016180:	8bfa      	ldrh	r2, [r7, #30]
 8016182:	429a      	cmp	r2, r3
 8016184:	d905      	bls.n	8016192 <ip_reass_free_complete_datagram+0x112>
 8016186:	4b09      	ldr	r3, [pc, #36]	; (80161ac <ip_reass_free_complete_datagram+0x12c>)
 8016188:	22d2      	movs	r2, #210	; 0xd2
 801618a:	490e      	ldr	r1, [pc, #56]	; (80161c4 <ip_reass_free_complete_datagram+0x144>)
 801618c:	4809      	ldr	r0, [pc, #36]	; (80161b4 <ip_reass_free_complete_datagram+0x134>)
 801618e:	f001 f92f 	bl	80173f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016192:	4b0b      	ldr	r3, [pc, #44]	; (80161c0 <ip_reass_free_complete_datagram+0x140>)
 8016194:	881a      	ldrh	r2, [r3, #0]
 8016196:	8bfb      	ldrh	r3, [r7, #30]
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	b29a      	uxth	r2, r3
 801619c:	4b08      	ldr	r3, [pc, #32]	; (80161c0 <ip_reass_free_complete_datagram+0x140>)
 801619e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80161a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3720      	adds	r7, #32
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	0801b964 	.word	0x0801b964
 80161b0:	0801b9a0 	.word	0x0801b9a0
 80161b4:	0801b9ac 	.word	0x0801b9ac
 80161b8:	0801b9d4 	.word	0x0801b9d4
 80161bc:	0801b9e8 	.word	0x0801b9e8
 80161c0:	20010aa8 	.word	0x20010aa8
 80161c4:	0801ba08 	.word	0x0801ba08

080161c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08a      	sub	sp, #40	; 0x28
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80161d2:	2300      	movs	r3, #0
 80161d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80161d6:	2300      	movs	r3, #0
 80161d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80161da:	2300      	movs	r3, #0
 80161dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80161de:	2300      	movs	r3, #0
 80161e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80161e2:	2300      	movs	r3, #0
 80161e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80161e6:	4b28      	ldr	r3, [pc, #160]	; (8016288 <ip_reass_remove_oldest_datagram+0xc0>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80161ec:	e030      	b.n	8016250 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80161ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f0:	695a      	ldr	r2, [r3, #20]
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d10c      	bne.n	8016214 <ip_reass_remove_oldest_datagram+0x4c>
 80161fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fc:	699a      	ldr	r2, [r3, #24]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	691b      	ldr	r3, [r3, #16]
 8016202:	429a      	cmp	r2, r3
 8016204:	d106      	bne.n	8016214 <ip_reass_remove_oldest_datagram+0x4c>
 8016206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016208:	899a      	ldrh	r2, [r3, #12]
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	889b      	ldrh	r3, [r3, #4]
 801620e:	b29b      	uxth	r3, r3
 8016210:	429a      	cmp	r2, r3
 8016212:	d014      	beq.n	801623e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	3301      	adds	r3, #1
 8016218:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801621a:	6a3b      	ldr	r3, [r7, #32]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d104      	bne.n	801622a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016222:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	61bb      	str	r3, [r7, #24]
 8016228:	e009      	b.n	801623e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	7fda      	ldrb	r2, [r3, #31]
 801622e:	6a3b      	ldr	r3, [r7, #32]
 8016230:	7fdb      	ldrb	r3, [r3, #31]
 8016232:	429a      	cmp	r2, r3
 8016234:	d803      	bhi.n	801623e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801623a:	69fb      	ldr	r3, [r7, #28]
 801623c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d001      	beq.n	801624a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	2b00      	cmp	r3, #0
 8016254:	d1cb      	bne.n	80161ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d008      	beq.n	801626e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801625c:	69b9      	ldr	r1, [r7, #24]
 801625e:	6a38      	ldr	r0, [r7, #32]
 8016260:	f7ff ff0e 	bl	8016080 <ip_reass_free_complete_datagram>
 8016264:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016266:	697a      	ldr	r2, [r7, #20]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	4413      	add	r3, r2
 801626c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801626e:	697a      	ldr	r2, [r7, #20]
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	da02      	bge.n	801627c <ip_reass_remove_oldest_datagram+0xb4>
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	2b01      	cmp	r3, #1
 801627a:	dcac      	bgt.n	80161d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801627c:	697b      	ldr	r3, [r7, #20]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3728      	adds	r7, #40	; 0x28
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	20010aa4 	.word	0x20010aa4

0801628c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016296:	2004      	movs	r0, #4
 8016298:	f7f4 fbc8 	bl	800aa2c <memp_malloc>
 801629c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d110      	bne.n	80162c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80162a4:	6839      	ldr	r1, [r7, #0]
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7ff ff8e 	bl	80161c8 <ip_reass_remove_oldest_datagram>
 80162ac:	4602      	mov	r2, r0
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	4293      	cmp	r3, r2
 80162b2:	dc03      	bgt.n	80162bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80162b4:	2004      	movs	r0, #4
 80162b6:	f7f4 fbb9 	bl	800aa2c <memp_malloc>
 80162ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d101      	bne.n	80162c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	e016      	b.n	80162f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80162c6:	2220      	movs	r2, #32
 80162c8:	2100      	movs	r1, #0
 80162ca:	68f8      	ldr	r0, [r7, #12]
 80162cc:	f001 f8f5 	bl	80174ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	220f      	movs	r2, #15
 80162d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80162d6:	4b09      	ldr	r3, [pc, #36]	; (80162fc <ip_reass_enqueue_new_datagram+0x70>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80162de:	4a07      	ldr	r2, [pc, #28]	; (80162fc <ip_reass_enqueue_new_datagram+0x70>)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	3308      	adds	r3, #8
 80162e8:	2214      	movs	r2, #20
 80162ea:	6879      	ldr	r1, [r7, #4]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f001 f9af 	bl	8017650 <memcpy>
  return ipr;
 80162f2:	68fb      	ldr	r3, [r7, #12]
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3710      	adds	r7, #16
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	20010aa4 	.word	0x20010aa4

08016300 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801630a:	4b10      	ldr	r3, [pc, #64]	; (801634c <ip_reass_dequeue_datagram+0x4c>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	429a      	cmp	r2, r3
 8016312:	d104      	bne.n	801631e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	4a0c      	ldr	r2, [pc, #48]	; (801634c <ip_reass_dequeue_datagram+0x4c>)
 801631a:	6013      	str	r3, [r2, #0]
 801631c:	e00d      	b.n	801633a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d106      	bne.n	8016332 <ip_reass_dequeue_datagram+0x32>
 8016324:	4b0a      	ldr	r3, [pc, #40]	; (8016350 <ip_reass_dequeue_datagram+0x50>)
 8016326:	f240 1245 	movw	r2, #325	; 0x145
 801632a:	490a      	ldr	r1, [pc, #40]	; (8016354 <ip_reass_dequeue_datagram+0x54>)
 801632c:	480a      	ldr	r0, [pc, #40]	; (8016358 <ip_reass_dequeue_datagram+0x58>)
 801632e:	f001 f85f 	bl	80173f0 <iprintf>
    prev->next = ipr->next;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801633a:	6879      	ldr	r1, [r7, #4]
 801633c:	2004      	movs	r0, #4
 801633e:	f7f4 fbeb 	bl	800ab18 <memp_free>
}
 8016342:	bf00      	nop
 8016344:	3708      	adds	r7, #8
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	20010aa4 	.word	0x20010aa4
 8016350:	0801b964 	.word	0x0801b964
 8016354:	0801ba2c 	.word	0x0801ba2c
 8016358:	0801b9ac 	.word	0x0801b9ac

0801635c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b08c      	sub	sp, #48	; 0x30
 8016360:	af00      	add	r7, sp, #0
 8016362:	60f8      	str	r0, [r7, #12]
 8016364:	60b9      	str	r1, [r7, #8]
 8016366:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016368:	2300      	movs	r3, #0
 801636a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801636c:	2301      	movs	r3, #1
 801636e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	885b      	ldrh	r3, [r3, #2]
 801637a:	b29b      	uxth	r3, r3
 801637c:	4618      	mov	r0, r3
 801637e:	f7f3 fe7d 	bl	800a07c <lwip_htons>
 8016382:	4603      	mov	r3, r0
 8016384:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	f003 030f 	and.w	r3, r3, #15
 801638e:	b2db      	uxtb	r3, r3
 8016390:	009b      	lsls	r3, r3, #2
 8016392:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016394:	7e7b      	ldrb	r3, [r7, #25]
 8016396:	b29b      	uxth	r3, r3
 8016398:	8b7a      	ldrh	r2, [r7, #26]
 801639a:	429a      	cmp	r2, r3
 801639c:	d202      	bcs.n	80163a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801639e:	f04f 33ff 	mov.w	r3, #4294967295
 80163a2:	e135      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80163a4:	7e7b      	ldrb	r3, [r7, #25]
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	8b7a      	ldrh	r2, [r7, #26]
 80163aa:	1ad3      	subs	r3, r2, r3
 80163ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80163ae:	69fb      	ldr	r3, [r7, #28]
 80163b0:	88db      	ldrh	r3, [r3, #6]
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7f3 fe61 	bl	800a07c <lwip_htons>
 80163ba:	4603      	mov	r3, r0
 80163bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	00db      	lsls	r3, r3, #3
 80163c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80163cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ce:	2200      	movs	r2, #0
 80163d0:	701a      	strb	r2, [r3, #0]
 80163d2:	2200      	movs	r2, #0
 80163d4:	705a      	strb	r2, [r3, #1]
 80163d6:	2200      	movs	r2, #0
 80163d8:	709a      	strb	r2, [r3, #2]
 80163da:	2200      	movs	r2, #0
 80163dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80163de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e0:	8afa      	ldrh	r2, [r7, #22]
 80163e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80163e4:	8afa      	ldrh	r2, [r7, #22]
 80163e6:	8b7b      	ldrh	r3, [r7, #26]
 80163e8:	4413      	add	r3, r2
 80163ea:	b29a      	uxth	r2, r3
 80163ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80163f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f2:	88db      	ldrh	r3, [r3, #6]
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	8afa      	ldrh	r2, [r7, #22]
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d902      	bls.n	8016402 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163fc:	f04f 33ff 	mov.w	r3, #4294967295
 8016400:	e106      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	627b      	str	r3, [r7, #36]	; 0x24
 8016408:	e068      	b.n	80164dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016412:	889b      	ldrh	r3, [r3, #4]
 8016414:	b29a      	uxth	r2, r3
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	889b      	ldrh	r3, [r3, #4]
 801641a:	b29b      	uxth	r3, r3
 801641c:	429a      	cmp	r2, r3
 801641e:	d235      	bcs.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016424:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016428:	2b00      	cmp	r3, #0
 801642a:	d020      	beq.n	801646e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	889b      	ldrh	r3, [r3, #4]
 8016430:	b29a      	uxth	r2, r3
 8016432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016434:	88db      	ldrh	r3, [r3, #6]
 8016436:	b29b      	uxth	r3, r3
 8016438:	429a      	cmp	r2, r3
 801643a:	d307      	bcc.n	801644c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643e:	88db      	ldrh	r3, [r3, #6]
 8016440:	b29a      	uxth	r2, r3
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	889b      	ldrh	r3, [r3, #4]
 8016446:	b29b      	uxth	r3, r3
 8016448:	429a      	cmp	r2, r3
 801644a:	d902      	bls.n	8016452 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801644c:	f04f 33ff 	mov.w	r3, #4294967295
 8016450:	e0de      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645a:	88db      	ldrh	r3, [r3, #6]
 801645c:	b29a      	uxth	r2, r3
 801645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016460:	889b      	ldrh	r3, [r3, #4]
 8016462:	b29b      	uxth	r3, r3
 8016464:	429a      	cmp	r2, r3
 8016466:	d03d      	beq.n	80164e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016468:	2300      	movs	r3, #0
 801646a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801646c:	e03a      	b.n	80164e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016470:	88db      	ldrh	r3, [r3, #6]
 8016472:	b29a      	uxth	r2, r3
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	889b      	ldrh	r3, [r3, #4]
 8016478:	b29b      	uxth	r3, r3
 801647a:	429a      	cmp	r2, r3
 801647c:	d902      	bls.n	8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801647e:	f04f 33ff 	mov.w	r3, #4294967295
 8016482:	e0c5      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	68ba      	ldr	r2, [r7, #8]
 8016488:	605a      	str	r2, [r3, #4]
      break;
 801648a:	e02b      	b.n	80164e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648e:	889b      	ldrh	r3, [r3, #4]
 8016490:	b29a      	uxth	r2, r3
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	889b      	ldrh	r3, [r3, #4]
 8016496:	b29b      	uxth	r3, r3
 8016498:	429a      	cmp	r2, r3
 801649a:	d102      	bne.n	80164a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801649c:	f04f 33ff 	mov.w	r3, #4294967295
 80164a0:	e0b6      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80164a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a4:	889b      	ldrh	r3, [r3, #4]
 80164a6:	b29a      	uxth	r2, r3
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	88db      	ldrh	r3, [r3, #6]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	429a      	cmp	r2, r3
 80164b0:	d202      	bcs.n	80164b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164b2:	f04f 33ff 	mov.w	r3, #4294967295
 80164b6:	e0ab      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80164b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d009      	beq.n	80164d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80164be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c0:	88db      	ldrh	r3, [r3, #6]
 80164c2:	b29a      	uxth	r2, r3
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	889b      	ldrh	r3, [r3, #4]
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d001      	beq.n	80164d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80164dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d193      	bne.n	801640a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80164e2:	e000      	b.n	80164e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80164e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80164e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d12d      	bne.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80164ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d01c      	beq.n	801652c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80164f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f4:	88db      	ldrh	r3, [r3, #6]
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fa:	889b      	ldrh	r3, [r3, #4]
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	429a      	cmp	r2, r3
 8016500:	d906      	bls.n	8016510 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016502:	4b45      	ldr	r3, [pc, #276]	; (8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016504:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016508:	4944      	ldr	r1, [pc, #272]	; (801661c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801650a:	4845      	ldr	r0, [pc, #276]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801650c:	f000 ff70 	bl	80173f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016512:	68ba      	ldr	r2, [r7, #8]
 8016514:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016518:	88db      	ldrh	r3, [r3, #6]
 801651a:	b29a      	uxth	r2, r3
 801651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651e:	889b      	ldrh	r3, [r3, #4]
 8016520:	b29b      	uxth	r3, r3
 8016522:	429a      	cmp	r2, r3
 8016524:	d010      	beq.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016526:	2300      	movs	r3, #0
 8016528:	623b      	str	r3, [r7, #32]
 801652a:	e00d      	b.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d006      	beq.n	8016542 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016534:	4b38      	ldr	r3, [pc, #224]	; (8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016536:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801653a:	493a      	ldr	r1, [pc, #232]	; (8016624 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801653c:	4838      	ldr	r0, [pc, #224]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801653e:	f000 ff57 	bl	80173f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	68ba      	ldr	r2, [r7, #8]
 8016546:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d105      	bne.n	801655a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	7f9b      	ldrb	r3, [r3, #30]
 8016552:	f003 0301 	and.w	r3, r3, #1
 8016556:	2b00      	cmp	r3, #0
 8016558:	d059      	beq.n	801660e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d04f      	beq.n	8016600 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d006      	beq.n	8016576 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	889b      	ldrh	r3, [r3, #4]
 8016570:	b29b      	uxth	r3, r3
 8016572:	2b00      	cmp	r3, #0
 8016574:	d002      	beq.n	801657c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016576:	2300      	movs	r3, #0
 8016578:	623b      	str	r3, [r7, #32]
 801657a:	e041      	b.n	8016600 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016586:	e012      	b.n	80165ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	88db      	ldrh	r3, [r3, #6]
 8016592:	b29a      	uxth	r2, r3
 8016594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016596:	889b      	ldrh	r3, [r3, #4]
 8016598:	b29b      	uxth	r3, r3
 801659a:	429a      	cmp	r2, r3
 801659c:	d002      	beq.n	80165a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	623b      	str	r3, [r7, #32]
            break;
 80165a2:	e007      	b.n	80165b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80165a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80165a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80165ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d1e9      	bne.n	8016588 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80165b4:	6a3b      	ldr	r3, [r7, #32]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d022      	beq.n	8016600 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d106      	bne.n	80165d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80165c2:	4b15      	ldr	r3, [pc, #84]	; (8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165c4:	f240 12df 	movw	r2, #479	; 0x1df
 80165c8:	4917      	ldr	r1, [pc, #92]	; (8016628 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80165ca:	4815      	ldr	r0, [pc, #84]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165cc:	f000 ff10 	bl	80173f0 <iprintf>
          LWIP_ASSERT("sanity check",
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165d8:	429a      	cmp	r2, r3
 80165da:	d106      	bne.n	80165ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80165dc:	4b0e      	ldr	r3, [pc, #56]	; (8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80165e2:	4911      	ldr	r1, [pc, #68]	; (8016628 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80165e4:	480e      	ldr	r0, [pc, #56]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165e6:	f000 ff03 	bl	80173f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80165ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d006      	beq.n	8016600 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80165f2:	4b09      	ldr	r3, [pc, #36]	; (8016618 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165f4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80165f8:	490c      	ldr	r1, [pc, #48]	; (801662c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80165fa:	4809      	ldr	r0, [pc, #36]	; (8016620 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165fc:	f000 fef8 	bl	80173f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016600:	6a3b      	ldr	r3, [r7, #32]
 8016602:	2b00      	cmp	r3, #0
 8016604:	bf14      	ite	ne
 8016606:	2301      	movne	r3, #1
 8016608:	2300      	moveq	r3, #0
 801660a:	b2db      	uxtb	r3, r3
 801660c:	e000      	b.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	3730      	adds	r7, #48	; 0x30
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	0801b964 	.word	0x0801b964
 801661c:	0801ba48 	.word	0x0801ba48
 8016620:	0801b9ac 	.word	0x0801b9ac
 8016624:	0801ba68 	.word	0x0801ba68
 8016628:	0801baa0 	.word	0x0801baa0
 801662c:	0801bab0 	.word	0x0801bab0

08016630 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b08e      	sub	sp, #56	; 0x38
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016640:	781b      	ldrb	r3, [r3, #0]
 8016642:	f003 030f 	and.w	r3, r3, #15
 8016646:	b2db      	uxtb	r3, r3
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	b2db      	uxtb	r3, r3
 801664c:	2b14      	cmp	r3, #20
 801664e:	f040 8171 	bne.w	8016934 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016654:	88db      	ldrh	r3, [r3, #6]
 8016656:	b29b      	uxth	r3, r3
 8016658:	4618      	mov	r0, r3
 801665a:	f7f3 fd0f 	bl	800a07c <lwip_htons>
 801665e:	4603      	mov	r3, r0
 8016660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016664:	b29b      	uxth	r3, r3
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666c:	885b      	ldrh	r3, [r3, #2]
 801666e:	b29b      	uxth	r3, r3
 8016670:	4618      	mov	r0, r3
 8016672:	f7f3 fd03 	bl	800a07c <lwip_htons>
 8016676:	4603      	mov	r3, r0
 8016678:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	f003 030f 	and.w	r3, r3, #15
 8016682:	b2db      	uxtb	r3, r3
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801668a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801668e:	b29b      	uxth	r3, r3
 8016690:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016692:	429a      	cmp	r2, r3
 8016694:	f0c0 8150 	bcc.w	8016938 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801669c:	b29b      	uxth	r3, r3
 801669e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80166a0:	1ad3      	subs	r3, r2, r3
 80166a2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f7f5 f975 	bl	800b994 <pbuf_clen>
 80166aa:	4603      	mov	r3, r0
 80166ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80166ae:	4b8c      	ldr	r3, [pc, #560]	; (80168e0 <ip4_reass+0x2b0>)
 80166b0:	881b      	ldrh	r3, [r3, #0]
 80166b2:	461a      	mov	r2, r3
 80166b4:	8c3b      	ldrh	r3, [r7, #32]
 80166b6:	4413      	add	r3, r2
 80166b8:	2b0a      	cmp	r3, #10
 80166ba:	dd10      	ble.n	80166de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166bc:	8c3b      	ldrh	r3, [r7, #32]
 80166be:	4619      	mov	r1, r3
 80166c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166c2:	f7ff fd81 	bl	80161c8 <ip_reass_remove_oldest_datagram>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	f000 8137 	beq.w	801693c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80166ce:	4b84      	ldr	r3, [pc, #528]	; (80168e0 <ip4_reass+0x2b0>)
 80166d0:	881b      	ldrh	r3, [r3, #0]
 80166d2:	461a      	mov	r2, r3
 80166d4:	8c3b      	ldrh	r3, [r7, #32]
 80166d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166d8:	2b0a      	cmp	r3, #10
 80166da:	f300 812f 	bgt.w	801693c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80166de:	4b81      	ldr	r3, [pc, #516]	; (80168e4 <ip4_reass+0x2b4>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	633b      	str	r3, [r7, #48]	; 0x30
 80166e4:	e015      	b.n	8016712 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80166e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e8:	695a      	ldr	r2, [r3, #20]
 80166ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ec:	68db      	ldr	r3, [r3, #12]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d10c      	bne.n	801670c <ip4_reass+0xdc>
 80166f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f4:	699a      	ldr	r2, [r3, #24]
 80166f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f8:	691b      	ldr	r3, [r3, #16]
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d106      	bne.n	801670c <ip4_reass+0xdc>
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	899a      	ldrh	r2, [r3, #12]
 8016702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016704:	889b      	ldrh	r3, [r3, #4]
 8016706:	b29b      	uxth	r3, r3
 8016708:	429a      	cmp	r2, r3
 801670a:	d006      	beq.n	801671a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	633b      	str	r3, [r7, #48]	; 0x30
 8016712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016714:	2b00      	cmp	r3, #0
 8016716:	d1e6      	bne.n	80166e6 <ip4_reass+0xb6>
 8016718:	e000      	b.n	801671c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801671a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671e:	2b00      	cmp	r3, #0
 8016720:	d109      	bne.n	8016736 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016722:	8c3b      	ldrh	r3, [r7, #32]
 8016724:	4619      	mov	r1, r3
 8016726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016728:	f7ff fdb0 	bl	801628c <ip_reass_enqueue_new_datagram>
 801672c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016730:	2b00      	cmp	r3, #0
 8016732:	d11c      	bne.n	801676e <ip4_reass+0x13e>
      goto nullreturn;
 8016734:	e105      	b.n	8016942 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016738:	88db      	ldrh	r3, [r3, #6]
 801673a:	b29b      	uxth	r3, r3
 801673c:	4618      	mov	r0, r3
 801673e:	f7f3 fc9d 	bl	800a07c <lwip_htons>
 8016742:	4603      	mov	r3, r0
 8016744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016748:	2b00      	cmp	r3, #0
 801674a:	d110      	bne.n	801676e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674e:	89db      	ldrh	r3, [r3, #14]
 8016750:	4618      	mov	r0, r3
 8016752:	f7f3 fc93 	bl	800a07c <lwip_htons>
 8016756:	4603      	mov	r3, r0
 8016758:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801675c:	2b00      	cmp	r3, #0
 801675e:	d006      	beq.n	801676e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016762:	3308      	adds	r3, #8
 8016764:	2214      	movs	r2, #20
 8016766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016768:	4618      	mov	r0, r3
 801676a:	f000 ff71 	bl	8017650 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016770:	88db      	ldrh	r3, [r3, #6]
 8016772:	b29b      	uxth	r3, r3
 8016774:	f003 0320 	and.w	r3, r3, #32
 8016778:	2b00      	cmp	r3, #0
 801677a:	bf0c      	ite	eq
 801677c:	2301      	moveq	r3, #1
 801677e:	2300      	movne	r3, #0
 8016780:	b2db      	uxtb	r3, r3
 8016782:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d00e      	beq.n	80167a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801678a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801678c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801678e:	4413      	add	r3, r2
 8016790:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016792:	8b7a      	ldrh	r2, [r7, #26]
 8016794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016796:	429a      	cmp	r2, r3
 8016798:	f0c0 80a0 	bcc.w	80168dc <ip4_reass+0x2ac>
 801679c:	8b7b      	ldrh	r3, [r7, #26]
 801679e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80167a2:	4293      	cmp	r3, r2
 80167a4:	f200 809a 	bhi.w	80168dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80167a8:	69fa      	ldr	r2, [r7, #28]
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167ae:	f7ff fdd5 	bl	801635c <ip_reass_chain_frag_into_datagram_and_validate>
 80167b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ba:	f000 809b 	beq.w	80168f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80167be:	4b48      	ldr	r3, [pc, #288]	; (80168e0 <ip4_reass+0x2b0>)
 80167c0:	881a      	ldrh	r2, [r3, #0]
 80167c2:	8c3b      	ldrh	r3, [r7, #32]
 80167c4:	4413      	add	r3, r2
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	4b45      	ldr	r3, [pc, #276]	; (80168e0 <ip4_reass+0x2b0>)
 80167ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80167cc:	69fb      	ldr	r3, [r7, #28]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d00d      	beq.n	80167ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80167d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80167d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167d6:	4413      	add	r3, r2
 80167d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	8a7a      	ldrh	r2, [r7, #18]
 80167de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80167e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e2:	7f9b      	ldrb	r3, [r3, #30]
 80167e4:	f043 0301 	orr.w	r3, r3, #1
 80167e8:	b2da      	uxtb	r2, r3
 80167ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d171      	bne.n	80168d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80167f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f6:	8b9b      	ldrh	r3, [r3, #28]
 80167f8:	3314      	adds	r3, #20
 80167fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80167fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fe:	685b      	ldr	r3, [r3, #4]
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016810:	3308      	adds	r3, #8
 8016812:	2214      	movs	r2, #20
 8016814:	4619      	mov	r1, r3
 8016816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016818:	f000 ff1a 	bl	8017650 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801681c:	8a3b      	ldrh	r3, [r7, #16]
 801681e:	4618      	mov	r0, r3
 8016820:	f7f3 fc2c 	bl	800a07c <lwip_htons>
 8016824:	4603      	mov	r3, r0
 8016826:	461a      	mov	r2, r3
 8016828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801682a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801682e:	2200      	movs	r2, #0
 8016830:	719a      	strb	r2, [r3, #6]
 8016832:	2200      	movs	r2, #0
 8016834:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016838:	2200      	movs	r2, #0
 801683a:	729a      	strb	r2, [r3, #10]
 801683c:	2200      	movs	r2, #0
 801683e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016846:	e00d      	b.n	8016864 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801684e:	2114      	movs	r1, #20
 8016850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016852:	f7f4 ff8b 	bl	800b76c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016856:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f7f5 f8db 	bl	800ba14 <pbuf_cat>
      r = iprh->next_pbuf;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016866:	2b00      	cmp	r3, #0
 8016868:	d1ee      	bne.n	8016848 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801686a:	4b1e      	ldr	r3, [pc, #120]	; (80168e4 <ip4_reass+0x2b4>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016870:	429a      	cmp	r2, r3
 8016872:	d102      	bne.n	801687a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016874:	2300      	movs	r3, #0
 8016876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016878:	e010      	b.n	801689c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801687a:	4b1a      	ldr	r3, [pc, #104]	; (80168e4 <ip4_reass+0x2b4>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016880:	e007      	b.n	8016892 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016888:	429a      	cmp	r2, r3
 801688a:	d006      	beq.n	801689a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016894:	2b00      	cmp	r3, #0
 8016896:	d1f4      	bne.n	8016882 <ip4_reass+0x252>
 8016898:	e000      	b.n	801689c <ip4_reass+0x26c>
          break;
 801689a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801689c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801689e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168a0:	f7ff fd2e 	bl	8016300 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7f5 f875 	bl	800b994 <pbuf_clen>
 80168aa:	4603      	mov	r3, r0
 80168ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80168ae:	4b0c      	ldr	r3, [pc, #48]	; (80168e0 <ip4_reass+0x2b0>)
 80168b0:	881b      	ldrh	r3, [r3, #0]
 80168b2:	8c3a      	ldrh	r2, [r7, #32]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d906      	bls.n	80168c6 <ip4_reass+0x296>
 80168b8:	4b0b      	ldr	r3, [pc, #44]	; (80168e8 <ip4_reass+0x2b8>)
 80168ba:	f240 229b 	movw	r2, #667	; 0x29b
 80168be:	490b      	ldr	r1, [pc, #44]	; (80168ec <ip4_reass+0x2bc>)
 80168c0:	480b      	ldr	r0, [pc, #44]	; (80168f0 <ip4_reass+0x2c0>)
 80168c2:	f000 fd95 	bl	80173f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80168c6:	4b06      	ldr	r3, [pc, #24]	; (80168e0 <ip4_reass+0x2b0>)
 80168c8:	881a      	ldrh	r2, [r3, #0]
 80168ca:	8c3b      	ldrh	r3, [r7, #32]
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	b29a      	uxth	r2, r3
 80168d0:	4b03      	ldr	r3, [pc, #12]	; (80168e0 <ip4_reass+0x2b0>)
 80168d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	e038      	b.n	801694a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80168d8:	2300      	movs	r3, #0
 80168da:	e036      	b.n	801694a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80168dc:	bf00      	nop
 80168de:	e00a      	b.n	80168f6 <ip4_reass+0x2c6>
 80168e0:	20010aa8 	.word	0x20010aa8
 80168e4:	20010aa4 	.word	0x20010aa4
 80168e8:	0801b964 	.word	0x0801b964
 80168ec:	0801bad4 	.word	0x0801bad4
 80168f0:	0801b9ac 	.word	0x0801b9ac
    goto nullreturn_ipr;
 80168f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80168f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d106      	bne.n	801690a <ip4_reass+0x2da>
 80168fc:	4b15      	ldr	r3, [pc, #84]	; (8016954 <ip4_reass+0x324>)
 80168fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016902:	4915      	ldr	r1, [pc, #84]	; (8016958 <ip4_reass+0x328>)
 8016904:	4815      	ldr	r0, [pc, #84]	; (801695c <ip4_reass+0x32c>)
 8016906:	f000 fd73 	bl	80173f0 <iprintf>
  if (ipr->p == NULL) {
 801690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d116      	bne.n	8016940 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016912:	4b13      	ldr	r3, [pc, #76]	; (8016960 <ip4_reass+0x330>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016918:	429a      	cmp	r2, r3
 801691a:	d006      	beq.n	801692a <ip4_reass+0x2fa>
 801691c:	4b0d      	ldr	r3, [pc, #52]	; (8016954 <ip4_reass+0x324>)
 801691e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016922:	4910      	ldr	r1, [pc, #64]	; (8016964 <ip4_reass+0x334>)
 8016924:	480d      	ldr	r0, [pc, #52]	; (801695c <ip4_reass+0x32c>)
 8016926:	f000 fd63 	bl	80173f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801692a:	2100      	movs	r1, #0
 801692c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801692e:	f7ff fce7 	bl	8016300 <ip_reass_dequeue_datagram>
 8016932:	e006      	b.n	8016942 <ip4_reass+0x312>
    goto nullreturn;
 8016934:	bf00      	nop
 8016936:	e004      	b.n	8016942 <ip4_reass+0x312>
    goto nullreturn;
 8016938:	bf00      	nop
 801693a:	e002      	b.n	8016942 <ip4_reass+0x312>
      goto nullreturn;
 801693c:	bf00      	nop
 801693e:	e000      	b.n	8016942 <ip4_reass+0x312>
  }

nullreturn:
 8016940:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7f4 ff98 	bl	800b878 <pbuf_free>
  return NULL;
 8016948:	2300      	movs	r3, #0
}
 801694a:	4618      	mov	r0, r3
 801694c:	3738      	adds	r7, #56	; 0x38
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	0801b964 	.word	0x0801b964
 8016958:	0801baf0 	.word	0x0801baf0
 801695c:	0801b9ac 	.word	0x0801b9ac
 8016960:	20010aa4 	.word	0x20010aa4
 8016964:	0801bafc 	.word	0x0801bafc

08016968 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801696c:	2005      	movs	r0, #5
 801696e:	f7f4 f85d 	bl	800aa2c <memp_malloc>
 8016972:	4603      	mov	r3, r0
}
 8016974:	4618      	mov	r0, r3
 8016976:	bd80      	pop	{r7, pc}

08016978 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d106      	bne.n	8016994 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016986:	4b07      	ldr	r3, [pc, #28]	; (80169a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016988:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801698c:	4906      	ldr	r1, [pc, #24]	; (80169a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801698e:	4807      	ldr	r0, [pc, #28]	; (80169ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8016990:	f000 fd2e 	bl	80173f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016994:	6879      	ldr	r1, [r7, #4]
 8016996:	2005      	movs	r0, #5
 8016998:	f7f4 f8be 	bl	800ab18 <memp_free>
}
 801699c:	bf00      	nop
 801699e:	3708      	adds	r7, #8
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}
 80169a4:	0801b964 	.word	0x0801b964
 80169a8:	0801bb1c 	.word	0x0801bb1c
 80169ac:	0801b9ac 	.word	0x0801b9ac

080169b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d106      	bne.n	80169d0 <ipfrag_free_pbuf_custom+0x20>
 80169c2:	4b11      	ldr	r3, [pc, #68]	; (8016a08 <ipfrag_free_pbuf_custom+0x58>)
 80169c4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80169c8:	4910      	ldr	r1, [pc, #64]	; (8016a0c <ipfrag_free_pbuf_custom+0x5c>)
 80169ca:	4811      	ldr	r0, [pc, #68]	; (8016a10 <ipfrag_free_pbuf_custom+0x60>)
 80169cc:	f000 fd10 	bl	80173f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80169d0:	68fa      	ldr	r2, [r7, #12]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d006      	beq.n	80169e6 <ipfrag_free_pbuf_custom+0x36>
 80169d8:	4b0b      	ldr	r3, [pc, #44]	; (8016a08 <ipfrag_free_pbuf_custom+0x58>)
 80169da:	f240 22cf 	movw	r2, #719	; 0x2cf
 80169de:	490d      	ldr	r1, [pc, #52]	; (8016a14 <ipfrag_free_pbuf_custom+0x64>)
 80169e0:	480b      	ldr	r0, [pc, #44]	; (8016a10 <ipfrag_free_pbuf_custom+0x60>)
 80169e2:	f000 fd05 	bl	80173f0 <iprintf>
  if (pcr->original != NULL) {
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	695b      	ldr	r3, [r3, #20]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d004      	beq.n	80169f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	695b      	ldr	r3, [r3, #20]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7f4 ff40 	bl	800b878 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	f7ff ffbd 	bl	8016978 <ip_frag_free_pbuf_custom_ref>
}
 80169fe:	bf00      	nop
 8016a00:	3710      	adds	r7, #16
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	0801b964 	.word	0x0801b964
 8016a0c:	0801bb28 	.word	0x0801bb28
 8016a10:	0801b9ac 	.word	0x0801b9ac
 8016a14:	0801bb34 	.word	0x0801bb34

08016a18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b094      	sub	sp, #80	; 0x50
 8016a1c:	af02      	add	r7, sp, #8
 8016a1e:	60f8      	str	r0, [r7, #12]
 8016a20:	60b9      	str	r1, [r7, #8]
 8016a22:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a2e:	3b14      	subs	r3, #20
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	da00      	bge.n	8016a36 <ip4_frag+0x1e>
 8016a34:	3307      	adds	r3, #7
 8016a36:	10db      	asrs	r3, r3, #3
 8016a38:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016a3a:	2314      	movs	r3, #20
 8016a3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a46:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	f003 030f 	and.w	r3, r3, #15
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	009b      	lsls	r3, r3, #2
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	2b14      	cmp	r3, #20
 8016a58:	d002      	beq.n	8016a60 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016a5a:	f06f 0305 	mvn.w	r3, #5
 8016a5e:	e110      	b.n	8016c82 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	895b      	ldrh	r3, [r3, #10]
 8016a64:	2b13      	cmp	r3, #19
 8016a66:	d809      	bhi.n	8016a7c <ip4_frag+0x64>
 8016a68:	4b88      	ldr	r3, [pc, #544]	; (8016c8c <ip4_frag+0x274>)
 8016a6a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016a6e:	4988      	ldr	r1, [pc, #544]	; (8016c90 <ip4_frag+0x278>)
 8016a70:	4888      	ldr	r0, [pc, #544]	; (8016c94 <ip4_frag+0x27c>)
 8016a72:	f000 fcbd 	bl	80173f0 <iprintf>
 8016a76:	f06f 0305 	mvn.w	r3, #5
 8016a7a:	e102      	b.n	8016c82 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7e:	88db      	ldrh	r3, [r3, #6]
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7f3 fafa 	bl	800a07c <lwip_htons>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016a96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	891b      	ldrh	r3, [r3, #8]
 8016aa2:	3b14      	subs	r3, #20
 8016aa4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016aa8:	e0e1      	b.n	8016c6e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016aaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ab4:	4293      	cmp	r3, r2
 8016ab6:	bf28      	it	cs
 8016ab8:	4613      	movcs	r3, r2
 8016aba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016abc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ac0:	2114      	movs	r1, #20
 8016ac2:	200e      	movs	r0, #14
 8016ac4:	f7f4 fbf4 	bl	800b2b0 <pbuf_alloc>
 8016ac8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	f000 80d5 	beq.w	8016c7c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad4:	895b      	ldrh	r3, [r3, #10]
 8016ad6:	2b13      	cmp	r3, #19
 8016ad8:	d806      	bhi.n	8016ae8 <ip4_frag+0xd0>
 8016ada:	4b6c      	ldr	r3, [pc, #432]	; (8016c8c <ip4_frag+0x274>)
 8016adc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016ae0:	496d      	ldr	r1, [pc, #436]	; (8016c98 <ip4_frag+0x280>)
 8016ae2:	486c      	ldr	r0, [pc, #432]	; (8016c94 <ip4_frag+0x27c>)
 8016ae4:	f000 fc84 	bl	80173f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	2214      	movs	r2, #20
 8016aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016af0:	4618      	mov	r0, r3
 8016af2:	f000 fdad 	bl	8017650 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af8:	685b      	ldr	r3, [r3, #4]
 8016afa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016afc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016afe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016b02:	e064      	b.n	8016bce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	895a      	ldrh	r2, [r3, #10]
 8016b08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b0a:	1ad3      	subs	r3, r2, r3
 8016b0c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	895b      	ldrh	r3, [r3, #10]
 8016b12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d906      	bls.n	8016b26 <ip4_frag+0x10e>
 8016b18:	4b5c      	ldr	r3, [pc, #368]	; (8016c8c <ip4_frag+0x274>)
 8016b1a:	f240 322d 	movw	r2, #813	; 0x32d
 8016b1e:	495f      	ldr	r1, [pc, #380]	; (8016c9c <ip4_frag+0x284>)
 8016b20:	485c      	ldr	r0, [pc, #368]	; (8016c94 <ip4_frag+0x27c>)
 8016b22:	f000 fc65 	bl	80173f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016b26:	8bfa      	ldrh	r2, [r7, #30]
 8016b28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	bf28      	it	cs
 8016b30:	4613      	movcs	r3, r2
 8016b32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016b36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d105      	bne.n	8016b4a <ip4_frag+0x132>
        poff = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	60fb      	str	r3, [r7, #12]
        continue;
 8016b48:	e041      	b.n	8016bce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016b4a:	f7ff ff0d 	bl	8016968 <ip_frag_alloc_pbuf_custom_ref>
 8016b4e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d103      	bne.n	8016b5e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b58:	f7f4 fe8e 	bl	800b878 <pbuf_free>
        goto memerr;
 8016b5c:	e08f      	b.n	8016c7e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b5e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b66:	4413      	add	r3, r2
 8016b68:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016b6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b70:	9201      	str	r2, [sp, #4]
 8016b72:	9300      	str	r3, [sp, #0]
 8016b74:	4603      	mov	r3, r0
 8016b76:	2241      	movs	r2, #65	; 0x41
 8016b78:	2000      	movs	r0, #0
 8016b7a:	f7f4 fcc3 	bl	800b504 <pbuf_alloced_custom>
 8016b7e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016b86:	69b8      	ldr	r0, [r7, #24]
 8016b88:	f7ff fef6 	bl	8016978 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b8e:	f7f4 fe73 	bl	800b878 <pbuf_free>
        goto memerr;
 8016b92:	e074      	b.n	8016c7e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f7f4 ff15 	bl	800b9c4 <pbuf_ref>
      pcr->original = p;
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	68fa      	ldr	r2, [r7, #12]
 8016b9e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	4a3f      	ldr	r2, [pc, #252]	; (8016ca0 <ip4_frag+0x288>)
 8016ba4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016ba6:	6979      	ldr	r1, [r7, #20]
 8016ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016baa:	f7f4 ff33 	bl	800ba14 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016bae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016bb6:	1ad3      	subs	r3, r2, r3
 8016bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016bbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d004      	beq.n	8016bce <ip4_frag+0x1b6>
        poff = 0;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016bce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d196      	bne.n	8016b04 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016bd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016bd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016bdc:	4413      	add	r3, r2
 8016bde:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016be4:	f1a3 0213 	sub.w	r2, r3, #19
 8016be8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016bec:	429a      	cmp	r2, r3
 8016bee:	bfcc      	ite	gt
 8016bf0:	2301      	movgt	r3, #1
 8016bf2:	2300      	movle	r3, #0
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016bf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c00:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016c02:	6a3b      	ldr	r3, [r7, #32]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d002      	beq.n	8016c0e <ip4_frag+0x1f6>
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d003      	beq.n	8016c16 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016c0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016c14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016c16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7f3 fa2f 	bl	800a07c <lwip_htons>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	461a      	mov	r2, r3
 8016c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c28:	3314      	adds	r3, #20
 8016c2a:	b29b      	uxth	r3, r3
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7f3 fa25 	bl	800a07c <lwip_htons>
 8016c32:	4603      	mov	r3, r0
 8016c34:	461a      	mov	r2, r3
 8016c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	729a      	strb	r2, [r3, #10]
 8016c40:	2200      	movs	r2, #0
 8016c42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	695b      	ldr	r3, [r3, #20]
 8016c48:	687a      	ldr	r2, [r7, #4]
 8016c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c4c:	68b8      	ldr	r0, [r7, #8]
 8016c4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c52:	f7f4 fe11 	bl	800b878 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016c56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c5c:	1ad3      	subs	r3, r2, r3
 8016c5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016c62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016c66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c68:	4413      	add	r3, r2
 8016c6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016c6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f47f af19 	bne.w	8016aaa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	e002      	b.n	8016c82 <ip4_frag+0x26a>
      goto memerr;
 8016c7c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3748      	adds	r7, #72	; 0x48
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
 8016c8a:	bf00      	nop
 8016c8c:	0801b964 	.word	0x0801b964
 8016c90:	0801bb40 	.word	0x0801bb40
 8016c94:	0801b9ac 	.word	0x0801b9ac
 8016c98:	0801bb5c 	.word	0x0801bb5c
 8016c9c:	0801bb7c 	.word	0x0801bb7c
 8016ca0:	080169b1 	.word	0x080169b1

08016ca4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016cae:	230e      	movs	r3, #14
 8016cb0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	895b      	ldrh	r3, [r3, #10]
 8016cb6:	2b0e      	cmp	r3, #14
 8016cb8:	d96e      	bls.n	8016d98 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	7bdb      	ldrb	r3, [r3, #15]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d106      	bne.n	8016cd0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016cc8:	3301      	adds	r3, #1
 8016cca:	b2da      	uxtb	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	685b      	ldr	r3, [r3, #4]
 8016cd4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	7b1a      	ldrb	r2, [r3, #12]
 8016cda:	7b5b      	ldrb	r3, [r3, #13]
 8016cdc:	021b      	lsls	r3, r3, #8
 8016cde:	4313      	orrs	r3, r2
 8016ce0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	f003 0301 	and.w	r3, r3, #1
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d023      	beq.n	8016d36 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d10f      	bne.n	8016d16 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016cf6:	693b      	ldr	r3, [r7, #16]
 8016cf8:	785b      	ldrb	r3, [r3, #1]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d11b      	bne.n	8016d36 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016d02:	2b5e      	cmp	r3, #94	; 0x5e
 8016d04:	d117      	bne.n	8016d36 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	7b5b      	ldrb	r3, [r3, #13]
 8016d0a:	f043 0310 	orr.w	r3, r3, #16
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	735a      	strb	r2, [r3, #13]
 8016d14:	e00f      	b.n	8016d36 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	2206      	movs	r2, #6
 8016d1a:	4928      	ldr	r1, [pc, #160]	; (8016dbc <ethernet_input+0x118>)
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f000 fbbc 	bl	801749a <memcmp>
 8016d22:	4603      	mov	r3, r0
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d106      	bne.n	8016d36 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	7b5b      	ldrb	r3, [r3, #13]
 8016d2c:	f043 0308 	orr.w	r3, r3, #8
 8016d30:	b2da      	uxtb	r2, r3
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016d36:	89fb      	ldrh	r3, [r7, #14]
 8016d38:	2b08      	cmp	r3, #8
 8016d3a:	d003      	beq.n	8016d44 <ethernet_input+0xa0>
 8016d3c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016d40:	d014      	beq.n	8016d6c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016d42:	e032      	b.n	8016daa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d4a:	f003 0308 	and.w	r3, r3, #8
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d024      	beq.n	8016d9c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016d52:	8afb      	ldrh	r3, [r7, #22]
 8016d54:	4619      	mov	r1, r3
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f7f4 fd08 	bl	800b76c <pbuf_remove_header>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d11e      	bne.n	8016da0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016d62:	6839      	ldr	r1, [r7, #0]
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f7fe ff03 	bl	8015b70 <ip4_input>
      break;
 8016d6a:	e013      	b.n	8016d94 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d72:	f003 0308 	and.w	r3, r3, #8
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d014      	beq.n	8016da4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016d7a:	8afb      	ldrh	r3, [r7, #22]
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f7f4 fcf4 	bl	800b76c <pbuf_remove_header>
 8016d84:	4603      	mov	r3, r0
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d10e      	bne.n	8016da8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016d8a:	6839      	ldr	r1, [r7, #0]
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f7fe f89f 	bl	8014ed0 <etharp_input>
      break;
 8016d92:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016d94:	2300      	movs	r3, #0
 8016d96:	e00c      	b.n	8016db2 <ethernet_input+0x10e>
    goto free_and_return;
 8016d98:	bf00      	nop
 8016d9a:	e006      	b.n	8016daa <ethernet_input+0x106>
        goto free_and_return;
 8016d9c:	bf00      	nop
 8016d9e:	e004      	b.n	8016daa <ethernet_input+0x106>
        goto free_and_return;
 8016da0:	bf00      	nop
 8016da2:	e002      	b.n	8016daa <ethernet_input+0x106>
        goto free_and_return;
 8016da4:	bf00      	nop
 8016da6:	e000      	b.n	8016daa <ethernet_input+0x106>
        goto free_and_return;
 8016da8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7f4 fd64 	bl	800b878 <pbuf_free>
  return ERR_OK;
 8016db0:	2300      	movs	r3, #0
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3718      	adds	r7, #24
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	0801bd70 	.word	0x0801bd70

08016dc0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b086      	sub	sp, #24
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	607a      	str	r2, [r7, #4]
 8016dcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016dce:	8c3b      	ldrh	r3, [r7, #32]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7f3 f953 	bl	800a07c <lwip_htons>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016dda:	210e      	movs	r1, #14
 8016ddc:	68b8      	ldr	r0, [r7, #8]
 8016dde:	f7f4 fcb5 	bl	800b74c <pbuf_add_header>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d125      	bne.n	8016e34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	8afa      	ldrh	r2, [r7, #22]
 8016df2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016df4:	693b      	ldr	r3, [r7, #16]
 8016df6:	2206      	movs	r2, #6
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f000 fc28 	bl	8017650 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	3306      	adds	r3, #6
 8016e04:	2206      	movs	r2, #6
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 fc21 	bl	8017650 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e14:	2b06      	cmp	r3, #6
 8016e16:	d006      	beq.n	8016e26 <ethernet_output+0x66>
 8016e18:	4b0a      	ldr	r3, [pc, #40]	; (8016e44 <ethernet_output+0x84>)
 8016e1a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016e1e:	490a      	ldr	r1, [pc, #40]	; (8016e48 <ethernet_output+0x88>)
 8016e20:	480a      	ldr	r0, [pc, #40]	; (8016e4c <ethernet_output+0x8c>)
 8016e22:	f000 fae5 	bl	80173f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	699b      	ldr	r3, [r3, #24]
 8016e2a:	68b9      	ldr	r1, [r7, #8]
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	4798      	blx	r3
 8016e30:	4603      	mov	r3, r0
 8016e32:	e002      	b.n	8016e3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016e34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016e36:	f06f 0301 	mvn.w	r3, #1
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3718      	adds	r7, #24
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}
 8016e42:	bf00      	nop
 8016e44:	0801bb8c 	.word	0x0801bb8c
 8016e48:	0801bbc4 	.word	0x0801bbc4
 8016e4c:	0801bbf8 	.word	0x0801bbf8

08016e50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b086      	sub	sp, #24
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	60bb      	str	r3, [r7, #8]
 8016e5e:	2304      	movs	r3, #4
 8016e60:	60fb      	str	r3, [r7, #12]
 8016e62:	2300      	movs	r3, #0
 8016e64:	613b      	str	r3, [r7, #16]
 8016e66:	2300      	movs	r3, #0
 8016e68:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016e6a:	f107 0308 	add.w	r3, r7, #8
 8016e6e:	2100      	movs	r1, #0
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ee f804 	bl	8004e7e <osMessageCreate>
 8016e76:	4602      	mov	r2, r0
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d102      	bne.n	8016e8a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016e84:	f04f 33ff 	mov.w	r3, #4294967295
 8016e88:	e000      	b.n	8016e8c <sys_mbox_new+0x3c>

  return ERR_OK;
 8016e8a:	2300      	movs	r3, #0
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3718      	adds	r7, #24
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7ee f8c9 	bl	8005038 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7ee f8da 	bl	8005064 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016eb0:	bf00      	nop
 8016eb2:	3708      	adds	r7, #8
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	6839      	ldr	r1, [r7, #0]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7ee f800 	bl	8004ed0 <osMessagePut>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d102      	bne.n	8016edc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	73fb      	strb	r3, [r7, #15]
 8016eda:	e001      	b.n	8016ee0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016edc:	23ff      	movs	r3, #255	; 0xff
 8016ede:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3710      	adds	r7, #16
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}

08016eec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b08c      	sub	sp, #48	; 0x30
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	61f8      	str	r0, [r7, #28]
 8016ef4:	61b9      	str	r1, [r7, #24]
 8016ef6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016ef8:	f7ed fdec 	bl	8004ad4 <osKernelSysTick>
 8016efc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016efe:	697b      	ldr	r3, [r7, #20]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d017      	beq.n	8016f34 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	6819      	ldr	r1, [r3, #0]
 8016f08:	f107 0320 	add.w	r3, r7, #32
 8016f0c:	697a      	ldr	r2, [r7, #20]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ee f81e 	bl	8004f50 <osMessageGet>

    if(event.status == osEventMessage)
 8016f14:	6a3b      	ldr	r3, [r7, #32]
 8016f16:	2b10      	cmp	r3, #16
 8016f18:	d109      	bne.n	8016f2e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016f22:	f7ed fdd7 	bl	8004ad4 <osKernelSysTick>
 8016f26:	4602      	mov	r2, r0
 8016f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2a:	1ad3      	subs	r3, r2, r3
 8016f2c:	e019      	b.n	8016f62 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f32:	e016      	b.n	8016f62 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	6819      	ldr	r1, [r3, #0]
 8016f38:	463b      	mov	r3, r7
 8016f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f7ee f806 	bl	8004f50 <osMessageGet>
 8016f44:	f107 0320 	add.w	r3, r7, #32
 8016f48:	463a      	mov	r2, r7
 8016f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f52:	461a      	mov	r2, r3
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016f58:	f7ed fdbc 	bl	8004ad4 <osKernelSysTick>
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f60:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3730      	adds	r7, #48	; 0x30
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b086      	sub	sp, #24
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	6078      	str	r0, [r7, #4]
 8016f72:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6819      	ldr	r1, [r3, #0]
 8016f78:	f107 030c 	add.w	r3, r7, #12
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7ed ffe6 	bl	8004f50 <osMessageGet>

  if(event.status == osEventMessage)
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2b10      	cmp	r3, #16
 8016f88:	d105      	bne.n	8016f96 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	461a      	mov	r2, r3
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016f92:	2300      	movs	r3, #0
 8016f94:	e001      	b.n	8016f9a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016f96:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3718      	adds	r7, #24
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016fa2:	b480      	push	{r7}
 8016fa4:	b083      	sub	sp, #12
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d101      	bne.n	8016fb6 <sys_mbox_valid+0x14>
    return 0;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	e000      	b.n	8016fb8 <sys_mbox_valid+0x16>
  else
    return 1;
 8016fb6:	2301      	movs	r3, #1
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	370c      	adds	r7, #12
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc2:	4770      	bx	lr

08016fc4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b083      	sub	sp, #12
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	601a      	str	r2, [r3, #0]
}
 8016fd2:	bf00      	nop
 8016fd4:	370c      	adds	r7, #12
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fdc:	4770      	bx	lr

08016fde <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b084      	sub	sp, #16
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016fea:	2300      	movs	r3, #0
 8016fec:	60bb      	str	r3, [r7, #8]
 8016fee:	2300      	movs	r3, #0
 8016ff0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016ff2:	f107 0308 	add.w	r3, r7, #8
 8016ff6:	2101      	movs	r1, #1
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7ed fe77 	bl	8004cec <osSemaphoreCreate>
 8016ffe:	4602      	mov	r2, r0
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d102      	bne.n	8017012 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801700c:	f04f 33ff 	mov.w	r3, #4294967295
 8017010:	e009      	b.n	8017026 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017012:	78fb      	ldrb	r3, [r7, #3]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d105      	bne.n	8017024 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	2100      	movs	r1, #0
 801701e:	4618      	mov	r0, r3
 8017020:	f7ed fe96 	bl	8004d50 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017024:	2300      	movs	r3, #0
}
 8017026:	4618      	mov	r0, r3
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}

0801702e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801702e:	b580      	push	{r7, lr}
 8017030:	b084      	sub	sp, #16
 8017032:	af00      	add	r7, sp, #0
 8017034:	6078      	str	r0, [r7, #4]
 8017036:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017038:	f7ed fd4c 	bl	8004ad4 <osKernelSysTick>
 801703c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d011      	beq.n	8017068 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	6839      	ldr	r1, [r7, #0]
 801704a:	4618      	mov	r0, r3
 801704c:	f7ed fe80 	bl	8004d50 <osSemaphoreWait>
 8017050:	4603      	mov	r3, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	d105      	bne.n	8017062 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017056:	f7ed fd3d 	bl	8004ad4 <osKernelSysTick>
 801705a:	4602      	mov	r2, r0
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	e012      	b.n	8017088 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017062:	f04f 33ff 	mov.w	r3, #4294967295
 8017066:	e00f      	b.n	8017088 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017068:	bf00      	nop
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	f04f 31ff 	mov.w	r1, #4294967295
 8017072:	4618      	mov	r0, r3
 8017074:	f7ed fe6c 	bl	8004d50 <osSemaphoreWait>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d1f5      	bne.n	801706a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801707e:	f7ed fd29 	bl	8004ad4 <osKernelSysTick>
 8017082:	4602      	mov	r2, r0
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017088:	4618      	mov	r0, r3
 801708a:	3710      	adds	r7, #16
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}

08017090 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b082      	sub	sp, #8
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	4618      	mov	r0, r3
 801709e:	f7ed fea5 	bl	8004dec <osSemaphoreRelease>
}
 80170a2:	bf00      	nop
 80170a4:	3708      	adds	r7, #8
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}

080170aa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80170aa:	b580      	push	{r7, lr}
 80170ac:	b082      	sub	sp, #8
 80170ae:	af00      	add	r7, sp, #0
 80170b0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ed fece 	bl	8004e58 <osSemaphoreDelete>
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80170c4:	b480      	push	{r7}
 80170c6:	b083      	sub	sp, #12
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d101      	bne.n	80170d8 <sys_sem_valid+0x14>
    return 0;
 80170d4:	2300      	movs	r3, #0
 80170d6:	e000      	b.n	80170da <sys_sem_valid+0x16>
  else
    return 1;
 80170d8:	2301      	movs	r3, #1
}
 80170da:	4618      	mov	r0, r3
 80170dc:	370c      	adds	r7, #12
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr

080170e6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80170e6:	b480      	push	{r7}
 80170e8:	b083      	sub	sp, #12
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2200      	movs	r2, #0
 80170f2:	601a      	str	r2, [r3, #0]
}
 80170f4:	bf00      	nop
 80170f6:	370c      	adds	r7, #12
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017104:	4803      	ldr	r0, [pc, #12]	; (8017114 <sys_init+0x14>)
 8017106:	f7ed fd55 	bl	8004bb4 <osMutexCreate>
 801710a:	4603      	mov	r3, r0
 801710c:	4a02      	ldr	r2, [pc, #8]	; (8017118 <sys_init+0x18>)
 801710e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017110:	bf00      	nop
 8017112:	bd80      	pop	{r7, pc}
 8017114:	0801bd80 	.word	0x0801bd80
 8017118:	20010aac 	.word	0x20010aac

0801711c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801711c:	b580      	push	{r7, lr}
 801711e:	b084      	sub	sp, #16
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017124:	2300      	movs	r3, #0
 8017126:	60bb      	str	r3, [r7, #8]
 8017128:	2300      	movs	r3, #0
 801712a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801712c:	f107 0308 	add.w	r3, r7, #8
 8017130:	4618      	mov	r0, r3
 8017132:	f7ed fd3f 	bl	8004bb4 <osMutexCreate>
 8017136:	4602      	mov	r2, r0
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d102      	bne.n	801714a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017144:	f04f 33ff 	mov.w	r3, #4294967295
 8017148:	e000      	b.n	801714c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801714a:	2300      	movs	r3, #0
}
 801714c:	4618      	mov	r0, r3
 801714e:	3710      	adds	r7, #16
 8017150:	46bd      	mov	sp, r7
 8017152:	bd80      	pop	{r7, pc}

08017154 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b082      	sub	sp, #8
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f04f 31ff 	mov.w	r1, #4294967295
 8017164:	4618      	mov	r0, r3
 8017166:	f7ed fd3d 	bl	8004be4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801716a:	bf00      	nop
 801716c:	3708      	adds	r7, #8
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}

08017172 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017172:	b580      	push	{r7, lr}
 8017174:	b082      	sub	sp, #8
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	4618      	mov	r0, r3
 8017180:	f7ed fd7e 	bl	8004c80 <osMutexRelease>
}
 8017184:	bf00      	nop
 8017186:	3708      	adds	r7, #8
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}

0801718c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b08c      	sub	sp, #48	; 0x30
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
 8017198:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801719a:	f107 0314 	add.w	r3, r7, #20
 801719e:	2200      	movs	r2, #0
 80171a0:	601a      	str	r2, [r3, #0]
 80171a2:	605a      	str	r2, [r3, #4]
 80171a4:	609a      	str	r2, [r3, #8]
 80171a6:	60da      	str	r2, [r3, #12]
 80171a8:	611a      	str	r2, [r3, #16]
 80171aa:	615a      	str	r2, [r3, #20]
 80171ac:	619a      	str	r2, [r3, #24]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	617b      	str	r3, [r7, #20]
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	61bb      	str	r3, [r7, #24]
 80171b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b8:	b21b      	sxth	r3, r3
 80171ba:	83bb      	strh	r3, [r7, #28]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80171c0:	f107 0314 	add.w	r3, r7, #20
 80171c4:	6879      	ldr	r1, [r7, #4]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7ed fc94 	bl	8004af4 <osThreadCreate>
 80171cc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3730      	adds	r7, #48	; 0x30
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
	...

080171d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80171dc:	4b04      	ldr	r3, [pc, #16]	; (80171f0 <sys_arch_protect+0x18>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	f04f 31ff 	mov.w	r1, #4294967295
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7ed fcfd 	bl	8004be4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80171ea:	2301      	movs	r3, #1
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	bd80      	pop	{r7, pc}
 80171f0:	20010aac 	.word	0x20010aac

080171f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80171fc:	4b04      	ldr	r3, [pc, #16]	; (8017210 <sys_arch_unprotect+0x1c>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	4618      	mov	r0, r3
 8017202:	f7ed fd3d 	bl	8004c80 <osMutexRelease>
}
 8017206:	bf00      	nop
 8017208:	3708      	adds	r7, #8
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
 801720e:	bf00      	nop
 8017210:	20010aac 	.word	0x20010aac

08017214 <rand>:
 8017214:	4b16      	ldr	r3, [pc, #88]	; (8017270 <rand+0x5c>)
 8017216:	b510      	push	{r4, lr}
 8017218:	681c      	ldr	r4, [r3, #0]
 801721a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801721c:	b9b3      	cbnz	r3, 801724c <rand+0x38>
 801721e:	2018      	movs	r0, #24
 8017220:	f000 fa8e 	bl	8017740 <malloc>
 8017224:	4602      	mov	r2, r0
 8017226:	6320      	str	r0, [r4, #48]	; 0x30
 8017228:	b920      	cbnz	r0, 8017234 <rand+0x20>
 801722a:	4b12      	ldr	r3, [pc, #72]	; (8017274 <rand+0x60>)
 801722c:	4812      	ldr	r0, [pc, #72]	; (8017278 <rand+0x64>)
 801722e:	2152      	movs	r1, #82	; 0x52
 8017230:	f000 fa1c 	bl	801766c <__assert_func>
 8017234:	4911      	ldr	r1, [pc, #68]	; (801727c <rand+0x68>)
 8017236:	4b12      	ldr	r3, [pc, #72]	; (8017280 <rand+0x6c>)
 8017238:	e9c0 1300 	strd	r1, r3, [r0]
 801723c:	4b11      	ldr	r3, [pc, #68]	; (8017284 <rand+0x70>)
 801723e:	6083      	str	r3, [r0, #8]
 8017240:	230b      	movs	r3, #11
 8017242:	8183      	strh	r3, [r0, #12]
 8017244:	2100      	movs	r1, #0
 8017246:	2001      	movs	r0, #1
 8017248:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801724c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801724e:	480e      	ldr	r0, [pc, #56]	; (8017288 <rand+0x74>)
 8017250:	690b      	ldr	r3, [r1, #16]
 8017252:	694c      	ldr	r4, [r1, #20]
 8017254:	4a0d      	ldr	r2, [pc, #52]	; (801728c <rand+0x78>)
 8017256:	4358      	muls	r0, r3
 8017258:	fb02 0004 	mla	r0, r2, r4, r0
 801725c:	fba3 3202 	umull	r3, r2, r3, r2
 8017260:	3301      	adds	r3, #1
 8017262:	eb40 0002 	adc.w	r0, r0, r2
 8017266:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801726a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801726e:	bd10      	pop	{r4, pc}
 8017270:	2000008c 	.word	0x2000008c
 8017274:	0801bd88 	.word	0x0801bd88
 8017278:	0801bd9f 	.word	0x0801bd9f
 801727c:	abcd330e 	.word	0xabcd330e
 8017280:	e66d1234 	.word	0xe66d1234
 8017284:	0005deec 	.word	0x0005deec
 8017288:	5851f42d 	.word	0x5851f42d
 801728c:	4c957f2d 	.word	0x4c957f2d

08017290 <std>:
 8017290:	2300      	movs	r3, #0
 8017292:	b510      	push	{r4, lr}
 8017294:	4604      	mov	r4, r0
 8017296:	e9c0 3300 	strd	r3, r3, [r0]
 801729a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801729e:	6083      	str	r3, [r0, #8]
 80172a0:	8181      	strh	r1, [r0, #12]
 80172a2:	6643      	str	r3, [r0, #100]	; 0x64
 80172a4:	81c2      	strh	r2, [r0, #14]
 80172a6:	6183      	str	r3, [r0, #24]
 80172a8:	4619      	mov	r1, r3
 80172aa:	2208      	movs	r2, #8
 80172ac:	305c      	adds	r0, #92	; 0x5c
 80172ae:	f000 f904 	bl	80174ba <memset>
 80172b2:	4b05      	ldr	r3, [pc, #20]	; (80172c8 <std+0x38>)
 80172b4:	6263      	str	r3, [r4, #36]	; 0x24
 80172b6:	4b05      	ldr	r3, [pc, #20]	; (80172cc <std+0x3c>)
 80172b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80172ba:	4b05      	ldr	r3, [pc, #20]	; (80172d0 <std+0x40>)
 80172bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80172be:	4b05      	ldr	r3, [pc, #20]	; (80172d4 <std+0x44>)
 80172c0:	6224      	str	r4, [r4, #32]
 80172c2:	6323      	str	r3, [r4, #48]	; 0x30
 80172c4:	bd10      	pop	{r4, pc}
 80172c6:	bf00      	nop
 80172c8:	08017415 	.word	0x08017415
 80172cc:	08017437 	.word	0x08017437
 80172d0:	0801746f 	.word	0x0801746f
 80172d4:	08017493 	.word	0x08017493

080172d8 <stdio_exit_handler>:
 80172d8:	4a02      	ldr	r2, [pc, #8]	; (80172e4 <stdio_exit_handler+0xc>)
 80172da:	4903      	ldr	r1, [pc, #12]	; (80172e8 <stdio_exit_handler+0x10>)
 80172dc:	4803      	ldr	r0, [pc, #12]	; (80172ec <stdio_exit_handler+0x14>)
 80172de:	f000 b869 	b.w	80173b4 <_fwalk_sglue>
 80172e2:	bf00      	nop
 80172e4:	20000034 	.word	0x20000034
 80172e8:	08017f5d 	.word	0x08017f5d
 80172ec:	20000040 	.word	0x20000040

080172f0 <cleanup_stdio>:
 80172f0:	6841      	ldr	r1, [r0, #4]
 80172f2:	4b0c      	ldr	r3, [pc, #48]	; (8017324 <cleanup_stdio+0x34>)
 80172f4:	4299      	cmp	r1, r3
 80172f6:	b510      	push	{r4, lr}
 80172f8:	4604      	mov	r4, r0
 80172fa:	d001      	beq.n	8017300 <cleanup_stdio+0x10>
 80172fc:	f000 fe2e 	bl	8017f5c <_fflush_r>
 8017300:	68a1      	ldr	r1, [r4, #8]
 8017302:	4b09      	ldr	r3, [pc, #36]	; (8017328 <cleanup_stdio+0x38>)
 8017304:	4299      	cmp	r1, r3
 8017306:	d002      	beq.n	801730e <cleanup_stdio+0x1e>
 8017308:	4620      	mov	r0, r4
 801730a:	f000 fe27 	bl	8017f5c <_fflush_r>
 801730e:	68e1      	ldr	r1, [r4, #12]
 8017310:	4b06      	ldr	r3, [pc, #24]	; (801732c <cleanup_stdio+0x3c>)
 8017312:	4299      	cmp	r1, r3
 8017314:	d004      	beq.n	8017320 <cleanup_stdio+0x30>
 8017316:	4620      	mov	r0, r4
 8017318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801731c:	f000 be1e 	b.w	8017f5c <_fflush_r>
 8017320:	bd10      	pop	{r4, pc}
 8017322:	bf00      	nop
 8017324:	20010ab0 	.word	0x20010ab0
 8017328:	20010b18 	.word	0x20010b18
 801732c:	20010b80 	.word	0x20010b80

08017330 <global_stdio_init.part.0>:
 8017330:	b510      	push	{r4, lr}
 8017332:	4b0b      	ldr	r3, [pc, #44]	; (8017360 <global_stdio_init.part.0+0x30>)
 8017334:	4c0b      	ldr	r4, [pc, #44]	; (8017364 <global_stdio_init.part.0+0x34>)
 8017336:	4a0c      	ldr	r2, [pc, #48]	; (8017368 <global_stdio_init.part.0+0x38>)
 8017338:	601a      	str	r2, [r3, #0]
 801733a:	4620      	mov	r0, r4
 801733c:	2200      	movs	r2, #0
 801733e:	2104      	movs	r1, #4
 8017340:	f7ff ffa6 	bl	8017290 <std>
 8017344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017348:	2201      	movs	r2, #1
 801734a:	2109      	movs	r1, #9
 801734c:	f7ff ffa0 	bl	8017290 <std>
 8017350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017354:	2202      	movs	r2, #2
 8017356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801735a:	2112      	movs	r1, #18
 801735c:	f7ff bf98 	b.w	8017290 <std>
 8017360:	20010be8 	.word	0x20010be8
 8017364:	20010ab0 	.word	0x20010ab0
 8017368:	080172d9 	.word	0x080172d9

0801736c <__sfp_lock_acquire>:
 801736c:	4801      	ldr	r0, [pc, #4]	; (8017374 <__sfp_lock_acquire+0x8>)
 801736e:	f000 b96d 	b.w	801764c <__retarget_lock_acquire_recursive>
 8017372:	bf00      	nop
 8017374:	20010bf1 	.word	0x20010bf1

08017378 <__sfp_lock_release>:
 8017378:	4801      	ldr	r0, [pc, #4]	; (8017380 <__sfp_lock_release+0x8>)
 801737a:	f000 b968 	b.w	801764e <__retarget_lock_release_recursive>
 801737e:	bf00      	nop
 8017380:	20010bf1 	.word	0x20010bf1

08017384 <__sinit>:
 8017384:	b510      	push	{r4, lr}
 8017386:	4604      	mov	r4, r0
 8017388:	f7ff fff0 	bl	801736c <__sfp_lock_acquire>
 801738c:	6a23      	ldr	r3, [r4, #32]
 801738e:	b11b      	cbz	r3, 8017398 <__sinit+0x14>
 8017390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017394:	f7ff bff0 	b.w	8017378 <__sfp_lock_release>
 8017398:	4b04      	ldr	r3, [pc, #16]	; (80173ac <__sinit+0x28>)
 801739a:	6223      	str	r3, [r4, #32]
 801739c:	4b04      	ldr	r3, [pc, #16]	; (80173b0 <__sinit+0x2c>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d1f5      	bne.n	8017390 <__sinit+0xc>
 80173a4:	f7ff ffc4 	bl	8017330 <global_stdio_init.part.0>
 80173a8:	e7f2      	b.n	8017390 <__sinit+0xc>
 80173aa:	bf00      	nop
 80173ac:	080172f1 	.word	0x080172f1
 80173b0:	20010be8 	.word	0x20010be8

080173b4 <_fwalk_sglue>:
 80173b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173b8:	4607      	mov	r7, r0
 80173ba:	4688      	mov	r8, r1
 80173bc:	4614      	mov	r4, r2
 80173be:	2600      	movs	r6, #0
 80173c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80173c4:	f1b9 0901 	subs.w	r9, r9, #1
 80173c8:	d505      	bpl.n	80173d6 <_fwalk_sglue+0x22>
 80173ca:	6824      	ldr	r4, [r4, #0]
 80173cc:	2c00      	cmp	r4, #0
 80173ce:	d1f7      	bne.n	80173c0 <_fwalk_sglue+0xc>
 80173d0:	4630      	mov	r0, r6
 80173d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173d6:	89ab      	ldrh	r3, [r5, #12]
 80173d8:	2b01      	cmp	r3, #1
 80173da:	d907      	bls.n	80173ec <_fwalk_sglue+0x38>
 80173dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173e0:	3301      	adds	r3, #1
 80173e2:	d003      	beq.n	80173ec <_fwalk_sglue+0x38>
 80173e4:	4629      	mov	r1, r5
 80173e6:	4638      	mov	r0, r7
 80173e8:	47c0      	blx	r8
 80173ea:	4306      	orrs	r6, r0
 80173ec:	3568      	adds	r5, #104	; 0x68
 80173ee:	e7e9      	b.n	80173c4 <_fwalk_sglue+0x10>

080173f0 <iprintf>:
 80173f0:	b40f      	push	{r0, r1, r2, r3}
 80173f2:	b507      	push	{r0, r1, r2, lr}
 80173f4:	4906      	ldr	r1, [pc, #24]	; (8017410 <iprintf+0x20>)
 80173f6:	ab04      	add	r3, sp, #16
 80173f8:	6808      	ldr	r0, [r1, #0]
 80173fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80173fe:	6881      	ldr	r1, [r0, #8]
 8017400:	9301      	str	r3, [sp, #4]
 8017402:	f000 fa7b 	bl	80178fc <_vfiprintf_r>
 8017406:	b003      	add	sp, #12
 8017408:	f85d eb04 	ldr.w	lr, [sp], #4
 801740c:	b004      	add	sp, #16
 801740e:	4770      	bx	lr
 8017410:	2000008c 	.word	0x2000008c

08017414 <__sread>:
 8017414:	b510      	push	{r4, lr}
 8017416:	460c      	mov	r4, r1
 8017418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801741c:	f000 f8ce 	bl	80175bc <_read_r>
 8017420:	2800      	cmp	r0, #0
 8017422:	bfab      	itete	ge
 8017424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017426:	89a3      	ldrhlt	r3, [r4, #12]
 8017428:	181b      	addge	r3, r3, r0
 801742a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801742e:	bfac      	ite	ge
 8017430:	6563      	strge	r3, [r4, #84]	; 0x54
 8017432:	81a3      	strhlt	r3, [r4, #12]
 8017434:	bd10      	pop	{r4, pc}

08017436 <__swrite>:
 8017436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801743a:	461f      	mov	r7, r3
 801743c:	898b      	ldrh	r3, [r1, #12]
 801743e:	05db      	lsls	r3, r3, #23
 8017440:	4605      	mov	r5, r0
 8017442:	460c      	mov	r4, r1
 8017444:	4616      	mov	r6, r2
 8017446:	d505      	bpl.n	8017454 <__swrite+0x1e>
 8017448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801744c:	2302      	movs	r3, #2
 801744e:	2200      	movs	r2, #0
 8017450:	f000 f8a2 	bl	8017598 <_lseek_r>
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801745a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801745e:	81a3      	strh	r3, [r4, #12]
 8017460:	4632      	mov	r2, r6
 8017462:	463b      	mov	r3, r7
 8017464:	4628      	mov	r0, r5
 8017466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801746a:	f000 b8b9 	b.w	80175e0 <_write_r>

0801746e <__sseek>:
 801746e:	b510      	push	{r4, lr}
 8017470:	460c      	mov	r4, r1
 8017472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017476:	f000 f88f 	bl	8017598 <_lseek_r>
 801747a:	1c43      	adds	r3, r0, #1
 801747c:	89a3      	ldrh	r3, [r4, #12]
 801747e:	bf15      	itete	ne
 8017480:	6560      	strne	r0, [r4, #84]	; 0x54
 8017482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801748a:	81a3      	strheq	r3, [r4, #12]
 801748c:	bf18      	it	ne
 801748e:	81a3      	strhne	r3, [r4, #12]
 8017490:	bd10      	pop	{r4, pc}

08017492 <__sclose>:
 8017492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017496:	f000 b819 	b.w	80174cc <_close_r>

0801749a <memcmp>:
 801749a:	b510      	push	{r4, lr}
 801749c:	3901      	subs	r1, #1
 801749e:	4402      	add	r2, r0
 80174a0:	4290      	cmp	r0, r2
 80174a2:	d101      	bne.n	80174a8 <memcmp+0xe>
 80174a4:	2000      	movs	r0, #0
 80174a6:	e005      	b.n	80174b4 <memcmp+0x1a>
 80174a8:	7803      	ldrb	r3, [r0, #0]
 80174aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80174ae:	42a3      	cmp	r3, r4
 80174b0:	d001      	beq.n	80174b6 <memcmp+0x1c>
 80174b2:	1b18      	subs	r0, r3, r4
 80174b4:	bd10      	pop	{r4, pc}
 80174b6:	3001      	adds	r0, #1
 80174b8:	e7f2      	b.n	80174a0 <memcmp+0x6>

080174ba <memset>:
 80174ba:	4402      	add	r2, r0
 80174bc:	4603      	mov	r3, r0
 80174be:	4293      	cmp	r3, r2
 80174c0:	d100      	bne.n	80174c4 <memset+0xa>
 80174c2:	4770      	bx	lr
 80174c4:	f803 1b01 	strb.w	r1, [r3], #1
 80174c8:	e7f9      	b.n	80174be <memset+0x4>
	...

080174cc <_close_r>:
 80174cc:	b538      	push	{r3, r4, r5, lr}
 80174ce:	4d06      	ldr	r5, [pc, #24]	; (80174e8 <_close_r+0x1c>)
 80174d0:	2300      	movs	r3, #0
 80174d2:	4604      	mov	r4, r0
 80174d4:	4608      	mov	r0, r1
 80174d6:	602b      	str	r3, [r5, #0]
 80174d8:	f7e9 fb93 	bl	8000c02 <_close>
 80174dc:	1c43      	adds	r3, r0, #1
 80174de:	d102      	bne.n	80174e6 <_close_r+0x1a>
 80174e0:	682b      	ldr	r3, [r5, #0]
 80174e2:	b103      	cbz	r3, 80174e6 <_close_r+0x1a>
 80174e4:	6023      	str	r3, [r4, #0]
 80174e6:	bd38      	pop	{r3, r4, r5, pc}
 80174e8:	20010bec 	.word	0x20010bec

080174ec <_reclaim_reent>:
 80174ec:	4b29      	ldr	r3, [pc, #164]	; (8017594 <_reclaim_reent+0xa8>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4283      	cmp	r3, r0
 80174f2:	b570      	push	{r4, r5, r6, lr}
 80174f4:	4604      	mov	r4, r0
 80174f6:	d04b      	beq.n	8017590 <_reclaim_reent+0xa4>
 80174f8:	69c3      	ldr	r3, [r0, #28]
 80174fa:	b143      	cbz	r3, 801750e <_reclaim_reent+0x22>
 80174fc:	68db      	ldr	r3, [r3, #12]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d144      	bne.n	801758c <_reclaim_reent+0xa0>
 8017502:	69e3      	ldr	r3, [r4, #28]
 8017504:	6819      	ldr	r1, [r3, #0]
 8017506:	b111      	cbz	r1, 801750e <_reclaim_reent+0x22>
 8017508:	4620      	mov	r0, r4
 801750a:	f000 f8cd 	bl	80176a8 <_free_r>
 801750e:	6961      	ldr	r1, [r4, #20]
 8017510:	b111      	cbz	r1, 8017518 <_reclaim_reent+0x2c>
 8017512:	4620      	mov	r0, r4
 8017514:	f000 f8c8 	bl	80176a8 <_free_r>
 8017518:	69e1      	ldr	r1, [r4, #28]
 801751a:	b111      	cbz	r1, 8017522 <_reclaim_reent+0x36>
 801751c:	4620      	mov	r0, r4
 801751e:	f000 f8c3 	bl	80176a8 <_free_r>
 8017522:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017524:	b111      	cbz	r1, 801752c <_reclaim_reent+0x40>
 8017526:	4620      	mov	r0, r4
 8017528:	f000 f8be 	bl	80176a8 <_free_r>
 801752c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801752e:	b111      	cbz	r1, 8017536 <_reclaim_reent+0x4a>
 8017530:	4620      	mov	r0, r4
 8017532:	f000 f8b9 	bl	80176a8 <_free_r>
 8017536:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017538:	b111      	cbz	r1, 8017540 <_reclaim_reent+0x54>
 801753a:	4620      	mov	r0, r4
 801753c:	f000 f8b4 	bl	80176a8 <_free_r>
 8017540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017542:	b111      	cbz	r1, 801754a <_reclaim_reent+0x5e>
 8017544:	4620      	mov	r0, r4
 8017546:	f000 f8af 	bl	80176a8 <_free_r>
 801754a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801754c:	b111      	cbz	r1, 8017554 <_reclaim_reent+0x68>
 801754e:	4620      	mov	r0, r4
 8017550:	f000 f8aa 	bl	80176a8 <_free_r>
 8017554:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017556:	b111      	cbz	r1, 801755e <_reclaim_reent+0x72>
 8017558:	4620      	mov	r0, r4
 801755a:	f000 f8a5 	bl	80176a8 <_free_r>
 801755e:	6a23      	ldr	r3, [r4, #32]
 8017560:	b1b3      	cbz	r3, 8017590 <_reclaim_reent+0xa4>
 8017562:	4620      	mov	r0, r4
 8017564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017568:	4718      	bx	r3
 801756a:	5949      	ldr	r1, [r1, r5]
 801756c:	b941      	cbnz	r1, 8017580 <_reclaim_reent+0x94>
 801756e:	3504      	adds	r5, #4
 8017570:	69e3      	ldr	r3, [r4, #28]
 8017572:	2d80      	cmp	r5, #128	; 0x80
 8017574:	68d9      	ldr	r1, [r3, #12]
 8017576:	d1f8      	bne.n	801756a <_reclaim_reent+0x7e>
 8017578:	4620      	mov	r0, r4
 801757a:	f000 f895 	bl	80176a8 <_free_r>
 801757e:	e7c0      	b.n	8017502 <_reclaim_reent+0x16>
 8017580:	680e      	ldr	r6, [r1, #0]
 8017582:	4620      	mov	r0, r4
 8017584:	f000 f890 	bl	80176a8 <_free_r>
 8017588:	4631      	mov	r1, r6
 801758a:	e7ef      	b.n	801756c <_reclaim_reent+0x80>
 801758c:	2500      	movs	r5, #0
 801758e:	e7ef      	b.n	8017570 <_reclaim_reent+0x84>
 8017590:	bd70      	pop	{r4, r5, r6, pc}
 8017592:	bf00      	nop
 8017594:	2000008c 	.word	0x2000008c

08017598 <_lseek_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4d07      	ldr	r5, [pc, #28]	; (80175b8 <_lseek_r+0x20>)
 801759c:	4604      	mov	r4, r0
 801759e:	4608      	mov	r0, r1
 80175a0:	4611      	mov	r1, r2
 80175a2:	2200      	movs	r2, #0
 80175a4:	602a      	str	r2, [r5, #0]
 80175a6:	461a      	mov	r2, r3
 80175a8:	f7e9 fb52 	bl	8000c50 <_lseek>
 80175ac:	1c43      	adds	r3, r0, #1
 80175ae:	d102      	bne.n	80175b6 <_lseek_r+0x1e>
 80175b0:	682b      	ldr	r3, [r5, #0]
 80175b2:	b103      	cbz	r3, 80175b6 <_lseek_r+0x1e>
 80175b4:	6023      	str	r3, [r4, #0]
 80175b6:	bd38      	pop	{r3, r4, r5, pc}
 80175b8:	20010bec 	.word	0x20010bec

080175bc <_read_r>:
 80175bc:	b538      	push	{r3, r4, r5, lr}
 80175be:	4d07      	ldr	r5, [pc, #28]	; (80175dc <_read_r+0x20>)
 80175c0:	4604      	mov	r4, r0
 80175c2:	4608      	mov	r0, r1
 80175c4:	4611      	mov	r1, r2
 80175c6:	2200      	movs	r2, #0
 80175c8:	602a      	str	r2, [r5, #0]
 80175ca:	461a      	mov	r2, r3
 80175cc:	f7e9 fae0 	bl	8000b90 <_read>
 80175d0:	1c43      	adds	r3, r0, #1
 80175d2:	d102      	bne.n	80175da <_read_r+0x1e>
 80175d4:	682b      	ldr	r3, [r5, #0]
 80175d6:	b103      	cbz	r3, 80175da <_read_r+0x1e>
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	20010bec 	.word	0x20010bec

080175e0 <_write_r>:
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	4d07      	ldr	r5, [pc, #28]	; (8017600 <_write_r+0x20>)
 80175e4:	4604      	mov	r4, r0
 80175e6:	4608      	mov	r0, r1
 80175e8:	4611      	mov	r1, r2
 80175ea:	2200      	movs	r2, #0
 80175ec:	602a      	str	r2, [r5, #0]
 80175ee:	461a      	mov	r2, r3
 80175f0:	f7e9 faeb 	bl	8000bca <_write>
 80175f4:	1c43      	adds	r3, r0, #1
 80175f6:	d102      	bne.n	80175fe <_write_r+0x1e>
 80175f8:	682b      	ldr	r3, [r5, #0]
 80175fa:	b103      	cbz	r3, 80175fe <_write_r+0x1e>
 80175fc:	6023      	str	r3, [r4, #0]
 80175fe:	bd38      	pop	{r3, r4, r5, pc}
 8017600:	20010bec 	.word	0x20010bec

08017604 <__libc_init_array>:
 8017604:	b570      	push	{r4, r5, r6, lr}
 8017606:	4d0d      	ldr	r5, [pc, #52]	; (801763c <__libc_init_array+0x38>)
 8017608:	4c0d      	ldr	r4, [pc, #52]	; (8017640 <__libc_init_array+0x3c>)
 801760a:	1b64      	subs	r4, r4, r5
 801760c:	10a4      	asrs	r4, r4, #2
 801760e:	2600      	movs	r6, #0
 8017610:	42a6      	cmp	r6, r4
 8017612:	d109      	bne.n	8017628 <__libc_init_array+0x24>
 8017614:	4d0b      	ldr	r5, [pc, #44]	; (8017644 <__libc_init_array+0x40>)
 8017616:	4c0c      	ldr	r4, [pc, #48]	; (8017648 <__libc_init_array+0x44>)
 8017618:	f000 fe50 	bl	80182bc <_init>
 801761c:	1b64      	subs	r4, r4, r5
 801761e:	10a4      	asrs	r4, r4, #2
 8017620:	2600      	movs	r6, #0
 8017622:	42a6      	cmp	r6, r4
 8017624:	d105      	bne.n	8017632 <__libc_init_array+0x2e>
 8017626:	bd70      	pop	{r4, r5, r6, pc}
 8017628:	f855 3b04 	ldr.w	r3, [r5], #4
 801762c:	4798      	blx	r3
 801762e:	3601      	adds	r6, #1
 8017630:	e7ee      	b.n	8017610 <__libc_init_array+0xc>
 8017632:	f855 3b04 	ldr.w	r3, [r5], #4
 8017636:	4798      	blx	r3
 8017638:	3601      	adds	r6, #1
 801763a:	e7f2      	b.n	8017622 <__libc_init_array+0x1e>
 801763c:	0801be70 	.word	0x0801be70
 8017640:	0801be70 	.word	0x0801be70
 8017644:	0801be70 	.word	0x0801be70
 8017648:	0801be74 	.word	0x0801be74

0801764c <__retarget_lock_acquire_recursive>:
 801764c:	4770      	bx	lr

0801764e <__retarget_lock_release_recursive>:
 801764e:	4770      	bx	lr

08017650 <memcpy>:
 8017650:	440a      	add	r2, r1
 8017652:	4291      	cmp	r1, r2
 8017654:	f100 33ff 	add.w	r3, r0, #4294967295
 8017658:	d100      	bne.n	801765c <memcpy+0xc>
 801765a:	4770      	bx	lr
 801765c:	b510      	push	{r4, lr}
 801765e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017666:	4291      	cmp	r1, r2
 8017668:	d1f9      	bne.n	801765e <memcpy+0xe>
 801766a:	bd10      	pop	{r4, pc}

0801766c <__assert_func>:
 801766c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801766e:	4614      	mov	r4, r2
 8017670:	461a      	mov	r2, r3
 8017672:	4b09      	ldr	r3, [pc, #36]	; (8017698 <__assert_func+0x2c>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	4605      	mov	r5, r0
 8017678:	68d8      	ldr	r0, [r3, #12]
 801767a:	b14c      	cbz	r4, 8017690 <__assert_func+0x24>
 801767c:	4b07      	ldr	r3, [pc, #28]	; (801769c <__assert_func+0x30>)
 801767e:	9100      	str	r1, [sp, #0]
 8017680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017684:	4906      	ldr	r1, [pc, #24]	; (80176a0 <__assert_func+0x34>)
 8017686:	462b      	mov	r3, r5
 8017688:	f000 fc90 	bl	8017fac <fiprintf>
 801768c:	f000 fd46 	bl	801811c <abort>
 8017690:	4b04      	ldr	r3, [pc, #16]	; (80176a4 <__assert_func+0x38>)
 8017692:	461c      	mov	r4, r3
 8017694:	e7f3      	b.n	801767e <__assert_func+0x12>
 8017696:	bf00      	nop
 8017698:	2000008c 	.word	0x2000008c
 801769c:	0801bdf7 	.word	0x0801bdf7
 80176a0:	0801be04 	.word	0x0801be04
 80176a4:	0801be32 	.word	0x0801be32

080176a8 <_free_r>:
 80176a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176aa:	2900      	cmp	r1, #0
 80176ac:	d044      	beq.n	8017738 <_free_r+0x90>
 80176ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176b2:	9001      	str	r0, [sp, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	f1a1 0404 	sub.w	r4, r1, #4
 80176ba:	bfb8      	it	lt
 80176bc:	18e4      	addlt	r4, r4, r3
 80176be:	f000 f8e7 	bl	8017890 <__malloc_lock>
 80176c2:	4a1e      	ldr	r2, [pc, #120]	; (801773c <_free_r+0x94>)
 80176c4:	9801      	ldr	r0, [sp, #4]
 80176c6:	6813      	ldr	r3, [r2, #0]
 80176c8:	b933      	cbnz	r3, 80176d8 <_free_r+0x30>
 80176ca:	6063      	str	r3, [r4, #4]
 80176cc:	6014      	str	r4, [r2, #0]
 80176ce:	b003      	add	sp, #12
 80176d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176d4:	f000 b8e2 	b.w	801789c <__malloc_unlock>
 80176d8:	42a3      	cmp	r3, r4
 80176da:	d908      	bls.n	80176ee <_free_r+0x46>
 80176dc:	6825      	ldr	r5, [r4, #0]
 80176de:	1961      	adds	r1, r4, r5
 80176e0:	428b      	cmp	r3, r1
 80176e2:	bf01      	itttt	eq
 80176e4:	6819      	ldreq	r1, [r3, #0]
 80176e6:	685b      	ldreq	r3, [r3, #4]
 80176e8:	1949      	addeq	r1, r1, r5
 80176ea:	6021      	streq	r1, [r4, #0]
 80176ec:	e7ed      	b.n	80176ca <_free_r+0x22>
 80176ee:	461a      	mov	r2, r3
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	b10b      	cbz	r3, 80176f8 <_free_r+0x50>
 80176f4:	42a3      	cmp	r3, r4
 80176f6:	d9fa      	bls.n	80176ee <_free_r+0x46>
 80176f8:	6811      	ldr	r1, [r2, #0]
 80176fa:	1855      	adds	r5, r2, r1
 80176fc:	42a5      	cmp	r5, r4
 80176fe:	d10b      	bne.n	8017718 <_free_r+0x70>
 8017700:	6824      	ldr	r4, [r4, #0]
 8017702:	4421      	add	r1, r4
 8017704:	1854      	adds	r4, r2, r1
 8017706:	42a3      	cmp	r3, r4
 8017708:	6011      	str	r1, [r2, #0]
 801770a:	d1e0      	bne.n	80176ce <_free_r+0x26>
 801770c:	681c      	ldr	r4, [r3, #0]
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	6053      	str	r3, [r2, #4]
 8017712:	440c      	add	r4, r1
 8017714:	6014      	str	r4, [r2, #0]
 8017716:	e7da      	b.n	80176ce <_free_r+0x26>
 8017718:	d902      	bls.n	8017720 <_free_r+0x78>
 801771a:	230c      	movs	r3, #12
 801771c:	6003      	str	r3, [r0, #0]
 801771e:	e7d6      	b.n	80176ce <_free_r+0x26>
 8017720:	6825      	ldr	r5, [r4, #0]
 8017722:	1961      	adds	r1, r4, r5
 8017724:	428b      	cmp	r3, r1
 8017726:	bf04      	itt	eq
 8017728:	6819      	ldreq	r1, [r3, #0]
 801772a:	685b      	ldreq	r3, [r3, #4]
 801772c:	6063      	str	r3, [r4, #4]
 801772e:	bf04      	itt	eq
 8017730:	1949      	addeq	r1, r1, r5
 8017732:	6021      	streq	r1, [r4, #0]
 8017734:	6054      	str	r4, [r2, #4]
 8017736:	e7ca      	b.n	80176ce <_free_r+0x26>
 8017738:	b003      	add	sp, #12
 801773a:	bd30      	pop	{r4, r5, pc}
 801773c:	20010bf4 	.word	0x20010bf4

08017740 <malloc>:
 8017740:	4b02      	ldr	r3, [pc, #8]	; (801774c <malloc+0xc>)
 8017742:	4601      	mov	r1, r0
 8017744:	6818      	ldr	r0, [r3, #0]
 8017746:	f000 b823 	b.w	8017790 <_malloc_r>
 801774a:	bf00      	nop
 801774c:	2000008c 	.word	0x2000008c

08017750 <sbrk_aligned>:
 8017750:	b570      	push	{r4, r5, r6, lr}
 8017752:	4e0e      	ldr	r6, [pc, #56]	; (801778c <sbrk_aligned+0x3c>)
 8017754:	460c      	mov	r4, r1
 8017756:	6831      	ldr	r1, [r6, #0]
 8017758:	4605      	mov	r5, r0
 801775a:	b911      	cbnz	r1, 8017762 <sbrk_aligned+0x12>
 801775c:	f000 fcce 	bl	80180fc <_sbrk_r>
 8017760:	6030      	str	r0, [r6, #0]
 8017762:	4621      	mov	r1, r4
 8017764:	4628      	mov	r0, r5
 8017766:	f000 fcc9 	bl	80180fc <_sbrk_r>
 801776a:	1c43      	adds	r3, r0, #1
 801776c:	d00a      	beq.n	8017784 <sbrk_aligned+0x34>
 801776e:	1cc4      	adds	r4, r0, #3
 8017770:	f024 0403 	bic.w	r4, r4, #3
 8017774:	42a0      	cmp	r0, r4
 8017776:	d007      	beq.n	8017788 <sbrk_aligned+0x38>
 8017778:	1a21      	subs	r1, r4, r0
 801777a:	4628      	mov	r0, r5
 801777c:	f000 fcbe 	bl	80180fc <_sbrk_r>
 8017780:	3001      	adds	r0, #1
 8017782:	d101      	bne.n	8017788 <sbrk_aligned+0x38>
 8017784:	f04f 34ff 	mov.w	r4, #4294967295
 8017788:	4620      	mov	r0, r4
 801778a:	bd70      	pop	{r4, r5, r6, pc}
 801778c:	20010bf8 	.word	0x20010bf8

08017790 <_malloc_r>:
 8017790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017794:	1ccd      	adds	r5, r1, #3
 8017796:	f025 0503 	bic.w	r5, r5, #3
 801779a:	3508      	adds	r5, #8
 801779c:	2d0c      	cmp	r5, #12
 801779e:	bf38      	it	cc
 80177a0:	250c      	movcc	r5, #12
 80177a2:	2d00      	cmp	r5, #0
 80177a4:	4607      	mov	r7, r0
 80177a6:	db01      	blt.n	80177ac <_malloc_r+0x1c>
 80177a8:	42a9      	cmp	r1, r5
 80177aa:	d905      	bls.n	80177b8 <_malloc_r+0x28>
 80177ac:	230c      	movs	r3, #12
 80177ae:	603b      	str	r3, [r7, #0]
 80177b0:	2600      	movs	r6, #0
 80177b2:	4630      	mov	r0, r6
 80177b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801788c <_malloc_r+0xfc>
 80177bc:	f000 f868 	bl	8017890 <__malloc_lock>
 80177c0:	f8d8 3000 	ldr.w	r3, [r8]
 80177c4:	461c      	mov	r4, r3
 80177c6:	bb5c      	cbnz	r4, 8017820 <_malloc_r+0x90>
 80177c8:	4629      	mov	r1, r5
 80177ca:	4638      	mov	r0, r7
 80177cc:	f7ff ffc0 	bl	8017750 <sbrk_aligned>
 80177d0:	1c43      	adds	r3, r0, #1
 80177d2:	4604      	mov	r4, r0
 80177d4:	d155      	bne.n	8017882 <_malloc_r+0xf2>
 80177d6:	f8d8 4000 	ldr.w	r4, [r8]
 80177da:	4626      	mov	r6, r4
 80177dc:	2e00      	cmp	r6, #0
 80177de:	d145      	bne.n	801786c <_malloc_r+0xdc>
 80177e0:	2c00      	cmp	r4, #0
 80177e2:	d048      	beq.n	8017876 <_malloc_r+0xe6>
 80177e4:	6823      	ldr	r3, [r4, #0]
 80177e6:	4631      	mov	r1, r6
 80177e8:	4638      	mov	r0, r7
 80177ea:	eb04 0903 	add.w	r9, r4, r3
 80177ee:	f000 fc85 	bl	80180fc <_sbrk_r>
 80177f2:	4581      	cmp	r9, r0
 80177f4:	d13f      	bne.n	8017876 <_malloc_r+0xe6>
 80177f6:	6821      	ldr	r1, [r4, #0]
 80177f8:	1a6d      	subs	r5, r5, r1
 80177fa:	4629      	mov	r1, r5
 80177fc:	4638      	mov	r0, r7
 80177fe:	f7ff ffa7 	bl	8017750 <sbrk_aligned>
 8017802:	3001      	adds	r0, #1
 8017804:	d037      	beq.n	8017876 <_malloc_r+0xe6>
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	442b      	add	r3, r5
 801780a:	6023      	str	r3, [r4, #0]
 801780c:	f8d8 3000 	ldr.w	r3, [r8]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d038      	beq.n	8017886 <_malloc_r+0xf6>
 8017814:	685a      	ldr	r2, [r3, #4]
 8017816:	42a2      	cmp	r2, r4
 8017818:	d12b      	bne.n	8017872 <_malloc_r+0xe2>
 801781a:	2200      	movs	r2, #0
 801781c:	605a      	str	r2, [r3, #4]
 801781e:	e00f      	b.n	8017840 <_malloc_r+0xb0>
 8017820:	6822      	ldr	r2, [r4, #0]
 8017822:	1b52      	subs	r2, r2, r5
 8017824:	d41f      	bmi.n	8017866 <_malloc_r+0xd6>
 8017826:	2a0b      	cmp	r2, #11
 8017828:	d917      	bls.n	801785a <_malloc_r+0xca>
 801782a:	1961      	adds	r1, r4, r5
 801782c:	42a3      	cmp	r3, r4
 801782e:	6025      	str	r5, [r4, #0]
 8017830:	bf18      	it	ne
 8017832:	6059      	strne	r1, [r3, #4]
 8017834:	6863      	ldr	r3, [r4, #4]
 8017836:	bf08      	it	eq
 8017838:	f8c8 1000 	streq.w	r1, [r8]
 801783c:	5162      	str	r2, [r4, r5]
 801783e:	604b      	str	r3, [r1, #4]
 8017840:	4638      	mov	r0, r7
 8017842:	f104 060b 	add.w	r6, r4, #11
 8017846:	f000 f829 	bl	801789c <__malloc_unlock>
 801784a:	f026 0607 	bic.w	r6, r6, #7
 801784e:	1d23      	adds	r3, r4, #4
 8017850:	1af2      	subs	r2, r6, r3
 8017852:	d0ae      	beq.n	80177b2 <_malloc_r+0x22>
 8017854:	1b9b      	subs	r3, r3, r6
 8017856:	50a3      	str	r3, [r4, r2]
 8017858:	e7ab      	b.n	80177b2 <_malloc_r+0x22>
 801785a:	42a3      	cmp	r3, r4
 801785c:	6862      	ldr	r2, [r4, #4]
 801785e:	d1dd      	bne.n	801781c <_malloc_r+0x8c>
 8017860:	f8c8 2000 	str.w	r2, [r8]
 8017864:	e7ec      	b.n	8017840 <_malloc_r+0xb0>
 8017866:	4623      	mov	r3, r4
 8017868:	6864      	ldr	r4, [r4, #4]
 801786a:	e7ac      	b.n	80177c6 <_malloc_r+0x36>
 801786c:	4634      	mov	r4, r6
 801786e:	6876      	ldr	r6, [r6, #4]
 8017870:	e7b4      	b.n	80177dc <_malloc_r+0x4c>
 8017872:	4613      	mov	r3, r2
 8017874:	e7cc      	b.n	8017810 <_malloc_r+0x80>
 8017876:	230c      	movs	r3, #12
 8017878:	603b      	str	r3, [r7, #0]
 801787a:	4638      	mov	r0, r7
 801787c:	f000 f80e 	bl	801789c <__malloc_unlock>
 8017880:	e797      	b.n	80177b2 <_malloc_r+0x22>
 8017882:	6025      	str	r5, [r4, #0]
 8017884:	e7dc      	b.n	8017840 <_malloc_r+0xb0>
 8017886:	605b      	str	r3, [r3, #4]
 8017888:	deff      	udf	#255	; 0xff
 801788a:	bf00      	nop
 801788c:	20010bf4 	.word	0x20010bf4

08017890 <__malloc_lock>:
 8017890:	4801      	ldr	r0, [pc, #4]	; (8017898 <__malloc_lock+0x8>)
 8017892:	f7ff bedb 	b.w	801764c <__retarget_lock_acquire_recursive>
 8017896:	bf00      	nop
 8017898:	20010bf0 	.word	0x20010bf0

0801789c <__malloc_unlock>:
 801789c:	4801      	ldr	r0, [pc, #4]	; (80178a4 <__malloc_unlock+0x8>)
 801789e:	f7ff bed6 	b.w	801764e <__retarget_lock_release_recursive>
 80178a2:	bf00      	nop
 80178a4:	20010bf0 	.word	0x20010bf0

080178a8 <__sfputc_r>:
 80178a8:	6893      	ldr	r3, [r2, #8]
 80178aa:	3b01      	subs	r3, #1
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	b410      	push	{r4}
 80178b0:	6093      	str	r3, [r2, #8]
 80178b2:	da08      	bge.n	80178c6 <__sfputc_r+0x1e>
 80178b4:	6994      	ldr	r4, [r2, #24]
 80178b6:	42a3      	cmp	r3, r4
 80178b8:	db01      	blt.n	80178be <__sfputc_r+0x16>
 80178ba:	290a      	cmp	r1, #10
 80178bc:	d103      	bne.n	80178c6 <__sfputc_r+0x1e>
 80178be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178c2:	f000 bb85 	b.w	8017fd0 <__swbuf_r>
 80178c6:	6813      	ldr	r3, [r2, #0]
 80178c8:	1c58      	adds	r0, r3, #1
 80178ca:	6010      	str	r0, [r2, #0]
 80178cc:	7019      	strb	r1, [r3, #0]
 80178ce:	4608      	mov	r0, r1
 80178d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178d4:	4770      	bx	lr

080178d6 <__sfputs_r>:
 80178d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d8:	4606      	mov	r6, r0
 80178da:	460f      	mov	r7, r1
 80178dc:	4614      	mov	r4, r2
 80178de:	18d5      	adds	r5, r2, r3
 80178e0:	42ac      	cmp	r4, r5
 80178e2:	d101      	bne.n	80178e8 <__sfputs_r+0x12>
 80178e4:	2000      	movs	r0, #0
 80178e6:	e007      	b.n	80178f8 <__sfputs_r+0x22>
 80178e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178ec:	463a      	mov	r2, r7
 80178ee:	4630      	mov	r0, r6
 80178f0:	f7ff ffda 	bl	80178a8 <__sfputc_r>
 80178f4:	1c43      	adds	r3, r0, #1
 80178f6:	d1f3      	bne.n	80178e0 <__sfputs_r+0xa>
 80178f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178fc <_vfiprintf_r>:
 80178fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017900:	460d      	mov	r5, r1
 8017902:	b09d      	sub	sp, #116	; 0x74
 8017904:	4614      	mov	r4, r2
 8017906:	4698      	mov	r8, r3
 8017908:	4606      	mov	r6, r0
 801790a:	b118      	cbz	r0, 8017914 <_vfiprintf_r+0x18>
 801790c:	6a03      	ldr	r3, [r0, #32]
 801790e:	b90b      	cbnz	r3, 8017914 <_vfiprintf_r+0x18>
 8017910:	f7ff fd38 	bl	8017384 <__sinit>
 8017914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017916:	07d9      	lsls	r1, r3, #31
 8017918:	d405      	bmi.n	8017926 <_vfiprintf_r+0x2a>
 801791a:	89ab      	ldrh	r3, [r5, #12]
 801791c:	059a      	lsls	r2, r3, #22
 801791e:	d402      	bmi.n	8017926 <_vfiprintf_r+0x2a>
 8017920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017922:	f7ff fe93 	bl	801764c <__retarget_lock_acquire_recursive>
 8017926:	89ab      	ldrh	r3, [r5, #12]
 8017928:	071b      	lsls	r3, r3, #28
 801792a:	d501      	bpl.n	8017930 <_vfiprintf_r+0x34>
 801792c:	692b      	ldr	r3, [r5, #16]
 801792e:	b99b      	cbnz	r3, 8017958 <_vfiprintf_r+0x5c>
 8017930:	4629      	mov	r1, r5
 8017932:	4630      	mov	r0, r6
 8017934:	f000 fb8a 	bl	801804c <__swsetup_r>
 8017938:	b170      	cbz	r0, 8017958 <_vfiprintf_r+0x5c>
 801793a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801793c:	07dc      	lsls	r4, r3, #31
 801793e:	d504      	bpl.n	801794a <_vfiprintf_r+0x4e>
 8017940:	f04f 30ff 	mov.w	r0, #4294967295
 8017944:	b01d      	add	sp, #116	; 0x74
 8017946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794a:	89ab      	ldrh	r3, [r5, #12]
 801794c:	0598      	lsls	r0, r3, #22
 801794e:	d4f7      	bmi.n	8017940 <_vfiprintf_r+0x44>
 8017950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017952:	f7ff fe7c 	bl	801764e <__retarget_lock_release_recursive>
 8017956:	e7f3      	b.n	8017940 <_vfiprintf_r+0x44>
 8017958:	2300      	movs	r3, #0
 801795a:	9309      	str	r3, [sp, #36]	; 0x24
 801795c:	2320      	movs	r3, #32
 801795e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017962:	f8cd 800c 	str.w	r8, [sp, #12]
 8017966:	2330      	movs	r3, #48	; 0x30
 8017968:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017b1c <_vfiprintf_r+0x220>
 801796c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017970:	f04f 0901 	mov.w	r9, #1
 8017974:	4623      	mov	r3, r4
 8017976:	469a      	mov	sl, r3
 8017978:	f813 2b01 	ldrb.w	r2, [r3], #1
 801797c:	b10a      	cbz	r2, 8017982 <_vfiprintf_r+0x86>
 801797e:	2a25      	cmp	r2, #37	; 0x25
 8017980:	d1f9      	bne.n	8017976 <_vfiprintf_r+0x7a>
 8017982:	ebba 0b04 	subs.w	fp, sl, r4
 8017986:	d00b      	beq.n	80179a0 <_vfiprintf_r+0xa4>
 8017988:	465b      	mov	r3, fp
 801798a:	4622      	mov	r2, r4
 801798c:	4629      	mov	r1, r5
 801798e:	4630      	mov	r0, r6
 8017990:	f7ff ffa1 	bl	80178d6 <__sfputs_r>
 8017994:	3001      	adds	r0, #1
 8017996:	f000 80a9 	beq.w	8017aec <_vfiprintf_r+0x1f0>
 801799a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801799c:	445a      	add	r2, fp
 801799e:	9209      	str	r2, [sp, #36]	; 0x24
 80179a0:	f89a 3000 	ldrb.w	r3, [sl]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	f000 80a1 	beq.w	8017aec <_vfiprintf_r+0x1f0>
 80179aa:	2300      	movs	r3, #0
 80179ac:	f04f 32ff 	mov.w	r2, #4294967295
 80179b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179b4:	f10a 0a01 	add.w	sl, sl, #1
 80179b8:	9304      	str	r3, [sp, #16]
 80179ba:	9307      	str	r3, [sp, #28]
 80179bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179c0:	931a      	str	r3, [sp, #104]	; 0x68
 80179c2:	4654      	mov	r4, sl
 80179c4:	2205      	movs	r2, #5
 80179c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179ca:	4854      	ldr	r0, [pc, #336]	; (8017b1c <_vfiprintf_r+0x220>)
 80179cc:	f7e8 fc10 	bl	80001f0 <memchr>
 80179d0:	9a04      	ldr	r2, [sp, #16]
 80179d2:	b9d8      	cbnz	r0, 8017a0c <_vfiprintf_r+0x110>
 80179d4:	06d1      	lsls	r1, r2, #27
 80179d6:	bf44      	itt	mi
 80179d8:	2320      	movmi	r3, #32
 80179da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179de:	0713      	lsls	r3, r2, #28
 80179e0:	bf44      	itt	mi
 80179e2:	232b      	movmi	r3, #43	; 0x2b
 80179e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179e8:	f89a 3000 	ldrb.w	r3, [sl]
 80179ec:	2b2a      	cmp	r3, #42	; 0x2a
 80179ee:	d015      	beq.n	8017a1c <_vfiprintf_r+0x120>
 80179f0:	9a07      	ldr	r2, [sp, #28]
 80179f2:	4654      	mov	r4, sl
 80179f4:	2000      	movs	r0, #0
 80179f6:	f04f 0c0a 	mov.w	ip, #10
 80179fa:	4621      	mov	r1, r4
 80179fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a00:	3b30      	subs	r3, #48	; 0x30
 8017a02:	2b09      	cmp	r3, #9
 8017a04:	d94d      	bls.n	8017aa2 <_vfiprintf_r+0x1a6>
 8017a06:	b1b0      	cbz	r0, 8017a36 <_vfiprintf_r+0x13a>
 8017a08:	9207      	str	r2, [sp, #28]
 8017a0a:	e014      	b.n	8017a36 <_vfiprintf_r+0x13a>
 8017a0c:	eba0 0308 	sub.w	r3, r0, r8
 8017a10:	fa09 f303 	lsl.w	r3, r9, r3
 8017a14:	4313      	orrs	r3, r2
 8017a16:	9304      	str	r3, [sp, #16]
 8017a18:	46a2      	mov	sl, r4
 8017a1a:	e7d2      	b.n	80179c2 <_vfiprintf_r+0xc6>
 8017a1c:	9b03      	ldr	r3, [sp, #12]
 8017a1e:	1d19      	adds	r1, r3, #4
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	9103      	str	r1, [sp, #12]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	bfbb      	ittet	lt
 8017a28:	425b      	neglt	r3, r3
 8017a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8017a2e:	9307      	strge	r3, [sp, #28]
 8017a30:	9307      	strlt	r3, [sp, #28]
 8017a32:	bfb8      	it	lt
 8017a34:	9204      	strlt	r2, [sp, #16]
 8017a36:	7823      	ldrb	r3, [r4, #0]
 8017a38:	2b2e      	cmp	r3, #46	; 0x2e
 8017a3a:	d10c      	bne.n	8017a56 <_vfiprintf_r+0x15a>
 8017a3c:	7863      	ldrb	r3, [r4, #1]
 8017a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8017a40:	d134      	bne.n	8017aac <_vfiprintf_r+0x1b0>
 8017a42:	9b03      	ldr	r3, [sp, #12]
 8017a44:	1d1a      	adds	r2, r3, #4
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	9203      	str	r2, [sp, #12]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	bfb8      	it	lt
 8017a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a52:	3402      	adds	r4, #2
 8017a54:	9305      	str	r3, [sp, #20]
 8017a56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017b2c <_vfiprintf_r+0x230>
 8017a5a:	7821      	ldrb	r1, [r4, #0]
 8017a5c:	2203      	movs	r2, #3
 8017a5e:	4650      	mov	r0, sl
 8017a60:	f7e8 fbc6 	bl	80001f0 <memchr>
 8017a64:	b138      	cbz	r0, 8017a76 <_vfiprintf_r+0x17a>
 8017a66:	9b04      	ldr	r3, [sp, #16]
 8017a68:	eba0 000a 	sub.w	r0, r0, sl
 8017a6c:	2240      	movs	r2, #64	; 0x40
 8017a6e:	4082      	lsls	r2, r0
 8017a70:	4313      	orrs	r3, r2
 8017a72:	3401      	adds	r4, #1
 8017a74:	9304      	str	r3, [sp, #16]
 8017a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a7a:	4829      	ldr	r0, [pc, #164]	; (8017b20 <_vfiprintf_r+0x224>)
 8017a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a80:	2206      	movs	r2, #6
 8017a82:	f7e8 fbb5 	bl	80001f0 <memchr>
 8017a86:	2800      	cmp	r0, #0
 8017a88:	d03f      	beq.n	8017b0a <_vfiprintf_r+0x20e>
 8017a8a:	4b26      	ldr	r3, [pc, #152]	; (8017b24 <_vfiprintf_r+0x228>)
 8017a8c:	bb1b      	cbnz	r3, 8017ad6 <_vfiprintf_r+0x1da>
 8017a8e:	9b03      	ldr	r3, [sp, #12]
 8017a90:	3307      	adds	r3, #7
 8017a92:	f023 0307 	bic.w	r3, r3, #7
 8017a96:	3308      	adds	r3, #8
 8017a98:	9303      	str	r3, [sp, #12]
 8017a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a9c:	443b      	add	r3, r7
 8017a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8017aa0:	e768      	b.n	8017974 <_vfiprintf_r+0x78>
 8017aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	2001      	movs	r0, #1
 8017aaa:	e7a6      	b.n	80179fa <_vfiprintf_r+0xfe>
 8017aac:	2300      	movs	r3, #0
 8017aae:	3401      	adds	r4, #1
 8017ab0:	9305      	str	r3, [sp, #20]
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	f04f 0c0a 	mov.w	ip, #10
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017abe:	3a30      	subs	r2, #48	; 0x30
 8017ac0:	2a09      	cmp	r2, #9
 8017ac2:	d903      	bls.n	8017acc <_vfiprintf_r+0x1d0>
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d0c6      	beq.n	8017a56 <_vfiprintf_r+0x15a>
 8017ac8:	9105      	str	r1, [sp, #20]
 8017aca:	e7c4      	b.n	8017a56 <_vfiprintf_r+0x15a>
 8017acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	e7f0      	b.n	8017ab8 <_vfiprintf_r+0x1bc>
 8017ad6:	ab03      	add	r3, sp, #12
 8017ad8:	9300      	str	r3, [sp, #0]
 8017ada:	462a      	mov	r2, r5
 8017adc:	4b12      	ldr	r3, [pc, #72]	; (8017b28 <_vfiprintf_r+0x22c>)
 8017ade:	a904      	add	r1, sp, #16
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	f3af 8000 	nop.w
 8017ae6:	4607      	mov	r7, r0
 8017ae8:	1c78      	adds	r0, r7, #1
 8017aea:	d1d6      	bne.n	8017a9a <_vfiprintf_r+0x19e>
 8017aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017aee:	07d9      	lsls	r1, r3, #31
 8017af0:	d405      	bmi.n	8017afe <_vfiprintf_r+0x202>
 8017af2:	89ab      	ldrh	r3, [r5, #12]
 8017af4:	059a      	lsls	r2, r3, #22
 8017af6:	d402      	bmi.n	8017afe <_vfiprintf_r+0x202>
 8017af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017afa:	f7ff fda8 	bl	801764e <__retarget_lock_release_recursive>
 8017afe:	89ab      	ldrh	r3, [r5, #12]
 8017b00:	065b      	lsls	r3, r3, #25
 8017b02:	f53f af1d 	bmi.w	8017940 <_vfiprintf_r+0x44>
 8017b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b08:	e71c      	b.n	8017944 <_vfiprintf_r+0x48>
 8017b0a:	ab03      	add	r3, sp, #12
 8017b0c:	9300      	str	r3, [sp, #0]
 8017b0e:	462a      	mov	r2, r5
 8017b10:	4b05      	ldr	r3, [pc, #20]	; (8017b28 <_vfiprintf_r+0x22c>)
 8017b12:	a904      	add	r1, sp, #16
 8017b14:	4630      	mov	r0, r6
 8017b16:	f000 f879 	bl	8017c0c <_printf_i>
 8017b1a:	e7e4      	b.n	8017ae6 <_vfiprintf_r+0x1ea>
 8017b1c:	0801be33 	.word	0x0801be33
 8017b20:	0801be3d 	.word	0x0801be3d
 8017b24:	00000000 	.word	0x00000000
 8017b28:	080178d7 	.word	0x080178d7
 8017b2c:	0801be39 	.word	0x0801be39

08017b30 <_printf_common>:
 8017b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b34:	4616      	mov	r6, r2
 8017b36:	4699      	mov	r9, r3
 8017b38:	688a      	ldr	r2, [r1, #8]
 8017b3a:	690b      	ldr	r3, [r1, #16]
 8017b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b40:	4293      	cmp	r3, r2
 8017b42:	bfb8      	it	lt
 8017b44:	4613      	movlt	r3, r2
 8017b46:	6033      	str	r3, [r6, #0]
 8017b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b4c:	4607      	mov	r7, r0
 8017b4e:	460c      	mov	r4, r1
 8017b50:	b10a      	cbz	r2, 8017b56 <_printf_common+0x26>
 8017b52:	3301      	adds	r3, #1
 8017b54:	6033      	str	r3, [r6, #0]
 8017b56:	6823      	ldr	r3, [r4, #0]
 8017b58:	0699      	lsls	r1, r3, #26
 8017b5a:	bf42      	ittt	mi
 8017b5c:	6833      	ldrmi	r3, [r6, #0]
 8017b5e:	3302      	addmi	r3, #2
 8017b60:	6033      	strmi	r3, [r6, #0]
 8017b62:	6825      	ldr	r5, [r4, #0]
 8017b64:	f015 0506 	ands.w	r5, r5, #6
 8017b68:	d106      	bne.n	8017b78 <_printf_common+0x48>
 8017b6a:	f104 0a19 	add.w	sl, r4, #25
 8017b6e:	68e3      	ldr	r3, [r4, #12]
 8017b70:	6832      	ldr	r2, [r6, #0]
 8017b72:	1a9b      	subs	r3, r3, r2
 8017b74:	42ab      	cmp	r3, r5
 8017b76:	dc26      	bgt.n	8017bc6 <_printf_common+0x96>
 8017b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b7c:	1e13      	subs	r3, r2, #0
 8017b7e:	6822      	ldr	r2, [r4, #0]
 8017b80:	bf18      	it	ne
 8017b82:	2301      	movne	r3, #1
 8017b84:	0692      	lsls	r2, r2, #26
 8017b86:	d42b      	bmi.n	8017be0 <_printf_common+0xb0>
 8017b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b8c:	4649      	mov	r1, r9
 8017b8e:	4638      	mov	r0, r7
 8017b90:	47c0      	blx	r8
 8017b92:	3001      	adds	r0, #1
 8017b94:	d01e      	beq.n	8017bd4 <_printf_common+0xa4>
 8017b96:	6823      	ldr	r3, [r4, #0]
 8017b98:	6922      	ldr	r2, [r4, #16]
 8017b9a:	f003 0306 	and.w	r3, r3, #6
 8017b9e:	2b04      	cmp	r3, #4
 8017ba0:	bf02      	ittt	eq
 8017ba2:	68e5      	ldreq	r5, [r4, #12]
 8017ba4:	6833      	ldreq	r3, [r6, #0]
 8017ba6:	1aed      	subeq	r5, r5, r3
 8017ba8:	68a3      	ldr	r3, [r4, #8]
 8017baa:	bf0c      	ite	eq
 8017bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017bb0:	2500      	movne	r5, #0
 8017bb2:	4293      	cmp	r3, r2
 8017bb4:	bfc4      	itt	gt
 8017bb6:	1a9b      	subgt	r3, r3, r2
 8017bb8:	18ed      	addgt	r5, r5, r3
 8017bba:	2600      	movs	r6, #0
 8017bbc:	341a      	adds	r4, #26
 8017bbe:	42b5      	cmp	r5, r6
 8017bc0:	d11a      	bne.n	8017bf8 <_printf_common+0xc8>
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	e008      	b.n	8017bd8 <_printf_common+0xa8>
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	4652      	mov	r2, sl
 8017bca:	4649      	mov	r1, r9
 8017bcc:	4638      	mov	r0, r7
 8017bce:	47c0      	blx	r8
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	d103      	bne.n	8017bdc <_printf_common+0xac>
 8017bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bdc:	3501      	adds	r5, #1
 8017bde:	e7c6      	b.n	8017b6e <_printf_common+0x3e>
 8017be0:	18e1      	adds	r1, r4, r3
 8017be2:	1c5a      	adds	r2, r3, #1
 8017be4:	2030      	movs	r0, #48	; 0x30
 8017be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017bea:	4422      	add	r2, r4
 8017bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017bf4:	3302      	adds	r3, #2
 8017bf6:	e7c7      	b.n	8017b88 <_printf_common+0x58>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	4622      	mov	r2, r4
 8017bfc:	4649      	mov	r1, r9
 8017bfe:	4638      	mov	r0, r7
 8017c00:	47c0      	blx	r8
 8017c02:	3001      	adds	r0, #1
 8017c04:	d0e6      	beq.n	8017bd4 <_printf_common+0xa4>
 8017c06:	3601      	adds	r6, #1
 8017c08:	e7d9      	b.n	8017bbe <_printf_common+0x8e>
	...

08017c0c <_printf_i>:
 8017c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c10:	7e0f      	ldrb	r7, [r1, #24]
 8017c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017c14:	2f78      	cmp	r7, #120	; 0x78
 8017c16:	4691      	mov	r9, r2
 8017c18:	4680      	mov	r8, r0
 8017c1a:	460c      	mov	r4, r1
 8017c1c:	469a      	mov	sl, r3
 8017c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017c22:	d807      	bhi.n	8017c34 <_printf_i+0x28>
 8017c24:	2f62      	cmp	r7, #98	; 0x62
 8017c26:	d80a      	bhi.n	8017c3e <_printf_i+0x32>
 8017c28:	2f00      	cmp	r7, #0
 8017c2a:	f000 80d4 	beq.w	8017dd6 <_printf_i+0x1ca>
 8017c2e:	2f58      	cmp	r7, #88	; 0x58
 8017c30:	f000 80c0 	beq.w	8017db4 <_printf_i+0x1a8>
 8017c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c3c:	e03a      	b.n	8017cb4 <_printf_i+0xa8>
 8017c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c42:	2b15      	cmp	r3, #21
 8017c44:	d8f6      	bhi.n	8017c34 <_printf_i+0x28>
 8017c46:	a101      	add	r1, pc, #4	; (adr r1, 8017c4c <_printf_i+0x40>)
 8017c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017c4c:	08017ca5 	.word	0x08017ca5
 8017c50:	08017cb9 	.word	0x08017cb9
 8017c54:	08017c35 	.word	0x08017c35
 8017c58:	08017c35 	.word	0x08017c35
 8017c5c:	08017c35 	.word	0x08017c35
 8017c60:	08017c35 	.word	0x08017c35
 8017c64:	08017cb9 	.word	0x08017cb9
 8017c68:	08017c35 	.word	0x08017c35
 8017c6c:	08017c35 	.word	0x08017c35
 8017c70:	08017c35 	.word	0x08017c35
 8017c74:	08017c35 	.word	0x08017c35
 8017c78:	08017dbd 	.word	0x08017dbd
 8017c7c:	08017ce5 	.word	0x08017ce5
 8017c80:	08017d77 	.word	0x08017d77
 8017c84:	08017c35 	.word	0x08017c35
 8017c88:	08017c35 	.word	0x08017c35
 8017c8c:	08017ddf 	.word	0x08017ddf
 8017c90:	08017c35 	.word	0x08017c35
 8017c94:	08017ce5 	.word	0x08017ce5
 8017c98:	08017c35 	.word	0x08017c35
 8017c9c:	08017c35 	.word	0x08017c35
 8017ca0:	08017d7f 	.word	0x08017d7f
 8017ca4:	682b      	ldr	r3, [r5, #0]
 8017ca6:	1d1a      	adds	r2, r3, #4
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	602a      	str	r2, [r5, #0]
 8017cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	e09f      	b.n	8017df8 <_printf_i+0x1ec>
 8017cb8:	6820      	ldr	r0, [r4, #0]
 8017cba:	682b      	ldr	r3, [r5, #0]
 8017cbc:	0607      	lsls	r7, r0, #24
 8017cbe:	f103 0104 	add.w	r1, r3, #4
 8017cc2:	6029      	str	r1, [r5, #0]
 8017cc4:	d501      	bpl.n	8017cca <_printf_i+0xbe>
 8017cc6:	681e      	ldr	r6, [r3, #0]
 8017cc8:	e003      	b.n	8017cd2 <_printf_i+0xc6>
 8017cca:	0646      	lsls	r6, r0, #25
 8017ccc:	d5fb      	bpl.n	8017cc6 <_printf_i+0xba>
 8017cce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017cd2:	2e00      	cmp	r6, #0
 8017cd4:	da03      	bge.n	8017cde <_printf_i+0xd2>
 8017cd6:	232d      	movs	r3, #45	; 0x2d
 8017cd8:	4276      	negs	r6, r6
 8017cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cde:	485a      	ldr	r0, [pc, #360]	; (8017e48 <_printf_i+0x23c>)
 8017ce0:	230a      	movs	r3, #10
 8017ce2:	e012      	b.n	8017d0a <_printf_i+0xfe>
 8017ce4:	682b      	ldr	r3, [r5, #0]
 8017ce6:	6820      	ldr	r0, [r4, #0]
 8017ce8:	1d19      	adds	r1, r3, #4
 8017cea:	6029      	str	r1, [r5, #0]
 8017cec:	0605      	lsls	r5, r0, #24
 8017cee:	d501      	bpl.n	8017cf4 <_printf_i+0xe8>
 8017cf0:	681e      	ldr	r6, [r3, #0]
 8017cf2:	e002      	b.n	8017cfa <_printf_i+0xee>
 8017cf4:	0641      	lsls	r1, r0, #25
 8017cf6:	d5fb      	bpl.n	8017cf0 <_printf_i+0xe4>
 8017cf8:	881e      	ldrh	r6, [r3, #0]
 8017cfa:	4853      	ldr	r0, [pc, #332]	; (8017e48 <_printf_i+0x23c>)
 8017cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8017cfe:	bf0c      	ite	eq
 8017d00:	2308      	moveq	r3, #8
 8017d02:	230a      	movne	r3, #10
 8017d04:	2100      	movs	r1, #0
 8017d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d0a:	6865      	ldr	r5, [r4, #4]
 8017d0c:	60a5      	str	r5, [r4, #8]
 8017d0e:	2d00      	cmp	r5, #0
 8017d10:	bfa2      	ittt	ge
 8017d12:	6821      	ldrge	r1, [r4, #0]
 8017d14:	f021 0104 	bicge.w	r1, r1, #4
 8017d18:	6021      	strge	r1, [r4, #0]
 8017d1a:	b90e      	cbnz	r6, 8017d20 <_printf_i+0x114>
 8017d1c:	2d00      	cmp	r5, #0
 8017d1e:	d04b      	beq.n	8017db8 <_printf_i+0x1ac>
 8017d20:	4615      	mov	r5, r2
 8017d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8017d26:	fb03 6711 	mls	r7, r3, r1, r6
 8017d2a:	5dc7      	ldrb	r7, [r0, r7]
 8017d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017d30:	4637      	mov	r7, r6
 8017d32:	42bb      	cmp	r3, r7
 8017d34:	460e      	mov	r6, r1
 8017d36:	d9f4      	bls.n	8017d22 <_printf_i+0x116>
 8017d38:	2b08      	cmp	r3, #8
 8017d3a:	d10b      	bne.n	8017d54 <_printf_i+0x148>
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	07de      	lsls	r6, r3, #31
 8017d40:	d508      	bpl.n	8017d54 <_printf_i+0x148>
 8017d42:	6923      	ldr	r3, [r4, #16]
 8017d44:	6861      	ldr	r1, [r4, #4]
 8017d46:	4299      	cmp	r1, r3
 8017d48:	bfde      	ittt	le
 8017d4a:	2330      	movle	r3, #48	; 0x30
 8017d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017d54:	1b52      	subs	r2, r2, r5
 8017d56:	6122      	str	r2, [r4, #16]
 8017d58:	f8cd a000 	str.w	sl, [sp]
 8017d5c:	464b      	mov	r3, r9
 8017d5e:	aa03      	add	r2, sp, #12
 8017d60:	4621      	mov	r1, r4
 8017d62:	4640      	mov	r0, r8
 8017d64:	f7ff fee4 	bl	8017b30 <_printf_common>
 8017d68:	3001      	adds	r0, #1
 8017d6a:	d14a      	bne.n	8017e02 <_printf_i+0x1f6>
 8017d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d70:	b004      	add	sp, #16
 8017d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d76:	6823      	ldr	r3, [r4, #0]
 8017d78:	f043 0320 	orr.w	r3, r3, #32
 8017d7c:	6023      	str	r3, [r4, #0]
 8017d7e:	4833      	ldr	r0, [pc, #204]	; (8017e4c <_printf_i+0x240>)
 8017d80:	2778      	movs	r7, #120	; 0x78
 8017d82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017d86:	6823      	ldr	r3, [r4, #0]
 8017d88:	6829      	ldr	r1, [r5, #0]
 8017d8a:	061f      	lsls	r7, r3, #24
 8017d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017d90:	d402      	bmi.n	8017d98 <_printf_i+0x18c>
 8017d92:	065f      	lsls	r7, r3, #25
 8017d94:	bf48      	it	mi
 8017d96:	b2b6      	uxthmi	r6, r6
 8017d98:	07df      	lsls	r7, r3, #31
 8017d9a:	bf48      	it	mi
 8017d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8017da0:	6029      	str	r1, [r5, #0]
 8017da2:	bf48      	it	mi
 8017da4:	6023      	strmi	r3, [r4, #0]
 8017da6:	b91e      	cbnz	r6, 8017db0 <_printf_i+0x1a4>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	f023 0320 	bic.w	r3, r3, #32
 8017dae:	6023      	str	r3, [r4, #0]
 8017db0:	2310      	movs	r3, #16
 8017db2:	e7a7      	b.n	8017d04 <_printf_i+0xf8>
 8017db4:	4824      	ldr	r0, [pc, #144]	; (8017e48 <_printf_i+0x23c>)
 8017db6:	e7e4      	b.n	8017d82 <_printf_i+0x176>
 8017db8:	4615      	mov	r5, r2
 8017dba:	e7bd      	b.n	8017d38 <_printf_i+0x12c>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	6826      	ldr	r6, [r4, #0]
 8017dc0:	6961      	ldr	r1, [r4, #20]
 8017dc2:	1d18      	adds	r0, r3, #4
 8017dc4:	6028      	str	r0, [r5, #0]
 8017dc6:	0635      	lsls	r5, r6, #24
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	d501      	bpl.n	8017dd0 <_printf_i+0x1c4>
 8017dcc:	6019      	str	r1, [r3, #0]
 8017dce:	e002      	b.n	8017dd6 <_printf_i+0x1ca>
 8017dd0:	0670      	lsls	r0, r6, #25
 8017dd2:	d5fb      	bpl.n	8017dcc <_printf_i+0x1c0>
 8017dd4:	8019      	strh	r1, [r3, #0]
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	6123      	str	r3, [r4, #16]
 8017dda:	4615      	mov	r5, r2
 8017ddc:	e7bc      	b.n	8017d58 <_printf_i+0x14c>
 8017dde:	682b      	ldr	r3, [r5, #0]
 8017de0:	1d1a      	adds	r2, r3, #4
 8017de2:	602a      	str	r2, [r5, #0]
 8017de4:	681d      	ldr	r5, [r3, #0]
 8017de6:	6862      	ldr	r2, [r4, #4]
 8017de8:	2100      	movs	r1, #0
 8017dea:	4628      	mov	r0, r5
 8017dec:	f7e8 fa00 	bl	80001f0 <memchr>
 8017df0:	b108      	cbz	r0, 8017df6 <_printf_i+0x1ea>
 8017df2:	1b40      	subs	r0, r0, r5
 8017df4:	6060      	str	r0, [r4, #4]
 8017df6:	6863      	ldr	r3, [r4, #4]
 8017df8:	6123      	str	r3, [r4, #16]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e00:	e7aa      	b.n	8017d58 <_printf_i+0x14c>
 8017e02:	6923      	ldr	r3, [r4, #16]
 8017e04:	462a      	mov	r2, r5
 8017e06:	4649      	mov	r1, r9
 8017e08:	4640      	mov	r0, r8
 8017e0a:	47d0      	blx	sl
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	d0ad      	beq.n	8017d6c <_printf_i+0x160>
 8017e10:	6823      	ldr	r3, [r4, #0]
 8017e12:	079b      	lsls	r3, r3, #30
 8017e14:	d413      	bmi.n	8017e3e <_printf_i+0x232>
 8017e16:	68e0      	ldr	r0, [r4, #12]
 8017e18:	9b03      	ldr	r3, [sp, #12]
 8017e1a:	4298      	cmp	r0, r3
 8017e1c:	bfb8      	it	lt
 8017e1e:	4618      	movlt	r0, r3
 8017e20:	e7a6      	b.n	8017d70 <_printf_i+0x164>
 8017e22:	2301      	movs	r3, #1
 8017e24:	4632      	mov	r2, r6
 8017e26:	4649      	mov	r1, r9
 8017e28:	4640      	mov	r0, r8
 8017e2a:	47d0      	blx	sl
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	d09d      	beq.n	8017d6c <_printf_i+0x160>
 8017e30:	3501      	adds	r5, #1
 8017e32:	68e3      	ldr	r3, [r4, #12]
 8017e34:	9903      	ldr	r1, [sp, #12]
 8017e36:	1a5b      	subs	r3, r3, r1
 8017e38:	42ab      	cmp	r3, r5
 8017e3a:	dcf2      	bgt.n	8017e22 <_printf_i+0x216>
 8017e3c:	e7eb      	b.n	8017e16 <_printf_i+0x20a>
 8017e3e:	2500      	movs	r5, #0
 8017e40:	f104 0619 	add.w	r6, r4, #25
 8017e44:	e7f5      	b.n	8017e32 <_printf_i+0x226>
 8017e46:	bf00      	nop
 8017e48:	0801be44 	.word	0x0801be44
 8017e4c:	0801be55 	.word	0x0801be55

08017e50 <__sflush_r>:
 8017e50:	898a      	ldrh	r2, [r1, #12]
 8017e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e56:	4605      	mov	r5, r0
 8017e58:	0710      	lsls	r0, r2, #28
 8017e5a:	460c      	mov	r4, r1
 8017e5c:	d458      	bmi.n	8017f10 <__sflush_r+0xc0>
 8017e5e:	684b      	ldr	r3, [r1, #4]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	dc05      	bgt.n	8017e70 <__sflush_r+0x20>
 8017e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	dc02      	bgt.n	8017e70 <__sflush_r+0x20>
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017e72:	2e00      	cmp	r6, #0
 8017e74:	d0f9      	beq.n	8017e6a <__sflush_r+0x1a>
 8017e76:	2300      	movs	r3, #0
 8017e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017e7c:	682f      	ldr	r7, [r5, #0]
 8017e7e:	6a21      	ldr	r1, [r4, #32]
 8017e80:	602b      	str	r3, [r5, #0]
 8017e82:	d032      	beq.n	8017eea <__sflush_r+0x9a>
 8017e84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017e86:	89a3      	ldrh	r3, [r4, #12]
 8017e88:	075a      	lsls	r2, r3, #29
 8017e8a:	d505      	bpl.n	8017e98 <__sflush_r+0x48>
 8017e8c:	6863      	ldr	r3, [r4, #4]
 8017e8e:	1ac0      	subs	r0, r0, r3
 8017e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e92:	b10b      	cbz	r3, 8017e98 <__sflush_r+0x48>
 8017e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e96:	1ac0      	subs	r0, r0, r3
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4602      	mov	r2, r0
 8017e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017e9e:	6a21      	ldr	r1, [r4, #32]
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	47b0      	blx	r6
 8017ea4:	1c43      	adds	r3, r0, #1
 8017ea6:	89a3      	ldrh	r3, [r4, #12]
 8017ea8:	d106      	bne.n	8017eb8 <__sflush_r+0x68>
 8017eaa:	6829      	ldr	r1, [r5, #0]
 8017eac:	291d      	cmp	r1, #29
 8017eae:	d82b      	bhi.n	8017f08 <__sflush_r+0xb8>
 8017eb0:	4a29      	ldr	r2, [pc, #164]	; (8017f58 <__sflush_r+0x108>)
 8017eb2:	410a      	asrs	r2, r1
 8017eb4:	07d6      	lsls	r6, r2, #31
 8017eb6:	d427      	bmi.n	8017f08 <__sflush_r+0xb8>
 8017eb8:	2200      	movs	r2, #0
 8017eba:	6062      	str	r2, [r4, #4]
 8017ebc:	04d9      	lsls	r1, r3, #19
 8017ebe:	6922      	ldr	r2, [r4, #16]
 8017ec0:	6022      	str	r2, [r4, #0]
 8017ec2:	d504      	bpl.n	8017ece <__sflush_r+0x7e>
 8017ec4:	1c42      	adds	r2, r0, #1
 8017ec6:	d101      	bne.n	8017ecc <__sflush_r+0x7c>
 8017ec8:	682b      	ldr	r3, [r5, #0]
 8017eca:	b903      	cbnz	r3, 8017ece <__sflush_r+0x7e>
 8017ecc:	6560      	str	r0, [r4, #84]	; 0x54
 8017ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ed0:	602f      	str	r7, [r5, #0]
 8017ed2:	2900      	cmp	r1, #0
 8017ed4:	d0c9      	beq.n	8017e6a <__sflush_r+0x1a>
 8017ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eda:	4299      	cmp	r1, r3
 8017edc:	d002      	beq.n	8017ee4 <__sflush_r+0x94>
 8017ede:	4628      	mov	r0, r5
 8017ee0:	f7ff fbe2 	bl	80176a8 <_free_r>
 8017ee4:	2000      	movs	r0, #0
 8017ee6:	6360      	str	r0, [r4, #52]	; 0x34
 8017ee8:	e7c0      	b.n	8017e6c <__sflush_r+0x1c>
 8017eea:	2301      	movs	r3, #1
 8017eec:	4628      	mov	r0, r5
 8017eee:	47b0      	blx	r6
 8017ef0:	1c41      	adds	r1, r0, #1
 8017ef2:	d1c8      	bne.n	8017e86 <__sflush_r+0x36>
 8017ef4:	682b      	ldr	r3, [r5, #0]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d0c5      	beq.n	8017e86 <__sflush_r+0x36>
 8017efa:	2b1d      	cmp	r3, #29
 8017efc:	d001      	beq.n	8017f02 <__sflush_r+0xb2>
 8017efe:	2b16      	cmp	r3, #22
 8017f00:	d101      	bne.n	8017f06 <__sflush_r+0xb6>
 8017f02:	602f      	str	r7, [r5, #0]
 8017f04:	e7b1      	b.n	8017e6a <__sflush_r+0x1a>
 8017f06:	89a3      	ldrh	r3, [r4, #12]
 8017f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f0c:	81a3      	strh	r3, [r4, #12]
 8017f0e:	e7ad      	b.n	8017e6c <__sflush_r+0x1c>
 8017f10:	690f      	ldr	r7, [r1, #16]
 8017f12:	2f00      	cmp	r7, #0
 8017f14:	d0a9      	beq.n	8017e6a <__sflush_r+0x1a>
 8017f16:	0793      	lsls	r3, r2, #30
 8017f18:	680e      	ldr	r6, [r1, #0]
 8017f1a:	bf08      	it	eq
 8017f1c:	694b      	ldreq	r3, [r1, #20]
 8017f1e:	600f      	str	r7, [r1, #0]
 8017f20:	bf18      	it	ne
 8017f22:	2300      	movne	r3, #0
 8017f24:	eba6 0807 	sub.w	r8, r6, r7
 8017f28:	608b      	str	r3, [r1, #8]
 8017f2a:	f1b8 0f00 	cmp.w	r8, #0
 8017f2e:	dd9c      	ble.n	8017e6a <__sflush_r+0x1a>
 8017f30:	6a21      	ldr	r1, [r4, #32]
 8017f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f34:	4643      	mov	r3, r8
 8017f36:	463a      	mov	r2, r7
 8017f38:	4628      	mov	r0, r5
 8017f3a:	47b0      	blx	r6
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	dc06      	bgt.n	8017f4e <__sflush_r+0xfe>
 8017f40:	89a3      	ldrh	r3, [r4, #12]
 8017f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f46:	81a3      	strh	r3, [r4, #12]
 8017f48:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4c:	e78e      	b.n	8017e6c <__sflush_r+0x1c>
 8017f4e:	4407      	add	r7, r0
 8017f50:	eba8 0800 	sub.w	r8, r8, r0
 8017f54:	e7e9      	b.n	8017f2a <__sflush_r+0xda>
 8017f56:	bf00      	nop
 8017f58:	dfbffffe 	.word	0xdfbffffe

08017f5c <_fflush_r>:
 8017f5c:	b538      	push	{r3, r4, r5, lr}
 8017f5e:	690b      	ldr	r3, [r1, #16]
 8017f60:	4605      	mov	r5, r0
 8017f62:	460c      	mov	r4, r1
 8017f64:	b913      	cbnz	r3, 8017f6c <_fflush_r+0x10>
 8017f66:	2500      	movs	r5, #0
 8017f68:	4628      	mov	r0, r5
 8017f6a:	bd38      	pop	{r3, r4, r5, pc}
 8017f6c:	b118      	cbz	r0, 8017f76 <_fflush_r+0x1a>
 8017f6e:	6a03      	ldr	r3, [r0, #32]
 8017f70:	b90b      	cbnz	r3, 8017f76 <_fflush_r+0x1a>
 8017f72:	f7ff fa07 	bl	8017384 <__sinit>
 8017f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d0f3      	beq.n	8017f66 <_fflush_r+0xa>
 8017f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017f80:	07d0      	lsls	r0, r2, #31
 8017f82:	d404      	bmi.n	8017f8e <_fflush_r+0x32>
 8017f84:	0599      	lsls	r1, r3, #22
 8017f86:	d402      	bmi.n	8017f8e <_fflush_r+0x32>
 8017f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f8a:	f7ff fb5f 	bl	801764c <__retarget_lock_acquire_recursive>
 8017f8e:	4628      	mov	r0, r5
 8017f90:	4621      	mov	r1, r4
 8017f92:	f7ff ff5d 	bl	8017e50 <__sflush_r>
 8017f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f98:	07da      	lsls	r2, r3, #31
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	d4e4      	bmi.n	8017f68 <_fflush_r+0xc>
 8017f9e:	89a3      	ldrh	r3, [r4, #12]
 8017fa0:	059b      	lsls	r3, r3, #22
 8017fa2:	d4e1      	bmi.n	8017f68 <_fflush_r+0xc>
 8017fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fa6:	f7ff fb52 	bl	801764e <__retarget_lock_release_recursive>
 8017faa:	e7dd      	b.n	8017f68 <_fflush_r+0xc>

08017fac <fiprintf>:
 8017fac:	b40e      	push	{r1, r2, r3}
 8017fae:	b503      	push	{r0, r1, lr}
 8017fb0:	4601      	mov	r1, r0
 8017fb2:	ab03      	add	r3, sp, #12
 8017fb4:	4805      	ldr	r0, [pc, #20]	; (8017fcc <fiprintf+0x20>)
 8017fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fba:	6800      	ldr	r0, [r0, #0]
 8017fbc:	9301      	str	r3, [sp, #4]
 8017fbe:	f7ff fc9d 	bl	80178fc <_vfiprintf_r>
 8017fc2:	b002      	add	sp, #8
 8017fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fc8:	b003      	add	sp, #12
 8017fca:	4770      	bx	lr
 8017fcc:	2000008c 	.word	0x2000008c

08017fd0 <__swbuf_r>:
 8017fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fd2:	460e      	mov	r6, r1
 8017fd4:	4614      	mov	r4, r2
 8017fd6:	4605      	mov	r5, r0
 8017fd8:	b118      	cbz	r0, 8017fe2 <__swbuf_r+0x12>
 8017fda:	6a03      	ldr	r3, [r0, #32]
 8017fdc:	b90b      	cbnz	r3, 8017fe2 <__swbuf_r+0x12>
 8017fde:	f7ff f9d1 	bl	8017384 <__sinit>
 8017fe2:	69a3      	ldr	r3, [r4, #24]
 8017fe4:	60a3      	str	r3, [r4, #8]
 8017fe6:	89a3      	ldrh	r3, [r4, #12]
 8017fe8:	071a      	lsls	r2, r3, #28
 8017fea:	d525      	bpl.n	8018038 <__swbuf_r+0x68>
 8017fec:	6923      	ldr	r3, [r4, #16]
 8017fee:	b31b      	cbz	r3, 8018038 <__swbuf_r+0x68>
 8017ff0:	6823      	ldr	r3, [r4, #0]
 8017ff2:	6922      	ldr	r2, [r4, #16]
 8017ff4:	1a98      	subs	r0, r3, r2
 8017ff6:	6963      	ldr	r3, [r4, #20]
 8017ff8:	b2f6      	uxtb	r6, r6
 8017ffa:	4283      	cmp	r3, r0
 8017ffc:	4637      	mov	r7, r6
 8017ffe:	dc04      	bgt.n	801800a <__swbuf_r+0x3a>
 8018000:	4621      	mov	r1, r4
 8018002:	4628      	mov	r0, r5
 8018004:	f7ff ffaa 	bl	8017f5c <_fflush_r>
 8018008:	b9e0      	cbnz	r0, 8018044 <__swbuf_r+0x74>
 801800a:	68a3      	ldr	r3, [r4, #8]
 801800c:	3b01      	subs	r3, #1
 801800e:	60a3      	str	r3, [r4, #8]
 8018010:	6823      	ldr	r3, [r4, #0]
 8018012:	1c5a      	adds	r2, r3, #1
 8018014:	6022      	str	r2, [r4, #0]
 8018016:	701e      	strb	r6, [r3, #0]
 8018018:	6962      	ldr	r2, [r4, #20]
 801801a:	1c43      	adds	r3, r0, #1
 801801c:	429a      	cmp	r2, r3
 801801e:	d004      	beq.n	801802a <__swbuf_r+0x5a>
 8018020:	89a3      	ldrh	r3, [r4, #12]
 8018022:	07db      	lsls	r3, r3, #31
 8018024:	d506      	bpl.n	8018034 <__swbuf_r+0x64>
 8018026:	2e0a      	cmp	r6, #10
 8018028:	d104      	bne.n	8018034 <__swbuf_r+0x64>
 801802a:	4621      	mov	r1, r4
 801802c:	4628      	mov	r0, r5
 801802e:	f7ff ff95 	bl	8017f5c <_fflush_r>
 8018032:	b938      	cbnz	r0, 8018044 <__swbuf_r+0x74>
 8018034:	4638      	mov	r0, r7
 8018036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018038:	4621      	mov	r1, r4
 801803a:	4628      	mov	r0, r5
 801803c:	f000 f806 	bl	801804c <__swsetup_r>
 8018040:	2800      	cmp	r0, #0
 8018042:	d0d5      	beq.n	8017ff0 <__swbuf_r+0x20>
 8018044:	f04f 37ff 	mov.w	r7, #4294967295
 8018048:	e7f4      	b.n	8018034 <__swbuf_r+0x64>
	...

0801804c <__swsetup_r>:
 801804c:	b538      	push	{r3, r4, r5, lr}
 801804e:	4b2a      	ldr	r3, [pc, #168]	; (80180f8 <__swsetup_r+0xac>)
 8018050:	4605      	mov	r5, r0
 8018052:	6818      	ldr	r0, [r3, #0]
 8018054:	460c      	mov	r4, r1
 8018056:	b118      	cbz	r0, 8018060 <__swsetup_r+0x14>
 8018058:	6a03      	ldr	r3, [r0, #32]
 801805a:	b90b      	cbnz	r3, 8018060 <__swsetup_r+0x14>
 801805c:	f7ff f992 	bl	8017384 <__sinit>
 8018060:	89a3      	ldrh	r3, [r4, #12]
 8018062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018066:	0718      	lsls	r0, r3, #28
 8018068:	d422      	bmi.n	80180b0 <__swsetup_r+0x64>
 801806a:	06d9      	lsls	r1, r3, #27
 801806c:	d407      	bmi.n	801807e <__swsetup_r+0x32>
 801806e:	2309      	movs	r3, #9
 8018070:	602b      	str	r3, [r5, #0]
 8018072:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018076:	81a3      	strh	r3, [r4, #12]
 8018078:	f04f 30ff 	mov.w	r0, #4294967295
 801807c:	e034      	b.n	80180e8 <__swsetup_r+0x9c>
 801807e:	0758      	lsls	r0, r3, #29
 8018080:	d512      	bpl.n	80180a8 <__swsetup_r+0x5c>
 8018082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018084:	b141      	cbz	r1, 8018098 <__swsetup_r+0x4c>
 8018086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801808a:	4299      	cmp	r1, r3
 801808c:	d002      	beq.n	8018094 <__swsetup_r+0x48>
 801808e:	4628      	mov	r0, r5
 8018090:	f7ff fb0a 	bl	80176a8 <_free_r>
 8018094:	2300      	movs	r3, #0
 8018096:	6363      	str	r3, [r4, #52]	; 0x34
 8018098:	89a3      	ldrh	r3, [r4, #12]
 801809a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801809e:	81a3      	strh	r3, [r4, #12]
 80180a0:	2300      	movs	r3, #0
 80180a2:	6063      	str	r3, [r4, #4]
 80180a4:	6923      	ldr	r3, [r4, #16]
 80180a6:	6023      	str	r3, [r4, #0]
 80180a8:	89a3      	ldrh	r3, [r4, #12]
 80180aa:	f043 0308 	orr.w	r3, r3, #8
 80180ae:	81a3      	strh	r3, [r4, #12]
 80180b0:	6923      	ldr	r3, [r4, #16]
 80180b2:	b94b      	cbnz	r3, 80180c8 <__swsetup_r+0x7c>
 80180b4:	89a3      	ldrh	r3, [r4, #12]
 80180b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80180ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180be:	d003      	beq.n	80180c8 <__swsetup_r+0x7c>
 80180c0:	4621      	mov	r1, r4
 80180c2:	4628      	mov	r0, r5
 80180c4:	f000 f857 	bl	8018176 <__smakebuf_r>
 80180c8:	89a0      	ldrh	r0, [r4, #12]
 80180ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80180ce:	f010 0301 	ands.w	r3, r0, #1
 80180d2:	d00a      	beq.n	80180ea <__swsetup_r+0x9e>
 80180d4:	2300      	movs	r3, #0
 80180d6:	60a3      	str	r3, [r4, #8]
 80180d8:	6963      	ldr	r3, [r4, #20]
 80180da:	425b      	negs	r3, r3
 80180dc:	61a3      	str	r3, [r4, #24]
 80180de:	6923      	ldr	r3, [r4, #16]
 80180e0:	b943      	cbnz	r3, 80180f4 <__swsetup_r+0xa8>
 80180e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80180e6:	d1c4      	bne.n	8018072 <__swsetup_r+0x26>
 80180e8:	bd38      	pop	{r3, r4, r5, pc}
 80180ea:	0781      	lsls	r1, r0, #30
 80180ec:	bf58      	it	pl
 80180ee:	6963      	ldrpl	r3, [r4, #20]
 80180f0:	60a3      	str	r3, [r4, #8]
 80180f2:	e7f4      	b.n	80180de <__swsetup_r+0x92>
 80180f4:	2000      	movs	r0, #0
 80180f6:	e7f7      	b.n	80180e8 <__swsetup_r+0x9c>
 80180f8:	2000008c 	.word	0x2000008c

080180fc <_sbrk_r>:
 80180fc:	b538      	push	{r3, r4, r5, lr}
 80180fe:	4d06      	ldr	r5, [pc, #24]	; (8018118 <_sbrk_r+0x1c>)
 8018100:	2300      	movs	r3, #0
 8018102:	4604      	mov	r4, r0
 8018104:	4608      	mov	r0, r1
 8018106:	602b      	str	r3, [r5, #0]
 8018108:	f7e8 fdb0 	bl	8000c6c <_sbrk>
 801810c:	1c43      	adds	r3, r0, #1
 801810e:	d102      	bne.n	8018116 <_sbrk_r+0x1a>
 8018110:	682b      	ldr	r3, [r5, #0]
 8018112:	b103      	cbz	r3, 8018116 <_sbrk_r+0x1a>
 8018114:	6023      	str	r3, [r4, #0]
 8018116:	bd38      	pop	{r3, r4, r5, pc}
 8018118:	20010bec 	.word	0x20010bec

0801811c <abort>:
 801811c:	b508      	push	{r3, lr}
 801811e:	2006      	movs	r0, #6
 8018120:	f000 f88e 	bl	8018240 <raise>
 8018124:	2001      	movs	r0, #1
 8018126:	f7e8 fd29 	bl	8000b7c <_exit>

0801812a <__swhatbuf_r>:
 801812a:	b570      	push	{r4, r5, r6, lr}
 801812c:	460c      	mov	r4, r1
 801812e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018132:	2900      	cmp	r1, #0
 8018134:	b096      	sub	sp, #88	; 0x58
 8018136:	4615      	mov	r5, r2
 8018138:	461e      	mov	r6, r3
 801813a:	da0d      	bge.n	8018158 <__swhatbuf_r+0x2e>
 801813c:	89a3      	ldrh	r3, [r4, #12]
 801813e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018142:	f04f 0100 	mov.w	r1, #0
 8018146:	bf0c      	ite	eq
 8018148:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801814c:	2340      	movne	r3, #64	; 0x40
 801814e:	2000      	movs	r0, #0
 8018150:	6031      	str	r1, [r6, #0]
 8018152:	602b      	str	r3, [r5, #0]
 8018154:	b016      	add	sp, #88	; 0x58
 8018156:	bd70      	pop	{r4, r5, r6, pc}
 8018158:	466a      	mov	r2, sp
 801815a:	f000 f879 	bl	8018250 <_fstat_r>
 801815e:	2800      	cmp	r0, #0
 8018160:	dbec      	blt.n	801813c <__swhatbuf_r+0x12>
 8018162:	9901      	ldr	r1, [sp, #4]
 8018164:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018168:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801816c:	4259      	negs	r1, r3
 801816e:	4159      	adcs	r1, r3
 8018170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018174:	e7eb      	b.n	801814e <__swhatbuf_r+0x24>

08018176 <__smakebuf_r>:
 8018176:	898b      	ldrh	r3, [r1, #12]
 8018178:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801817a:	079d      	lsls	r5, r3, #30
 801817c:	4606      	mov	r6, r0
 801817e:	460c      	mov	r4, r1
 8018180:	d507      	bpl.n	8018192 <__smakebuf_r+0x1c>
 8018182:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018186:	6023      	str	r3, [r4, #0]
 8018188:	6123      	str	r3, [r4, #16]
 801818a:	2301      	movs	r3, #1
 801818c:	6163      	str	r3, [r4, #20]
 801818e:	b002      	add	sp, #8
 8018190:	bd70      	pop	{r4, r5, r6, pc}
 8018192:	ab01      	add	r3, sp, #4
 8018194:	466a      	mov	r2, sp
 8018196:	f7ff ffc8 	bl	801812a <__swhatbuf_r>
 801819a:	9900      	ldr	r1, [sp, #0]
 801819c:	4605      	mov	r5, r0
 801819e:	4630      	mov	r0, r6
 80181a0:	f7ff faf6 	bl	8017790 <_malloc_r>
 80181a4:	b948      	cbnz	r0, 80181ba <__smakebuf_r+0x44>
 80181a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181aa:	059a      	lsls	r2, r3, #22
 80181ac:	d4ef      	bmi.n	801818e <__smakebuf_r+0x18>
 80181ae:	f023 0303 	bic.w	r3, r3, #3
 80181b2:	f043 0302 	orr.w	r3, r3, #2
 80181b6:	81a3      	strh	r3, [r4, #12]
 80181b8:	e7e3      	b.n	8018182 <__smakebuf_r+0xc>
 80181ba:	89a3      	ldrh	r3, [r4, #12]
 80181bc:	6020      	str	r0, [r4, #0]
 80181be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181c2:	81a3      	strh	r3, [r4, #12]
 80181c4:	9b00      	ldr	r3, [sp, #0]
 80181c6:	6163      	str	r3, [r4, #20]
 80181c8:	9b01      	ldr	r3, [sp, #4]
 80181ca:	6120      	str	r0, [r4, #16]
 80181cc:	b15b      	cbz	r3, 80181e6 <__smakebuf_r+0x70>
 80181ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181d2:	4630      	mov	r0, r6
 80181d4:	f000 f84e 	bl	8018274 <_isatty_r>
 80181d8:	b128      	cbz	r0, 80181e6 <__smakebuf_r+0x70>
 80181da:	89a3      	ldrh	r3, [r4, #12]
 80181dc:	f023 0303 	bic.w	r3, r3, #3
 80181e0:	f043 0301 	orr.w	r3, r3, #1
 80181e4:	81a3      	strh	r3, [r4, #12]
 80181e6:	89a3      	ldrh	r3, [r4, #12]
 80181e8:	431d      	orrs	r5, r3
 80181ea:	81a5      	strh	r5, [r4, #12]
 80181ec:	e7cf      	b.n	801818e <__smakebuf_r+0x18>

080181ee <_raise_r>:
 80181ee:	291f      	cmp	r1, #31
 80181f0:	b538      	push	{r3, r4, r5, lr}
 80181f2:	4604      	mov	r4, r0
 80181f4:	460d      	mov	r5, r1
 80181f6:	d904      	bls.n	8018202 <_raise_r+0x14>
 80181f8:	2316      	movs	r3, #22
 80181fa:	6003      	str	r3, [r0, #0]
 80181fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018200:	bd38      	pop	{r3, r4, r5, pc}
 8018202:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018204:	b112      	cbz	r2, 801820c <_raise_r+0x1e>
 8018206:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801820a:	b94b      	cbnz	r3, 8018220 <_raise_r+0x32>
 801820c:	4620      	mov	r0, r4
 801820e:	f000 f853 	bl	80182b8 <_getpid_r>
 8018212:	462a      	mov	r2, r5
 8018214:	4601      	mov	r1, r0
 8018216:	4620      	mov	r0, r4
 8018218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801821c:	f000 b83a 	b.w	8018294 <_kill_r>
 8018220:	2b01      	cmp	r3, #1
 8018222:	d00a      	beq.n	801823a <_raise_r+0x4c>
 8018224:	1c59      	adds	r1, r3, #1
 8018226:	d103      	bne.n	8018230 <_raise_r+0x42>
 8018228:	2316      	movs	r3, #22
 801822a:	6003      	str	r3, [r0, #0]
 801822c:	2001      	movs	r0, #1
 801822e:	e7e7      	b.n	8018200 <_raise_r+0x12>
 8018230:	2400      	movs	r4, #0
 8018232:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018236:	4628      	mov	r0, r5
 8018238:	4798      	blx	r3
 801823a:	2000      	movs	r0, #0
 801823c:	e7e0      	b.n	8018200 <_raise_r+0x12>
	...

08018240 <raise>:
 8018240:	4b02      	ldr	r3, [pc, #8]	; (801824c <raise+0xc>)
 8018242:	4601      	mov	r1, r0
 8018244:	6818      	ldr	r0, [r3, #0]
 8018246:	f7ff bfd2 	b.w	80181ee <_raise_r>
 801824a:	bf00      	nop
 801824c:	2000008c 	.word	0x2000008c

08018250 <_fstat_r>:
 8018250:	b538      	push	{r3, r4, r5, lr}
 8018252:	4d07      	ldr	r5, [pc, #28]	; (8018270 <_fstat_r+0x20>)
 8018254:	2300      	movs	r3, #0
 8018256:	4604      	mov	r4, r0
 8018258:	4608      	mov	r0, r1
 801825a:	4611      	mov	r1, r2
 801825c:	602b      	str	r3, [r5, #0]
 801825e:	f7e8 fcdc 	bl	8000c1a <_fstat>
 8018262:	1c43      	adds	r3, r0, #1
 8018264:	d102      	bne.n	801826c <_fstat_r+0x1c>
 8018266:	682b      	ldr	r3, [r5, #0]
 8018268:	b103      	cbz	r3, 801826c <_fstat_r+0x1c>
 801826a:	6023      	str	r3, [r4, #0]
 801826c:	bd38      	pop	{r3, r4, r5, pc}
 801826e:	bf00      	nop
 8018270:	20010bec 	.word	0x20010bec

08018274 <_isatty_r>:
 8018274:	b538      	push	{r3, r4, r5, lr}
 8018276:	4d06      	ldr	r5, [pc, #24]	; (8018290 <_isatty_r+0x1c>)
 8018278:	2300      	movs	r3, #0
 801827a:	4604      	mov	r4, r0
 801827c:	4608      	mov	r0, r1
 801827e:	602b      	str	r3, [r5, #0]
 8018280:	f7e8 fcdb 	bl	8000c3a <_isatty>
 8018284:	1c43      	adds	r3, r0, #1
 8018286:	d102      	bne.n	801828e <_isatty_r+0x1a>
 8018288:	682b      	ldr	r3, [r5, #0]
 801828a:	b103      	cbz	r3, 801828e <_isatty_r+0x1a>
 801828c:	6023      	str	r3, [r4, #0]
 801828e:	bd38      	pop	{r3, r4, r5, pc}
 8018290:	20010bec 	.word	0x20010bec

08018294 <_kill_r>:
 8018294:	b538      	push	{r3, r4, r5, lr}
 8018296:	4d07      	ldr	r5, [pc, #28]	; (80182b4 <_kill_r+0x20>)
 8018298:	2300      	movs	r3, #0
 801829a:	4604      	mov	r4, r0
 801829c:	4608      	mov	r0, r1
 801829e:	4611      	mov	r1, r2
 80182a0:	602b      	str	r3, [r5, #0]
 80182a2:	f7e8 fc59 	bl	8000b58 <_kill>
 80182a6:	1c43      	adds	r3, r0, #1
 80182a8:	d102      	bne.n	80182b0 <_kill_r+0x1c>
 80182aa:	682b      	ldr	r3, [r5, #0]
 80182ac:	b103      	cbz	r3, 80182b0 <_kill_r+0x1c>
 80182ae:	6023      	str	r3, [r4, #0]
 80182b0:	bd38      	pop	{r3, r4, r5, pc}
 80182b2:	bf00      	nop
 80182b4:	20010bec 	.word	0x20010bec

080182b8 <_getpid_r>:
 80182b8:	f7e8 bc46 	b.w	8000b48 <_getpid>

080182bc <_init>:
 80182bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182be:	bf00      	nop
 80182c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182c2:	bc08      	pop	{r3}
 80182c4:	469e      	mov	lr, r3
 80182c6:	4770      	bx	lr

080182c8 <_fini>:
 80182c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ca:	bf00      	nop
 80182cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182ce:	bc08      	pop	{r3}
 80182d0:	469e      	mov	lr, r3
 80182d2:	4770      	bx	lr
