
CVIC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df0  08003df0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df8  08003df8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000208  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cc97  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c5c  00000000  00000000  0002cd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  0002e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a0  00000000  00000000  0002f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242c9  00000000  00000000  0002ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dfd5  00000000  00000000  00054291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbb6e  00000000  00000000  00062266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b40  00000000  00000000  0013ddd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00141914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d34 	.word	0x08003d34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08003d34 	.word	0x08003d34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
ITM_SendChar(ch);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd1 	bl	800058c <ITM_SendChar>
return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fcfc 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f860 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f940 	bl	8000884 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f914 	bl	8000830 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000608:	f000 f8c4 	bl	8000794 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800060c:	4825      	ldr	r0, [pc, #148]	; (80006a4 <main+0xb0>)
 800060e:	f001 fd79 	bl	8002104 <HAL_TIM_Base_Start_IT>
		  key = -1;
	  }*/

	  static uint32_t delay;

	  if (HAL_GetTick() > delay + 750) {
 8000612:	f000 fd55 	bl	80010c0 <HAL_GetTick>
 8000616:	4602      	mov	r2, r0
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0xb4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 8000620:	429a      	cmp	r2, r3
 8000622:	d9f6      	bls.n	8000612 <main+0x1e>

		  if (key != -1){
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <main+0xb8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062e:	d027      	beq.n	8000680 <main+0x8c>
			  if (key == kod[pos]){
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <main+0xbc>)
 8000632:	f993 3000 	ldrsb.w	r3, [r3]
 8000636:	461a      	mov	r2, r3
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <main+0xc0>)
 800063a:	569a      	ldrsb	r2, [r3, r2]
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0xb8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	429a      	cmp	r2, r3
 8000644:	d116      	bne.n	8000674 <main+0x80>
				  printf("Stisknuto: %d\n", key);
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0xb8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xc4>)
 8000650:	f002 fcfc 	bl	800304c <iprintf>
				  HAL_Delay(200);
 8000654:	20c8      	movs	r0, #200	; 0xc8
 8000656:	f000 fd3f 	bl	80010d8 <HAL_Delay>
				  pos = pos + 1;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <main+0xbc>)
 800065c:	f993 3000 	ldrsb.w	r3, [r3]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3301      	adds	r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	b25a      	sxtb	r2, r3
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <main+0xbc>)
 800066a:	701a      	strb	r2, [r3, #0]
				  key = -1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <main+0xb8>)
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e005      	b.n	8000680 <main+0x8c>
			  }
			  else {
				  key = -1;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0xb8>)
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	701a      	strb	r2, [r3, #0]
				  pos = 0;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <main+0xbc>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
			  }

		  }

		  if (pos > 4){
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <main+0xbc>)
 8000682:	f993 3000 	ldrsb.w	r3, [r3]
 8000686:	2b04      	cmp	r3, #4
 8000688:	dd06      	ble.n	8000698 <main+0xa4>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800068a:	2101      	movs	r1, #1
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <main+0xc8>)
 800068e:	f001 f836 	bl	80016fe <HAL_GPIO_TogglePin>
			  pos = 0;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <main+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
		  }

		  delay = HAL_GetTick();
 8000698:	f000 fd12 	bl	80010c0 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a02      	ldr	r2, [pc, #8]	; (80006a8 <main+0xb4>)
 80006a0:	6013      	str	r3, [r2, #0]
  {
 80006a2:	e7b6      	b.n	8000612 <main+0x1e>
 80006a4:	20000088 	.word	0x20000088
 80006a8:	20000118 	.word	0x20000118
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000114 	.word	0x20000114
 80006b4:	08003d5c 	.word	0x08003d5c
 80006b8:	08003d4c 	.word	0x08003d4c
 80006bc:	40020400 	.word	0x40020400

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fd11 	bl	80030f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fff5 	bl	8001734 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fa9e 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fa56 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 fa87 	bl	8000c90 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM3_Init+0x94>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_TIM3_Init+0x98>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_TIM3_Init+0x94>)
 80007b8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM3_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM3_Init+0x94>)
 80007c6:	2263      	movs	r2, #99	; 0x63
 80007c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_TIM3_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM3_Init+0x94>)
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_TIM3_Init+0x94>)
 80007d8:	f001 fc44 	bl	8002064 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 fa55 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_TIM3_Init+0x94>)
 80007f4:	f001 fdfe 	bl	80023f4 <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fa47 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_TIM3_Init+0x94>)
 8000810:	f002 f81a 	bl	8002848 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800081a:	f000 fa39 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000088 	.word	0x20000088
 800082c:	40000400 	.word	0x40000400

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART3_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x4c>)
 8000868:	f002 f87e 	bl	8002968 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 fa0d 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d0 	.word	0x200000d0
 8000880:	40004800 	.word	0x40004800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	4ba1      	ldr	r3, [pc, #644]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4aa0      	ldr	r2, [pc, #640]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b9e      	ldr	r3, [pc, #632]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	4b9a      	ldr	r3, [pc, #616]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a99      	ldr	r2, [pc, #612]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b97      	ldr	r3, [pc, #604]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b93      	ldr	r3, [pc, #588]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a92      	ldr	r2, [pc, #584]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b90      	ldr	r3, [pc, #576]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b8c      	ldr	r3, [pc, #560]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a8b      	ldr	r2, [pc, #556]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b89      	ldr	r3, [pc, #548]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b85      	ldr	r3, [pc, #532]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a84      	ldr	r2, [pc, #528]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b7e      	ldr	r3, [pc, #504]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a7d      	ldr	r2, [pc, #500]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b7b      	ldr	r3, [pc, #492]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b77      	ldr	r3, [pc, #476]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a76      	ldr	r2, [pc, #472]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b74      	ldr	r3, [pc, #464]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b70      	ldr	r3, [pc, #448]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a6f      	ldr	r2, [pc, #444]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b6d      	ldr	r3, [pc, #436]	; (8000b24 <MX_GPIO_Init+0x2a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000980:	4869      	ldr	r0, [pc, #420]	; (8000b28 <MX_GPIO_Init+0x2a4>)
 8000982:	f000 fea3 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f244 0181 	movw	r1, #16513	; 0x4081
 800098c:	4867      	ldr	r0, [pc, #412]	; (8000b2c <MX_GPIO_Init+0x2a8>)
 800098e:	f000 fe9d 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2142      	movs	r1, #66	; 0x42
 8000996:	4866      	ldr	r0, [pc, #408]	; (8000b30 <MX_GPIO_Init+0x2ac>)
 8000998:	f000 fe98 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 800099c:	2378      	movs	r3, #120	; 0x78
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4861      	ldr	r0, [pc, #388]	; (8000b34 <MX_GPIO_Init+0x2b0>)
 80009b0:	f000 fcc8 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	485b      	ldr	r0, [pc, #364]	; (8000b38 <MX_GPIO_Init+0x2b4>)
 80009cc:	f000 fcba 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 80009d0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009d6:	2311      	movs	r3, #17
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	484f      	ldr	r0, [pc, #316]	; (8000b28 <MX_GPIO_Init+0x2a4>)
 80009ea:	f000 fcab 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ee:	2332      	movs	r3, #50	; 0x32
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x2b4>)
 8000a0a:	f000 fc9b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a0e:	2386      	movs	r3, #134	; 0x86
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1e:	230b      	movs	r3, #11
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4844      	ldr	r0, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x2b8>)
 8000a2a:	f000 fc8b 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4839      	ldr	r0, [pc, #228]	; (8000b2c <MX_GPIO_Init+0x2a8>)
 8000a48:	f000 fc7c 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a50:	2311      	movs	r3, #17
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4833      	ldr	r0, [pc, #204]	; (8000b30 <MX_GPIO_Init+0x2ac>)
 8000a64:	f000 fc6e 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4829      	ldr	r0, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x2a8>)
 8000a86:	f000 fc5d 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4823      	ldr	r0, [pc, #140]	; (8000b30 <MX_GPIO_Init+0x2ac>)
 8000aa2:	f000 fc4f 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481d      	ldr	r0, [pc, #116]	; (8000b30 <MX_GPIO_Init+0x2ac>)
 8000aba:	f000 fc43 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000abe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4818      	ldr	r0, [pc, #96]	; (8000b3c <MX_GPIO_Init+0x2b8>)
 8000adc:	f000 fc32 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x2b8>)
 8000af6:	f000 fc25 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000afa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_GPIO_Init+0x2ac>)
 8000b18:	f000 fc14 	bl	8001344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40021800 	.word	0x40021800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 { 1, 2, 3, 21 },
 { 4, 5, 6, 22 },
 { 7, 8, 9, 23 },
 { 11, 0, 12, 24 },
 };
 if (key == -1) {
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b52:	d142      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x9a>
 if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 8000b54:	2108      	movs	r1, #8
 8000b56:	4849      	ldr	r0, [pc, #292]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b58:	f000 fda0 	bl	800169c <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d108      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x34>
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	4413      	add	r3, r2
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b72:	701a      	strb	r2, [r3, #0]
 if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	4841      	ldr	r0, [pc, #260]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b78:	f000 fd90 	bl	800169c <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d109      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000b82:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a3f      	ldr	r2, [pc, #252]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b94:	701a      	strb	r2, [r3, #0]
 if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000b96:	2120      	movs	r1, #32
 8000b98:	4838      	ldr	r0, [pc, #224]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b9a:	f000 fd7f 	bl	800169c <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d109      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	4413      	add	r3, r2
 8000bae:	3308      	adds	r3, #8
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	b25a      	sxtb	r2, r3
 8000bb4:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bb6:	701a      	strb	r2, [r3, #0]
 if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4830      	ldr	r0, [pc, #192]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000bbc:	f000 fd6e 	bl	800169c <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d109      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x9a>
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4413      	add	r3, r2
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b25a      	sxtb	r2, r3
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bd8:	701a      	strb	r2, [r3, #0]
 }
 HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2102      	movs	r1, #2
 8000bde:	482a      	ldr	r0, [pc, #168]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000be0:	f000 fd74 	bl	80016cc <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	4828      	ldr	r0, [pc, #160]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bec:	f000 fd6e 	bl	80016cc <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	4825      	ldr	r0, [pc, #148]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bf6:	f000 fd69 	bl	80016cc <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c02:	f000 fd63 	bl	80016cc <HAL_GPIO_WritePin>
 switch (row) {
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d830      	bhi.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c39 	.word	0x08000c39
 8000c1c:	08000c4b 	.word	0x08000c4b
 8000c20:	08000c5f 	.word	0x08000c5f
 case 0: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c32:	f000 fd4b 	bl	80016cc <HAL_GPIO_WritePin>
 8000c36:	e01b      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x130>
 case 1: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c44:	f000 fd42 	bl	80016cc <HAL_GPIO_WritePin>
 8000c48:	e012      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x130>
 case 2: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c58:	f000 fd38 	bl	80016cc <HAL_GPIO_WritePin>
 8000c5c:	e008      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x130>
 case 3: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	2102      	movs	r1, #2
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c6a:	f000 fd2f 	bl	80016cc <HAL_GPIO_WritePin>
 8000c6e:	bf00      	nop
 }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	2000011c 	.word	0x2000011c
 8000c84:	08003d64 	.word	0x08003d64
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40021400 	.word	0x40021400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_TIM_Base_MspInit+0x48>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d115      	bne.n	8000d2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_TIM_Base_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_TIM_Base_MspInit+0x4c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_TIM_Base_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201d      	movs	r0, #29
 8000d20:	f000 fad9 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d24:	201d      	movs	r0, #29
 8000d26:	f000 faf2 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40000400 	.word	0x40000400
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12c      	bne.n	8000db8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000db4:	f000 fac6 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f93e 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM3_IRQHandler+0x10>)
 8000e26:	f001 f9dd 	bl	80021e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000088 	.word	0x20000088

08000e34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e00a      	b.n	8000e5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e46:	f3af 8000 	nop.w
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	b2ca      	uxtb	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf0      	blt.n	8000e46 <_read+0x12>
  }

  return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	e009      	b.n	8000e94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fba6 	bl	80005da <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf1      	blt.n	8000e80 <_write+0x12>
  }
  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f002 f928 	bl	8003194 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20030000 	.word	0x20030000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	20000120 	.word	0x20000120
 8000f78:	20000278 	.word	0x20000278

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd7 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 f8e7 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fb0f 	bl	80005f4 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fe4:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 8000fe8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fec:	20000274 	.word	0x20000274

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94f 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe38 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f967 	bl	800132a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f92f 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004
 8001090:	2000000c 	.word	0x2000000c
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000124 	.word	0x20000124

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000124 	.word	0x20000124

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000000c 	.word	0x2000000c

08001120 <__NVIC_SetPriorityGrouping>:
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff3e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff31 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e177      	b.n	8001650 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8166 	bne.w	800164a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80c0 	beq.w	800164a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a61      	ldr	r2, [pc, #388]	; (800166c <HAL_GPIO_Init+0x328>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_GPIO_Init+0x32c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d037      	beq.n	8001582 <HAL_GPIO_Init+0x23e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_GPIO_Init+0x330>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d031      	beq.n	800157e <HAL_GPIO_Init+0x23a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a56      	ldr	r2, [pc, #344]	; (8001678 <HAL_GPIO_Init+0x334>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d02b      	beq.n	800157a <HAL_GPIO_Init+0x236>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_GPIO_Init+0x338>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d025      	beq.n	8001576 <HAL_GPIO_Init+0x232>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a54      	ldr	r2, [pc, #336]	; (8001680 <HAL_GPIO_Init+0x33c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01f      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a53      	ldr	r2, [pc, #332]	; (8001684 <HAL_GPIO_Init+0x340>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x22a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_GPIO_Init+0x344>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x226>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a51      	ldr	r2, [pc, #324]	; (800168c <HAL_GPIO_Init+0x348>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_GPIO_Init+0x34c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x350>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x21a>
 800155a:	2309      	movs	r3, #9
 800155c:	e012      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800155e:	230a      	movs	r3, #10
 8001560:	e010      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001562:	2308      	movs	r3, #8
 8001564:	e00e      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001566:	2307      	movs	r3, #7
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800156a:	2306      	movs	r3, #6
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001582:	2300      	movs	r3, #0
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001594:	4935      	ldr	r1, [pc, #212]	; (800166c <HAL_GPIO_Init+0x328>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c6:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f0:	4a29      	ldr	r2, [pc, #164]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_GPIO_Init+0x354>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x354>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_GPIO_Init+0x354>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b0f      	cmp	r3, #15
 8001654:	f67f ae84 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40013800 	.word	0x40013800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40021000 	.word	0x40021000
 8001684:	40021400 	.word	0x40021400
 8001688:	40021800 	.word	0x40021800
 800168c:	40021c00 	.word	0x40021c00
 8001690:	40022000 	.word	0x40022000
 8001694:	40022400 	.word	0x40022400
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001710:	887a      	ldrh	r2, [r7, #2]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43d9      	mvns	r1, r3
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	400b      	ands	r3, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e267      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d075      	beq.n	800183e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d00c      	beq.n	8001778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001766:	2b08      	cmp	r3, #8
 8001768:	d112      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001776:	d10b      	bne.n	8001790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <HAL_RCC_OscConfig+0x108>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d157      	bne.n	800183c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e242      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d106      	bne.n	80017a8 <HAL_RCC_OscConfig+0x74>
 800179a:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a75      	ldr	r2, [pc, #468]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x98>
 80017b2:	4b70      	ldr	r3, [pc, #448]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6c      	ldr	r2, [pc, #432]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb0>
 80017cc:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a68      	ldr	r2, [pc, #416]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b66      	ldr	r3, [pc, #408]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc68 	bl	80010c0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc64 	bl	80010c0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e207      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xc0>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc54 	bl	80010c0 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc50 	bl	80010c0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1f3      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b51      	ldr	r3, [pc, #324]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0xe8>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1c7      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x244>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc09 	bl	80010c0 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fc05 	bl	80010c0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1a8      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x244>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fbe8 	bl	80010c0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fbe4 	bl	80010c0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e187      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d036      	beq.n	800198c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x248>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fbc8 	bl	80010c0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fbc4 	bl	80010c0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e167      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x240>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x200>
 8001952:	e01b      	b.n	800198c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_OscConfig+0x248>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff fbb1 	bl	80010c0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	e00e      	b.n	8001980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fbad 	bl	80010c0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d907      	bls.n	8001980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e150      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
 8001974:	40023800 	.word	0x40023800
 8001978:	42470000 	.word	0x42470000
 800197c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ea      	bne.n	8001962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8097 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a7c      	ldr	r2, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c6:	2301      	movs	r3, #1
 80019c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d118      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d6:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a73      	ldr	r2, [pc, #460]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb6d 	bl	80010c0 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7ff fb69 	bl	80010c0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e10c      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x474>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2ea>
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x324>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x30c>
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0x324>
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f023 0304 	bic.w	r3, r3, #4
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d015      	beq.n	8001a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fb2e 	bl	80010c0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb2a 	bl	80010c0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0cb      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0ee      	beq.n	8001a68 <HAL_RCC_OscConfig+0x334>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fb18 	bl	80010c0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff fb14 	bl	80010c0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0b5      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a1 	beq.w	8001c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d05c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d141      	bne.n	8001b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fae8 	bl	80010c0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fae4 	bl	80010c0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e087      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fabd 	bl	80010c0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff fab9 	bl	80010c0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e05c      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x416>
 8001b68:	e054      	b.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x478>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff faa6 	bl	80010c0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff faa2 	bl	80010c0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e045      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x444>
 8001b96:	e03d      	b.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e038      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x4ec>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d028      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d121      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d11a      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d111      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0cc      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d90c      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e067      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f9d4 	bl	80010c0 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f9d0 	bl	80010c0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20c      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f821 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f934 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08003da4 	.word	0x08003da4
 8001de8:	20000004 	.word	0x20000004
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b094      	sub	sp, #80	; 0x50
 8001df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d00d      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x40>
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f200 80e1 	bhi.w	8001fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e22:	e0db      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e24:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e28:	e0db      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2e:	e0d8      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e46:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e62:	4622      	mov	r2, r4
 8001e64:	462b      	mov	r3, r5
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	1a51      	subs	r1, r2, r1
 8001e7e:	6139      	str	r1, [r7, #16]
 8001e80:	4629      	mov	r1, r5
 8001e82:	eb63 0301 	sbc.w	r3, r3, r1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e94:	4659      	mov	r1, fp
 8001e96:	018b      	lsls	r3, r1, #6
 8001e98:	4651      	mov	r1, sl
 8001e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9e:	4651      	mov	r1, sl
 8001ea0:	018a      	lsls	r2, r1, #6
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec2:	4690      	mov	r8, r2
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	eb18 0303 	adds.w	r3, r8, r3
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	462b      	mov	r3, r5
 8001ed0:	eb49 0303 	adc.w	r3, r9, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	024b      	lsls	r3, r1, #9
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eec:	4621      	mov	r1, r4
 8001eee:	024a      	lsls	r2, r1, #9
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f00:	f7fe f9c6 	bl	8000290 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f0c:	e058      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	2200      	movs	r2, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	4611      	mov	r1, r2
 8001f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f28:	4642      	mov	r2, r8
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	f04f 0100 	mov.w	r1, #0
 8001f34:	0159      	lsls	r1, r3, #5
 8001f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f3a:	0150      	lsls	r0, r2, #5
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4641      	mov	r1, r8
 8001f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f46:	4649      	mov	r1, r9
 8001f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f60:	ebb2 040a 	subs.w	r4, r2, sl
 8001f64:	eb63 050b 	sbc.w	r5, r3, fp
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	00eb      	lsls	r3, r5, #3
 8001f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f76:	00e2      	lsls	r2, r4, #3
 8001f78:	4614      	mov	r4, r2
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	18e3      	adds	r3, r4, r3
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	464b      	mov	r3, r9
 8001f84:	eb45 0303 	adc.w	r3, r5, r3
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f96:	4629      	mov	r1, r5
 8001f98:	028b      	lsls	r3, r1, #10
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	028a      	lsls	r2, r1, #10
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001faa:	2200      	movs	r2, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	61fa      	str	r2, [r7, #28]
 8001fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb4:	f7fe f96c 	bl	8000290 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3750      	adds	r7, #80	; 0x50
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002018:	f7ff fff0 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0a9b      	lsrs	r3, r3, #10
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	08003db4 	.word	0x08003db4

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002040:	f7ff ffdc 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0b5b      	lsrs	r3, r3, #13
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08003db4 	.word	0x08003db4

08002064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e041      	b.n	80020fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fe2e 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 fa96 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d001      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e04e      	b.n	80021ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a23      	ldr	r2, [pc, #140]	; (80021c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d01d      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_TIM_Base_Start_IT+0xc8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_TIM_Base_Start_IT+0x80>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d111      	bne.n	80021a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d010      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	e007      	b.n	80021b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	40010400 	.word	0x40010400
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40001800 	.word	0x40001800

080021e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0202 	mvn.w	r2, #2
 8002210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9b5 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f9a7 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9b8 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0204 	mvn.w	r2, #4
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f98b 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f97d 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f98e 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d122      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0208 	mvn.w	r2, #8
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f961 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f953 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f964 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b10      	cmp	r3, #16
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0210 	mvn.w	r2, #16
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2208      	movs	r2, #8
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f937 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f929 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f93a 	bl	80025aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0201 	mvn.w	r2, #1
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fbec 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b80      	cmp	r3, #128	; 0x80
 8002374:	d10e      	bne.n	8002394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d107      	bne.n	8002394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fae0 	bl	8002954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d10e      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d107      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8ff 	bl	80025be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d10e      	bne.n	80023ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d107      	bne.n	80023ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0220 	mvn.w	r2, #32
 80023e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 faaa 	bl	8002940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIM_ConfigClockSource+0x1c>
 800240c:	2302      	movs	r3, #2
 800240e:	e0b4      	b.n	800257a <HAL_TIM_ConfigClockSource+0x186>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800242e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002448:	d03e      	beq.n	80024c8 <HAL_TIM_ConfigClockSource+0xd4>
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	f200 8087 	bhi.w	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	f000 8086 	beq.w	8002566 <HAL_TIM_ConfigClockSource+0x172>
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245e:	d87f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b70      	cmp	r3, #112	; 0x70
 8002462:	d01a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xa6>
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d87b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b60      	cmp	r3, #96	; 0x60
 800246a:	d050      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x11a>
 800246c:	2b60      	cmp	r3, #96	; 0x60
 800246e:	d877      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b50      	cmp	r3, #80	; 0x50
 8002472:	d03c      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0xfa>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d873      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d058      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x13a>
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d86f      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b30      	cmp	r3, #48	; 0x30
 8002482:	d064      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d86b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d060      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d867      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d05a      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	e062      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f000 f9ad 	bl	8002808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	609a      	str	r2, [r3, #8]
      break;
 80024c6:	e04f      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f000 f996 	bl	8002808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ea:	609a      	str	r2, [r3, #8]
      break;
 80024ec:	e03c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f90a 	bl	8002714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2150      	movs	r1, #80	; 0x50
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f963 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 800250c:	e02c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f929 	bl	8002772 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2160      	movs	r1, #96	; 0x60
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f953 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 800252c:	e01c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	461a      	mov	r2, r3
 800253c:	f000 f8ea 	bl	8002714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f943 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 800254c:	e00c      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f000 f93a 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 800255e:	e003      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      break;
 8002564:	e000      	b.n	8002568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a40      	ldr	r2, [pc, #256]	; (80026e8 <TIM_Base_SetConfig+0x114>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d00f      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <TIM_Base_SetConfig+0x118>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00b      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <TIM_Base_SetConfig+0x11c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <TIM_Base_SetConfig+0x120>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0x40>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3a      	ldr	r2, [pc, #232]	; (80026f8 <TIM_Base_SetConfig+0x124>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <TIM_Base_SetConfig+0x114>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02b      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d027      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <TIM_Base_SetConfig+0x118>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d023      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <TIM_Base_SetConfig+0x11c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2a      	ldr	r2, [pc, #168]	; (80026f4 <TIM_Base_SetConfig+0x120>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01b      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <TIM_Base_SetConfig+0x124>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d017      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <TIM_Base_SetConfig+0x128>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a27      	ldr	r2, [pc, #156]	; (8002700 <TIM_Base_SetConfig+0x12c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00f      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a26      	ldr	r2, [pc, #152]	; (8002704 <TIM_Base_SetConfig+0x130>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <TIM_Base_SetConfig+0x134>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <TIM_Base_SetConfig+0x138>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0xb2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <TIM_Base_SetConfig+0x13c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <TIM_Base_SetConfig+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_Base_SetConfig+0xf8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <TIM_Base_SetConfig+0x124>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d103      	bne.n	80026d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	615a      	str	r2, [r3, #20]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800
 80026f4:	40000c00 	.word	0x40000c00
 80026f8:	40010400 	.word	0x40010400
 80026fc:	40014000 	.word	0x40014000
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800
 8002708:	40001800 	.word	0x40001800
 800270c:	40001c00 	.word	0x40001c00
 8002710:	40002000 	.word	0x40002000

08002714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f023 0201 	bic.w	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800273e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f023 030a 	bic.w	r3, r3, #10
 8002750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0210 	bic.w	r2, r3, #16
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800279c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	031b      	lsls	r3, r3, #12
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f043 0307 	orr.w	r3, r3, #7
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	431a      	orrs	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800285c:	2302      	movs	r3, #2
 800285e:	e05a      	b.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d01d      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10c      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40010400 	.word	0x40010400
 8002938:	40014000 	.word	0x40014000
 800293c:	40001800 	.word	0x40001800

08002940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e03f      	b.n	80029fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f9d4 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f829 	bl	8002a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b0c0      	sub	sp, #256	; 0x100
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	ea40 0301 	orr.w	r3, r0, r1
 8002a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a5c:	f021 010c 	bic.w	r1, r1, #12
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	6999      	ldr	r1, [r3, #24]
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	ea40 0301 	orr.w	r3, r0, r1
 8002a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <UART_SetConfig+0x2cc>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0xa0>
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <UART_SetConfig+0x2d0>)
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7ff faca 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8002aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002aac:	e003      	b.n	8002ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7ff fab1 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	f040 810c 	bne.w	8002cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ace:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	eb12 0801 	adds.w	r8, r2, r1
 8002aec:	4629      	mov	r1, r5
 8002aee:	eb43 0901 	adc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb49 0303 	adc.w	r3, r9, r3
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b32:	460b      	mov	r3, r1
 8002b34:	18db      	adds	r3, r3, r3
 8002b36:	653b      	str	r3, [r7, #80]	; 0x50
 8002b38:	4613      	mov	r3, r2
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b48:	f7fd fba2 	bl	8000290 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <UART_SetConfig+0x2d4>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	011c      	lsls	r4, r3, #4
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b74:	415b      	adcs	r3, r3
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b82:	4649      	mov	r1, r9
 8002b84:	eb43 0b01 	adc.w	fp, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9c:	4692      	mov	sl, r2
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002baa:	464b      	mov	r3, r9
 8002bac:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bde:	f7fd fb57 	bl	8000290 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	; 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bfe:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <UART_SetConfig+0x2d4>)
 8002c00:	fba3 2302 	umull	r2, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c0c:	441c      	add	r4, r3
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6339      	str	r1, [r7, #48]	; 0x30
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c9a:	f7fd faf9 	bl	8000290 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <UART_SetConfig+0x2d4>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <UART_SetConfig+0x2d4>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0207 	and.w	r2, r3, #7
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4422      	add	r2, r4
 8002cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ccc:	e106      	b.n	8002edc <UART_SetConfig+0x4d8>
 8002cce:	bf00      	nop
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cee:	4642      	mov	r2, r8
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	6239      	str	r1, [r7, #32]
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cfe:	4641      	mov	r1, r8
 8002d00:	1854      	adds	r4, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb43 0501 	adc.w	r5, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d24:	464b      	mov	r3, r9
 8002d26:	eb45 0303 	adc.w	r3, r5, r3
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	008b      	lsls	r3, r1, #2
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d54:	4621      	mov	r1, r4
 8002d56:	008a      	lsls	r2, r1, #2
 8002d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d5c:	f7fd fa98 	bl	8000290 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <UART_SetConfig+0x4e4>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011c      	lsls	r4, r3, #4
 8002d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	61b9      	str	r1, [r7, #24]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6139      	str	r1, [r7, #16]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dfa:	f7fd fa49 	bl	8000290 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <UART_SetConfig+0x4e4>)
 8002e06:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2264      	movs	r2, #100	; 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	1acb      	subs	r3, r1, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <UART_SetConfig+0x4e4>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e2e:	677a      	str	r2, [r7, #116]	; 0x74
 8002e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e44:	4641      	mov	r1, r8
 8002e46:	1851      	adds	r1, r2, r1
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	414b      	adcs	r3, r1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4651      	mov	r1, sl
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4642      	mov	r2, r8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e76:	464b      	mov	r3, r9
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8a:	667a      	str	r2, [r7, #100]	; 0x64
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e98:	4649      	mov	r1, r9
 8002e9a:	008b      	lsls	r3, r1, #2
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	008a      	lsls	r2, r1, #2
 8002ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002eaa:	f7fd f9f1 	bl	8000290 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <UART_SetConfig+0x4e4>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	; 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	3332      	adds	r3, #50	; 0x32
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <UART_SetConfig+0x4e4>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4422      	add	r2, r4
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee8:	51eb851f 	.word	0x51eb851f

08002eec <std>:
 8002eec:	2300      	movs	r3, #0
 8002eee:	b510      	push	{r4, lr}
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002efa:	6083      	str	r3, [r0, #8]
 8002efc:	8181      	strh	r1, [r0, #12]
 8002efe:	6643      	str	r3, [r0, #100]	; 0x64
 8002f00:	81c2      	strh	r2, [r0, #14]
 8002f02:	6183      	str	r3, [r0, #24]
 8002f04:	4619      	mov	r1, r3
 8002f06:	2208      	movs	r2, #8
 8002f08:	305c      	adds	r0, #92	; 0x5c
 8002f0a:	f000 f8f4 	bl	80030f6 <memset>
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <std+0x38>)
 8002f10:	6263      	str	r3, [r4, #36]	; 0x24
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <std+0x3c>)
 8002f14:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <std+0x40>)
 8002f18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <std+0x44>)
 8002f1c:	6224      	str	r4, [r4, #32]
 8002f1e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	08003071 	.word	0x08003071
 8002f28:	08003093 	.word	0x08003093
 8002f2c:	080030cb 	.word	0x080030cb
 8002f30:	080030ef 	.word	0x080030ef

08002f34 <stdio_exit_handler>:
 8002f34:	4a02      	ldr	r2, [pc, #8]	; (8002f40 <stdio_exit_handler+0xc>)
 8002f36:	4903      	ldr	r1, [pc, #12]	; (8002f44 <stdio_exit_handler+0x10>)
 8002f38:	4803      	ldr	r0, [pc, #12]	; (8002f48 <stdio_exit_handler+0x14>)
 8002f3a:	f000 b869 	b.w	8003010 <_fwalk_sglue>
 8002f3e:	bf00      	nop
 8002f40:	20000010 	.word	0x20000010
 8002f44:	08003a91 	.word	0x08003a91
 8002f48:	2000001c 	.word	0x2000001c

08002f4c <cleanup_stdio>:
 8002f4c:	6841      	ldr	r1, [r0, #4]
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <cleanup_stdio+0x34>)
 8002f50:	4299      	cmp	r1, r3
 8002f52:	b510      	push	{r4, lr}
 8002f54:	4604      	mov	r4, r0
 8002f56:	d001      	beq.n	8002f5c <cleanup_stdio+0x10>
 8002f58:	f000 fd9a 	bl	8003a90 <_fflush_r>
 8002f5c:	68a1      	ldr	r1, [r4, #8]
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <cleanup_stdio+0x38>)
 8002f60:	4299      	cmp	r1, r3
 8002f62:	d002      	beq.n	8002f6a <cleanup_stdio+0x1e>
 8002f64:	4620      	mov	r0, r4
 8002f66:	f000 fd93 	bl	8003a90 <_fflush_r>
 8002f6a:	68e1      	ldr	r1, [r4, #12]
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <cleanup_stdio+0x3c>)
 8002f6e:	4299      	cmp	r1, r3
 8002f70:	d004      	beq.n	8002f7c <cleanup_stdio+0x30>
 8002f72:	4620      	mov	r0, r4
 8002f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f78:	f000 bd8a 	b.w	8003a90 <_fflush_r>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000128 	.word	0x20000128
 8002f84:	20000190 	.word	0x20000190
 8002f88:	200001f8 	.word	0x200001f8

08002f8c <global_stdio_init.part.0>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <global_stdio_init.part.0+0x30>)
 8002f90:	4c0b      	ldr	r4, [pc, #44]	; (8002fc0 <global_stdio_init.part.0+0x34>)
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <global_stdio_init.part.0+0x38>)
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	4620      	mov	r0, r4
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	f7ff ffa6 	bl	8002eec <std>
 8002fa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2109      	movs	r1, #9
 8002fa8:	f7ff ffa0 	bl	8002eec <std>
 8002fac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb6:	2112      	movs	r1, #18
 8002fb8:	f7ff bf98 	b.w	8002eec <std>
 8002fbc:	20000260 	.word	0x20000260
 8002fc0:	20000128 	.word	0x20000128
 8002fc4:	08002f35 	.word	0x08002f35

08002fc8 <__sfp_lock_acquire>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	; (8002fd0 <__sfp_lock_acquire+0x8>)
 8002fca:	f000 b90d 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 8002fce:	bf00      	nop
 8002fd0:	20000269 	.word	0x20000269

08002fd4 <__sfp_lock_release>:
 8002fd4:	4801      	ldr	r0, [pc, #4]	; (8002fdc <__sfp_lock_release+0x8>)
 8002fd6:	f000 b908 	b.w	80031ea <__retarget_lock_release_recursive>
 8002fda:	bf00      	nop
 8002fdc:	20000269 	.word	0x20000269

08002fe0 <__sinit>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	f7ff fff0 	bl	8002fc8 <__sfp_lock_acquire>
 8002fe8:	6a23      	ldr	r3, [r4, #32]
 8002fea:	b11b      	cbz	r3, 8002ff4 <__sinit+0x14>
 8002fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff0:	f7ff bff0 	b.w	8002fd4 <__sfp_lock_release>
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__sinit+0x28>)
 8002ff6:	6223      	str	r3, [r4, #32]
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__sinit+0x2c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f5      	bne.n	8002fec <__sinit+0xc>
 8003000:	f7ff ffc4 	bl	8002f8c <global_stdio_init.part.0>
 8003004:	e7f2      	b.n	8002fec <__sinit+0xc>
 8003006:	bf00      	nop
 8003008:	08002f4d 	.word	0x08002f4d
 800300c:	20000260 	.word	0x20000260

08003010 <_fwalk_sglue>:
 8003010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003014:	4607      	mov	r7, r0
 8003016:	4688      	mov	r8, r1
 8003018:	4614      	mov	r4, r2
 800301a:	2600      	movs	r6, #0
 800301c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003020:	f1b9 0901 	subs.w	r9, r9, #1
 8003024:	d505      	bpl.n	8003032 <_fwalk_sglue+0x22>
 8003026:	6824      	ldr	r4, [r4, #0]
 8003028:	2c00      	cmp	r4, #0
 800302a:	d1f7      	bne.n	800301c <_fwalk_sglue+0xc>
 800302c:	4630      	mov	r0, r6
 800302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003032:	89ab      	ldrh	r3, [r5, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d907      	bls.n	8003048 <_fwalk_sglue+0x38>
 8003038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800303c:	3301      	adds	r3, #1
 800303e:	d003      	beq.n	8003048 <_fwalk_sglue+0x38>
 8003040:	4629      	mov	r1, r5
 8003042:	4638      	mov	r0, r7
 8003044:	47c0      	blx	r8
 8003046:	4306      	orrs	r6, r0
 8003048:	3568      	adds	r5, #104	; 0x68
 800304a:	e7e9      	b.n	8003020 <_fwalk_sglue+0x10>

0800304c <iprintf>:
 800304c:	b40f      	push	{r0, r1, r2, r3}
 800304e:	b507      	push	{r0, r1, r2, lr}
 8003050:	4906      	ldr	r1, [pc, #24]	; (800306c <iprintf+0x20>)
 8003052:	ab04      	add	r3, sp, #16
 8003054:	6808      	ldr	r0, [r1, #0]
 8003056:	f853 2b04 	ldr.w	r2, [r3], #4
 800305a:	6881      	ldr	r1, [r0, #8]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	f000 f9e7 	bl	8003430 <_vfiprintf_r>
 8003062:	b003      	add	sp, #12
 8003064:	f85d eb04 	ldr.w	lr, [sp], #4
 8003068:	b004      	add	sp, #16
 800306a:	4770      	bx	lr
 800306c:	20000068 	.word	0x20000068

08003070 <__sread>:
 8003070:	b510      	push	{r4, lr}
 8003072:	460c      	mov	r4, r1
 8003074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003078:	f000 f868 	bl	800314c <_read_r>
 800307c:	2800      	cmp	r0, #0
 800307e:	bfab      	itete	ge
 8003080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003082:	89a3      	ldrhlt	r3, [r4, #12]
 8003084:	181b      	addge	r3, r3, r0
 8003086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800308a:	bfac      	ite	ge
 800308c:	6563      	strge	r3, [r4, #84]	; 0x54
 800308e:	81a3      	strhlt	r3, [r4, #12]
 8003090:	bd10      	pop	{r4, pc}

08003092 <__swrite>:
 8003092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003096:	461f      	mov	r7, r3
 8003098:	898b      	ldrh	r3, [r1, #12]
 800309a:	05db      	lsls	r3, r3, #23
 800309c:	4605      	mov	r5, r0
 800309e:	460c      	mov	r4, r1
 80030a0:	4616      	mov	r6, r2
 80030a2:	d505      	bpl.n	80030b0 <__swrite+0x1e>
 80030a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a8:	2302      	movs	r3, #2
 80030aa:	2200      	movs	r2, #0
 80030ac:	f000 f83c 	bl	8003128 <_lseek_r>
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	4632      	mov	r2, r6
 80030be:	463b      	mov	r3, r7
 80030c0:	4628      	mov	r0, r5
 80030c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030c6:	f000 b853 	b.w	8003170 <_write_r>

080030ca <__sseek>:
 80030ca:	b510      	push	{r4, lr}
 80030cc:	460c      	mov	r4, r1
 80030ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d2:	f000 f829 	bl	8003128 <_lseek_r>
 80030d6:	1c43      	adds	r3, r0, #1
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	bf15      	itete	ne
 80030dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80030de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030e6:	81a3      	strheq	r3, [r4, #12]
 80030e8:	bf18      	it	ne
 80030ea:	81a3      	strhne	r3, [r4, #12]
 80030ec:	bd10      	pop	{r4, pc}

080030ee <__sclose>:
 80030ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f2:	f000 b809 	b.w	8003108 <_close_r>

080030f6 <memset>:
 80030f6:	4402      	add	r2, r0
 80030f8:	4603      	mov	r3, r0
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d100      	bne.n	8003100 <memset+0xa>
 80030fe:	4770      	bx	lr
 8003100:	f803 1b01 	strb.w	r1, [r3], #1
 8003104:	e7f9      	b.n	80030fa <memset+0x4>
	...

08003108 <_close_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4d06      	ldr	r5, [pc, #24]	; (8003124 <_close_r+0x1c>)
 800310c:	2300      	movs	r3, #0
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	602b      	str	r3, [r5, #0]
 8003114:	f7fd fec7 	bl	8000ea6 <_close>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_close_r+0x1a>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_close_r+0x1a>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	20000264 	.word	0x20000264

08003128 <_lseek_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4d07      	ldr	r5, [pc, #28]	; (8003148 <_lseek_r+0x20>)
 800312c:	4604      	mov	r4, r0
 800312e:	4608      	mov	r0, r1
 8003130:	4611      	mov	r1, r2
 8003132:	2200      	movs	r2, #0
 8003134:	602a      	str	r2, [r5, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f7fd fedc 	bl	8000ef4 <_lseek>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_lseek_r+0x1e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_lseek_r+0x1e>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	20000264 	.word	0x20000264

0800314c <_read_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4d07      	ldr	r5, [pc, #28]	; (800316c <_read_r+0x20>)
 8003150:	4604      	mov	r4, r0
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	2200      	movs	r2, #0
 8003158:	602a      	str	r2, [r5, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f7fd fe6a 	bl	8000e34 <_read>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_read_r+0x1e>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_read_r+0x1e>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	20000264 	.word	0x20000264

08003170 <_write_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	; (8003190 <_write_r+0x20>)
 8003174:	4604      	mov	r4, r0
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	2200      	movs	r2, #0
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fe75 	bl	8000e6e <_write>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_write_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_write_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000264 	.word	0x20000264

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000068 	.word	0x20000068

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4d0d      	ldr	r5, [pc, #52]	; (80031d8 <__libc_init_array+0x38>)
 80031a4:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	2600      	movs	r6, #0
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	4d0b      	ldr	r5, [pc, #44]	; (80031e0 <__libc_init_array+0x40>)
 80031b2:	4c0c      	ldr	r4, [pc, #48]	; (80031e4 <__libc_init_array+0x44>)
 80031b4:	f000 fdbe 	bl	8003d34 <_init>
 80031b8:	1b64      	subs	r4, r4, r5
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	2600      	movs	r6, #0
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08003df8 	.word	0x08003df8
 80031dc:	08003df8 	.word	0x08003df8
 80031e0:	08003df8 	.word	0x08003df8
 80031e4:	08003dfc 	.word	0x08003dfc

080031e8 <__retarget_lock_acquire_recursive>:
 80031e8:	4770      	bx	lr

080031ea <__retarget_lock_release_recursive>:
 80031ea:	4770      	bx	lr

080031ec <_free_r>:
 80031ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031ee:	2900      	cmp	r1, #0
 80031f0:	d044      	beq.n	800327c <_free_r+0x90>
 80031f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031f6:	9001      	str	r0, [sp, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f1a1 0404 	sub.w	r4, r1, #4
 80031fe:	bfb8      	it	lt
 8003200:	18e4      	addlt	r4, r4, r3
 8003202:	f000 f8df 	bl	80033c4 <__malloc_lock>
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <_free_r+0x94>)
 8003208:	9801      	ldr	r0, [sp, #4]
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b933      	cbnz	r3, 800321c <_free_r+0x30>
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6014      	str	r4, [r2, #0]
 8003212:	b003      	add	sp, #12
 8003214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003218:	f000 b8da 	b.w	80033d0 <__malloc_unlock>
 800321c:	42a3      	cmp	r3, r4
 800321e:	d908      	bls.n	8003232 <_free_r+0x46>
 8003220:	6825      	ldr	r5, [r4, #0]
 8003222:	1961      	adds	r1, r4, r5
 8003224:	428b      	cmp	r3, r1
 8003226:	bf01      	itttt	eq
 8003228:	6819      	ldreq	r1, [r3, #0]
 800322a:	685b      	ldreq	r3, [r3, #4]
 800322c:	1949      	addeq	r1, r1, r5
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	e7ed      	b.n	800320e <_free_r+0x22>
 8003232:	461a      	mov	r2, r3
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b10b      	cbz	r3, 800323c <_free_r+0x50>
 8003238:	42a3      	cmp	r3, r4
 800323a:	d9fa      	bls.n	8003232 <_free_r+0x46>
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	1855      	adds	r5, r2, r1
 8003240:	42a5      	cmp	r5, r4
 8003242:	d10b      	bne.n	800325c <_free_r+0x70>
 8003244:	6824      	ldr	r4, [r4, #0]
 8003246:	4421      	add	r1, r4
 8003248:	1854      	adds	r4, r2, r1
 800324a:	42a3      	cmp	r3, r4
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	d1e0      	bne.n	8003212 <_free_r+0x26>
 8003250:	681c      	ldr	r4, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	6053      	str	r3, [r2, #4]
 8003256:	440c      	add	r4, r1
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	e7da      	b.n	8003212 <_free_r+0x26>
 800325c:	d902      	bls.n	8003264 <_free_r+0x78>
 800325e:	230c      	movs	r3, #12
 8003260:	6003      	str	r3, [r0, #0]
 8003262:	e7d6      	b.n	8003212 <_free_r+0x26>
 8003264:	6825      	ldr	r5, [r4, #0]
 8003266:	1961      	adds	r1, r4, r5
 8003268:	428b      	cmp	r3, r1
 800326a:	bf04      	itt	eq
 800326c:	6819      	ldreq	r1, [r3, #0]
 800326e:	685b      	ldreq	r3, [r3, #4]
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	bf04      	itt	eq
 8003274:	1949      	addeq	r1, r1, r5
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	6054      	str	r4, [r2, #4]
 800327a:	e7ca      	b.n	8003212 <_free_r+0x26>
 800327c:	b003      	add	sp, #12
 800327e:	bd30      	pop	{r4, r5, pc}
 8003280:	2000026c 	.word	0x2000026c

08003284 <sbrk_aligned>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4e0e      	ldr	r6, [pc, #56]	; (80032c0 <sbrk_aligned+0x3c>)
 8003288:	460c      	mov	r4, r1
 800328a:	6831      	ldr	r1, [r6, #0]
 800328c:	4605      	mov	r5, r0
 800328e:	b911      	cbnz	r1, 8003296 <sbrk_aligned+0x12>
 8003290:	f000 fcbc 	bl	8003c0c <_sbrk_r>
 8003294:	6030      	str	r0, [r6, #0]
 8003296:	4621      	mov	r1, r4
 8003298:	4628      	mov	r0, r5
 800329a:	f000 fcb7 	bl	8003c0c <_sbrk_r>
 800329e:	1c43      	adds	r3, r0, #1
 80032a0:	d00a      	beq.n	80032b8 <sbrk_aligned+0x34>
 80032a2:	1cc4      	adds	r4, r0, #3
 80032a4:	f024 0403 	bic.w	r4, r4, #3
 80032a8:	42a0      	cmp	r0, r4
 80032aa:	d007      	beq.n	80032bc <sbrk_aligned+0x38>
 80032ac:	1a21      	subs	r1, r4, r0
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 fcac 	bl	8003c0c <_sbrk_r>
 80032b4:	3001      	adds	r0, #1
 80032b6:	d101      	bne.n	80032bc <sbrk_aligned+0x38>
 80032b8:	f04f 34ff 	mov.w	r4, #4294967295
 80032bc:	4620      	mov	r0, r4
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	20000270 	.word	0x20000270

080032c4 <_malloc_r>:
 80032c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c8:	1ccd      	adds	r5, r1, #3
 80032ca:	f025 0503 	bic.w	r5, r5, #3
 80032ce:	3508      	adds	r5, #8
 80032d0:	2d0c      	cmp	r5, #12
 80032d2:	bf38      	it	cc
 80032d4:	250c      	movcc	r5, #12
 80032d6:	2d00      	cmp	r5, #0
 80032d8:	4607      	mov	r7, r0
 80032da:	db01      	blt.n	80032e0 <_malloc_r+0x1c>
 80032dc:	42a9      	cmp	r1, r5
 80032de:	d905      	bls.n	80032ec <_malloc_r+0x28>
 80032e0:	230c      	movs	r3, #12
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	2600      	movs	r6, #0
 80032e6:	4630      	mov	r0, r6
 80032e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033c0 <_malloc_r+0xfc>
 80032f0:	f000 f868 	bl	80033c4 <__malloc_lock>
 80032f4:	f8d8 3000 	ldr.w	r3, [r8]
 80032f8:	461c      	mov	r4, r3
 80032fa:	bb5c      	cbnz	r4, 8003354 <_malloc_r+0x90>
 80032fc:	4629      	mov	r1, r5
 80032fe:	4638      	mov	r0, r7
 8003300:	f7ff ffc0 	bl	8003284 <sbrk_aligned>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	4604      	mov	r4, r0
 8003308:	d155      	bne.n	80033b6 <_malloc_r+0xf2>
 800330a:	f8d8 4000 	ldr.w	r4, [r8]
 800330e:	4626      	mov	r6, r4
 8003310:	2e00      	cmp	r6, #0
 8003312:	d145      	bne.n	80033a0 <_malloc_r+0xdc>
 8003314:	2c00      	cmp	r4, #0
 8003316:	d048      	beq.n	80033aa <_malloc_r+0xe6>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	4631      	mov	r1, r6
 800331c:	4638      	mov	r0, r7
 800331e:	eb04 0903 	add.w	r9, r4, r3
 8003322:	f000 fc73 	bl	8003c0c <_sbrk_r>
 8003326:	4581      	cmp	r9, r0
 8003328:	d13f      	bne.n	80033aa <_malloc_r+0xe6>
 800332a:	6821      	ldr	r1, [r4, #0]
 800332c:	1a6d      	subs	r5, r5, r1
 800332e:	4629      	mov	r1, r5
 8003330:	4638      	mov	r0, r7
 8003332:	f7ff ffa7 	bl	8003284 <sbrk_aligned>
 8003336:	3001      	adds	r0, #1
 8003338:	d037      	beq.n	80033aa <_malloc_r+0xe6>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	442b      	add	r3, r5
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	f8d8 3000 	ldr.w	r3, [r8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d038      	beq.n	80033ba <_malloc_r+0xf6>
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	42a2      	cmp	r2, r4
 800334c:	d12b      	bne.n	80033a6 <_malloc_r+0xe2>
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e00f      	b.n	8003374 <_malloc_r+0xb0>
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	1b52      	subs	r2, r2, r5
 8003358:	d41f      	bmi.n	800339a <_malloc_r+0xd6>
 800335a:	2a0b      	cmp	r2, #11
 800335c:	d917      	bls.n	800338e <_malloc_r+0xca>
 800335e:	1961      	adds	r1, r4, r5
 8003360:	42a3      	cmp	r3, r4
 8003362:	6025      	str	r5, [r4, #0]
 8003364:	bf18      	it	ne
 8003366:	6059      	strne	r1, [r3, #4]
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	bf08      	it	eq
 800336c:	f8c8 1000 	streq.w	r1, [r8]
 8003370:	5162      	str	r2, [r4, r5]
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	4638      	mov	r0, r7
 8003376:	f104 060b 	add.w	r6, r4, #11
 800337a:	f000 f829 	bl	80033d0 <__malloc_unlock>
 800337e:	f026 0607 	bic.w	r6, r6, #7
 8003382:	1d23      	adds	r3, r4, #4
 8003384:	1af2      	subs	r2, r6, r3
 8003386:	d0ae      	beq.n	80032e6 <_malloc_r+0x22>
 8003388:	1b9b      	subs	r3, r3, r6
 800338a:	50a3      	str	r3, [r4, r2]
 800338c:	e7ab      	b.n	80032e6 <_malloc_r+0x22>
 800338e:	42a3      	cmp	r3, r4
 8003390:	6862      	ldr	r2, [r4, #4]
 8003392:	d1dd      	bne.n	8003350 <_malloc_r+0x8c>
 8003394:	f8c8 2000 	str.w	r2, [r8]
 8003398:	e7ec      	b.n	8003374 <_malloc_r+0xb0>
 800339a:	4623      	mov	r3, r4
 800339c:	6864      	ldr	r4, [r4, #4]
 800339e:	e7ac      	b.n	80032fa <_malloc_r+0x36>
 80033a0:	4634      	mov	r4, r6
 80033a2:	6876      	ldr	r6, [r6, #4]
 80033a4:	e7b4      	b.n	8003310 <_malloc_r+0x4c>
 80033a6:	4613      	mov	r3, r2
 80033a8:	e7cc      	b.n	8003344 <_malloc_r+0x80>
 80033aa:	230c      	movs	r3, #12
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4638      	mov	r0, r7
 80033b0:	f000 f80e 	bl	80033d0 <__malloc_unlock>
 80033b4:	e797      	b.n	80032e6 <_malloc_r+0x22>
 80033b6:	6025      	str	r5, [r4, #0]
 80033b8:	e7dc      	b.n	8003374 <_malloc_r+0xb0>
 80033ba:	605b      	str	r3, [r3, #4]
 80033bc:	deff      	udf	#255	; 0xff
 80033be:	bf00      	nop
 80033c0:	2000026c 	.word	0x2000026c

080033c4 <__malloc_lock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_lock+0x8>)
 80033c6:	f7ff bf0f 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 80033ca:	bf00      	nop
 80033cc:	20000268 	.word	0x20000268

080033d0 <__malloc_unlock>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__malloc_unlock+0x8>)
 80033d2:	f7ff bf0a 	b.w	80031ea <__retarget_lock_release_recursive>
 80033d6:	bf00      	nop
 80033d8:	20000268 	.word	0x20000268

080033dc <__sfputc_r>:
 80033dc:	6893      	ldr	r3, [r2, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	b410      	push	{r4}
 80033e4:	6093      	str	r3, [r2, #8]
 80033e6:	da08      	bge.n	80033fa <__sfputc_r+0x1e>
 80033e8:	6994      	ldr	r4, [r2, #24]
 80033ea:	42a3      	cmp	r3, r4
 80033ec:	db01      	blt.n	80033f2 <__sfputc_r+0x16>
 80033ee:	290a      	cmp	r1, #10
 80033f0:	d103      	bne.n	80033fa <__sfputc_r+0x1e>
 80033f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f6:	f000 bb73 	b.w	8003ae0 <__swbuf_r>
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	1c58      	adds	r0, r3, #1
 80033fe:	6010      	str	r0, [r2, #0]
 8003400:	7019      	strb	r1, [r3, #0]
 8003402:	4608      	mov	r0, r1
 8003404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003408:	4770      	bx	lr

0800340a <__sfputs_r>:
 800340a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340c:	4606      	mov	r6, r0
 800340e:	460f      	mov	r7, r1
 8003410:	4614      	mov	r4, r2
 8003412:	18d5      	adds	r5, r2, r3
 8003414:	42ac      	cmp	r4, r5
 8003416:	d101      	bne.n	800341c <__sfputs_r+0x12>
 8003418:	2000      	movs	r0, #0
 800341a:	e007      	b.n	800342c <__sfputs_r+0x22>
 800341c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003420:	463a      	mov	r2, r7
 8003422:	4630      	mov	r0, r6
 8003424:	f7ff ffda 	bl	80033dc <__sfputc_r>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d1f3      	bne.n	8003414 <__sfputs_r+0xa>
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003430 <_vfiprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	460d      	mov	r5, r1
 8003436:	b09d      	sub	sp, #116	; 0x74
 8003438:	4614      	mov	r4, r2
 800343a:	4698      	mov	r8, r3
 800343c:	4606      	mov	r6, r0
 800343e:	b118      	cbz	r0, 8003448 <_vfiprintf_r+0x18>
 8003440:	6a03      	ldr	r3, [r0, #32]
 8003442:	b90b      	cbnz	r3, 8003448 <_vfiprintf_r+0x18>
 8003444:	f7ff fdcc 	bl	8002fe0 <__sinit>
 8003448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800344a:	07d9      	lsls	r1, r3, #31
 800344c:	d405      	bmi.n	800345a <_vfiprintf_r+0x2a>
 800344e:	89ab      	ldrh	r3, [r5, #12]
 8003450:	059a      	lsls	r2, r3, #22
 8003452:	d402      	bmi.n	800345a <_vfiprintf_r+0x2a>
 8003454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003456:	f7ff fec7 	bl	80031e8 <__retarget_lock_acquire_recursive>
 800345a:	89ab      	ldrh	r3, [r5, #12]
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	d501      	bpl.n	8003464 <_vfiprintf_r+0x34>
 8003460:	692b      	ldr	r3, [r5, #16]
 8003462:	b99b      	cbnz	r3, 800348c <_vfiprintf_r+0x5c>
 8003464:	4629      	mov	r1, r5
 8003466:	4630      	mov	r0, r6
 8003468:	f000 fb78 	bl	8003b5c <__swsetup_r>
 800346c:	b170      	cbz	r0, 800348c <_vfiprintf_r+0x5c>
 800346e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003470:	07dc      	lsls	r4, r3, #31
 8003472:	d504      	bpl.n	800347e <_vfiprintf_r+0x4e>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	b01d      	add	sp, #116	; 0x74
 800347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347e:	89ab      	ldrh	r3, [r5, #12]
 8003480:	0598      	lsls	r0, r3, #22
 8003482:	d4f7      	bmi.n	8003474 <_vfiprintf_r+0x44>
 8003484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003486:	f7ff feb0 	bl	80031ea <__retarget_lock_release_recursive>
 800348a:	e7f3      	b.n	8003474 <_vfiprintf_r+0x44>
 800348c:	2300      	movs	r3, #0
 800348e:	9309      	str	r3, [sp, #36]	; 0x24
 8003490:	2320      	movs	r3, #32
 8003492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003496:	f8cd 800c 	str.w	r8, [sp, #12]
 800349a:	2330      	movs	r3, #48	; 0x30
 800349c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003650 <_vfiprintf_r+0x220>
 80034a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a4:	f04f 0901 	mov.w	r9, #1
 80034a8:	4623      	mov	r3, r4
 80034aa:	469a      	mov	sl, r3
 80034ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b0:	b10a      	cbz	r2, 80034b6 <_vfiprintf_r+0x86>
 80034b2:	2a25      	cmp	r2, #37	; 0x25
 80034b4:	d1f9      	bne.n	80034aa <_vfiprintf_r+0x7a>
 80034b6:	ebba 0b04 	subs.w	fp, sl, r4
 80034ba:	d00b      	beq.n	80034d4 <_vfiprintf_r+0xa4>
 80034bc:	465b      	mov	r3, fp
 80034be:	4622      	mov	r2, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	4630      	mov	r0, r6
 80034c4:	f7ff ffa1 	bl	800340a <__sfputs_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	f000 80a9 	beq.w	8003620 <_vfiprintf_r+0x1f0>
 80034ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034d0:	445a      	add	r2, fp
 80034d2:	9209      	str	r2, [sp, #36]	; 0x24
 80034d4:	f89a 3000 	ldrb.w	r3, [sl]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a1 	beq.w	8003620 <_vfiprintf_r+0x1f0>
 80034de:	2300      	movs	r3, #0
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e8:	f10a 0a01 	add.w	sl, sl, #1
 80034ec:	9304      	str	r3, [sp, #16]
 80034ee:	9307      	str	r3, [sp, #28]
 80034f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034f4:	931a      	str	r3, [sp, #104]	; 0x68
 80034f6:	4654      	mov	r4, sl
 80034f8:	2205      	movs	r2, #5
 80034fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fe:	4854      	ldr	r0, [pc, #336]	; (8003650 <_vfiprintf_r+0x220>)
 8003500:	f7fc fe76 	bl	80001f0 <memchr>
 8003504:	9a04      	ldr	r2, [sp, #16]
 8003506:	b9d8      	cbnz	r0, 8003540 <_vfiprintf_r+0x110>
 8003508:	06d1      	lsls	r1, r2, #27
 800350a:	bf44      	itt	mi
 800350c:	2320      	movmi	r3, #32
 800350e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003512:	0713      	lsls	r3, r2, #28
 8003514:	bf44      	itt	mi
 8003516:	232b      	movmi	r3, #43	; 0x2b
 8003518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800351c:	f89a 3000 	ldrb.w	r3, [sl]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d015      	beq.n	8003550 <_vfiprintf_r+0x120>
 8003524:	9a07      	ldr	r2, [sp, #28]
 8003526:	4654      	mov	r4, sl
 8003528:	2000      	movs	r0, #0
 800352a:	f04f 0c0a 	mov.w	ip, #10
 800352e:	4621      	mov	r1, r4
 8003530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003534:	3b30      	subs	r3, #48	; 0x30
 8003536:	2b09      	cmp	r3, #9
 8003538:	d94d      	bls.n	80035d6 <_vfiprintf_r+0x1a6>
 800353a:	b1b0      	cbz	r0, 800356a <_vfiprintf_r+0x13a>
 800353c:	9207      	str	r2, [sp, #28]
 800353e:	e014      	b.n	800356a <_vfiprintf_r+0x13a>
 8003540:	eba0 0308 	sub.w	r3, r0, r8
 8003544:	fa09 f303 	lsl.w	r3, r9, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	9304      	str	r3, [sp, #16]
 800354c:	46a2      	mov	sl, r4
 800354e:	e7d2      	b.n	80034f6 <_vfiprintf_r+0xc6>
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	1d19      	adds	r1, r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	9103      	str	r1, [sp, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	bfbb      	ittet	lt
 800355c:	425b      	neglt	r3, r3
 800355e:	f042 0202 	orrlt.w	r2, r2, #2
 8003562:	9307      	strge	r3, [sp, #28]
 8003564:	9307      	strlt	r3, [sp, #28]
 8003566:	bfb8      	it	lt
 8003568:	9204      	strlt	r2, [sp, #16]
 800356a:	7823      	ldrb	r3, [r4, #0]
 800356c:	2b2e      	cmp	r3, #46	; 0x2e
 800356e:	d10c      	bne.n	800358a <_vfiprintf_r+0x15a>
 8003570:	7863      	ldrb	r3, [r4, #1]
 8003572:	2b2a      	cmp	r3, #42	; 0x2a
 8003574:	d134      	bne.n	80035e0 <_vfiprintf_r+0x1b0>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	9203      	str	r2, [sp, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	bfb8      	it	lt
 8003582:	f04f 33ff 	movlt.w	r3, #4294967295
 8003586:	3402      	adds	r4, #2
 8003588:	9305      	str	r3, [sp, #20]
 800358a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003660 <_vfiprintf_r+0x230>
 800358e:	7821      	ldrb	r1, [r4, #0]
 8003590:	2203      	movs	r2, #3
 8003592:	4650      	mov	r0, sl
 8003594:	f7fc fe2c 	bl	80001f0 <memchr>
 8003598:	b138      	cbz	r0, 80035aa <_vfiprintf_r+0x17a>
 800359a:	9b04      	ldr	r3, [sp, #16]
 800359c:	eba0 000a 	sub.w	r0, r0, sl
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	4082      	lsls	r2, r0
 80035a4:	4313      	orrs	r3, r2
 80035a6:	3401      	adds	r4, #1
 80035a8:	9304      	str	r3, [sp, #16]
 80035aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ae:	4829      	ldr	r0, [pc, #164]	; (8003654 <_vfiprintf_r+0x224>)
 80035b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b4:	2206      	movs	r2, #6
 80035b6:	f7fc fe1b 	bl	80001f0 <memchr>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d03f      	beq.n	800363e <_vfiprintf_r+0x20e>
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <_vfiprintf_r+0x228>)
 80035c0:	bb1b      	cbnz	r3, 800360a <_vfiprintf_r+0x1da>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	3307      	adds	r3, #7
 80035c6:	f023 0307 	bic.w	r3, r3, #7
 80035ca:	3308      	adds	r3, #8
 80035cc:	9303      	str	r3, [sp, #12]
 80035ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d0:	443b      	add	r3, r7
 80035d2:	9309      	str	r3, [sp, #36]	; 0x24
 80035d4:	e768      	b.n	80034a8 <_vfiprintf_r+0x78>
 80035d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035da:	460c      	mov	r4, r1
 80035dc:	2001      	movs	r0, #1
 80035de:	e7a6      	b.n	800352e <_vfiprintf_r+0xfe>
 80035e0:	2300      	movs	r3, #0
 80035e2:	3401      	adds	r4, #1
 80035e4:	9305      	str	r3, [sp, #20]
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 0c0a 	mov.w	ip, #10
 80035ec:	4620      	mov	r0, r4
 80035ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f2:	3a30      	subs	r2, #48	; 0x30
 80035f4:	2a09      	cmp	r2, #9
 80035f6:	d903      	bls.n	8003600 <_vfiprintf_r+0x1d0>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0c6      	beq.n	800358a <_vfiprintf_r+0x15a>
 80035fc:	9105      	str	r1, [sp, #20]
 80035fe:	e7c4      	b.n	800358a <_vfiprintf_r+0x15a>
 8003600:	fb0c 2101 	mla	r1, ip, r1, r2
 8003604:	4604      	mov	r4, r0
 8003606:	2301      	movs	r3, #1
 8003608:	e7f0      	b.n	80035ec <_vfiprintf_r+0x1bc>
 800360a:	ab03      	add	r3, sp, #12
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	462a      	mov	r2, r5
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <_vfiprintf_r+0x22c>)
 8003612:	a904      	add	r1, sp, #16
 8003614:	4630      	mov	r0, r6
 8003616:	f3af 8000 	nop.w
 800361a:	4607      	mov	r7, r0
 800361c:	1c78      	adds	r0, r7, #1
 800361e:	d1d6      	bne.n	80035ce <_vfiprintf_r+0x19e>
 8003620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	d405      	bmi.n	8003632 <_vfiprintf_r+0x202>
 8003626:	89ab      	ldrh	r3, [r5, #12]
 8003628:	059a      	lsls	r2, r3, #22
 800362a:	d402      	bmi.n	8003632 <_vfiprintf_r+0x202>
 800362c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800362e:	f7ff fddc 	bl	80031ea <__retarget_lock_release_recursive>
 8003632:	89ab      	ldrh	r3, [r5, #12]
 8003634:	065b      	lsls	r3, r3, #25
 8003636:	f53f af1d 	bmi.w	8003474 <_vfiprintf_r+0x44>
 800363a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800363c:	e71c      	b.n	8003478 <_vfiprintf_r+0x48>
 800363e:	ab03      	add	r3, sp, #12
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	462a      	mov	r2, r5
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <_vfiprintf_r+0x22c>)
 8003646:	a904      	add	r1, sp, #16
 8003648:	4630      	mov	r0, r6
 800364a:	f000 f879 	bl	8003740 <_printf_i>
 800364e:	e7e4      	b.n	800361a <_vfiprintf_r+0x1ea>
 8003650:	08003dbc 	.word	0x08003dbc
 8003654:	08003dc6 	.word	0x08003dc6
 8003658:	00000000 	.word	0x00000000
 800365c:	0800340b 	.word	0x0800340b
 8003660:	08003dc2 	.word	0x08003dc2

08003664 <_printf_common>:
 8003664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003668:	4616      	mov	r6, r2
 800366a:	4699      	mov	r9, r3
 800366c:	688a      	ldr	r2, [r1, #8]
 800366e:	690b      	ldr	r3, [r1, #16]
 8003670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003674:	4293      	cmp	r3, r2
 8003676:	bfb8      	it	lt
 8003678:	4613      	movlt	r3, r2
 800367a:	6033      	str	r3, [r6, #0]
 800367c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003680:	4607      	mov	r7, r0
 8003682:	460c      	mov	r4, r1
 8003684:	b10a      	cbz	r2, 800368a <_printf_common+0x26>
 8003686:	3301      	adds	r3, #1
 8003688:	6033      	str	r3, [r6, #0]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	0699      	lsls	r1, r3, #26
 800368e:	bf42      	ittt	mi
 8003690:	6833      	ldrmi	r3, [r6, #0]
 8003692:	3302      	addmi	r3, #2
 8003694:	6033      	strmi	r3, [r6, #0]
 8003696:	6825      	ldr	r5, [r4, #0]
 8003698:	f015 0506 	ands.w	r5, r5, #6
 800369c:	d106      	bne.n	80036ac <_printf_common+0x48>
 800369e:	f104 0a19 	add.w	sl, r4, #25
 80036a2:	68e3      	ldr	r3, [r4, #12]
 80036a4:	6832      	ldr	r2, [r6, #0]
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	42ab      	cmp	r3, r5
 80036aa:	dc26      	bgt.n	80036fa <_printf_common+0x96>
 80036ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036b0:	1e13      	subs	r3, r2, #0
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	bf18      	it	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	0692      	lsls	r2, r2, #26
 80036ba:	d42b      	bmi.n	8003714 <_printf_common+0xb0>
 80036bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036c0:	4649      	mov	r1, r9
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c0      	blx	r8
 80036c6:	3001      	adds	r0, #1
 80036c8:	d01e      	beq.n	8003708 <_printf_common+0xa4>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	f003 0306 	and.w	r3, r3, #6
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf02      	ittt	eq
 80036d6:	68e5      	ldreq	r5, [r4, #12]
 80036d8:	6833      	ldreq	r3, [r6, #0]
 80036da:	1aed      	subeq	r5, r5, r3
 80036dc:	68a3      	ldr	r3, [r4, #8]
 80036de:	bf0c      	ite	eq
 80036e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036e4:	2500      	movne	r5, #0
 80036e6:	4293      	cmp	r3, r2
 80036e8:	bfc4      	itt	gt
 80036ea:	1a9b      	subgt	r3, r3, r2
 80036ec:	18ed      	addgt	r5, r5, r3
 80036ee:	2600      	movs	r6, #0
 80036f0:	341a      	adds	r4, #26
 80036f2:	42b5      	cmp	r5, r6
 80036f4:	d11a      	bne.n	800372c <_printf_common+0xc8>
 80036f6:	2000      	movs	r0, #0
 80036f8:	e008      	b.n	800370c <_printf_common+0xa8>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4652      	mov	r2, sl
 80036fe:	4649      	mov	r1, r9
 8003700:	4638      	mov	r0, r7
 8003702:	47c0      	blx	r8
 8003704:	3001      	adds	r0, #1
 8003706:	d103      	bne.n	8003710 <_printf_common+0xac>
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003710:	3501      	adds	r5, #1
 8003712:	e7c6      	b.n	80036a2 <_printf_common+0x3e>
 8003714:	18e1      	adds	r1, r4, r3
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	2030      	movs	r0, #48	; 0x30
 800371a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800371e:	4422      	add	r2, r4
 8003720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003728:	3302      	adds	r3, #2
 800372a:	e7c7      	b.n	80036bc <_printf_common+0x58>
 800372c:	2301      	movs	r3, #1
 800372e:	4622      	mov	r2, r4
 8003730:	4649      	mov	r1, r9
 8003732:	4638      	mov	r0, r7
 8003734:	47c0      	blx	r8
 8003736:	3001      	adds	r0, #1
 8003738:	d0e6      	beq.n	8003708 <_printf_common+0xa4>
 800373a:	3601      	adds	r6, #1
 800373c:	e7d9      	b.n	80036f2 <_printf_common+0x8e>
	...

08003740 <_printf_i>:
 8003740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003744:	7e0f      	ldrb	r7, [r1, #24]
 8003746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003748:	2f78      	cmp	r7, #120	; 0x78
 800374a:	4691      	mov	r9, r2
 800374c:	4680      	mov	r8, r0
 800374e:	460c      	mov	r4, r1
 8003750:	469a      	mov	sl, r3
 8003752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003756:	d807      	bhi.n	8003768 <_printf_i+0x28>
 8003758:	2f62      	cmp	r7, #98	; 0x62
 800375a:	d80a      	bhi.n	8003772 <_printf_i+0x32>
 800375c:	2f00      	cmp	r7, #0
 800375e:	f000 80d4 	beq.w	800390a <_printf_i+0x1ca>
 8003762:	2f58      	cmp	r7, #88	; 0x58
 8003764:	f000 80c0 	beq.w	80038e8 <_printf_i+0x1a8>
 8003768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800376c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003770:	e03a      	b.n	80037e8 <_printf_i+0xa8>
 8003772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003776:	2b15      	cmp	r3, #21
 8003778:	d8f6      	bhi.n	8003768 <_printf_i+0x28>
 800377a:	a101      	add	r1, pc, #4	; (adr r1, 8003780 <_printf_i+0x40>)
 800377c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003780:	080037d9 	.word	0x080037d9
 8003784:	080037ed 	.word	0x080037ed
 8003788:	08003769 	.word	0x08003769
 800378c:	08003769 	.word	0x08003769
 8003790:	08003769 	.word	0x08003769
 8003794:	08003769 	.word	0x08003769
 8003798:	080037ed 	.word	0x080037ed
 800379c:	08003769 	.word	0x08003769
 80037a0:	08003769 	.word	0x08003769
 80037a4:	08003769 	.word	0x08003769
 80037a8:	08003769 	.word	0x08003769
 80037ac:	080038f1 	.word	0x080038f1
 80037b0:	08003819 	.word	0x08003819
 80037b4:	080038ab 	.word	0x080038ab
 80037b8:	08003769 	.word	0x08003769
 80037bc:	08003769 	.word	0x08003769
 80037c0:	08003913 	.word	0x08003913
 80037c4:	08003769 	.word	0x08003769
 80037c8:	08003819 	.word	0x08003819
 80037cc:	08003769 	.word	0x08003769
 80037d0:	08003769 	.word	0x08003769
 80037d4:	080038b3 	.word	0x080038b3
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e8:	2301      	movs	r3, #1
 80037ea:	e09f      	b.n	800392c <_printf_i+0x1ec>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	0607      	lsls	r7, r0, #24
 80037f2:	f103 0104 	add.w	r1, r3, #4
 80037f6:	6029      	str	r1, [r5, #0]
 80037f8:	d501      	bpl.n	80037fe <_printf_i+0xbe>
 80037fa:	681e      	ldr	r6, [r3, #0]
 80037fc:	e003      	b.n	8003806 <_printf_i+0xc6>
 80037fe:	0646      	lsls	r6, r0, #25
 8003800:	d5fb      	bpl.n	80037fa <_printf_i+0xba>
 8003802:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003806:	2e00      	cmp	r6, #0
 8003808:	da03      	bge.n	8003812 <_printf_i+0xd2>
 800380a:	232d      	movs	r3, #45	; 0x2d
 800380c:	4276      	negs	r6, r6
 800380e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003812:	485a      	ldr	r0, [pc, #360]	; (800397c <_printf_i+0x23c>)
 8003814:	230a      	movs	r3, #10
 8003816:	e012      	b.n	800383e <_printf_i+0xfe>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	1d19      	adds	r1, r3, #4
 800381e:	6029      	str	r1, [r5, #0]
 8003820:	0605      	lsls	r5, r0, #24
 8003822:	d501      	bpl.n	8003828 <_printf_i+0xe8>
 8003824:	681e      	ldr	r6, [r3, #0]
 8003826:	e002      	b.n	800382e <_printf_i+0xee>
 8003828:	0641      	lsls	r1, r0, #25
 800382a:	d5fb      	bpl.n	8003824 <_printf_i+0xe4>
 800382c:	881e      	ldrh	r6, [r3, #0]
 800382e:	4853      	ldr	r0, [pc, #332]	; (800397c <_printf_i+0x23c>)
 8003830:	2f6f      	cmp	r7, #111	; 0x6f
 8003832:	bf0c      	ite	eq
 8003834:	2308      	moveq	r3, #8
 8003836:	230a      	movne	r3, #10
 8003838:	2100      	movs	r1, #0
 800383a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800383e:	6865      	ldr	r5, [r4, #4]
 8003840:	60a5      	str	r5, [r4, #8]
 8003842:	2d00      	cmp	r5, #0
 8003844:	bfa2      	ittt	ge
 8003846:	6821      	ldrge	r1, [r4, #0]
 8003848:	f021 0104 	bicge.w	r1, r1, #4
 800384c:	6021      	strge	r1, [r4, #0]
 800384e:	b90e      	cbnz	r6, 8003854 <_printf_i+0x114>
 8003850:	2d00      	cmp	r5, #0
 8003852:	d04b      	beq.n	80038ec <_printf_i+0x1ac>
 8003854:	4615      	mov	r5, r2
 8003856:	fbb6 f1f3 	udiv	r1, r6, r3
 800385a:	fb03 6711 	mls	r7, r3, r1, r6
 800385e:	5dc7      	ldrb	r7, [r0, r7]
 8003860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003864:	4637      	mov	r7, r6
 8003866:	42bb      	cmp	r3, r7
 8003868:	460e      	mov	r6, r1
 800386a:	d9f4      	bls.n	8003856 <_printf_i+0x116>
 800386c:	2b08      	cmp	r3, #8
 800386e:	d10b      	bne.n	8003888 <_printf_i+0x148>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	07de      	lsls	r6, r3, #31
 8003874:	d508      	bpl.n	8003888 <_printf_i+0x148>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	6861      	ldr	r1, [r4, #4]
 800387a:	4299      	cmp	r1, r3
 800387c:	bfde      	ittt	le
 800387e:	2330      	movle	r3, #48	; 0x30
 8003880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003888:	1b52      	subs	r2, r2, r5
 800388a:	6122      	str	r2, [r4, #16]
 800388c:	f8cd a000 	str.w	sl, [sp]
 8003890:	464b      	mov	r3, r9
 8003892:	aa03      	add	r2, sp, #12
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fee4 	bl	8003664 <_printf_common>
 800389c:	3001      	adds	r0, #1
 800389e:	d14a      	bne.n	8003936 <_printf_i+0x1f6>
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	b004      	add	sp, #16
 80038a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	f043 0320 	orr.w	r3, r3, #32
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	4833      	ldr	r0, [pc, #204]	; (8003980 <_printf_i+0x240>)
 80038b4:	2778      	movs	r7, #120	; 0x78
 80038b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	6829      	ldr	r1, [r5, #0]
 80038be:	061f      	lsls	r7, r3, #24
 80038c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80038c4:	d402      	bmi.n	80038cc <_printf_i+0x18c>
 80038c6:	065f      	lsls	r7, r3, #25
 80038c8:	bf48      	it	mi
 80038ca:	b2b6      	uxthmi	r6, r6
 80038cc:	07df      	lsls	r7, r3, #31
 80038ce:	bf48      	it	mi
 80038d0:	f043 0320 	orrmi.w	r3, r3, #32
 80038d4:	6029      	str	r1, [r5, #0]
 80038d6:	bf48      	it	mi
 80038d8:	6023      	strmi	r3, [r4, #0]
 80038da:	b91e      	cbnz	r6, 80038e4 <_printf_i+0x1a4>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	f023 0320 	bic.w	r3, r3, #32
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	2310      	movs	r3, #16
 80038e6:	e7a7      	b.n	8003838 <_printf_i+0xf8>
 80038e8:	4824      	ldr	r0, [pc, #144]	; (800397c <_printf_i+0x23c>)
 80038ea:	e7e4      	b.n	80038b6 <_printf_i+0x176>
 80038ec:	4615      	mov	r5, r2
 80038ee:	e7bd      	b.n	800386c <_printf_i+0x12c>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	6826      	ldr	r6, [r4, #0]
 80038f4:	6961      	ldr	r1, [r4, #20]
 80038f6:	1d18      	adds	r0, r3, #4
 80038f8:	6028      	str	r0, [r5, #0]
 80038fa:	0635      	lsls	r5, r6, #24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	d501      	bpl.n	8003904 <_printf_i+0x1c4>
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	e002      	b.n	800390a <_printf_i+0x1ca>
 8003904:	0670      	lsls	r0, r6, #25
 8003906:	d5fb      	bpl.n	8003900 <_printf_i+0x1c0>
 8003908:	8019      	strh	r1, [r3, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	4615      	mov	r5, r2
 8003910:	e7bc      	b.n	800388c <_printf_i+0x14c>
 8003912:	682b      	ldr	r3, [r5, #0]
 8003914:	1d1a      	adds	r2, r3, #4
 8003916:	602a      	str	r2, [r5, #0]
 8003918:	681d      	ldr	r5, [r3, #0]
 800391a:	6862      	ldr	r2, [r4, #4]
 800391c:	2100      	movs	r1, #0
 800391e:	4628      	mov	r0, r5
 8003920:	f7fc fc66 	bl	80001f0 <memchr>
 8003924:	b108      	cbz	r0, 800392a <_printf_i+0x1ea>
 8003926:	1b40      	subs	r0, r0, r5
 8003928:	6060      	str	r0, [r4, #4]
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	6123      	str	r3, [r4, #16]
 800392e:	2300      	movs	r3, #0
 8003930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003934:	e7aa      	b.n	800388c <_printf_i+0x14c>
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	462a      	mov	r2, r5
 800393a:	4649      	mov	r1, r9
 800393c:	4640      	mov	r0, r8
 800393e:	47d0      	blx	sl
 8003940:	3001      	adds	r0, #1
 8003942:	d0ad      	beq.n	80038a0 <_printf_i+0x160>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	079b      	lsls	r3, r3, #30
 8003948:	d413      	bmi.n	8003972 <_printf_i+0x232>
 800394a:	68e0      	ldr	r0, [r4, #12]
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	4298      	cmp	r0, r3
 8003950:	bfb8      	it	lt
 8003952:	4618      	movlt	r0, r3
 8003954:	e7a6      	b.n	80038a4 <_printf_i+0x164>
 8003956:	2301      	movs	r3, #1
 8003958:	4632      	mov	r2, r6
 800395a:	4649      	mov	r1, r9
 800395c:	4640      	mov	r0, r8
 800395e:	47d0      	blx	sl
 8003960:	3001      	adds	r0, #1
 8003962:	d09d      	beq.n	80038a0 <_printf_i+0x160>
 8003964:	3501      	adds	r5, #1
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	9903      	ldr	r1, [sp, #12]
 800396a:	1a5b      	subs	r3, r3, r1
 800396c:	42ab      	cmp	r3, r5
 800396e:	dcf2      	bgt.n	8003956 <_printf_i+0x216>
 8003970:	e7eb      	b.n	800394a <_printf_i+0x20a>
 8003972:	2500      	movs	r5, #0
 8003974:	f104 0619 	add.w	r6, r4, #25
 8003978:	e7f5      	b.n	8003966 <_printf_i+0x226>
 800397a:	bf00      	nop
 800397c:	08003dcd 	.word	0x08003dcd
 8003980:	08003dde 	.word	0x08003dde

08003984 <__sflush_r>:
 8003984:	898a      	ldrh	r2, [r1, #12]
 8003986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	0710      	lsls	r0, r2, #28
 800398e:	460c      	mov	r4, r1
 8003990:	d458      	bmi.n	8003a44 <__sflush_r+0xc0>
 8003992:	684b      	ldr	r3, [r1, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dc05      	bgt.n	80039a4 <__sflush_r+0x20>
 8003998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	dc02      	bgt.n	80039a4 <__sflush_r+0x20>
 800399e:	2000      	movs	r0, #0
 80039a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d0f9      	beq.n	800399e <__sflush_r+0x1a>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b0:	682f      	ldr	r7, [r5, #0]
 80039b2:	6a21      	ldr	r1, [r4, #32]
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	d032      	beq.n	8003a1e <__sflush_r+0x9a>
 80039b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	075a      	lsls	r2, r3, #29
 80039be:	d505      	bpl.n	80039cc <__sflush_r+0x48>
 80039c0:	6863      	ldr	r3, [r4, #4]
 80039c2:	1ac0      	subs	r0, r0, r3
 80039c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039c6:	b10b      	cbz	r3, 80039cc <__sflush_r+0x48>
 80039c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ca:	1ac0      	subs	r0, r0, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	4602      	mov	r2, r0
 80039d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d2:	6a21      	ldr	r1, [r4, #32]
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b0      	blx	r6
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	89a3      	ldrh	r3, [r4, #12]
 80039dc:	d106      	bne.n	80039ec <__sflush_r+0x68>
 80039de:	6829      	ldr	r1, [r5, #0]
 80039e0:	291d      	cmp	r1, #29
 80039e2:	d82b      	bhi.n	8003a3c <__sflush_r+0xb8>
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <__sflush_r+0x108>)
 80039e6:	410a      	asrs	r2, r1
 80039e8:	07d6      	lsls	r6, r2, #31
 80039ea:	d427      	bmi.n	8003a3c <__sflush_r+0xb8>
 80039ec:	2200      	movs	r2, #0
 80039ee:	6062      	str	r2, [r4, #4]
 80039f0:	04d9      	lsls	r1, r3, #19
 80039f2:	6922      	ldr	r2, [r4, #16]
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	d504      	bpl.n	8003a02 <__sflush_r+0x7e>
 80039f8:	1c42      	adds	r2, r0, #1
 80039fa:	d101      	bne.n	8003a00 <__sflush_r+0x7c>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b903      	cbnz	r3, 8003a02 <__sflush_r+0x7e>
 8003a00:	6560      	str	r0, [r4, #84]	; 0x54
 8003a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a04:	602f      	str	r7, [r5, #0]
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d0c9      	beq.n	800399e <__sflush_r+0x1a>
 8003a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0e:	4299      	cmp	r1, r3
 8003a10:	d002      	beq.n	8003a18 <__sflush_r+0x94>
 8003a12:	4628      	mov	r0, r5
 8003a14:	f7ff fbea 	bl	80031ec <_free_r>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a1c:	e7c0      	b.n	80039a0 <__sflush_r+0x1c>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4628      	mov	r0, r5
 8003a22:	47b0      	blx	r6
 8003a24:	1c41      	adds	r1, r0, #1
 8003a26:	d1c8      	bne.n	80039ba <__sflush_r+0x36>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0c5      	beq.n	80039ba <__sflush_r+0x36>
 8003a2e:	2b1d      	cmp	r3, #29
 8003a30:	d001      	beq.n	8003a36 <__sflush_r+0xb2>
 8003a32:	2b16      	cmp	r3, #22
 8003a34:	d101      	bne.n	8003a3a <__sflush_r+0xb6>
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	e7b1      	b.n	800399e <__sflush_r+0x1a>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7ad      	b.n	80039a0 <__sflush_r+0x1c>
 8003a44:	690f      	ldr	r7, [r1, #16]
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	d0a9      	beq.n	800399e <__sflush_r+0x1a>
 8003a4a:	0793      	lsls	r3, r2, #30
 8003a4c:	680e      	ldr	r6, [r1, #0]
 8003a4e:	bf08      	it	eq
 8003a50:	694b      	ldreq	r3, [r1, #20]
 8003a52:	600f      	str	r7, [r1, #0]
 8003a54:	bf18      	it	ne
 8003a56:	2300      	movne	r3, #0
 8003a58:	eba6 0807 	sub.w	r8, r6, r7
 8003a5c:	608b      	str	r3, [r1, #8]
 8003a5e:	f1b8 0f00 	cmp.w	r8, #0
 8003a62:	dd9c      	ble.n	800399e <__sflush_r+0x1a>
 8003a64:	6a21      	ldr	r1, [r4, #32]
 8003a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a68:	4643      	mov	r3, r8
 8003a6a:	463a      	mov	r2, r7
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b0      	blx	r6
 8003a70:	2800      	cmp	r0, #0
 8003a72:	dc06      	bgt.n	8003a82 <__sflush_r+0xfe>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e78e      	b.n	80039a0 <__sflush_r+0x1c>
 8003a82:	4407      	add	r7, r0
 8003a84:	eba8 0800 	sub.w	r8, r8, r0
 8003a88:	e7e9      	b.n	8003a5e <__sflush_r+0xda>
 8003a8a:	bf00      	nop
 8003a8c:	dfbffffe 	.word	0xdfbffffe

08003a90 <_fflush_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	690b      	ldr	r3, [r1, #16]
 8003a94:	4605      	mov	r5, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	b913      	cbnz	r3, 8003aa0 <_fflush_r+0x10>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	b118      	cbz	r0, 8003aaa <_fflush_r+0x1a>
 8003aa2:	6a03      	ldr	r3, [r0, #32]
 8003aa4:	b90b      	cbnz	r3, 8003aaa <_fflush_r+0x1a>
 8003aa6:	f7ff fa9b 	bl	8002fe0 <__sinit>
 8003aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f3      	beq.n	8003a9a <_fflush_r+0xa>
 8003ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab4:	07d0      	lsls	r0, r2, #31
 8003ab6:	d404      	bmi.n	8003ac2 <_fflush_r+0x32>
 8003ab8:	0599      	lsls	r1, r3, #22
 8003aba:	d402      	bmi.n	8003ac2 <_fflush_r+0x32>
 8003abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003abe:	f7ff fb93 	bl	80031e8 <__retarget_lock_acquire_recursive>
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	f7ff ff5d 	bl	8003984 <__sflush_r>
 8003aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003acc:	07da      	lsls	r2, r3, #31
 8003ace:	4605      	mov	r5, r0
 8003ad0:	d4e4      	bmi.n	8003a9c <_fflush_r+0xc>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	059b      	lsls	r3, r3, #22
 8003ad6:	d4e1      	bmi.n	8003a9c <_fflush_r+0xc>
 8003ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ada:	f7ff fb86 	bl	80031ea <__retarget_lock_release_recursive>
 8003ade:	e7dd      	b.n	8003a9c <_fflush_r+0xc>

08003ae0 <__swbuf_r>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	b118      	cbz	r0, 8003af2 <__swbuf_r+0x12>
 8003aea:	6a03      	ldr	r3, [r0, #32]
 8003aec:	b90b      	cbnz	r3, 8003af2 <__swbuf_r+0x12>
 8003aee:	f7ff fa77 	bl	8002fe0 <__sinit>
 8003af2:	69a3      	ldr	r3, [r4, #24]
 8003af4:	60a3      	str	r3, [r4, #8]
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	071a      	lsls	r2, r3, #28
 8003afa:	d525      	bpl.n	8003b48 <__swbuf_r+0x68>
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	b31b      	cbz	r3, 8003b48 <__swbuf_r+0x68>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	6922      	ldr	r2, [r4, #16]
 8003b04:	1a98      	subs	r0, r3, r2
 8003b06:	6963      	ldr	r3, [r4, #20]
 8003b08:	b2f6      	uxtb	r6, r6
 8003b0a:	4283      	cmp	r3, r0
 8003b0c:	4637      	mov	r7, r6
 8003b0e:	dc04      	bgt.n	8003b1a <__swbuf_r+0x3a>
 8003b10:	4621      	mov	r1, r4
 8003b12:	4628      	mov	r0, r5
 8003b14:	f7ff ffbc 	bl	8003a90 <_fflush_r>
 8003b18:	b9e0      	cbnz	r0, 8003b54 <__swbuf_r+0x74>
 8003b1a:	68a3      	ldr	r3, [r4, #8]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	60a3      	str	r3, [r4, #8]
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	6022      	str	r2, [r4, #0]
 8003b26:	701e      	strb	r6, [r3, #0]
 8003b28:	6962      	ldr	r2, [r4, #20]
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d004      	beq.n	8003b3a <__swbuf_r+0x5a>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	07db      	lsls	r3, r3, #31
 8003b34:	d506      	bpl.n	8003b44 <__swbuf_r+0x64>
 8003b36:	2e0a      	cmp	r6, #10
 8003b38:	d104      	bne.n	8003b44 <__swbuf_r+0x64>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7ff ffa7 	bl	8003a90 <_fflush_r>
 8003b42:	b938      	cbnz	r0, 8003b54 <__swbuf_r+0x74>
 8003b44:	4638      	mov	r0, r7
 8003b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 f806 	bl	8003b5c <__swsetup_r>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d0d5      	beq.n	8003b00 <__swbuf_r+0x20>
 8003b54:	f04f 37ff 	mov.w	r7, #4294967295
 8003b58:	e7f4      	b.n	8003b44 <__swbuf_r+0x64>
	...

08003b5c <__swsetup_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <__swsetup_r+0xac>)
 8003b60:	4605      	mov	r5, r0
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	460c      	mov	r4, r1
 8003b66:	b118      	cbz	r0, 8003b70 <__swsetup_r+0x14>
 8003b68:	6a03      	ldr	r3, [r0, #32]
 8003b6a:	b90b      	cbnz	r3, 8003b70 <__swsetup_r+0x14>
 8003b6c:	f7ff fa38 	bl	8002fe0 <__sinit>
 8003b70:	89a3      	ldrh	r3, [r4, #12]
 8003b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b76:	0718      	lsls	r0, r3, #28
 8003b78:	d422      	bmi.n	8003bc0 <__swsetup_r+0x64>
 8003b7a:	06d9      	lsls	r1, r3, #27
 8003b7c:	d407      	bmi.n	8003b8e <__swsetup_r+0x32>
 8003b7e:	2309      	movs	r3, #9
 8003b80:	602b      	str	r3, [r5, #0]
 8003b82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	e034      	b.n	8003bf8 <__swsetup_r+0x9c>
 8003b8e:	0758      	lsls	r0, r3, #29
 8003b90:	d512      	bpl.n	8003bb8 <__swsetup_r+0x5c>
 8003b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b94:	b141      	cbz	r1, 8003ba8 <__swsetup_r+0x4c>
 8003b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	d002      	beq.n	8003ba4 <__swsetup_r+0x48>
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7ff fb24 	bl	80031ec <_free_r>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bae:	81a3      	strh	r3, [r4, #12]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6063      	str	r3, [r4, #4]
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f043 0308 	orr.w	r3, r3, #8
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	b94b      	cbnz	r3, 8003bd8 <__swsetup_r+0x7c>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bce:	d003      	beq.n	8003bd8 <__swsetup_r+0x7c>
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f000 f850 	bl	8003c78 <__smakebuf_r>
 8003bd8:	89a0      	ldrh	r0, [r4, #12]
 8003bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bde:	f010 0301 	ands.w	r3, r0, #1
 8003be2:	d00a      	beq.n	8003bfa <__swsetup_r+0x9e>
 8003be4:	2300      	movs	r3, #0
 8003be6:	60a3      	str	r3, [r4, #8]
 8003be8:	6963      	ldr	r3, [r4, #20]
 8003bea:	425b      	negs	r3, r3
 8003bec:	61a3      	str	r3, [r4, #24]
 8003bee:	6923      	ldr	r3, [r4, #16]
 8003bf0:	b943      	cbnz	r3, 8003c04 <__swsetup_r+0xa8>
 8003bf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bf6:	d1c4      	bne.n	8003b82 <__swsetup_r+0x26>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	0781      	lsls	r1, r0, #30
 8003bfc:	bf58      	it	pl
 8003bfe:	6963      	ldrpl	r3, [r4, #20]
 8003c00:	60a3      	str	r3, [r4, #8]
 8003c02:	e7f4      	b.n	8003bee <__swsetup_r+0x92>
 8003c04:	2000      	movs	r0, #0
 8003c06:	e7f7      	b.n	8003bf8 <__swsetup_r+0x9c>
 8003c08:	20000068 	.word	0x20000068

08003c0c <_sbrk_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4d06      	ldr	r5, [pc, #24]	; (8003c28 <_sbrk_r+0x1c>)
 8003c10:	2300      	movs	r3, #0
 8003c12:	4604      	mov	r4, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	f7fd f97a 	bl	8000f10 <_sbrk>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_sbrk_r+0x1a>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_sbrk_r+0x1a>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	20000264 	.word	0x20000264

08003c2c <__swhatbuf_r>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	460c      	mov	r4, r1
 8003c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c34:	2900      	cmp	r1, #0
 8003c36:	b096      	sub	sp, #88	; 0x58
 8003c38:	4615      	mov	r5, r2
 8003c3a:	461e      	mov	r6, r3
 8003c3c:	da0d      	bge.n	8003c5a <__swhatbuf_r+0x2e>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c44:	f04f 0100 	mov.w	r1, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003c4e:	2340      	movne	r3, #64	; 0x40
 8003c50:	2000      	movs	r0, #0
 8003c52:	6031      	str	r1, [r6, #0]
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	b016      	add	sp, #88	; 0x58
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	466a      	mov	r2, sp
 8003c5c:	f000 f848 	bl	8003cf0 <_fstat_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	dbec      	blt.n	8003c3e <__swhatbuf_r+0x12>
 8003c64:	9901      	ldr	r1, [sp, #4]
 8003c66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003c6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003c6e:	4259      	negs	r1, r3
 8003c70:	4159      	adcs	r1, r3
 8003c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c76:	e7eb      	b.n	8003c50 <__swhatbuf_r+0x24>

08003c78 <__smakebuf_r>:
 8003c78:	898b      	ldrh	r3, [r1, #12]
 8003c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c7c:	079d      	lsls	r5, r3, #30
 8003c7e:	4606      	mov	r6, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	d507      	bpl.n	8003c94 <__smakebuf_r+0x1c>
 8003c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	6123      	str	r3, [r4, #16]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	6163      	str	r3, [r4, #20]
 8003c90:	b002      	add	sp, #8
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	ab01      	add	r3, sp, #4
 8003c96:	466a      	mov	r2, sp
 8003c98:	f7ff ffc8 	bl	8003c2c <__swhatbuf_r>
 8003c9c:	9900      	ldr	r1, [sp, #0]
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f7ff fb0f 	bl	80032c4 <_malloc_r>
 8003ca6:	b948      	cbnz	r0, 8003cbc <__smakebuf_r+0x44>
 8003ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cac:	059a      	lsls	r2, r3, #22
 8003cae:	d4ef      	bmi.n	8003c90 <__smakebuf_r+0x18>
 8003cb0:	f023 0303 	bic.w	r3, r3, #3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	e7e3      	b.n	8003c84 <__smakebuf_r+0xc>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	6020      	str	r0, [r4, #0]
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	6163      	str	r3, [r4, #20]
 8003cca:	9b01      	ldr	r3, [sp, #4]
 8003ccc:	6120      	str	r0, [r4, #16]
 8003cce:	b15b      	cbz	r3, 8003ce8 <__smakebuf_r+0x70>
 8003cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f81d 	bl	8003d14 <_isatty_r>
 8003cda:	b128      	cbz	r0, 8003ce8 <__smakebuf_r+0x70>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	431d      	orrs	r5, r3
 8003cec:	81a5      	strh	r5, [r4, #12]
 8003cee:	e7cf      	b.n	8003c90 <__smakebuf_r+0x18>

08003cf0 <_fstat_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4d07      	ldr	r5, [pc, #28]	; (8003d10 <_fstat_r+0x20>)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	602b      	str	r3, [r5, #0]
 8003cfe:	f7fd f8de 	bl	8000ebe <_fstat>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	d102      	bne.n	8003d0c <_fstat_r+0x1c>
 8003d06:	682b      	ldr	r3, [r5, #0]
 8003d08:	b103      	cbz	r3, 8003d0c <_fstat_r+0x1c>
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	bd38      	pop	{r3, r4, r5, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000264 	.word	0x20000264

08003d14 <_isatty_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4d06      	ldr	r5, [pc, #24]	; (8003d30 <_isatty_r+0x1c>)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	f7fd f8dd 	bl	8000ede <_isatty>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_isatty_r+0x1a>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_isatty_r+0x1a>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	20000264 	.word	0x20000264

08003d34 <_init>:
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	bf00      	nop
 8003d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3a:	bc08      	pop	{r3}
 8003d3c:	469e      	mov	lr, r3
 8003d3e:	4770      	bx	lr

08003d40 <_fini>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr
